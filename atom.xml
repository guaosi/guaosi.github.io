<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guaosi的博客</title>
  <icon>https://www.gravatar.com/avatar/5c7dda047d9c4447cd2aaebf6fcc87ec</icon>
  <subtitle>白茶清欢无别事，我在等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.guaosi.com/"/>
  <updated>2022-04-16T07:14:52.658Z</updated>
  <id>https://www.guaosi.com/</id>
  
  <author>
    <name>guaosi</name>
    <email>guaosi@vip.qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见的分布式事务解决方案</title>
    <link href="https://www.guaosi.com/2022/04/16/common-distributed-transaction-solutions/"/>
    <id>https://www.guaosi.com/2022/04/16/common-distributed-transaction-solutions/</id>
    <published>2022-04-16T07:10:13.000Z</published>
    <updated>2022-04-16T07:14:52.658Z</updated>
    
    <content type="html"><![CDATA[<ul><li>两阶段提交(2PC, Two-phase Commit)</li><li>TCC补偿模式</li><li>基于本地消息表实现最终一致性</li><li>最大努力通知</li><li><strong>基于可靠消息最终一致性方案</strong></li></ul><a id="more"></a><h2 id="两阶段提交-2PC"><a href="#两阶段提交-2PC" class="headerlink" title="两阶段提交(2PC)"></a>两阶段提交(2PC)</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>两阶段提交又称2PC,2PC是一个非常经典的中心化的原子提交协议。</p><p>这里所说的中心化是指协议中有两类节点: 一个是中心化协调者节点(coordinator) 和N个参与者节点(partcipant)。</p><p>两个阶段:第一阶段:投票阶段和第二阶段:提交/执行阶段。</p><p>举例订单服务A,需要调用支付服务B去支付，支付成功则处理购物订单为待发货状态，否则就需要将购物订单处 理为失败状态。</p><p><img src="/assets/blogImg/common-distributed-transaction-solutions/TtCh8uDQx3UwCXoTjz0H_rYXQ31amCSc9N-NyBHNw5I.png" alt="image"></p><p>对于订单服务来说，首先是要调用库存服务、开始执行扣减库存的事务，调用通知服务、通知服务将信息写入数据库、之后在订单服务本地执行新建订单、插入商品等一系列操作。如果在此之前包括现在没有出问题，那么久确认扣减库存commit、确认发送消息，业务结束。如果在此之前出现了问题，那么就要通知之前的服务进行rollback。业务结束。</p><p>这里通知服务只是一个通知卖家或买家的服务，通知货物是否买/卖了。</p><h3 id="2pc的缺陷"><a href="#2pc的缺陷" class="headerlink" title="2pc的缺陷"></a>2pc的缺陷</h3><h4 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h4><p>无论是在第一阶段的过程中，还是在第二阶段,所有的参与者(通知服务、库存服务)资源和协调者(订单服务)资源都是被锁住的,只有当所有节点准备完 毕，事务协调者才会通知进行全局提交。 <strong>参与者</strong>进行本地事务提交后才会释放资源。这样的过程会比较漫长，对<strong>性能影响比较大</strong>。</p><p>如果是通知服务挂了或者超时了，那么就会导致库存服务的资源库存被锁住，只有在通知服务rollback之后库存服务才能释放资源。</p><h4 id="单节点故障"><a href="#单节点故障" class="headerlink" title="单节点故障"></a>单节点故障</h4><p>由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。 尤其在第二阶段,协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。(虽然协调者挂掉, 可以重新选举一个协调者,但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题)。</p><h2 id="TCC-try-confirm-cancel"><a href="#TCC-try-confirm-cancel" class="headerlink" title="TCC(try confirm/cancel)"></a>TCC(try confirm/cancel)</h2><p>一个订单支付之后，我们需要一下的步骤：</p><ol><li>更改订单的状态为已支付</li><li>扣减商品库存（这里只是一个假设，在支付之前和在支付之后扣减库存都有许多问题）</li><li>给会员增加积分</li><li>创建销售出库单通知仓库发货。</li></ol><p><img src="/assets/blogImg/common-distributed-transaction-solutions/7Ra_DzTGYqdo07-yHmLOYxpdhXg_ZY0IvP-9WGUuX38.png" alt="image"></p><p>好，业务场景有了，现在我们要更进一步，实现一个TCC分布式事务的效果。上述这几个步骤，要么一起成功， 要么一起失败,必须是一个整体性的事务。</p><p>举个例子，现在订单的状态都修改为“已支付”了,结果库存服务扣减库存失败。那个商品的库存原来是100件，现在卖掉了2件，本来应该是98件了。结果呢? 由于库存服务操作数据库异常,导致库存数量还是100。这不是在坑人么，当然不能允许这种情况发生了!</p><p><img src="/assets/blogImg/common-distributed-transaction-solutions/XGqNOstwWIEbCzyzjewaBESYA9WbevKSKN-WfA_vVoA.png" alt="image"></p><p>对于所有的我们都应该加一个中间状态，判断是否确认还是取消。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> orderService <span class="keyword">struct</span>&#123;</span><br><span class="line">    CreditSrvClient proto.CreditClient <span class="comment">// 用户积分</span></span><br><span class="line">    WmsSrvClient proto.WmsClient <span class="comment">// 记录仓库的变动</span></span><br><span class="line">    InventorySrvClient proto.InventoryClient <span class="comment">//库存确认扣减</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewOrderService</span><span class="params">()</span> *<span class="title">OrderService</span></span> &#123;</span><br><span class="line">     <span class="keyword">return</span> &amp;OrderService&#123;</span><br><span class="line">        CreditSrvClient: proto. CreditClient&#123;&#125;,</span><br><span class="line">        WmsSrvClient: proto. WmsClient&#123;&#125;,</span><br><span class="line">        InventorySrvClient: proto . InventoryClient&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(o OrderService)</span> <span class="title">UpdateOrderStatus</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o OrderService)</span> <span class="title">Notify</span><span class="params">()</span> <span class="title">error</span></span>&#123;</span><br><span class="line">    o.UpdateOrderStatus() <span class="comment">// 更新订单的状态</span></span><br><span class="line">    o.CreditSrvClient.AddCredit() <span class="comment">// 增加积分</span></span><br><span class="line">    o.InventorySrvClient.ReduceStock() <span class="comment">// 库存确认扣减</span></span><br><span class="line">    o.WmsClient.SaleDelivery() <span class="comment">//记录仓库变更记录</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以出售接口为例：在model中加一个freeze冻结字段，表示有多少库存的东西被冻结了，那么在获取库存详细的时候就应该是获得的数量-冻结的数量。</p><p>在出售时应该就变为了try sell，不在是直接减库存了，给冻结库存加上出售的数量。</p><p>另外还需要confirm sell,给他确认扣减，这时候吧冻结的减掉，然后把真正的库存数量减冻结数量。</p><p>还有一个cancel sell ，出现问题之后我要取消冻结的库存，那么回滚冻结的数量<code>freeze-=sellNum</code>.</p><p>跨服务调用库存微服务进行库存扣减</p><ol><li>调用库存服务的trysell</li><li>调用仓库服务的trysell</li><li>调用积分 服务的tryAdd</li><li>任何一个服务出现了异常,那么你得调用对应的所有的微服务的cancel接口</li><li>如果所有的微服务都正常,那么你得调用所有的微服务的confirm</li></ol><p>TCC 底层的实各个服务实现比较简单，在业务逻辑中的confirm和cancel是很复杂的。在什么情况下进行confirm，cancel都是问题。</p><h3 id="TCC可能出现的问题"><a href="#TCC可能出现的问题" class="headerlink" title="TCC可能出现的问题"></a>TCC可能出现的问题</h3><p>总结一下， 你要玩TCC分布式事务的话: .</p><ol><li>首先需要选择某种TCC分布式事务框架，各个服务里就会有这个TCC分布式事务框架在运行。</li><li>然后你原本的一个接口，要改造为3个逻辑，Try-Confirm-Cancel。</li></ol><ul><li>先是服务调用链路依次执行Try逻辑</li><li>如果都正常的话，TCC分布式事务框架推进执行Confirm逻辑，完成整个事务</li><li>如果某个服务的Try逻辑有问题，TCC分布式事务框架感知到之后就会推进执行各个服务的Cancel逻辑， 撤销之前执行的各种操作。</li><li>这就是所谓的TCC分布式事务。</li><li>TCC分布式事务的核心思想，说白了，就是当遇到下面这些情况时,</li></ul><ol><li>某个服务的数据库宕机了</li><li>某个服务自己挂了</li><li>那个服务的redis、elasticsearch、 MQ等基础设施故障了</li><li>某些资源不足了，比如说库存不够这些</li></ol><ul><li>先来Try一下,不要把业务逻辑完成，先试试看，看各个服务能不能基本正常运转，能不能先冻结我需要的资源。</li><li>如果Try都ok，也就是说，底层的数据库、redis、 elasticsearch、 MQ都是可以写入数据的，并且你保留好了需要使用的一些资源(比如冻结了-部分库存)。</li><li>接着,再执行各个服务的Confirm逻辑，基本上Confirm就可以很大概率保证一个分布式事务的完成了。</li><li>那如果Try阶段某个服务就失败了，比如说底层的数据库挂了，或者redis挂了，等等。</li><li>此时就自动执行各个服务的Cancel逻辑，把之前的Try逻辑都回滚，所有服务都不要执行任何设计的业务逻辑。保证大家要么一起成功，要么一起失败。</li></ul><h3 id="终极大招"><a href="#终极大招" class="headerlink" title="终极大招"></a>终极大招</h3><ul><li>如果有一些意外的情况发生了，比如说订单服务突然挂了，然后再次重启，TCC分布式事务框架是如何保证之前没执行完的分布式事务继续执行的呢? .</li><li>TCC事务框架都是要记录一些分布式事务的活动日志的，可以在磁盘上的日志文件里记录,也可以在数据库里记录。保存下来分布式事务运行的各个阶段和状态。</li><li>万一某个服务的Cancel或者Confirm逻辑执行一直失败怎么办呢?那也很简单，TCC事务框架会通过活动日志记录各个服务的状态。举个例子，比如发现某个服务的Cancel或者Confirm-直没成功，会不停的重试调用他的Cancel或者Confirm逻辑，务必要他成功!</li><li>当然了，如果你的代码没有写什么bug，有充足的测试，而且Try阶段都基本尝试了一下，那么其实一般Confirm、Cancel都是可以成功的!</li><li>如果实在解决不了，那么这个一定是很小概率的事件，这个时候发邮件通知人工处理</li></ul><h3 id="TCC优缺点"><a href="#TCC优缺点" class="headerlink" title="TCC优缺点"></a>TCC优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>解决了跨服务的业务操作原子性问题，例如组合支付，订单减库存等场景非常实用</li><li>TCC的本质原理是把数据库的二阶段提交上升到微服务来实现，从而避免了数据库2阶段中锁冲突的长事务低性能风险。</li><li>TCC异步高性能，它采用了try先检查,然后异步实现confirm,真正提交的是在confirm方法中。（依旧要用锁）</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>对微服务的侵入性强，微服务的每个事务都必须实现try, confirm, cance等3个方法，开发成本高，今后维护改造的成本也高。</li><li>为了达到事务的一致性要求，try, confirm、cance接口必须实现等幂性操作。(定时器+重试)</li><li>由于事务管理器要记录事务日志，必定会损耗一定的性能，并使得整个TCC事务时间拉长，建议采用redis的方式来记录事务日志。</li><li>tcc需要通过锁来确保数据的一致性，会加锁导致性能不高</li></ol><h2 id="基于本地消息的最终一致性方案"><a href="#基于本地消息的最终一致性方案" class="headerlink" title="基于本地消息的最终一致性方案"></a>基于本地消息的最终一致性方案</h2><h3 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h3><p>本地消息表这个方案最初是eBay提出的，此方案的核心是通过本地事务保证数据业务操作和消息的一致性,然后通过定时任务将消息发送至消息中间件，待确认消息发送给消费方成功再将消息删除。</p><p><img src="/assets/blogImg/common-distributed-transaction-solutions/cKgZV_O60uinzyUUoY3nJrgMqWfMDz6sfkp7-qAvxqI.png" alt="image"></p><p>订单服务将自己的业务完成之后，将信息发送到消息队列中去，库存服务和通知服务从队列中拿任务完成，如果消息消费完成了就确认删除，如果没有就重试。只要不确认都会在消息队列中。</p><p>虽然当前数据没有一致，但最终一定会一致。</p><p>隐患：</p><p>先记录再发送消息，发送失败了</p><ol><li>发送了但是消息队列宕机了，我们可以等待恢复重新发送。</li><li>发送消息了，消息队列在发送<code>已经接收到订单消息</code>时网络出问题超时了，这时候订单服务就会收到超时，订单就会回滚，但是库存和通知服务已经开始执行了。</li></ol><p>这时候要增加一个本地消息表来记录消息的生产和消费，这样才能保证消息不会丢失。<strong>(当消费时，去查询数据库里是否有记录这个MQ信息，如果没有，则可能存在上面2的情况，MQ收到消息但是回复的时候订单服务没有收到回退了，此时就不进行操作直接回复ack丢弃消息)</strong></p><p>这种情况下，本地数据库操作与存储消息日志处于同一事务中，本地数据库操作与记录消息日志操作具备原子性。</p><h3 id="定时任务扫描日志"><a href="#定时任务扫描日志" class="headerlink" title="定时任务扫描日志"></a>定时任务扫描日志</h3><p>如何保证将消息发送给消息队列呢? 经过第一步消息已经写到消息日志表中，可以启动独立的线程，定时对消息日志表中的消息进行扫描并发送至消息中间件，在消息中间件反馈发送成功后删除该消息日志，否则等待定时任务下一周期重试。</p><h3 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h3><p>如何保证消费者一-定能消费 到消息呢? 这里可以使用MQ的ack (即消息确认)机制，消费者监听MQ,如果消费者接收到消息并且业务处理完成后向MQ发送ack (即消息确认)，此时说明消费者正常消费消息完成，MQ将不再向消费者推送消息，否则消费者会不断重试向消费者来发送消息。 通知服务接收到“通知给用户”消息,开始通知用户，通知用户成功后消息中间件回应ack,否则消息中间件将重复投递此消息。由于消息会重复投递，积分服务的“增加积分”功能需要实现幂等性。</p><h2 id="基于可靠消息的最终一致性方案-常用"><a href="#基于可靠消息的最终一致性方案-常用" class="headerlink" title="基于可靠消息的最终一致性方案-常用"></a>基于可靠消息的最终一致性方案-常用</h2><p>通过使用基于RocketMQ的可靠消息实现最终一致性的分布式方案。</p><p>调用的过程如下图所示：</p><p><img src="/assets/blogImg/common-distributed-transaction-solutions/roVZ2zrl6LurWBBrI5eHMzRRTix_EDsYqG73D3fThIY.png" alt="image"></p><p>举例流程场景：</p><ol><li>向rocketmq发送half信息(里面包含唯一标识，比如订单的ID)，确保rocketmq服务正常和接收事务信息</li><li>接收到rocketmq回复后，本地开启事务操作，操作成功后提交事务</li><li>此时发送网络波动，commit或者rollback发送失败；或者服务挂了后重启。</li><li>由于rocketmq存在未提交的half信息，就会主动过来查询该half应该如何处理</li><li>从half从拿到唯一标识，查询数据库是否存在记录，存在则证明该操作成功，进行commit，反之则进行rollback</li><li>当commit后，MQ的订阅方才能进行消费</li></ol><p>备注</p><blockquote><p>half消息不能被消费。</p></blockquote><blockquote><p>这里使用MQ来保证订阅方收到的消息一定是可靠的。</p></blockquote><blockquote><p>MQ的回查是在一段时间后没有进行这个事务没有进行commit/rollback就会查询事务的消息状态。</p></blockquote><h2 id="最大努力通知"><a href="#最大努力通知" class="headerlink" title="最大努力通知"></a>最大努力通知</h2><p>最大努力通知型( Best-effort delivery)是最简单的一种柔性事务，适用于一些最终一致性时间敏感度低的业务，且被动方处理结果不影响主动方的处理结果。典型的使用场景：如银行通知、商户通知等。最大努力通知型的实现方案，一般符合以下特点：</p><p>不可靠消息：业务活动主动方，在完成业务处理之后，向业务活动的被动方发送消息，直到通知N次后不再通知，允许消息丢失(不可靠消息)。 定期校对：业务活动的被动方，根据定时策略，向业务活动主动方查询(主动方提供查询接口)，恢复丢失的业务消息。</p><p>以下这个例子，用户在支付之后，支付宝要尽自己最大的努力来通知到商家某某人已经支付成功了，但是对方的服务可能会挂掉或者这个对方这个接口不存在，这个时候，就要努力尝试通知<code>商城</code>。对于通知的时间也是有讲究的，不能每一次都是1秒中通知一次，可以刚开始1秒钟尝试通知一次，之后2秒、5秒…但是也不能一直尝试通知，要有一定的上限。</p><p><img src="/assets/blogImg/common-distributed-transaction-solutions/9SsZ2Bu1E_XOcJZA4mKYmHt9PGogN1SNDYF24KmvYbs.png" alt="image"></p><p>商城不能直接从支付宝系统MQ中直接拿消息，而是要通过支付宝提供的服务来拿到消息。</p><p><img src="/assets/blogImg/common-distributed-transaction-solutions/6PMCmdi12LDb95TbyqLHzf3tGmIGskxPuQzwY1L8pXk.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;两阶段提交(2PC, Two-phase Commit)&lt;/li&gt;
&lt;li&gt;TCC补偿模式&lt;/li&gt;
&lt;li&gt;基于本地消息表实现最终一致性&lt;/li&gt;
&lt;li&gt;最大努力通知&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于可靠消息最终一致性方案&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="transaction" scheme="https://www.guaosi.com/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务、分布式理论基础</title>
    <link href="https://www.guaosi.com/2022/04/16/distributed-transaction-and-distributed-theoretical-foundationdistributed-transaction-and-distributed-theoretical-foundation%20copy/"/>
    <id>https://www.guaosi.com/2022/04/16/distributed-transaction-and-distributed-theoretical-foundationdistributed-transaction-and-distributed-theoretical-foundation copy/</id>
    <published>2022-04-16T07:07:31.000Z</published>
    <updated>2022-04-16T07:08:07.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在微服务系统中，一个服务想要完成一个功能，往往都会涉及到需要调用其他几个服务共同成功，才算成功。例如新建订单，过程中可能就需要调用库存服务减少库存，调用积分服务增加用户积分等等，其中就会涉及到各个不同微服务之间的各自数据落盘。对于金额这方面，我们必须要保证数据的一致性，如果期间有一个服务出错，必须全部回滚。这在仅仅只有本地事务中是无法做到的，下面介绍数据不一致产生的原因和分布式事务的相关理论。</p><a id="more"></a><h2 id="数据不一致的原因"><a href="#数据不一致的原因" class="headerlink" title="数据不一致的原因"></a>数据不一致的原因</h2><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><ol><li>硬件故障</li><li>网卡</li><li>路由器</li><li>网线，网络抖动</li><li>跨服务调用， 网络拥塞</li><li>收不到回复的消息。</li></ol><p>没有发送出去？</p><p>发送了，没有收到，导致以为出错了</p><h3 id="程序出错"><a href="#程序出错" class="headerlink" title="程序出错"></a>程序出错</h3><ol><li>代码异常</li><li>宕机</li><li>断电</li><li>系统问题</li><li>磁盘满了</li><li>电脑坏了</li></ol><h3 id="事务性问题-代码问题-先扣库存还是后扣库存"><a href="#事务性问题-代码问题-先扣库存还是后扣库存" class="headerlink" title="事务性问题(代码问题-先扣库存还是后扣库存)"></a>事务性问题(代码问题-先扣库存还是后扣库存)</h3><h4 id="先扣库存"><a href="#先扣库存" class="headerlink" title="先扣库存"></a>先扣库存</h4><p>扣完库存之后，新建订单出错了，而库存的事务以及提交了。库存就白被扣了</p><h4 id="后扣库存"><a href="#后扣库存" class="headerlink" title="后扣库存"></a>后扣库存</h4><p>先建订单成功了，之后调用库存服务失败了</p><ol><li>库存服务挂了：直接回滚就行</li><li>网络出现问题了：已经扣减了，但是扣减库存的响应的时候挂了。这时候订单服务那边收到超时了，自己回滚了，但是库存已经扣除了。</li></ol><h3 id="业务问题-用户下单之后没有支付"><a href="#业务问题-用户下单之后没有支付" class="headerlink" title="业务问题-用户下单之后没有支付"></a>业务问题-用户下单之后没有支付</h3><p>库存已经被扣减了，但是用户一直没有支付。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>对于事务性问题，采用分布式的事务解决。</p><p>对于业务下单不支付，采用超时机制进行，超时之后将库存归还。</p><h2 id="事务和分布式事务"><a href="#事务和分布式事务" class="headerlink" title="事务和分布式事务"></a>事务和分布式事务</h2><h3 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h3><p>一组sq|语句操作单元，组内所有SQL语句完成一个业务, 如果整组成功:意味着全部SQL都实现;如 果其中任何一个失败,意味着整个操作都失败。失败,意味着整个过程都是没有意义的。应该是数据库回 到操作前的初始状态。这种特性，就叫“事务”。</p><h3 id="为什么要存在事务"><a href="#为什么要存在事务" class="headerlink" title="为什么要存在事务?"></a>为什么要存在事务?</h3><ol><li>失败后，可以回到开始位置 </li><li>没都成功之前，别的用户(进程，会话)是不能看到操作内的数据修改的</li></ol><h3 id="事务4大特征ACID"><a href="#事务4大特征ACID" class="headerlink" title="事务4大特征ACID:"></a>事务4大特征ACID:</h3><ol><li>原子性[atomicity]</li></ol><p>功能不可再分，要么全部成功，要么全部失败</p><ol start="2"><li>一致性[consistency] 一致性是指数据处于一种语义上的有意义且正确的状态。一致性是对数据可见性的约束，保证在一个事务中的多次操作的数据<strong>中间状态</strong>对其他事务<strong>不可见</strong>的。因为这些中间状态，是一个过渡状态，与事务的开始状态和事务的结束状态是不一致的。 举个例子，张三给李四转账100元。事务要做的是从张三账户上减掉100元，李四账户上加上100元。一致性的含义是其他事务要么看到张三还没有给李四转账的状态，要么张三已经成功转账给李四的状态，而对于张三少了100元，李四还没加上100元这个中间状态是不可见的。 我们来看一下转账过程中可能存在的状态:<ol><li>张三未扣减、李四未收到</li><li>张三已扣减、李四未收到</li><li>张三已扣减，李四已收到</li></ol></li></ol><p>上述过程中: a. 是初始状态、b是中间状态、c是最终状态，a和c是我们期待的状态，但是2这种状态却不是我们期待出现的状态。</p><p>那么反驳的声音来了:</p><p>要么转账操作全部成功，要么全部失败,这是原子性。从例子上看全部成功，那么<strong>一致性就是原子性</strong>的一部分咯,为什么还要单独说一致性和原子性? 你说的不对。在未提交读的隔离级别下是事务内部操作是可见的，明显违背了一致性,怎么解释? 好吧，需要注意的是: 原子性和一致性的的侧重点不同:<strong>原子性关注状态</strong>，要么全部成功，要么全部失败，不存在部分成功的状态。而<strong>一致性关注数据的可见性</strong>,中间状态的数据对外部不可见，只有最初状态和最终状态的数据对外可见。</p><ol start="3"><li>隔离性[isolation] 事务的隔离性是指多个事务并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰,多个并发事务之间数据要相互隔离。 隔离性是多个事务的时候,相互不能干扰，</li></ol><p>一致性是要保证操作前和操作后数据或者数据结构的一致性，而我提到的事务的一致性是关注数据的中间状态,也就是一致性需要监视中间状态的数据， 如果有变化，即刻回滚。</p><p>如果不考虑隔离性，事务存在3种并发访问数据问题,也就是事务里面的脏读、不可重复读、虚 度/幻读</p><ol start="4"><li>持久性[durability] 是事务的保证，事务终结的标志(内存的数据持久到硬盘文件中)</li></ol><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>分布式事务顾名思义就是要在分布式系统中实现事务,它其实是由多个本地事务组合而成。</p><p>对于分布式事务而言几乎满足不了ACID,其实对于单机事务而言大部分情况下也没有满足ACID,不然怎么会有mysql四种隔离级别呢?所以更别说分布在不同数据库或者不同应用上的分布式事务了。</p><h2 id="分布式事务的理论"><a href="#分布式事务的理论" class="headerlink" title="分布式事务的理论"></a>分布式事务的理论</h2><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>cap理论是分布式系统的理论基石</p><h4 id="Consistency-一致性"><a href="#Consistency-一致性" class="headerlink" title="Consistency (一致性)"></a>Consistency (一致性)</h4><p>“all nodes see the same data at the same time ”,即更新操作成功并返回客户端后，所有节点在同一时间的数据 完全一致，这就是分布式的一致性。</p><p>一致性的问题在并发系统中不可避免， 对于客户端来说，一致性指的是并发访问时更新过的数据如何获取的问题。从服务端来看,则是更新如何复制分布到整个系统，以保证数据最终一致。</p><h5 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h5><p>一个是<code>写数据库</code>一个是<code>读数据库</code></p><p>一个服务将记录写入到<code>写数据库</code>,另一个服务从<code>读数据库</code>来读取刚刚的记录，这要保证，我只要写入进去了就一定可以读到。这里可以采用我写到数据库中，之后同步完成了，再响应给写的服务，这样可以保证我的<code>读数据库</code>中已经包含了之前写的数据了。</p><h4 id="Availability-可用性"><a href="#Availability-可用性" class="headerlink" title="Availability (可用性)"></a>Availability (可用性)</h4><p>可用性指“Reads and writes always succeed”，即服务一直可用， 而且是正常响应时间。</p><p>好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。</p><p>在前面的一致性中，我们要等到同步完成之后才响应，但是如果响应的时间很长(几秒),这时候，我要求必须要我写入了就可以从读数据库中获得。</p><p>这时候会出现一个问题就是，我在同步的过程中肯定要对这条数据枷锁，但是如果加锁了，就不能保证数据的一致性，你就访问不到了，这就与<strong>一致性</strong>相违背了。</p><p><strong>一致性和可用性是互斥的。</strong></p><h4 id="Partition-Tolerance-分区容错性"><a href="#Partition-Tolerance-分区容错性" class="headerlink" title="Partition Tolerance (分区容错性)"></a>Partition Tolerance (分区容错性)</h4><p>即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p><p>分区容错性要求能够使应用虽然是一个分布式系统， 而看上去却好像是在一个可以运转正常的整体。</p><p>比如现在的分布式系统中有某一个或者几个机器宕掉了,其他剩下的机器还能够正常运转满足系统需求,对于用户而言并没有什么体验上的影响。</p><p>如果是一个分布式系统，一定要满足：分区容错性。</p><h4 id="取舍策略"><a href="#取舍策略" class="headerlink" title="取舍策略"></a>取舍策略</h4><p>CAP三个特性只能满足其中两个，那么取舍的策略就共有三种:</p><p>CA：单机的数据库</p><p>CP：要保证一致性和分区容错性，这要等同步完成之后才能使用，在网络等有问题的时候不对外提供服务就行。NoSQL数据库，MongoDB、HBase、Redis</p><p>AP：保证可用性。CoachDB、Cassandra、DynamoDB</p><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><p>BASE是Basically Available (基本可用)、Soft state (软状态)和Eventually consistent (最终一致性) 三个短语的缩写。</p><p>BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的。</p><p>BASE理论的核心思想是：即使无法做到强一致性, 但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p><p>接下来看一下BASE中的三要素:</p><h4 id="基本可用"><a href="#基本可用" class="headerlink" title="基本可用"></a>基本可用</h4><p>基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性一注意， 这绝不等价于系统不可用。比如:</p><ol><li>响应时间上的损失。正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒，这是可以接受的</li><li>系统功能上的损失:正常情况下，在一个电子商务网站上进行购物的时候,消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候,由于消费者的购物行为激增，为了保护购物系统的稳定性,部分消费者可能会被引导到一个降级页面</li></ol><h4 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a>软状态</h4><p>软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性。即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</p><h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><p>最终一致性强调的是所有的数据副本，在经过一段时间的同步之后,最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致,而不需要实时保证系统数据的强一致性。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，BASE理论面向的是大型高可用可扩展的分布式系统和传统的事物ACID特性是相反的，它完全不同于ACID的强一致性模型。而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的,但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中,ACID特性和BASE理论往往又会结合在一起。</p><p><strong>一句话: CAP就是告诉你:想要满足C、A、P就是做梦, BASE才是你最终的归宿</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;在微服务系统中，一个服务想要完成一个功能，往往都会涉及到需要调用其他几个服务共同成功，才算成功。例如新建订单，过程中可能就需要调用库存服务减少库存，调用积分服务增加用户积分等等，其中就会涉及到各个不同微服务之间的各自数据落盘。对于金额这方面，我们必须要保证数据的一致性，如果期间有一个服务出错，必须全部回滚。这在仅仅只有本地事务中是无法做到的，下面介绍数据不一致产生的原因和分布式事务的相关理论。&lt;/p&gt;
    
    </summary>
    
    
      <category term="transaction" scheme="https://www.guaosi.com/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch7 - 4.Analyzer分析器</title>
    <link href="https://www.guaosi.com/2022/04/12/analyzer-for-elasticsearch7/"/>
    <id>https://www.guaosi.com/2022/04/12/analyzer-for-elasticsearch7/</id>
    <published>2022-04-12T09:05:22.000Z</published>
    <updated>2022-04-16T07:03:26.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="analyzer分析器"><a href="#analyzer分析器" class="headerlink" title="analyzer分析器"></a>analyzer分析器</h2><p>Elasticsearch 中文本分析Analysis是把全文本转换成一系列的单词(term/token）的过程，也叫分词。文本分析是使用分析器 Analyzer 来实现的，Elasticsearch内置了分析器，用户也可以按照自己的需求自定义分析器。<br>为了提高搜索准确性，除了在数据写入时转换词条，匹配 Query 语句时候也需要用相同的分析器对查询语句进行分析。</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html" target="_blank" rel="noopener">官方文档</a><br><a id="more"></a></p><h3 id="Analyzer-的组成"><a href="#Analyzer-的组成" class="headerlink" title="Analyzer 的组成"></a>Analyzer 的组成</h3><p>Analyzer 由三部分组成：Character Filters、Tokenizer、Token Filters</p><h3 id="Character-Filters"><a href="#Character-Filters" class="headerlink" title="Character Filters"></a>Character Filters</h3><p>Character Filters字符过滤器接收原始文本text的字符流，可以对原始文本增加、删除字段或者对字符做转换。<strong>一个Analyzer 分析器可以有 0-n 个按顺序执行的字符过滤器。</strong></p><h3 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h3><p>Tokenizer 分词器接收Character Filters输出的字符流，将字符流分解成的那个的单词，并且输出单词流。例如空格分词器会将文本按照空格分解，将 “Quick brown fox!” 转换成 [Quick, brown, fox!]。分词器也负责记录每个单词的顺序和该单词在原始文本中的起始和结束偏移 offsets 。<br><strong>一个Analyzer 分析器有且只有 1个分词器。</strong></p><h3 id="Token-Filter"><a href="#Token-Filter" class="headerlink" title="Token Filter"></a>Token Filter</h3><p>Token Filter单词过滤器接收分词器 Tokenizer 输出的单词流，可以对单词流中的单词做添加、移除或者转换操作，例如 lowercase token filter会将单词全部转换成小写，stop token filter会移除 the、and 这种通用单词， synonym token filter会往单词流中添加单词的同义词。</p><p>Token filters不允许改变单词在原文档的位置以及起始、结束偏移量。</p><p><strong>一个Analyzer 分析器可以有 0-n 个按顺序执行的单词过滤器。</strong></p><p><img src="/assets/blogImg/analyzer-for-elasticsearch7/MXkSscvOeylm4lh7DpIQxAcEjMCKQXi-ftlSyN4Ub7o.png" alt="image"></p><h3 id="Elasticsearch内置的分词器"><a href="#Elasticsearch内置的分词器" class="headerlink" title="Elasticsearch内置的分词器"></a>Elasticsearch内置的分词器</h3><p>Standard Analyzer - 默认分词器，按词切分，小写处理<br>Simple Analyzer - 按照非字母切分（符号被过滤），小写处理<br>Stop Analyzer - 小写处理，停用词过滤（the ，a，is）<br>Whitespace Analyzer - 按照空格切分，不转小写<br>Keyword Analyzer - 不分词，直接将输入当做输出<br>Patter Analyzer - 正则表达式，默认 \W+<br>Language - 提供了 30 多种常见语言的分词器</p><p>例子：The 2 QUICK Brown-Foxes jumped over the lazy dog’s bone.</p><h4 id="Standard-Analyzer"><a href="#Standard-Analyzer" class="headerlink" title="Standard Analyzer"></a>Standard Analyzer</h4><ul><li>默认分词器</li><li>按词分类</li><li>小写处理</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standard</span></span><br><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[the,2,quick,brown,foxes,a,jumped,over,the,lazy,dog’s,bone]</p><h4 id="Simple-Analyzer"><a href="#Simple-Analyzer" class="headerlink" title="Simple Analyzer"></a>Simple Analyzer</h4><ul><li>按照非字母切分，非字母则会被去除</li><li>小写处理</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#simpe</span></span><br><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"simple"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[the,quick,brown,foxes,jumped,over,the,lazy,dog,s,bone]</p><h4 id="Stop-Analyzer"><a href="#Stop-Analyzer" class="headerlink" title="Stop Analyzer"></a>Stop Analyzer</h4><ul><li>小写处理</li><li>停用词过滤（the，a, is)</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"stop"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[quick,brown,foxes,jumped,over,lazy,dog,s,bone]</p><h4 id="Whitespace-Analyzer"><a href="#Whitespace-Analyzer" class="headerlink" title="Whitespace Analyzer"></a>Whitespace Analyzer</h4><ul><li>按空格切分</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#stop</span></span><br><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"whitespace"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[The,2,QUICK,Brown-Foxes,jumped,over,the,lazy,dog’s,bone.]</p><h4 id="Keyword-Analyzer"><a href="#Keyword-Analyzer" class="headerlink" title="Keyword Analyzer"></a>Keyword Analyzer</h4><ul><li>不分词，当成一整个 term 输出</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#keyword</span></span><br><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[The 2 QUICK Brown-Foxes jumped over the lazy dog’s bone.]</p><h4 id="Patter-Analyzer"><a href="#Patter-Analyzer" class="headerlink" title="Patter Analyzer"></a>Patter Analyzer</h4><ul><li>通过正则表达式进行分词</li><li>默认是 \W+(非字母进行分隔)</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"pattern"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[the,2,quick,brown,foxes,jumped,over,the,lazy,dog,s,bone]</p><h4 id="Language-Analyzer"><a href="#Language-Analyzer" class="headerlink" title="Language Analyzer"></a>Language Analyzer</h4><p>支持语言：arabic, armenian, basque, bengali, bulgarian, catalan, czech, dutch, english, finnish, french, galician, german, hindi, hungarian, indonesian, irish, italian, latvian, lithuanian, norwegian, portuguese, romanian, russian, sorani, spanish, swedish, turkish.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#english</span></span><br><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"english"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>[2,quick,brown,fox,jump,over,the,lazy,dog,bone]</p><p>中文分词要比英文分词难，英文都以空格分隔，中文理解通常需要上下文理解才能有正确的理解，比如 [苹果，不大好吃]和<br>[苹果，不大，好吃]，这两句意思就不一样。</p><h3 id="常用的插件分词器"><a href="#常用的插件分词器" class="headerlink" title="常用的插件分词器"></a>常用的插件分词器</h3><p>IK Analyzer - 对中文分词友好，支持远程词典热更新，有ik_smart 、ik_max_word 两种分析器<br>pinyin Analyzer - 可以对中文进行拼音分析，搜索时使用拼音即可搜索出来对应中文<br>ICU Analyzer - 提供了 Unicode 的支持，更好的支持亚洲语言<br>hanLP Analyzer - 基于NLP的中文分析器</p><h3 id="Elasticsearch-如何确定搜索分析器"><a href="#Elasticsearch-如何确定搜索分析器" class="headerlink" title="Elasticsearch 如何确定搜索分析器"></a>Elasticsearch 如何确定搜索分析器</h3><p>在搜索时，Elasticsearch 通过依次检查以下参数来确定要使用的分析器：</p><ol><li>搜索查询中的<code>analyzer</code>参数。请参阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html#specify-search-query-analyzer%20%22%E6%8C%87%E5%AE%9A%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%99%A8%22" target="_blank" rel="noopener">为查询指定搜索分析器</a>。(搜索时指定)</li><li>字段的<code>search_analyzer</code>映射参数。请参阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html#specify-search-field-analyzer%20%22%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E7%9A%84%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%99%A8%22" target="_blank" rel="noopener">为字段指定搜索分析器</a>。(创建字段时指定)</li><li><code>analysis.analyzer.default_search</code>索引设置 。请参阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html#specify-search-default-analyzer%20%22%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E7%9A%84%E9%BB%98%E8%AE%A4%E6%90%9C%E7%B4%A2%E5%88%86%E6%9E%90%E5%99%A8%22" target="_blank" rel="noopener">为索引指定默认搜索分析器</a>。(创建index时指定)</li><li>字段的<code>analyzer</code>映射参数。请参阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html#specify-index-field-analyzer%20%22%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E7%9A%84%E5%88%86%E6%9E%90%E5%99%A8%22" target="_blank" rel="noopener">为字段指定分析器</a>。(创建字段时，指定了 <strong>analyzer</strong> 但是没有指定  <strong>search_analyzer</strong>，则直接使用 <strong>analyzer</strong>)</li></ol><p>如果没有指定这些参数， 则使用<code>standard</code><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html%20%22%E6%A0%87%E5%87%86%E5%88%86%E6%9E%90%E4%BB%AA%22" target="_blank" rel="noopener">分析器</a>。</p><p><strong>注意：使用match查询时才可以指定搜索时使用的分析器，如果没有分析器则默认使用standard分析器。而term无法指定分析器，就是直接使用Keyword Analyzer</strong></p><p><strong>特殊：如果字段设置为keyword并且没有为该字段或者该index设置其他分析器，则用match搜索此字段时，默认使用字段的 analyzer 也就是Keywork</strong></p><h3 id="指定分析器"><a href="#指定分析器" class="headerlink" title="指定分析器"></a>指定分析器</h3><h4 id="为字段指定存储时使用的分析器"><a href="#为字段指定存储时使用的分析器" class="headerlink" title="为字段指定存储时使用的分析器"></a>为字段指定存储时使用的分析器</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT analy-test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"title"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"whitespace"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：如果指定了字段创建时用的分析器，如果搜索时使用match并且没有指定分析器，则会使用该字段创建时使用的分析器</strong></p><h4 id="为字段指定搜索时默认使用的分析器"><a href="#为字段指定搜索时默认使用的分析器" class="headerlink" title="为字段指定搜索时默认使用的分析器"></a>为字段指定搜索时默认使用的分析器</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT analy-test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"title"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"whitespace"</span>,</span><br><span class="line">        <span class="string">"search_analyzer"</span>: <span class="string">"simple"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="搜索时指定使用的分析器"><a href="#搜索时指定使用的分析器" class="headerlink" title="搜索时指定使用的分析器"></a>搜索时指定使用的分析器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虽然match会分词，但是使用指定的分词器keyword，无法分词必须精确匹配，所以搜索无结果</span></span><br><span class="line"><span class="builtin-name">GET</span> user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"Street"</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建index时设定创建或者搜索时使用的默认分析器"><a href="#创建index时设定创建或者搜索时使用的默认分析器" class="headerlink" title="创建index时设定创建或者搜索时使用的默认分析器"></a>创建index时设定创建或者搜索时使用的默认分析器</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT analy-test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"analysis"</span>: &#123;</span><br><span class="line">      <span class="string">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="string">"default"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"simple"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"default_search"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"whitespace"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分词的重要性"><a href="#分词的重要性" class="headerlink" title="分词的重要性"></a>分词的重要性</h2><h3 id="文本分词"><a href="#文本分词" class="headerlink" title="文本分词"></a>文本分词</h3><p>单词是语言中重要的基本元素。一个单词可以代表一个信息单元，有着指代名称、功能、动作、性质等作用。在语言的进化史中，不断有新的单词涌现，也有许多单词随着时代的变迁而边缘化直至消失。根据统计，《汉语词典》中包含的汉语单词数目在37万左右，《牛津英语词典》中的词汇约有17万。</p><p>理解单词对于分析语言结构和语义具有重要的作用。因此，在机器阅读理解算法中，模型通常需要首先对语句和文本进行单词分拆和解析。</p><p>分词（tokenization）的任务是将文本以单词为基本单元进行划分。由于许多词语存在词型的重叠，以及组合词的运用，解决歧义性是分词任务中的一个挑战。不同的分拆方式可能表示完全不同的语义。如在以下例子中，两种分拆方式代表的语义都有可能：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">南京市|<span class="string">长江</span>|<span class="string">大桥</span></span><br><span class="line"><span class="string">南京</span>|<span class="string">市长</span>|<span class="string">江大桥</span></span><br></pre></td></tr></table></figure><h3 id="分词的意义-nlp"><a href="#分词的意义-nlp" class="headerlink" title="分词的意义 - nlp"></a>分词的意义 - nlp</h3><p><strong>1.将复杂问题转化为数学问题</strong><br>在 机器学习的文章 中讲过，机器学习之所以看上去可以解决很多复杂的问题，是因为它把这些问题都转化为了数学问题。<br>而 NLP 也是相同的思路，文本都是一些「非结构化数据」，需要先将这些数据转化为「结构化数据」，结构化数据就可以转化为数学问题了，而分词就是转化的第一步。</p><p><img src="/assets/blogImg/analyzer-for-elasticsearch7/JKXr5mQl-9dB71rClam5M7fpiumHYcx0ad_-weK3kyU.png" alt="image"></p><p><strong>2.词是一个比较合适的粒度</strong><br>词是表达完整含义的最小单位。<br>字的粒度太小，无法表达完整含义，比如”鼠“可以是”老鼠“，也可以是”鼠标“。<br>而句子的粒度太大，承载的信息量多，很难复用。比如”传统方法要分词，一个重要原因是传统方法对远距离依赖的建模能力较弱。”</p><p><img src="/assets/blogImg/analyzer-for-elasticsearch7/erJS2oZXy7FrmDnFld4f3MfhguvD7--08XfBbx1Bdgs.png" alt="image"></p><h3 id="中英文分词的3个典型区别"><a href="#中英文分词的3个典型区别" class="headerlink" title="中英文分词的3个典型区别"></a>中英文分词的3个典型区别</h3><p><img src="/assets/blogImg/analyzer-for-elasticsearch7/otuu_m8UbVlEvpDKDpxie5_YCBHZmQfK0boa7W8G_aE.png" alt="image"></p><h4 id="区别1：分词方式不同，中文更难"><a href="#区别1：分词方式不同，中文更难" class="headerlink" title="区别1：分词方式不同，中文更难"></a>区别1：分词方式不同，中文更难</h4><p>英文有天然的空格作为分隔符，但是中文没有。所以如何切分是一个难点，再加上中文里一词多意的情况非常多，导致很容易出现歧义。下文中难点部分会详细说明。</p><h4 id="区别2：英文单词有多种形态"><a href="#区别2：英文单词有多种形态" class="headerlink" title="区别2：英文单词有多种形态"></a>区别2：英文单词有多种形态</h4><p>英文单词存在丰富的变形变换。为了应对这些复杂的变换，英文NLP相比中文存在一些独特的处理步骤，称为词形还原（Lemmatization）和词干提取（Stemming）。中文则不需要<br>词性还原：does，done，doing，did 需要通过词性还原恢复成 do。<br>词干提取：cities，children，teeth 这些词，需要转换为 city，child，tooth”这些基本形态</p><h4 id="区别3：中文分词需要考虑粒度问题"><a href="#区别3：中文分词需要考虑粒度问题" class="headerlink" title="区别3：中文分词需要考虑粒度问题"></a>区别3：中文分词需要考虑粒度问题</h4><p>例如「中国科学技术大学」就有很多种分法：</p><ul><li>中国科学技术大学</li><li>中国 \ 科学技术 \ 大学</li><li>中国 \ 科学 \ 技术 \ 大学</li></ul><p>粒度越大，表达的意思就越准确，但是也会导致召回比较少。所以中文需要不同的场景和要求选择不同的粒度。这个在英文中是没有的。</p><h3 id="中文分词的3大难点"><a href="#中文分词的3大难点" class="headerlink" title="中文分词的3大难点"></a>中文分词的3大难点</h3><p><img src="/assets/blogImg/analyzer-for-elasticsearch7/7qqYRlqVK0JrT24L8y6RBVNOpbh2FpYR-IjFiR7gsl4.png" alt="image"></p><h4 id="难点-1：没有统一的标准"><a href="#难点-1：没有统一的标准" class="headerlink" title="难点 1：没有统一的标准"></a>难点 1：没有统一的标准</h4><p>目前中文分词没有统一的标准，也没有公认的规范。不同的公司和组织各有各的方法和规则。</p><h4 id="难点-2：歧义词如何切分"><a href="#难点-2：歧义词如何切分" class="headerlink" title="难点 2：歧义词如何切分"></a>难点 2：歧义词如何切分</h4><p>例如「兵乓球拍卖完了」就有2种分词方式表达了2种不同的含义：</p><ul><li>乒乓球 \ 拍卖 \ 完了</li><li>乒乓 \ 球拍 \ 卖 \ 完了</li></ul><h4 id="难点-3：新词的识别"><a href="#难点-3：新词的识别" class="headerlink" title="难点 3：新词的识别"></a>难点 3：新词的识别</h4><p>信息爆炸的时代，三天两头就会冒出来一堆新词，如何快速的识别出这些新词是一大难点。比如当年「蓝瘦香菇」大火，就需要快速识别。</p><h3 id="3种典型的分词方法"><a href="#3种典型的分词方法" class="headerlink" title="3种典型的分词方法"></a>3种典型的分词方法</h3><p>分词的方法大致分为 3 类：</p><ol><li>基于词典匹配</li><li>基于统计</li><li>基于深度学习</li></ol><p><strong>给予词典匹配的分词方式</strong><br>优点：速度快、成本低<br>缺点：适应性不强，不同领域效果差异大<br>基本思想是基于词典匹配，将待分词的中文文本根据一定规则切分和调整，然后跟词典中的词语进行匹配，匹配成功则按照词典的词分词，匹配失败通过调整或者重新选择，如此反复循环即可。代表方法有基于正向最大匹配和基于逆向最大匹配及双向匹配法。<br><strong>基于统计的分词方法</strong><br>优点：适应性较强<br>缺点：成本较高，速度较慢<br>这类目前常用的是算法是 ** HMM、CRF、SVM、深度学习 ** 等算法，比如stanford、Hanlp分词工具是基于CRF算法。以CRF为例，基本思路是对汉字进行标注训练，不仅考虑了词语出现的频率，还考虑上下文，具备较好的学习能力，因此其对歧义词和未登录词的识别都具有良好的效果。<br><strong>基于深度学习</strong><br>优点：准确率高、适应性强<br>缺点：成本高，速度慢<br>例如有人员尝试使用双向LSTM+CRF实现分词器，其本质上是序列标注，所以有通用性，命名实体识别等都可以使用该模型，据报道其分词器字符准确率可高达97.5%。<br><strong>常见的分词器都是使用机器学习算法和词典相结合，一方面能够提高分词准确率，另一方面能够改善领域适应性。</strong></p><h3 id="中文分词工具"><a href="#中文分词工具" class="headerlink" title="中文分词工具"></a>中文分词工具</h3><p>下面排名根据 GitHub 上的 star 数排名：</p><ol><li>jieba</li><li>Hanlp</li><li>IK</li><li>Stanford 分词</li><li>ansj 分词器</li><li>哈工大 LTP</li><li>KCWS分词器</li><li>清华大学THULAC</li><li>ICTCLAS</li></ol><h3 id="英文分词工具"><a href="#英文分词工具" class="headerlink" title="英文分词工具"></a>英文分词工具</h3><ol><li>Keras</li><li>Spacy</li><li>Gensim</li><li>NLTK</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>分词就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作。<br><strong>分词的原因：</strong></p><ol><li>将复杂问题转化为数学问题</li><li>词是一个比较合适的粒度</li><li>深度学习时代，部分任务中也可以「分字」</li></ol><p><strong>中英文分词的3个典型区别：</strong></p><ol><li>分词方式不同，中文更难</li><li>英文单词有多种形态，需要词性还原和词干提取</li><li>中文分词需要考虑粒度问题</li></ol><p><strong>中文分词的3大难点</strong></p><ol><li>没有统一的标准</li><li>歧义词如何切分</li><li>新词的识别</li></ol><p><strong>3个典型的分词方式：</strong></p><ol><li>基于词典匹配</li><li>基于统计</li><li>基于深度学习</li></ol><h2 id="ik分词器安装和配置"><a href="#ik分词器安装和配置" class="headerlink" title="ik分词器安装和配置"></a>ik分词器安装和配置</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">下载地址</a><br>下载的版本一定要和es的版本保持一致</p><h3 id="2-解压拷贝到plugins目录下"><a href="#2-解压拷贝到plugins目录下" class="headerlink" title="2. 解压拷贝到plugins目录下"></a>2. 解压拷贝到plugins目录下</h3><p>将目录文件夹改名为ik</p><h3 id="3-设置权限"><a href="#3-设置权限" class="headerlink" title="3. 设置权限"></a>3. 设置权限</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cd</span> /<span class="class"><span class="keyword">data</span>/elasticsearch/plugins</span></span><br><span class="line"><span class="title">chmod</span> <span class="number">777</span> -<span class="type">R</span> ik</span><br></pre></td></tr></table></figure><h3 id="4-docker-start-重启容器"><a href="#4-docker-start-重启容器" class="headerlink" title="4. docker start 重启容器"></a>4. docker start 重启容器</h3><p>docker restart xxxx</p><h3 id="5-分词器使用"><a href="#5-分词器使用" class="headerlink" title="5. 分词器使用"></a>5. 分词器使用</h3><p>ik_smart 和 ik_max_word</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"中国科学技术大学"</span>,</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_smart"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义分词器词库"><a href="#自定义分词器词库" class="headerlink" title="自定义分词器词库"></a>自定义分词器词库</h3><h4 id="添加自定义词语"><a href="#添加自定义词语" class="headerlink" title="添加自定义词语"></a>添加自定义词语</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="meta-keyword">/data/</span>elasticsearch<span class="meta-keyword">/plugins/</span>ik<span class="meta-keyword">/config/</span>custom</span><br><span class="line">vim  <span class="meta-keyword">/data/</span>elasticsearch<span class="meta-keyword">/plugins/</span>ik<span class="meta-keyword">/config/</span>custom/mydic.dic</span><br><span class="line"></span><br><span class="line"><span class="meta"># 例如</span></span><br><span class="line">中国牙膏</span><br></pre></td></tr></table></figure><h4 id="添加忽略不必要的词语"><a href="#添加忽略不必要的词语" class="headerlink" title="添加忽略不必要的词语"></a>添加忽略不必要的词语</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim  <span class="meta-keyword">/data/</span>elasticsearch<span class="meta-keyword">/plugins/</span>ik<span class="meta-keyword">/config/</span>custom/extra_stopword.dic</span><br><span class="line"></span><br><span class="line">的</span><br><span class="line">是</span><br><span class="line">呦</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /data/elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>custom/mydic.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span>custom/extra_stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key="remote_ext_dict"&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key="remote_ext_stopwords"&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启容器即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;analyzer分析器&quot;&gt;&lt;a href=&quot;#analyzer分析器&quot; class=&quot;headerlink&quot; title=&quot;analyzer分析器&quot;&gt;&lt;/a&gt;analyzer分析器&lt;/h2&gt;&lt;p&gt;Elasticsearch 中文本分析Analysis是把全文本转换成一系列的单词(term/token）的过程，也叫分词。文本分析是使用分析器 Analyzer 来实现的，Elasticsearch内置了分析器，用户也可以按照自己的需求自定义分析器。&lt;br&gt;为了提高搜索准确性，除了在数据写入时转换词条，匹配 Query 语句时候也需要用相同的分析器对查询语句进行分析。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://www.guaosi.com/tags/elasticsearch/"/>
    
      <category term="es" scheme="https://www.guaosi.com/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch7 - 3.Mapping</title>
    <link href="https://www.guaosi.com/2022/04/12/mapping-for-elasticsearch7/"/>
    <id>https://www.guaosi.com/2022/04/12/mapping-for-elasticsearch7/</id>
    <published>2022-04-12T09:02:22.000Z</published>
    <updated>2022-04-16T07:03:26.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Mapping"><a href="#什么是Mapping" class="headerlink" title="什么是Mapping?"></a>什么是Mapping?</h2><p>Mapping 类似于数据库中的表结构定义 <code>schema</code>，它有以下几个作用：</p><ul><li><strong>定义索引中的字段的名称</strong></li><li><strong>定义字段的数据类型</strong>，比如字符串、数字、布尔</li><li><strong>字段，倒排索引的相关配置</strong>，比如设置某个字段为不被索引、记录 position 等</li></ul><p>在 ES 早期版本，一个索引下是可以有多个 Type 的，从 7.0 开始，一个索引只有一个 Type，也可以说一个 Type 有一个 Mapping 定义。</p><p>在了解了什么是 Mapping 之后，接下来对 Mapping 的设置做下介绍：</p><a id="more"></a><h2 id="Mapping-设置"><a href="#Mapping-设置" class="headerlink" title="Mapping 设置"></a>Mapping 设置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"mappings"</span>: &#123;</span><br><span class="line"><span class="string">"_doc"</span>: &#123;</span><br><span class="line"><span class="string">"dynamic"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建一个索引的时候，可以对 <code>dynamic</code> 进行设置，可以设成 <code>false</code>、<code>true</code> 或者 <code>strict</code>。</p><p><img src="/assets/blogImg/mapping-for-elasticsearch7/cyjjRwJSgwp-u1_yoQ5XP75dKFFlEN5u9CcAs_nD0N0.png" alt="image"></p><p>比如一个新的文档，这个文档包含一个字段，当 Dynamic 设置为 <code>true</code> 时，这个文档可以被索引进 ES，这个字段也可以被索引，也就是这个字段可以被搜索，Mapping 也同时被更新；当 dynamic 被设置为 <code>false</code> 时候，存在新增字段的数据写入，该数据可以被索引，但是新增字段被丢弃；当设置成 <code>strict</code> 模式时候，数据写入直接出错。</p><p>另外还有 <code>index</code> 参数，用来控制当前字段是否被索引，默认为 <code>true</code>，如果设为 <code>false</code>，则该字段不可被搜索。</p><p>参数 <code>index_options</code> 用于控制倒排索引记录的内容，有如下 4 种配置：</p><ul><li>doc：只记录 <code>doc id</code></li><li>freqs：记录 <code>doc id</code> 和 <code>term frequencies</code></li><li>positions：记录 <code>doc id</code>、<code>term frequencies</code> 和 <code>term position</code></li><li>offsets：记录 <code>doc id</code>、<code>term frequencies</code>、<code>term position</code> 和 <code>character offects</code></li></ul><p>另外，<code>text</code> 类型默认配置为 <code>positions</code>，其他类型默认为 <code>doc</code>，记录内容越多，占用存储空间越大。</p><p><code>null_value</code> 主要是当字段遇到 <code>null</code> 值时的处理策略，默认为 <code>NULL</code>，即空值，此时 ES 会默认忽略该值，可以通过设定该值设定字段的默认值，另外只有 KeyWord 类型支持设定 <code>null_value</code>。</p><p><code>copy_to</code> 作用是将该字段的值复制到目标字段，实现类似 <code>_all</code> 的作用，它不会出现在 <code>_source</code> 中，只用来搜索。</p><h2 id="字段数据类型"><a href="#字段数据类型" class="headerlink" title="字段数据类型"></a>字段数据类型</h2><p>ES 字段类型类似于 MySQL 中的字段类型，ES 字段类型主要有：核心类型、复杂类型、地理类型以及特殊类型，具体的数据类型如下图所示：</p><p><img src="/assets/blogImg/mapping-for-elasticsearch7/HagTzy3ld-gM6B6T-JFJB8a7BgjK01fAtlP7Z4ynAV0.png" alt="image"></p><h3 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h3><p>从图中可以看出核心类型可以划分为字符串类型、数字类型、日期类型、布尔类型、基于 BASE64 的二进制类型、范围类型。</p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p>其中，在 ES 7.x 有两种字符串类型：<code>text</code> 和 <code>keyword</code>，在 ES 5.x 之后 <code>string</code> 类型已经不再支持了。</p><p><code>text</code> 类型适用于需要被全文检索的字段，例如新闻正文、邮件内容等比较长的文字，<code>text</code> 类型会被 Lucene 分词器（Analyzer）处理为一个个词项，并使用 Lucene 倒排索引存储，<strong>text 字段不能被用于排序</strong>，如果需要使用该类型的字段只需要在定义映射时指定 JSON 中对应字段的 <code>type</code> 为 <code>text</code>。</p><p><code>keyword</code> 适合简短、结构化字符串，例如主机名、姓名、商品名称等，<strong>可以用于过滤、排序、聚合检索，也可以用于精确查询</strong>。</p><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>数字类型分为 <code>long、integer、short、byte、double、float、half_float、scaled_float</code>。</p><p>数字类型的字段在满足需求的前提下应当尽量选择范围较小的数据类型，字段长度越短，搜索效率越高，对于浮点数，可以优先考虑使用 <code>scaled_float</code> 类型，该类型可以通过缩放因子来精确浮点数，例如 12.34 可以转换为 1234 来存储。</p><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><p>在 ES 中日期可以为以下形式：</p><ul><li>格式化的日期字符串，例如 2020-03-17 00:00、2020/03/17</li><li>时间戳（和 1970-01-01 00:00:00 UTC 的差值），单位毫秒或者秒</li></ul><blockquote><p>即使是格式化的日期字符串，ES 底层依然采用的是时间戳的形式存储。</p></blockquote><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>JSON 文档中同样存在布尔类型，不过 JSON 字符串类型也可以被 ES 转换为布尔类型存储，前提是字符串的取值为 <code>true</code> 或者 <code>false</code>，布尔类型常用于检索中的过滤条件。</p><h4 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h4><p>二进制类型 <code>binary</code> 接受 BASE64 编码的字符串，默认 <code>store</code> 属性为 <code>false</code>，并且不可以被搜索。</p><h4 id="范围类型"><a href="#范围类型" class="headerlink" title="范围类型"></a>范围类型</h4><p>范围类型可以用来表达一个数据的区间，可以分为5种：<code>integer_range、float_range、long_range、double_range</code> 以及 <code>date_range</code>。</p><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><p>复合类型主要有对象类型（object）和嵌套类型（nested）：</p><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>JSON 字符串允许嵌套对象，一个文档可以嵌套多个、多层对象。可以通过对象类型来存储二级文档，不过由于 Lucene 并没有内部对象的概念，ES 会将原 JSON 文档扁平化，例如文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: &#123;</span><br><span class="line"><span class="attr">"first"</span>: <span class="string">"wu"</span>,</span><br><span class="line"><span class="attr">"last"</span>: <span class="string">"px"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上 ES 会将其转换为以下格式，并通过 Lucene 存储，即使 <code>name</code> 是 <code>object</code> 类型：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name.first"</span>: <span class="string">"wu"</span>,</span><br><span class="line"><span class="attr">"name.last"</span>: <span class="string">"px"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h4><p>嵌套类型可以看成是一个特殊的对象类型，可以让对象数组独立检索，例如文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"group"</span>: <span class="string">"users"</span>,</span><br><span class="line">  <span class="attr">"username"</span>: [</span><br><span class="line">&#123; <span class="attr">"first"</span>: <span class="string">"wu"</span>, <span class="attr">"last"</span>: <span class="string">"px"</span>&#125;,</span><br><span class="line">&#123; <span class="attr">"first"</span>: <span class="string">"hu"</span>, <span class="attr">"last"</span>: <span class="string">"xy"</span>&#125;,</span><br><span class="line">&#123; <span class="attr">"first"</span>: <span class="string">"wu"</span>, <span class="attr">"last"</span>: <span class="string">"mx"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>username</code> 字段是一个 JSON 数组，并且每个数组对象都是一个 JSON 对象。如果将 <code>username</code> 设置为对象类型，那么 ES 会将其转换为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"group"</span>: <span class="string">"users"</span>,</span><br><span class="line">  <span class="attr">"username.first"</span>: [<span class="string">"wu"</span>, <span class="string">"hu"</span>, <span class="string">"wu"</span>],</span><br><span class="line">  <span class="attr">"username.last"</span>: [<span class="string">"px"</span>, <span class="string">"xy"</span>, <span class="string">"mx"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出转换后的 JSON 文档中 <code>first</code> 和 <code>last</code> 的关联丢失了，如果尝试搜索 <code>first</code> 为 <code>wu</code>，<code>last</code> 为 <code>xy</code> 的文档，那么成功会检索出上述文档，但是 <code>wu</code> 和 <code>xy</code> 在原 JSON 文档中并不属于同一个 JSON 对象，应当是不匹配的，即检索不出任何结果。</p><p>嵌套类型就是为了解决这种问题的，嵌套类型将数组中的每个 JSON 对象作为独立的隐藏文档来存储，每个嵌套的对象都能够独立地被搜索，所以上述案例中虽然表面上只有 1 个文档，但实际上是存储了 4 个文档。</p><h3 id="地理类型"><a href="#地理类型" class="headerlink" title="地理类型"></a>地理类型</h3><p>地理类型字段分为两种：经纬度类型和地理区域类型：</p><h4 id="经纬度类型"><a href="#经纬度类型" class="headerlink" title="经纬度类型"></a>经纬度类型</h4><p>经纬度类型字段（geo_point）可以存储经纬度相关信息，通过地理类型的字段，可以用来实现诸如查找在指定地理区域内相关的文档、根据距离排序、根据地理位置修改评分规则等需求。</p><h4 id="地理区域类型"><a href="#地理区域类型" class="headerlink" title="地理区域类型"></a>地理区域类型</h4><p>经纬度类型可以表达一个点，而 <code>geo_shape</code> 类型可以表达一块地理区域，区域的形状可以是任意多边形，也可以是点、线、面、多点、多线、多面等几何类型。</p><h3 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h3><p>特殊类型包括 IP 类型、过滤器类型、Join 类型、别名类型等，在这里简单介绍下 IP 类型和 Join 类型，其他特殊类型可以查看官方文档。</p><h4 id="IP-类型"><a href="#IP-类型" class="headerlink" title="IP 类型"></a>IP 类型</h4><p>IP 类型的字段可以用来存储 IPv4 或者 IPv6 地址，如果需要存储 IP 类型的字段，需要手动定义映射：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line"><span class="attr">"properties"</span>: &#123;</span><br><span class="line">  <span class="attr">"my_ip"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"ip"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Join-类型"><a href="#Join-类型" class="headerlink" title="Join 类型"></a>Join 类型</h4><p>Join 类型是 ES 6.x 引入的类型，以取代淘汰的 <code>_parent</code> 元字段，用来实现文档的一对一、一对多的关系，主要用来做父子查询。</p><p>Join 类型的 Mapping 如下：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"my_join_field"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"join"</span>,</span><br><span class="line">        <span class="string">"relations"</span>: &#123;</span><br><span class="line">          <span class="string">"question"</span>: <span class="string">"answer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>my_join_field</code> 为 Join 类型字段的名称；<code>relations</code> 指定关系：<code>question</code> 是 <code>answer</code> 的父类。</p><p>例如定义一个 ID 为 1 的父文档：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT my_join_index/<span class="number">1</span>?refresh</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"This is a question"</span>,</span><br><span class="line">  <span class="string">"my_join_field"</span>: <span class="string">"question"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义一个子文档，该文档指定了父文档 ID 为 1：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT my_join_index/_doc/2?<span class="attribute">routing</span>=1&amp;refresh</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"This is an answer"</span>,</span><br><span class="line">  <span class="string">"my_join_field"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"answer"</span>,</span><br><span class="line">    <span class="string">"parent"</span>: <span class="string">"1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是-Dynamic-Mapping？"><a href="#什么是-Dynamic-Mapping？" class="headerlink" title="什么是 Dynamic Mapping？"></a>什么是 Dynamic Mapping？</h2><p>Dynamic Mapping 机制使我们不需要手动定义 Mapping，ES 会<strong>自动根据文档信息来判断字段合适的类型</strong>，但是有时候也会推算的不对，比如地理位置信息有可能会判断为 <code>Text</code>，当类型如果设置不对时，会导致一些功能无法正常工作，比如 Range 查询。</p><h3 id="类型自动识别"><a href="#类型自动识别" class="headerlink" title="类型自动识别"></a>类型自动识别</h3><p>ES 类型的自动识别是基于 JSON 的格式，如果输入的是 JSON 是字符串且格式为日期格式，ES 会自动设置成 <code>Date</code> 类型；当输入的字符串是数字的时候，ES 默认会当成字符串来处理，可以通过设置来转换成合适的类型；如果输入的是 <code>Text</code> 字段的时候，ES 会自动增加 <code>keyword</code> 子字段，还有一些自动识别如下图所示：</p><p><img src="/assets/blogImg/mapping-for-elasticsearch7/ZnnH7uCAEYrUA-QRpFt7WhUjDJ0EVqv6m2DahboTADg.png" alt="image"></p><p>下面我们通过一个例子是看看是怎么类型自动识别的，输入如下请求，创建索引：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="regexp">/mapping_test/</span>_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"uid"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"wupx"</span>,</span><br><span class="line">  <span class="string">"birth"</span>: <span class="string">"2020-03-16"</span>,</span><br><span class="line">  <span class="string">"married"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="string">"heigh"</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="string">"tags"</span>: [</span><br><span class="line">    <span class="string">"java"</span>,</span><br><span class="line">    <span class="string">"boy"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"money"</span>: <span class="number">999.9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用 <code>GET /mapping_test/_mapping</code> 查看，结果如下图所示：</p><p><img src="/assets/blogImg/mapping-for-elasticsearch7/Rer2TQ8Jhx8bP-qDby-oDkmg0zavatG0-JVMiud0DSs.png" alt="image"></p><p>可以从结果中看出，ES 会根据文档信息自动推算出合适的类型。</p><h3 id="修改-Mapping-字段类型？"><a href="#修改-Mapping-字段类型？" class="headerlink" title="修改 Mapping 字段类型？"></a>修改 Mapping 字段类型？</h3><p>如果是新增加的字段，根据 Dynamic 的设置分为以下三种状况：</p><ul><li>当 Dynamic 设置为 <code>true</code> 时，一旦有新增字段的文档写入，Mapping 也同时被更新。</li><li>当 Dynamic 设置为 <code>false</code> 时，索引的 Mapping 是不会被更新的，新增字段的数据无法被索引，也就是无法被搜索，但是信息会出现在 <code>_source</code> 中。</li><li>当 Dynamic 设置为 <code>strict</code> 时，文档写入会失败。</li></ul><p>另外一种是字段已经存在，这种情况下，ES 是不允许修改字段的类型的，因为 ES 是根据 Lucene 实现的倒排索引，一旦生成后就不允许修改，如果希望改变字段类型，必须使用 Reindex API 重建索引。</p><p>不能修改的原因是如果修改了字段的数据类型，会导致已被索引的无法被搜索，但是如果是增加新的字段，就不会有这样的影响。</p><h2 id="Mapping中的text与keywork"><a href="#Mapping中的text与keywork" class="headerlink" title="Mapping中的text与keywork"></a>Mapping中的text与keywork</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>text会被Lucene 倒排索引存储，而keyword不会，只会原封不动的存储(所以查询keyword时需要完全一样，因为keyword是原封不动的存储)</p><h3 id="当由Dynamic自动设置"><a href="#当由Dynamic自动设置" class="headerlink" title="当由Dynamic自动设置"></a>当由Dynamic自动设置</h3><p>会将字符串既用text存储，又在字段内使用keyword存储</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 类似举例</span></span><br><span class="line">POST <span class="meta-keyword">/user/</span>_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"address"</span>:&#123;</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"Bristol Street"</span>, <span class="meta"># text 倒排索引</span></span><br><span class="line">    <span class="string">"keyword"</span>: &#123;</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"Bristol Street"</span> <span class="meta"># 原封不动</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样则可以对字段进行完全准确的查询（用match或者用term都可以准确查询，这里的match不会进行分词）</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"address.keyword"</span>: <span class="string">"671 Bristol Street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动创建text与keyword"><a href="#手动创建text与keyword" class="headerlink" title="手动创建text与keyword"></a>手动创建text与keyword</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 定义index的mapping</span></span><br><span class="line">PUT usettest</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"age"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"name"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"desc"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 插入数据</span></span><br><span class="line">POST <span class="meta-keyword">/usettest/</span>_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Hattie Bond"</span>,</span><br><span class="line">  <span class="string">"desc"</span>: <span class="string">"671 Bristol Street"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查询text</span></span><br><span class="line">GET <span class="meta-keyword">/usettest/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Bond"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查询keyword</span></span><br><span class="line">GET <span class="meta-keyword">/usettest/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123; <span class="meta"># 这里用match或者term都能精确查询</span></span><br><span class="line">      <span class="string">"desc"</span>: <span class="string">"671 Bristol Street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Mapping&quot;&gt;&lt;a href=&quot;#什么是Mapping&quot; class=&quot;headerlink&quot; title=&quot;什么是Mapping?&quot;&gt;&lt;/a&gt;什么是Mapping?&lt;/h2&gt;&lt;p&gt;Mapping 类似于数据库中的表结构定义 &lt;code&gt;schema&lt;/code&gt;，它有以下几个作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义索引中的字段的名称&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义字段的数据类型&lt;/strong&gt;，比如字符串、数字、布尔&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字段，倒排索引的相关配置&lt;/strong&gt;，比如设置某个字段为不被索引、记录 position 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 ES 早期版本，一个索引下是可以有多个 Type 的，从 7.0 开始，一个索引只有一个 Type，也可以说一个 Type 有一个 Mapping 定义。&lt;/p&gt;
&lt;p&gt;在了解了什么是 Mapping 之后，接下来对 Mapping 的设置做下介绍：&lt;/p&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://www.guaosi.com/tags/elasticsearch/"/>
    
      <category term="es" scheme="https://www.guaosi.com/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch7 - 2.基本操作</title>
    <link href="https://www.guaosi.com/2022/04/12/basic-operation-for-elasticsearch7/"/>
    <id>https://www.guaosi.com/2022/04/12/basic-operation-for-elasticsearch7/</id>
    <published>2022-04-12T08:59:22.000Z</published>
    <updated>2022-04-16T07:03:26.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总"><a href="#总" class="headerlink" title="总"></a>总</h2><p>查看所有索引</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /_cat/indices</span><br></pre></td></tr></table></figure><p>查看指定index的基本信息(不会查询具体的文档数据)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /account</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="新建数据"><a href="#新建数据" class="headerlink" title="新建数据"></a>新建数据</h2><h3 id="通过put-id新建数据"><a href="#通过put-id新建数据" class="headerlink" title="通过put+id新建数据"></a>通过put+id新建数据</h3><p>在account下保存id为1的数据,这里id是必须的</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /account/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"bobby"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">"company"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"imooc"</span>,</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"beijin"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个请求发送多次，下面的信息会产生变化</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"_version"</span>: <span class="number">11</span>,</span><br><span class="line"><span class="string">"result"</span>: <span class="string">"updated"</span>, <span class="meta"># 这里第一次是created,后续都是updated</span></span><br><span class="line"><span class="string">"_seq_no"</span>: <span class="number">10</span>, <span class="meta"># 版本号</span></span><br></pre></td></tr></table></figure><p>关于_version和_seq_no的区别和作用请参考官方文档</p><h3 id="发送post不带id新建数据"><a href="#发送post不带id新建数据" class="headerlink" title="发送post不带id新建数据"></a>发送post不带id新建数据</h3><p>不带id则id在插入数据后自动生成</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="meta-keyword">/user/</span>_doc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"guaosi"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="keyword">user</span>/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"guaosi"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一开始是created，多次为updated</span></span><br></pre></td></tr></table></figure><p>如果post带id就和put一样的操作了，put是不允许不带id的</p><h3 id="post-create"><a href="#post-create" class="headerlink" title="post + _create"></a>post + _create</h3><p>没有就创建，有就报错</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="keyword">user</span>/_create/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"guaosi"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><h3 id="给已有的数据新增字段"><a href="#给已有的数据新增字段" class="headerlink" title="给已有的数据新增字段"></a>给已有的数据新增字段</h3><p><strong>只能用POST方法</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /account/<span class="number">_</span><span class="meta">doc</span>/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会发现，已有的数据的name字段没有了，只有age字段。说明这是一个完全覆盖的操作，每次都会影响到<code>_version</code> </p><p>此时我们需要使用</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /account/_<span class="keyword">update</span>/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"doc"</span>: &#123;</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果会更新指定字段，字段不存在则新增该字段。对该字段操作成功，则<code>_version</code> +1,如果无改变，则<code>_version</code> 保持不变</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除指定id数据</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/account/</span>_doc<span class="regexp">/1</span></span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/account/</span>_doc</span><br></pre></td></tr></table></figure><h2 id="简单查询数据"><a href="#简单查询数据" class="headerlink" title="简单查询数据"></a>简单查询数据</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="string">/user/_doc/1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_index"</span>: <span class="string">"user"</span>, <span class="string">//</span> 所属</span><br><span class="line">    <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"_version"</span>: 11, <span class="comment"># 版本号</span></span><br><span class="line">    <span class="string">"_seq_no"</span>: 10, <span class="comment"># 并发控制，用于乐观锁</span></span><br><span class="line">    <span class="string">"_primary_term"</span>: 1, <span class="comment">#同_seq_no, 主分片重新分配，如重启，就会变化</span></span><br><span class="line">    <span class="string">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"_source"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"guaosi"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只返回source的值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /user/_source/1</span><br></pre></td></tr></table></figure><h3 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h3><p>Elasticsearch有2种查询方式</p><ol><li><p>URI带有查询条件(轻量查询）<br>查询能力有限，不是所有的查询都可以使用此方式</p></li><li><p>请求体中带有查询条件(复杂查询）<br>查询条件以JSON格式表现，作为查询请求的请求体，适合复杂的查询</p></li></ol><h4 id="通过url查询数据"><a href="#通过url查询数据" class="headerlink" title="通过url查询数据"></a>通过url查询数据</h4><p>请求参数位于_search端点之后，参数之间使用&amp;分割，例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?pretty&amp;q=title:azure&amp;<span class="keyword">explain</span>=<span class="literal">true</span>&amp;<span class="keyword">from</span>=<span class="number">1</span>&amp;<span class="keyword">size</span>=<span class="number">10</span>&amp;<span class="keyword">sort</span>=title:<span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h4 id="通过request-body查询数据"><a href="#通过request-body查询数据" class="headerlink" title="通过request body查询数据"></a>通过request body查询数据</h4><p>获取所有index里的document</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取指定index里的document</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /account/_search  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p><a href="https://github.com/guaosi/share-file-for-blog/blob/main/elasticsearch7/account.json" target="_blank" rel="noopener">account.json</a></p><h3 id="批量插入-bulk"><a href="#批量插入-bulk" class="headerlink" title="批量插入(bulk)"></a>批量插入(bulk)</h3><p>其中一个失败都不会回退，不影响同一批次的其他操作</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;<span class="string">"index"</span>: &#123;<span class="string">"_index"</span>: <span class="string">"test"</span>,<span class="string">"_id"</span>: <span class="string">"1"</span>&#125;&#125; <span class="meta"># 插入 存在则为updated</span></span><br><span class="line">&#123;<span class="string">"field1"</span>: <span class="string">"value1"</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"delete"</span>: &#123;<span class="string">"_index"</span>: <span class="string">"test"</span>, <span class="string">"_id"</span>: <span class="string">"2"</span>&#125;&#125; <span class="meta"># 删除</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"create"</span>: &#123;<span class="string">"_index"</span>: <span class="string">"test"</span>, <span class="string">"_id"</span>: <span class="string">"3"</span>&#125;&#125; <span class="meta"># 新建 存在报错</span></span><br><span class="line">&#123;<span class="string">"field1"</span>: <span class="string">"value3"</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"update"</span>: &#123;<span class="string">"_id"</span>: <span class="string">"1"</span>, <span class="string">"_index"</span>: <span class="string">"test"</span>&#125;&#125; <span class="meta"># 修改</span></span><br><span class="line">&#123;<span class="string">"doc"</span>: &#123;<span class="string">"filed2"</span>: <span class="string">"value2"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 也可以提前指定index</span></span><br><span class="line">POST <span class="meta-keyword">/account/</span>_bluk</span><br></pre></td></tr></table></figure><h3 id="批量查询-mget"><a href="#批量查询-mget" class="headerlink" title="批量查询(mget)"></a>批量查询(mget)</h3><p>获取指定index里的指定具体document，方便对比</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>: <span class="string">"user"</span>,</span><br><span class="line">      <span class="string">"_id"</span>: <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>: <span class="string">"account"</span>,</span><br><span class="line">      <span class="string">"_id"</span>: <span class="string">"1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="query-dsl"><a href="#query-dsl" class="headerlink" title="query dsl"></a>query dsl</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html" target="_blank" rel="noopener">dsl</a></p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># from就是mysql中的offset，size就是mysql中的limit</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"from"</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="string">"size"</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果数据量过大的话，分页对es会有性能影响。这时候用scroll分页.</p><h3 id="全文查询-Full-text-queries"><a href="#全文查询-Full-text-queries" class="headerlink" title="全文查询(Full text queries)"></a>全文查询(Full text queries)</h3><h4 id="match查询-匹配查询"><a href="#match查询-匹配查询" class="headerlink" title="match查询(匹配查询)"></a>match查询(匹配查询)</h4><p>模糊匹配，需要指定字段名，但是输入会进行分词，比如”hello world”会进行拆分为hello和world，然后匹配，如果字段中包含hello或者world，或者都包含的结果都会被查询出来，也就是说match是一一个部分匹配的模糊查询。查询条件相对来说比较宽松。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># value的大小写不敏感</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: <span class="string">"street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="match-phrase查询-短语查询，可以认为要完全一致，但是内部还是会分词"><a href="#match-phrase查询-短语查询，可以认为要完全一致，但是内部还是会分词" class="headerlink" title="match_phrase查询 (短语查询，可以认为要完全一致，但是内部还是会分词)"></a>match_phrase查询 (短语查询，可以认为要完全一致，但是内部还是会分词)</h4><p>会对输入做分词，但是需要结果中也包含所有的分词，而且顺序要求一样。以”hello world”为例，要求结果中必须包含hello和world，而且还要求他们是连着的，顺序也是固定的，hello that word不满足，world hello也不满足条件。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: <span class="string">"Quentin street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="multi-match查询"><a href="#multi-match查询" class="headerlink" title="multi_match查询"></a>multi_match查询</h4><p>multi match 查询提供了一个简便的方法用来对多个字段执行相同的查询，即对指定的多个字段进行match查询</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查询address字段或者city字段出现过 Street 的数据</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"Street"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"address"</span>,<span class="string">"city"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果address字段出现过Street则分数比重提升2倍</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"Street"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"address^2"</span>,<span class="string">"city"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="query-string查询-用得比较少"><a href="#query-string查询-用得比较少" class="headerlink" title="query_string查询(用得比较少)"></a>query_string查询(用得比较少)</h4><p>和match类似，但是match需要指定字段名，query_string是在所有字段中搜索，范围更广泛</p><p><code>default_field</code> 不写默认为<code>*</code> ，代表所有字段中搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索所有字段，并且同时包含 Madison 和 Street (字段A包含Street，字段B包含Madison 也算符合条件)</span></span><br><span class="line"><span class="builtin-name">GET</span> /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"Madison AND Street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索所有字段，同时包含 Madison 或者 Street</span></span><br><span class="line"><span class="builtin-name">GET</span> /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"Madison OR Street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索字段字段，并且同时包含 Madison 和 Street</span></span><br><span class="line"><span class="builtin-name">GET</span> /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123;</span><br><span class="line">      <span class="string">"default_field"</span>: <span class="string">"address"</span>, </span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"Madison AND Street"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="match-all查询"><a href="#match-all查询" class="headerlink" title="match_all查询"></a>match_all查询</h4><p>获取所有index里的document</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取指定index里的document</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /account/_search  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Term"><a href="#Term" class="headerlink" title="Term"></a>Term</h3><h4 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h4><p>这种查询和match在有些时候是等价的，比如我们查询单个的词hello，那么会和match查询结果一样，但是如果查询”hello world”，结果就相差很大，因为这个<strong>输入不会进行分词(也不会把查询内容小写)</strong>，就是说查询的时候，是查询字段分词结果中是否有”hello world”的字样，而不是查询字段中包含”hello world”的字样，elasticsearch会对字段内容进行分词，”hello world”会被分成hello和world，不存在”hello world”，因此这里的查询结果会为空。这也是term查询和match的区别。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Street 不会被小写后进行查询，此时查不到符合的数据</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"Street"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># bristol street不会被分词后进行查询，而数据中保存的都是分词后的索引，所以此时查不到符合的数据</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"bristol street"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 搜索出来的值得分加倍</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"street"</span>,</span><br><span class="line">        <span class="string">"boost"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="range查询-范围查询"><a href="#range查询-范围查询" class="headerlink" title="range查询-范围查询"></a>range查询-范围查询</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;</span><br><span class="line">      <span class="string">"age"</span>: &#123;</span><br><span class="line">        <span class="string">"gte"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"lte"</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="exists查询"><a href="#exists查询" class="headerlink" title="exists查询"></a>exists查询</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 获取存在指定字段的数据</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"exists"</span>: &#123;</span><br><span class="line">      <span class="string">"field"</span>: <span class="string">"school"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fuzzy模糊查询"><a href="#fuzzy模糊查询" class="headerlink" title="fuzzy模糊查询"></a>fuzzy模糊查询</h4><p>编辑距离</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 不小心将 street 写成 streat，系统会自动判断并且改为street</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: <span class="string">"streat"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># match也可以开启模糊查询</span></span><br><span class="line">GET <span class="meta-keyword">/user/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"Malboie Streat"</span>,</span><br><span class="line">        <span class="string">"fuzziness"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># match能拥有分词后小写再查询索引，查询索引时再进行模糊匹配。而term的会原封不动的直接进行查询索引，查询索引时再进行模糊匹配。</span></span><br></pre></td></tr></table></figure><h3 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h3><p>Elasticsearch bool 查询对应Lucene BooleanQuery，格式如下</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"must_not"</span>: [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"filter"</span>: [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">must：必须匹配，查询上下文，加分</span><br><span class="line">should：应该匹配，查得到可以，查不到也可以，查询上下文，加分</span><br><span class="line">must_not：必须不匹配,过滤上下文，过滤</span><br><span class="line"><span class="keyword">filter</span>：必须匹配，过滤上下文，过滤</span><br></pre></td></tr></table></figure><p>bool查询采用了一种匹配越多越好的方法，因此每个匹配的must或should子句的分数将被加在一起，以提供每个文档的最终得分</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [ # 需要同时满足address为street并且年龄在<span class="number">20</span>-<span class="number">30</span>之间</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"term"</span>: &#123;</span><br><span class="line">            <span class="string">"address"</span>: &#123;</span><br><span class="line">              <span class="string">"value"</span>: <span class="string">"street"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"range"</span>: &#123;</span><br><span class="line">            <span class="string">"age"</span>: &#123;</span><br><span class="line">              <span class="string">"gte"</span>: <span class="number">20</span>,</span><br><span class="line">              <span class="string">"lte"</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"must_not"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"term"</span>: &#123;</span><br><span class="line">            <span class="string">"gender"</span>: &#123;</span><br><span class="line">              <span class="string">"value"</span>: <span class="string">"f"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"firstname"</span>: <span class="string">"Rosalinda"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"filter"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"range"</span>: &#123;</span><br><span class="line">            <span class="string">"age"</span>: &#123;</span><br><span class="line">              <span class="string">"gte"</span>: <span class="number">20</span>,</span><br><span class="line">              <span class="string">"lte"</span>: <span class="number">25</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总&quot;&gt;&lt;a href=&quot;#总&quot; class=&quot;headerlink&quot; title=&quot;总&quot;&gt;&lt;/a&gt;总&lt;/h2&gt;&lt;p&gt;查看所有索引&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;GET&lt;/span&gt; /_cat/indices&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看指定index的基本信息(不会查询具体的文档数据)&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;GET&lt;/span&gt; /account&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://www.guaosi.com/tags/elasticsearch/"/>
    
      <category term="es" scheme="https://www.guaosi.com/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch7 - 1.安装与基本概念</title>
    <link href="https://www.guaosi.com/2022/04/12/installation-and-basic-concepts-for-elasticsearch7/"/>
    <id>https://www.guaosi.com/2022/04/12/installation-and-basic-concepts-for-elasticsearch7/</id>
    <published>2022-04-12T08:54:22.000Z</published>
    <updated>2022-04-16T07:03:26.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="ElasticSearch7"><a href="#ElasticSearch7" class="headerlink" title="ElasticSearch7"></a>ElasticSearch7</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 新建es的config配置文件夹</span></span><br><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/elasticsearch/config</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 新建es的data目录</span></span><br><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/elasticsearch/<span class="keyword">data</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#给目录设置权限</span></span><br><span class="line"><span class="title">chmod</span> <span class="number">777</span> -<span class="type">R</span> /<span class="class"><span class="keyword">data</span>/elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#写入配置到elasticsearch.yml中</span></span><br><span class="line"><span class="title">echo</span> <span class="string">"http.host: 0.0.0.0"</span> &gt;&gt;/<span class="class"><span class="keyword">data</span>/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#安装es</span></span><br><span class="line"><span class="title">docker</span> run <span class="comment">--name elasticsearch -p 9200:9200 -p 9300:9300 \</span></span><br><span class="line">-e <span class="string">"discovery.type=single-node"</span> \</span><br><span class="line">-e <span class="type">ES_JAVA_OPTS</span>=<span class="string">"-Xms128m -Xmx256m"</span> \</span><br><span class="line">-v /<span class="class"><span class="keyword">data</span>/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span></span><br><span class="line">-v /<span class="class"><span class="keyword">data</span>/elasticsearch/<span class="keyword">data</span>:/usr/share/elasticsearch/<span class="keyword">data</span> \</span></span><br><span class="line">-v /<span class="class"><span class="keyword">data</span>/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span></span><br><span class="line">-d elasticsearch:<span class="number">7.10</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name kibana -e <span class="attribute">ELASTICSEARCH_HOSTS</span>=<span class="string">"http://192.168.137.200:9200"</span> -p 5601:5601 kibana:7.10.1</span><br></pre></td></tr></table></figure><h2 id="ElasticSearch7的基本概念"><a href="#ElasticSearch7的基本概念" class="headerlink" title="ElasticSearch7的基本概念"></a>ElasticSearch7的基本概念</h2><table><thead><tr><th style="text-align:center">mysql</th><th style="text-align:center">Elasticsearch</th></tr></thead><tbody><tr><td style="text-align:center">database</td><td style="text-align:center"> </td></tr><tr><td style="text-align:center">table</td><td style="text-align:center">index(7.x开始type为固定值_doc)</td></tr><tr><td style="text-align:center">row</td><td style="text-align:center">document</td></tr><tr><td style="text-align:center">column</td><td style="text-align:center">field</td></tr><tr><td style="text-align:center">schema</td><td style="text-align:center">mapping</td></tr><tr><td style="text-align:center">sql</td><td style="text-align:center">DSL(Descriptor Structure Laguage)</td></tr></tbody></table><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="倒排索引-存入数据与搜索时"><a href="#倒排索引-存入数据与搜索时" class="headerlink" title="倒排索引(存入数据与搜索时)"></a>倒排索引(存入数据与搜索时)</h4><p><img src="/assets/blogImg/installation-and-basic-concepts-for-elasticsearch7/lkAgKe_kOwsquzXLtTkd-m_SrUCs0F9jwziYFm66qME.png" alt="image"></p><p><strong>倒排索引就是</strong>es会将document进行<strong>单词小写再分词</strong>后存入，然后记录每个单词出现在哪个<code>_id</code>里以及对应的位置。当用户搜索时，就会将用户的查询内容也进行分词处理，返回对应查询的结果与对应匹配分数。(所以es不是精确查询，而是类似百度引擎的模糊准确搜索)</p><p><img src="/assets/blogImg/installation-and-basic-concepts-for-elasticsearch7/7sFDR4Y8KKOjIpMrd_iEoDZ1eKCNdJSLgtej334LG3k.png" alt="image"></p><p><strong>注意: 使用term查询时，es会原样使用，不会进行单词全部小写、分词处理。</strong></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><strong>有2个含义:  动词(insert)，名词(表)</strong></p><p>Elasticsearch将它的数据存储到一个或者多个索引(index)中，索引就像数据库(7.x就是表)，可以向索引写入文档或者从索引中读取文档。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>文档(document)是Elasticsearch中的主要实体。所以，所有使用Elasticsearch最终都会归结到文档的搜索上，<strong>从客户端看，文档就是一个JSON对象</strong>，文档由字段构成，每个字段包含字段名以及一个或多个字段值。文档之间可能有各自不同的字段集合，文档没有固定的模式或强制的结构。</p><h3 id="类型-7-x开始取消"><a href="#类型-7-x开始取消" class="headerlink" title="类型(7.x开始取消)"></a>类型(7.x开始取消)</h3><p>Elasticsearch中每个文档都有与之对应的类型(type)定义，允许在一个索引存储多种文档类型，并提供不同映射。</p><p><strong>类型就像一个数据库表</strong></p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>映射做的就是，存储分析链所需的信息。</p><p>主要就是设置一些参数，根据这些参数来做过滤还是分割词条。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;ElasticSearch7&quot;&gt;&lt;a href=&quot;#ElasticSearch7&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch7&quot;&gt;&lt;/a&gt;ElasticSearch7&lt;/h3&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 新建es的config配置文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt; -p /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch/config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 新建es的data目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt; -p /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch/&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#给目录设置权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt; -&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt; /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#写入配置到elasticsearch.yml中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http.host: 0.0.0.0&quot;&lt;/span&gt; &amp;gt;&amp;gt;/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch/config/elasticsearch.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#安装es&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;comment&quot;&gt;--name elasticsearch -p 9200:9200 -p 9300:9300 \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e &lt;span class=&quot;string&quot;&gt;&quot;discovery.type=single-node&quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e &lt;span class=&quot;type&quot;&gt;ES_JAVA_OPTS&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;-Xms128m -Xmx256m&quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch/&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;:/usr/share/elasticsearch/&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/elasticsearch/plugins:/usr/share/elasticsearch/plugins \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-d elasticsearch:&lt;span class=&quot;number&quot;&gt;7.10&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="https://www.guaosi.com/tags/elasticsearch/"/>
    
      <category term="es" scheme="https://www.guaosi.com/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>为知笔记私有化部署以及上线和备份</title>
    <link href="https://www.guaosi.com/2021/12/31/for-privatized-deployment-of-wiz-as-well-as-online-and-backup/"/>
    <id>https://www.guaosi.com/2021/12/31/for-privatized-deployment-of-wiz-as-well-as-online-and-backup/</id>
    <published>2021-12-30T16:18:24.000Z</published>
    <updated>2021-12-30T16:37:31.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前一直是使用坚果云搭配vscode来写笔记和进行同步，越到后面就感觉越麻烦，发现这种有以下几个问题：</p><ol><li>不能在线分享</li><li>手机端不能同步查看</li><li>不美观</li></ol><p>所以后面体验了几款云笔记软件，印象笔记、网易云笔记、为知笔记、Notion、以及语雀之类的，基本都用过，不是不花钱不让用就是有各种限制。我希望可以满足以下几个要求：</p><ol><li>支持多端查看编辑</li><li>支持在线分享以及写作</li><li>没有各种限制</li><li>完全免费使用，安全，可控</li><li>完美支持markdown</li><li>符合人类审美观</li></ol><p>找来找去，貌似也只有私有化部署才能满足我的要求了，在网上找了一圈，发现为知笔记支持私有化部署，部署端跟着官网同步更新，官网维护，而且为知笔记的各种客户端都能支持私有化登陆，体验了一下UI也符合个人审美。除了私有化部署只能支持5个注册用户以及不能使用收藏服务，其他功能全部都可以使用，实在良心。更多私有化的详细说明可以查看<a href="https://www.wiz.cn/zh-cn/enterprise-private-cloud.html" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="搭建部署为知笔记server端"><a href="#搭建部署为知笔记server端" class="headerlink" title="搭建部署为知笔记server端"></a>搭建部署为知笔记server端</h2><p>为知笔记官方提供了服务端docker镜像，方便我们可以快速搭建使用。</p><p>现在基于Ubuntu环境(IP: 192.168.100.2)进行讲解。更多环境部署方式可以查看<a href="https://www.wiz.cn/zh-cn/docker" target="_blank" rel="noopener">官方文档</a>了解更多</p><h3 id="搭建部署"><a href="#搭建部署" class="headerlink" title="搭建部署"></a>搭建部署</h3><p>直接执行docker命令启动即可(请确保已经安装了docker，不会安装docker可以查看 <a href="https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/">Kubernetes 1.22集群安装教程(基于Ubuntu)</a> 里如何安装docker)</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name wiz -it \</span><br><span class="line">-<span class="ruby">v  本机数据目录<span class="symbol">:/wiz/storage</span> \</span></span><br><span class="line"><span class="ruby">-d --restart=always -p 为知笔记服务端口<span class="symbol">:</span><span class="number">80</span> -p 为知笔记数据库端口<span class="symbol">:</span><span class="number">3306</span> -p <span class="number">9269</span><span class="symbol">:</span><span class="number">9269</span>/udp \</span></span><br><span class="line"><span class="ruby">wiznote/wizserver</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name wiz -it \</span><br><span class="line">-v  /usr/local/wiz_data:/wiz/storage \</span><br><span class="line">-d --restart=always -<span class="selector-tag">p</span> <span class="number">8080</span>:<span class="number">80</span> -<span class="selector-tag">p</span> <span class="number">3306</span>:<span class="number">3306</span> -<span class="selector-tag">p</span> <span class="number">9269</span>:<span class="number">9269</span>/udp \</span><br><span class="line">wiznote/wizserver</span><br></pre></td></tr></table></figure><p>参数说明:</p><p><code>/usr/local/wiz_data</code> 文件夹里保存的是所有笔记数据，在任何地方，只要有这份数据，就可以恢复之前笔记记录，为后面的备份做准备。</p><p><code>8080</code> 提供为知笔记服务端口，网页访问和客户端访问都是使用这个端口</p><p><code>3306</code> 暴露出MySQL数据库端口，方便远程连接上笔记的数据库</p><p>这些都是根据自己需要自行配置，后面会以这些配置作为例子讲解</p><blockquote><p>数据库密码在为知笔记容器里的 /wiz/app/entrypoint.sh 文件里可以获取到哦</p></blockquote><p>访问 <a href="http://192.168.100.2:8080/" target="_blank" rel="noopener">http://192.168.100.2:8080</a> 查看网页端能否正常访问。</p><p>初始化默认的账号为 <a href="mailto:admin@wiz.cn" target="_blank" rel="noopener">admin@wiz.cn</a> 密码为 <code>123456</code></p><h2 id="备份以及恢复"><a href="#备份以及恢复" class="headerlink" title="备份以及恢复"></a>备份以及恢复</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>上面有说过，<code>/usr/local/wiz_data</code> 文件夹里保存的是所有笔记数据。所以只要保存这个文件夹里所有的数据即可。思路是先将这个文件夹进行打包，然后再进行压缩，压缩后为了安全起见，再将压缩包上传到网盘。</p><p>这里会搭配Rclone将压缩包传到阿里网盘进行云盘端的备份，<code>Rclone</code> 挂载阿里云盘可以查看 <a href="https://www.guaosi.com/2021/12/06/mount-alicloud-disks-locally-through-webdav-protocol/">通过webdav协议挂载阿里云盘到本地</a></p><p>这里附上我的脚本参考，我使用的压缩是lz4，自行百度安装。或者使用bz2以及gz的压缩方式都可以。</p><p><code>backup_aliyun.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start backup wiz"</span></span><br><span class="line"><span class="comment"># tar </span></span><br><span class="line">tar -cf wiz_backup.tar -C /usr/<span class="built_in">local</span>/wiz_data .</span><br><span class="line"><span class="comment"># lz4 compress</span></span><br><span class="line">lz4 -5 -f wiz_backup.tar wiz_backup.lz4</span><br><span class="line">rm -f wiz_backup.tar</span><br><span class="line"><span class="comment"># upload aliyun</span></span><br><span class="line">rclone copy wiz_backup.lz4 aliyunwebdav:/wiz_backup/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"backup wiz end"</span></span><br></pre></td></tr></table></figure><p>还可以搭配linux的crontab进行自动备份</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">3</span>,<span class="number">15</span> * * * /root/backup_aliyun.sh</span><br></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>当在一个全新的环境，想要恢复之前的笔记数据，可以参考如下恢复步骤：</p><ol><li>确保当前系统没有运行wiz容器</li><li>mkdir -p /usr/local/wiz_data</li><li>下载网盘里的备份文件</li><li>解压解包</li><li>运行wiz容器</li></ol><blockquote><p>同样我用的解压命令也是lz4</p></blockquote><p>恢复脚本参考 <code>recover_aliyun.sh</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [[ -n $(docker ps | grep wiz) ]];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"wiz is running,please stop wiz"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"start recover wiz"</span></span><br><span class="line">    <span class="comment"># download backup file from aliyun</span></span><br><span class="line">    rclone copy aliyunwebdav:/wiz_backup/wiz_backup.lz4 .</span><br><span class="line">    rm -rf /usr/<span class="built_in">local</span>/wiz_data</span><br><span class="line">    mkdir -p /usr/<span class="built_in">local</span>/wiz_data</span><br><span class="line">    <span class="comment"># lz4 uncompress</span></span><br><span class="line">    lz4 -d wiz_backup.lz4 wiz_backup.tar</span><br><span class="line">    rm -f wiz_backup.lz4</span><br><span class="line">    <span class="comment"># untar</span></span><br><span class="line">    tar -xf wiz_backup.tar --directory /usr/<span class="built_in">local</span>/wiz_data/</span><br><span class="line">    rm -f wiz_backup.tar</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"recover wiz end"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>然后就可以启动为知笔记容器了:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name wiz -it \</span><br><span class="line">-v  /usr/local/wiz_data:/wiz/storage \</span><br><span class="line">-d --restart=always -<span class="selector-tag">p</span> <span class="number">8080</span>:<span class="number">80</span> -<span class="selector-tag">p</span> <span class="number">3306</span>:<span class="number">3306</span> -<span class="selector-tag">p</span> <span class="number">9269</span>:<span class="number">9269</span>/udp \</span><br><span class="line">wiznote/wizserver</span><br></pre></td></tr></table></figure><h2 id="上线外网使用"><a href="#上线外网使用" class="headerlink" title="上线外网使用"></a>上线外网使用</h2><p>由于是私有化笔记部署，很有可能不是部署在云服务器上，如果是部署在家里，则需要考虑如何能让外部访问到，这样才能分享文章或者手机端都可以直接访问到我们的笔记。关于内部服务如何能让外部访问到，则可以考虑ddns或者内网穿透的方式，这两种方式的区别、限制可以参考 <a href="https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/">简单说说几种常用的网络访问方法</a></p><p>我使用的是钉钉的内网穿透， 子域名名称使用的是 <code>wiz-test</code> ,端口是<code>8080</code> (对应为知笔记容器启动时的端口)。然后我是直接用容器启动的内网穿透</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--net</span>=host -e <span class="attribute">SUB_DOMAIN</span>=wiz-test -e <span class="attribute">PORT</span>=8080 --name pierced guaosi/pierced</span><br></pre></td></tr></table></figure><p>现在可以使用为知笔记官方的桌面端或者手机端，将登陆切换为私有部署登陆，连接地址填写内网穿透的域名和端口即可：</p><p><img src="/assets/blogImg/for-privatized-deployment-of-wiz-as-well-as-online-and-backup/5vInMVX7hkRJ5ByHXq_eVOQTQ3yrRNSVCgkdyQm8hn4.png" alt="image"></p><p>点击 登陆 可以正常登陆进入则代表内网穿透成功，可以正常分享文章给朋友们直接访问啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;之前一直是使用坚果云搭配vscode来写笔记和进行同步，越到后面就感觉越麻烦，发现这种有以下几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能在线分享&lt;/li&gt;
&lt;li&gt;手机端不能同步查看&lt;/li&gt;
&lt;li&gt;不美观&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以后面体验了几款云笔记软件，印象笔记、网易云笔记、为知笔记、Notion、以及语雀之类的，基本都用过，不是不花钱不让用就是有各种限制。我希望可以满足以下几个要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持多端查看编辑&lt;/li&gt;
&lt;li&gt;支持在线分享以及写作&lt;/li&gt;
&lt;li&gt;没有各种限制&lt;/li&gt;
&lt;li&gt;完全免费使用，安全，可控&lt;/li&gt;
&lt;li&gt;完美支持markdown&lt;/li&gt;
&lt;li&gt;符合人类审美观&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找来找去，貌似也只有私有化部署才能满足我的要求了，在网上找了一圈，发现为知笔记支持私有化部署，部署端跟着官网同步更新，官网维护，而且为知笔记的各种客户端都能支持私有化登陆，体验了一下UI也符合个人审美。除了私有化部署只能支持5个注册用户以及不能使用收藏服务，其他功能全部都可以使用，实在良心。更多私有化的详细说明可以查看&lt;a href=&quot;https://www.wiz.cn/zh-cn/enterprise-private-cloud.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://www.guaosi.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="运维" scheme="https://www.guaosi.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>简单说说几种常用的网络访问方法</title>
    <link href="https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/"/>
    <id>https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/</id>
    <published>2021-12-29T14:37:24.000Z</published>
    <updated>2021-12-30T16:31:21.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这篇文章会简单说说常见的网络通信访问。</p><p>首先，我们需要了解一些概念，什么是二层，什么是跨网段以及什么是内网，对应云厂商的相关概念又是怎么样的。（不会讲的太详细，只会讲个粗略，否则一篇根本写不完）</p><a id="more"></a><h2 id="二层"><a href="#二层" class="headerlink" title="二层"></a>二层</h2><p>根据OSI七层模型可以知道，二层是数据链路层，现实中的物理设备就是二层交换机。处于同一个二层的意思就是说2台设备，通过两根网线连接在同一台交换机下，同一台交换机下的设备是处于同一个网段或者同一个局域网中（比如192.168.1.0网段），他们之间互相访问，数据包只需要经过交换机，对应上交换机的arp对应表，即可找到对方互相通信。</p><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/5laebJ2pDi7J43YAZ3-Cww9EMq5nBQSjerbe-l1oEtc.jpg" alt="image"></p><p>你可能会想，家里的同一台路由器下的设备也是处于同一个局域网，同一个网段，他们之间也能互相通信，并没有用到什么交换机啊。这其实是家用路由器已经整合了交换机的功能。</p><p>那是不是交换机设备就没什么作用了呢？纯二层交换机在校园网还有企业用的比较多，例如一个普通的家用路由器只有4lan口，但是我有10个设备都想用网线进行连接，那怎么办？</p><ol><li>再买一个路由器，旧路由器的lan口跟新路由器的wan口相连，这样新旧2个路由器就各自处于不同网段，各种管理。这其实就涉及到了跨网段，不同的局域网中，如果是家里使用很不方便。举个例子，在这种连接模式下，你的手机在旧路由器上分配到ip，你的电视在新路由器上分配到ip，你的手机是不能投屏给电视的，因为手机在同一个局域网中找不到电视设备。所以如果是有新旧路由器下的连接设备都想在同一个局域网中，新旧路由器就需要换一种接法。</li></ol><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/IZst1scrpHwWNoznMqpQ3WbBMiYLEMxUOtNb1iTrkRM.jpg" alt="image"></p><ol start="2"><li>旧路由器的lan口连接新路由器的lan口，同时新路由器关闭自动dhcp服务，由旧路由器提供dhcp服务。这样设置后新路由器就等于一个二层设备，多提供了几个口，连接在新路由器上的设备会由旧路由器分配ip，这样新旧路由器下的设备就在同一个局域网中。手机也可以正常投屏到电视。</li></ol><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/StqaQge5FEf9nHxUV00Mnj4l3xpZHXyJX5QCfwV8kNU.jpg" alt="image"></p><ol start="3"><li>直接购买一个交换机，上面方案2就是把新路由器当成一个交换机使用，不过一般交换机是可以提供很多口，根据具体需要。</li></ol><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/GroOiTGSBSkQnd0yE1PTwiWOhQRaxCXdbi2anHsPgCc.jpg" alt="image"></p><h2 id="跨网段"><a href="#跨网段" class="headerlink" title="跨网段"></a>跨网段</h2><p>当不在同一个二层或者说不在同一个局域网内时，也就是说不在一个网段内，此时通信就需要借助硬件路由器。比如上面的旧路由器（192.168.1.0网段）接了新路由器的wan口（192.168.2.0网段），此时各自路由器下的设备想互相访问到对方，就属于跨网段通信，由路由器帮我们实现通信（RIP,OSPF之类的相关协议），如果想访问外网，也就是公网，也同样是需要路由器帮我们进行通信（BGP之类的相关协议）。</p><p>举个例子，一台设备想要访问百度，此时他需要发送http数据包（假设三次握手已经成功），首先在本设备随机开启一个端口，用来接收数据或者发送数据，直到四次挥手结束才关闭该端口，数据包根据本机路由表，发现外网地址不能直达，数据包就传送给网关，也就是路由器。路由器发现是目的ip是公网，先在路由器上记录数据包的源ip跟端口（nat表），再在路由器上随机开启一个端口，用来接收或者发送数据。再将数据包发送给运营商，由运营商负责数据包在公网上的传输，最后将结果返回给路由器对应的端口。路由器再将数据包返回给原来记录的设备。</p><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/sU1R_mWOe5AiG-Xg0q0CUjUZ_GZs7C9TN7AVdfhZiBk.jpg" alt="image"></p><h2 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h2><p>上面说的都是对应个人家里的网络情况，如果是目前公有云厂商，那又是如何对应的呢？</p><ul><li>公有云厂商在创建实例（也就是服务器）的时候，都会预先创建好vpc，然后创建好路由器以及交换机（也就是子网），然后实例被划分到这个子网下。</li><li>vpc就是一个虚拟网络，可以认为就是家里的整个大网络。</li><li>路由器就是家里的路由器，只不过我们家里的路由器只会有一个网段，省略了交换机。云厂商的一个交换机相当于一个子网（例如192.168.1.0网段），如果再在这个vpc下创建一个子网（例如172.16.1.0网段），他们下各自设备想要互相通信，就需要靠路由器进行转发。</li><li>然后实例属于某个子网下，可以通过查看ip命令就可以发现实例此时的内网ip。</li></ul><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/-XM5ZaQkYoQP5XQ3K6zS3NUc2zUt88MJHmius5FZR6A.jpg" alt="image"></p><h2 id="情况讲解"><a href="#情况讲解" class="headerlink" title="情况讲解"></a>情况讲解</h2><p>现在我们手头上有A这样一台设备（认为是服务器或者电脑都行），然后有B这样一台服务器，上面的8080端口的web服务。我们想通过举例B服务器在不同的网络环境中，A电脑能进行访问，来给出不同的通讯方案以及其中一些限制因素。</p><h3 id="在同一个二层"><a href="#在同一个二层" class="headerlink" title="在同一个二层"></a>在同一个二层</h3><p>A跟B在同一个二层，也就是同一个局域网，这种最简单了，ip加端口直接就能访问到。</p><h3 id="在一个大网络内跨网段"><a href="#在一个大网络内跨网段" class="headerlink" title="在一个大网络内跨网段"></a>在一个大网络内跨网段</h3><p>例如新旧路由器，旧路由器的lan接新路由器的wan口。实际上这种情况，借助路由器也是可以直接，一样能通过ip加端口访问，只要路由可达即可。</p><h3 id="A在内网环境B在公网环境"><a href="#A在内网环境B在公网环境" class="headerlink" title="A在内网环境B在公网环境"></a>A在内网环境B在公网环境</h3><p>B在公网环境也就是说B有公网IP可以直接被访问到，A从内网出来到公网进行访问，由路由器转发，运营商转发处理即可，对于A来说一样可以直接使用IP加端口进行访问。</p><h3 id="B在内网环境并且A跟B不在同一个网络内"><a href="#B在内网环境并且A跟B不在同一个网络内" class="headerlink" title="B在内网环境并且A跟B不在同一个网络内"></a>B在内网环境并且A跟B不在同一个网络内</h3><p>这种情况最为复杂也是最麻烦的。比如A在公司，B在家里，此时两边网络不互通，无法直接进行访问，要如何处理？</p><p>比较简单的办法就是B所在环境开一个VPN，能让A直接接入B所在网络，这样就可以直接通过B的内网ip加端口直接进行访问。如果不能创建vpn，那又要如何进行处理？</p><p>最常用的就是2个办法，一个是ddns，另一个就是内网穿透。</p><h4 id="ddns"><a href="#ddns" class="headerlink" title="ddns"></a>ddns</h4><p>讲解ddns时，先回顾一下， A在内网环境B在公网环境 这种情况中。用公网ip加端口就可以直接访问到云厂商的实例，那我们家里是否也能这样办到？答案是能的。但是有个前提条件，就是你要家里真有专属公网IP。如何知道自己是否真有专属的公网IP?一般如果是接正规宽带提供商（电信联通移动），并且是拨号上网，就会有个人的公网ip。这还不够，如果是光猫拨号，需要保证对光猫有足够的控制权，如果是路由器拨号，需要保证对路由器有足够的控制权，因为需要上去开端口映射或者dmz。</p><p>这样，当路由器设置好端口映射规则后，通过访问路由器的公网ip加端口，访问就会被路由器对应规则转发到对应的内网机器上以及对应的端口。这样就可以实现外部环境访问到内网的服务。</p><p>我们再了解一下域名。当我们访问一个域名，实际上会通过DNS(域名解析系统)获取到这个域名实际对应的公网IP，然后再访问该公网IP。</p><p>既然通过域名可以查到公网IP，那我们可以给路由器的公网IP绑定一个域名，这样我们在外部环境直接访问域名，就可以访问到我们的路由器了。但是有一点，因为是拨号上网，宽带运营商是不会给我们固定的IP，也就是每一次重新拨号IP都会发生变化，可是域名对应的IP地址还是旧的，那要怎么处理呢？这时候就需要使用DDNS（动态域名解析系统），路由器上需要有一个专门的程序，每分钟查询自己的公网IP是多少，然后通过域名提供商开放的API接口，来更新域名对应的最新公网IP，这样达到能全自动更新，而我们依旧只需要知道域名即可。（域名可以使用阿里云的，ddns相关api在网上也有对应案例）</p><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/WUW7CVQMD-98XZebJ7mqJ-k2GuMYML5CJXDc2d_g1mM.jpg" alt="image"></p><h5 id="影响因素"><a href="#影响因素" class="headerlink" title="影响因素:"></a>影响因素:</h5><p>这种方式相当于直接访问到内网的机器里进行交互。所以此时的传输速度，也就是上行带宽取决于家庭带宽的上行带宽限制。</p><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><p>当对路由器没有控制权或者运营商不给公网IP时，也就是ddns这种方案行不通时，那就只能使用内网穿透了。内网穿透的原理是将当前机器跟提供内网穿透服务的服务端建立长连接，注册上需要转发到本机的端口。注册成功后内网穿透服务提供商会提供一个域名以及端口，供任何地方可以直接访问。当访问内网穿透服务提供商会提供的域名以及端口后，请求被内网穿透服务提供商中转后，被转发到原先机器和端口上。</p><p><img src="/assets/blogImg/briefly-talk-about-several-common-network-access-methods/zj62IO4uvEbtRUCtthmSnNPm9q1Z8QGXry0aWZZelCk.jpg" alt="image"></p><h5 id="影响因素-1"><a href="#影响因素-1" class="headerlink" title="影响因素"></a>影响因素</h5><p>这种方式需要一层内网穿透服务提供商的中转，所以此时的传输速度不仅仅取决于家庭带宽的上行带宽限制，更是取决于内网穿透服务提供商提供了多大的带宽(免费的一般就给1M的带宽)。</p><h5 id="使用钉钉内网穿透"><a href="#使用钉钉内网穿透" class="headerlink" title="使用钉钉内网穿透"></a>使用钉钉内网穿透</h5><p>临时使用的话，可以使用钉钉的内网穿透服务，免费而且带宽大，就是不太稳定，个人不商用应该是足够使用的。</p><p>钉钉内网穿透说明文档:  <a href="https://open.dingtalk.com/document/resourcedownload/http-intranet-penetration" target="_blank" rel="noopener">https://open.dingtalk.com/document/resourcedownload/http-intranet-penetration</a></p><p>钉钉内网穿透项目：<a href="https://github.com/open-dingtalk/pierced" target="_blank" rel="noopener">https://github.com/open-dingtalk/pierced</a></p><blockquote><p>注意：这个项目很久不维护了，而且有一个bug，就是使用时间越长，内存占用越大，所以最好能写个脚本定时进行重启。</p></blockquote><p>为了方便使用，我也用docker做了个封装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--net</span>=host -e <span class="attribute">SUB_DOMAIN</span>=子域名名称 -e <span class="attribute">PORT</span>=转发到本机的端口 --name pierced guaosi/pierced</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要使用host模式，否则只会在容器内转发请求，到不了宿主机上</p></blockquote><p>例如</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--net</span>=host -e <span class="attribute">SUB_DOMAIN</span>=guaosi-test -e <span class="attribute">PORT</span>=8080 --name pierced guaosi/pierced</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这篇文章会简单说说常见的网络通信访问。&lt;/p&gt;
&lt;p&gt;首先，我们需要了解一些概念，什么是二层，什么是跨网段以及什么是内网，对应云厂商的相关概念又是怎么样的。（不会讲的太详细，只会讲个粗略，否则一篇根本写不完）&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://www.guaosi.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="运维" scheme="https://www.guaosi.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>通过webdav协议挂载阿里云盘到本地</title>
    <link href="https://www.guaosi.com/2021/12/06/mount-alicloud-disks-locally-through-webdav-protocol/"/>
    <id>https://www.guaosi.com/2021/12/06/mount-alicloud-disks-locally-through-webdav-protocol/</id>
    <published>2021-12-06T10:26:22.000Z</published>
    <updated>2021-12-29T14:44:07.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是webdav协议"><a href="#什么是webdav协议" class="headerlink" title="什么是webdav协议"></a>什么是webdav协议</h1><p>WebDAV 基于 HTTP 协议的通信协议，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。因为基于HTTP，在广域网上共享文件有天然的优势，移动端文件管理APP也大多支持WebDAV协议。使用HTTPS还能保安全性。Apache和Nginx支持WebDAV，可作为WebDAV文件共享服务器软件。也可以使用专门的WebDAV软件部署。</p><p>可以认为通过webdav，我们可以直接将云盘挂载到本地，不需要使用服务商提供的专门软件就能进行管理使用。目前国内支持的最好的就是坚果云了，自身就支持webdav，但是坚果云免费的限制流量。阿里云盘明面上不支持，但是通过搭建 <a href="https://github.com/zxbu/webdav-aliyundriver" target="_blank" rel="noopener">webdav-aliyundriver</a> 项目，来代理转发请求，实现阿里云盘支持webdav协议。</p><h1 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h1><p>本篇将会讲解如下</p><ul><li>搭建<code>webdav-aliyundriver</code></li><li>windows通过<code>Raidrive</code>挂载阿里云盘</li><li>Linux通过<code>Rclone</code> 挂载阿里云盘</li></ul><a id="more"></a><h1 id="教程内容"><a href="#教程内容" class="headerlink" title="教程内容"></a>教程内容</h1><h2 id="搭建-webdav-aliyundriver"><a href="#搭建-webdav-aliyundriver" class="headerlink" title="搭建 webdav-aliyundriver"></a>搭建 webdav-aliyundriver</h2><p>阿里云盘自身是不支持webdav协议的，所以我们需要一个中转，接收webdav协议，然后再将webdav协议转换为HTTP请求发送给阿里云盘，以此来模拟阿里云盘支持webdav。而这个中转，就是 <code>webdav-aliyundriver</code> 。更多的介绍使用和搭建方式可以参考<a href="https://github.com/zxbu/webdav-aliyundriver" target="_blank" rel="noopener">项目</a>的readme</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>我们通过在<code>ubuntu20</code> (ip：192.168.137.200)上使用<code>docker</code> 快速启动一个<code>webdav-aliyundriver</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--name</span>=webdav-aliyundriver <span class="attribute">--restart</span>=always -p 9090:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e <span class="attribute">TZ</span>=<span class="string">"Asia/Shanghai"</span> -e <span class="attribute">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class="string">"下面有获取方式"</span>  -e <span class="attribute">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class="string">"admin"</span> -e <span class="attribute">JAVA_OPTS</span>=<span class="string">"-Xmx1g"</span> zx5253/webdav-aliyundriver</span><br></pre></td></tr></table></figure><blockquote><p>注意：我将宿主机端口映射为9090，也就是后面的client想要连接该server，端口修改为9090</p></blockquote><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--aliyundrive.refresh-token</span><br><span class="line">    阿里云盘的refreshToken，获取方式见下文</span><br><span class="line">--server.port</span><br><span class="line">    非必填，服务器端口号，默认为<span class="number">8080</span></span><br><span class="line">--aliyundrive<span class="selector-class">.auth</span><span class="selector-class">.enable</span>=true</span><br><span class="line">    是否开启WebDav账户验证，默认开启</span><br><span class="line">--aliyundrive<span class="selector-class">.auth</span><span class="selector-class">.user-name</span>=admin</span><br><span class="line">    WebDav账户，默认admin</span><br><span class="line">--aliyundrive<span class="selector-class">.auth</span><span class="selector-class">.password</span>=admin</span><br><span class="line">    WebDav密码，默认admin</span><br><span class="line">--aliyundrive.work-dir=/etc/aliyun-driver/</span><br><span class="line">    token挂载路径（如果多开的话，需修改此配置）</span><br></pre></td></tr></table></figure><h3 id="浏览器获取refreshToken方式"><a href="#浏览器获取refreshToken方式" class="headerlink" title="浏览器获取refreshToken方式"></a>浏览器获取refreshToken方式</h3><ol><li>先通过浏览器（建议chrome）打开阿里云盘官网并登录：<a href="https://www.aliyundrive.com/drive/" target="_blank" rel="noopener">https://www.aliyundrive.com/drive/</a></li><li>登录成功后，按F12打开开发者工具，点击Application，点击Local Storage，点击 Local Storage下的 <a href="https://www.aliyundrive.com/" target="_blank" rel="noopener">https://www.aliyundrive.com/</a>，点击右边的token，此时可以看到里面的数据，其中就有refresh_token，把其值复制出来即可。（格式为小写字母和数字，不要复制双引号。例子：ca6bf2175d73as2188efg81f87e55f11）</li><li>第二步有点繁琐，大家结合下面的截图就看懂了</li></ol><p><img src="/assets/blogImg/mount-alicloud-disks-locally-through-webdav-protocol/LUjLWA9YQzmCFfllFflq8bGWeQVs7k2Cs87HQPYjmGc.png" alt="image"></p><h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><p>容器正常跑起来后，意味着<code>webdav server</code> 已经成功搭建了。连接<code>webdav server</code> 的信息如下(上面启动容器时的参数决定的)</p><table><thead><tr><th style="text-align:center">ip</th><th style="text-align:center">端口</th><th style="text-align:center">账号</th><th style="text-align:center">密码</th></tr></thead><tbody><tr><td style="text-align:center">192.168.137.200</td><td style="text-align:center">9090</td><td style="text-align:center">admin</td><td style="text-align:center">admin</td></tr></tbody></table><blockquote><p>请确认要连接 webdav server的客户端所在主机能正常与 192.168.137.200 通信</p></blockquote><h2 id="连接webdav-server"><a href="#连接webdav-server" class="headerlink" title="连接webdav server"></a>连接webdav server</h2><p>现在我们可以先到阿里云盘的网页或者客户端上，在顶级目录下创建一个名为<code>webdav_test</code>的文件夹，作为接下来的讲解案例使用</p><p><img src="/assets/blogImg/mount-alicloud-disks-locally-through-webdav-protocol/DUKGpztuzwX6cuw-8M8nNP1eS5wyJ-pZXu2Pc8VOIkU.png" alt="image"></p><h3 id="windows通过Raidrive挂载阿里云盘"><a href="#windows通过Raidrive挂载阿里云盘" class="headerlink" title="windows通过Raidrive挂载阿里云盘"></a>windows通过<code>Raidrive</code>挂载阿里云盘</h3><p><code>webdav-aliyundriver</code> 对Windows原生自带的添加网络设备兼容不够好，存在问题，所以需要安装第三方，也就是<code>Raidrive</code> 作为客户端。下载地址：<a href="https://cloud.189.cn/t/fiy2immmIbIn%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Aypc2%EF%BC%89" target="_blank" rel="noopener">https://cloud.189.cn/t/fiy2immmIbIn（访问码：ypc2）</a></p><p><code>Raidrive</code>安装完毕后，点击<code>Add</code>，然后如下配置</p><p><img src="/assets/blogImg/mount-alicloud-disks-locally-through-webdav-protocol/I9XF-f8Mvg1UOynofOMHMHqZ62zlwJzTYVKJwhKkcd8.png" alt="image"></p><p>这里的path如果不填写，则默认就是挂载阿里云盘的顶级目录。如果填写<code>/webdav_test</code> ,则是挂载我们刚刚创建的<code>webdav_test</code> 目录。点击OK后，如果挂成功，我的电脑里就会发现已经挂载了一块网盘，打开就可以看到阿里云盘的里保存的文件。</p><p><img src="/assets/blogImg/mount-alicloud-disks-locally-through-webdav-protocol/DH7w1zxR9VKA3xp63ig5a8BMVaXrI4reVJIGPaJ838U.png" alt="image"></p><p>这样就可以不使用阿里云盘的客户端，直接对云盘里的文件进行操作了，也可以直接使用本地播放器在线播放里面的电影。</p><h3 id="Linux通过Rclone-挂载阿里云盘"><a href="#Linux通过Rclone-挂载阿里云盘" class="headerlink" title="Linux通过Rclone 挂载阿里云盘"></a>Linux通过<code>Rclone</code> 挂载阿里云盘</h3><p>Rclone的步骤比<code>Raidrive</code> 略显复杂，它需要先配置连接信息，然后通过该配置信息再对网盘执行相关操作。</p><h4 id="安装Rclone"><a href="#安装Rclone" class="headerlink" title="安装Rclone"></a>安装Rclone</h4><p>我们直接使用官网的安装脚本进行安装，更多安装方式可以查看 <a href="https://rclone.org/install/" target="_blank" rel="noopener">官网说明</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">https:</span><span class="comment">//rclone.org/install.sh | sudo bash</span></span><br></pre></td></tr></table></figure><h4 id="配置Rclone"><a href="#配置Rclone" class="headerlink" title="配置Rclone"></a>配置Rclone</h4><p>安装完成后，配置一个专门连接<code>webdav-server</code> 的配置，详细步骤如下：</p><p>输入 <code>rclone config</code> ，开始进行配置(注意看注释说明)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">root@guaosi:~<span class="comment"># rclone config</span></span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) <span class="keyword">Delete</span> remote</span><br><span class="line">r) <span class="keyword">Rename</span> remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) <span class="keyword">Set</span> configuration <span class="keyword">password</span></span><br><span class="line">q) Quit config</span><br><span class="line"></span><br><span class="line">e/n/d/r/c/s/q&gt; n <span class="comment"># 创建一个新的配置项，回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">name</span>&gt; aliyunwebdav <span class="comment"># 给新的配置项取个名字，后面使用时都会通过这个名称来区分是使用哪个配置，个人喜好，回车</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="number">39</span> / Uptobox</span><br><span class="line">   \ <span class="string">"uptobox"</span></span><br><span class="line"><span class="number">40</span> / Webdav</span><br><span class="line">   \ <span class="string">"webdav"</span></span><br><span class="line"><span class="number">41</span> / Yandex Disk</span><br><span class="line">   \ <span class="string">"yandex"</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">Storage</span>&gt; <span class="number">40</span> <span class="comment"># 使用webdav(这里是不是40取决于rclone版本，反正是使用webdav就对了)</span></span><br><span class="line"></span><br><span class="line">Enter a <span class="keyword">string</span> value. Press Enter <span class="keyword">for</span> the <span class="keyword">default</span> (<span class="string">""</span>).</span><br><span class="line"><span class="keyword">url</span>&gt; <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.137</span><span class="number">.200</span>:<span class="number">9090</span> <span class="comment"># 填写 webdav server 的地址信息</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"> <span class="number">4</span> / Sharepoint <span class="keyword">with</span> NTLM <span class="keyword">authentication</span>, usually <span class="keyword">self</span>-hosted <span class="keyword">or</span> <span class="keyword">on</span>-premises</span><br><span class="line">   \ <span class="string">"sharepoint-ntlm"</span></span><br><span class="line"> <span class="number">5</span> / Other site/service <span class="keyword">or</span> software</span><br><span class="line">   \ <span class="string">"other"</span></span><br><span class="line">vendor&gt; <span class="number">5</span> <span class="comment"># 没有阿里云盘，选个其他即可</span></span><br><span class="line"></span><br><span class="line">Enter a <span class="keyword">string</span> value. Press Enter <span class="keyword">for</span> the <span class="keyword">default</span> (<span class="string">""</span>).</span><br><span class="line"><span class="keyword">user</span>&gt; <span class="keyword">admin</span> <span class="comment"># 输入连接 webdav server 的账号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Choose</span> an alternative below. Press Enter <span class="keyword">for</span> the <span class="keyword">default</span> (n).</span><br><span class="line">y) Yes <span class="keyword">type</span> <span class="keyword">in</span> my own <span class="keyword">password</span></span><br><span class="line">g) Generate random <span class="keyword">password</span></span><br><span class="line">n) <span class="keyword">No</span> leave this optional <span class="keyword">password</span> blank (<span class="keyword">default</span>)</span><br><span class="line">y/g/n&gt; y <span class="comment"># 使用设定的密码</span></span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">password</span>:</span><br><span class="line"><span class="keyword">password</span>: <span class="keyword">admin</span> <span class="comment"># 输入连接 webdav server 的密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Confirm</span> the <span class="keyword">password</span>:</span><br><span class="line"><span class="keyword">password</span>: <span class="keyword">admin</span> <span class="comment"># 再一次确认输入连接 webdav server 的密码</span></span><br><span class="line"></span><br><span class="line">Enter a <span class="keyword">string</span> value. Press Enter <span class="keyword">for</span> the <span class="keyword">default</span> (<span class="string">""</span>).</span><br><span class="line">bearer_token&gt; <span class="comment"># 没有，直接回车</span></span><br><span class="line"></span><br><span class="line">Edit <span class="keyword">advanced</span> config?</span><br><span class="line">y) Yes</span><br><span class="line">n) <span class="keyword">No</span> (<span class="keyword">default</span>)</span><br><span class="line">y/n&gt; <span class="comment"># 以上这些信息够了。直接回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line">[aliyunwebdav]</span><br><span class="line"><span class="keyword">type</span> = webdav</span><br><span class="line"><span class="keyword">url</span> = <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.137</span><span class="number">.200</span>:<span class="number">9090</span></span><br><span class="line">vendor = other</span><br><span class="line"><span class="keyword">user</span> = <span class="keyword">admin</span></span><br><span class="line">pass = *** ENCRYPTED ***</span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line">y) Yes this <span class="keyword">is</span> OK (<span class="keyword">default</span>)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) <span class="keyword">Delete</span> this remote</span><br><span class="line">y/e/d&gt; <span class="comment"># 确认无误，直接回车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Current</span> remotes:</span><br><span class="line"></span><br><span class="line"><span class="keyword">Name</span>                 <span class="keyword">Type</span></span><br><span class="line">====                 ====</span><br><span class="line">aliyunwebdav         webdav</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) <span class="keyword">New</span> remote</span><br><span class="line">d) <span class="keyword">Delete</span> remote</span><br><span class="line">r) <span class="keyword">Rename</span> remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) <span class="keyword">Set</span> configuration <span class="keyword">password</span></span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q <span class="comment"># 配置完成，退出</span></span><br></pre></td></tr></table></figure><p>输入命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone <span class="keyword">ls</span> aliyunwebda<span class="variable">v:</span>/</span><br></pre></td></tr></table></figure><p>查看是否会列出网盘下的文件列表，会则表示配置无误了。</p><h4 id="Rclone常用命令"><a href="#Rclone常用命令" class="headerlink" title="Rclone常用命令"></a>Rclone常用命令</h4><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将本地的 <span class="regexp">/home/</span><span class="keyword">file</span> 文件上传到阿里云盘的 webdav_test 目录下</span><br><span class="line">rclone <span class="keyword">copy</span> <span class="regexp">/home/</span><span class="keyword">file</span> aliyunwebdav:<span class="regexp">/webdav_test</span></span><br></pre></td></tr></table></figure><h5 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将阿里云盘的 webdav_test 目录加的file文件下载到本地 /home/test/ 目录下</span></span><br><span class="line">rclone <span class="keyword">copy</span><span class="bash"> aliyunwebdav:/webdav_test/file /home/<span class="built_in">test</span>/ <span class="comment">#</span></span></span><br></pre></td></tr></table></figure><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示顶级目录下的所有文件</span></span><br><span class="line"><span class="attribute">rclone</span> ls aliyunwebdav:/</span><br><span class="line"></span><br><span class="line"># 比上面多一个显示上传时间</span><br><span class="line">rclone lsl aliyunwebdav:/ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示文件夹</span></span><br><span class="line">rclone lsd aliyunwebdav:/</span><br></pre></td></tr></table></figure><h4 id="挂载阿里云盘"><a href="#挂载阿里云盘" class="headerlink" title="挂载阿里云盘"></a>挂载阿里云盘</h4><p>上面只是在发送命令来与<code>webdav server</code> 进行交互，如果我们想像在<code>windows</code> 上一样像挂载一块盘进来，可以使用<code>cp</code> ,<code>mv</code> 之类的命令直接进行操作，那应该如何设置呢？</p><p>实际上很简单，我们通过<code>rclone</code>自带命令就可以实现盘的挂载</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录来给阿里云盘挂载</span></span><br><span class="line">mkdir -p <span class="string">/usr/local/webdav_test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载命令(将云盘挂载到本地指定目录)</span></span><br><span class="line">rclone mount aliyunwebdav:<span class="string">/webdav_test</span> <span class="string">/usr/local/webdav_test</span> <span class="params">--cache-dir</span> <span class="string">/tmp</span> <span class="params">--allow-other</span> <span class="params">--vfs-cache-mode</span> writes <span class="params">--allow-non-empty</span></span><br></pre></td></tr></table></figure><p>上面命令会将阿里云盘的<code>webdav_test</code> (也可以挂载顶级目录，也就是 <code>/</code>)目录挂载到本地的 <code>/usr/local/webdav_test</code>  目录下。</p><p>另外，该命令会阻塞命令窗口，所以另外启动一个窗口进入<code>/usr/local/webdav_test</code> 查看是否能看到云盘里的文件。此外，如果我们关闭了先前执行挂载命令的窗口，那么挂载就会自动解挂退出，并且如果我们想开机时自动进行云盘挂载，也需要重新手动跑命令，不够方便。所以，我们可以借助Linux的<code>systemd</code> 将命令服务化来进行管理。</p><h4 id="服务化"><a href="#服务化" class="headerlink" title="服务化"></a>服务化</h4><p>创建system的service</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>rclone.service</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Rclone</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">ExecStart</span>=rclone mount aliyunwebdav:/webdav_test /usr/local/webdav_test --cache-dir /tmp --allow-other --vfs-cache-mode writes --allow-non-empty</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-abort</span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=default.target</span><br></pre></td></tr></table></figure><p>保存退出后，启动服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> rclone</span><br></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> rclone</span><br></pre></td></tr></table></figure><p>其它操作命令</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 重启</span></span><br><span class="line">systemctl restart rclone</span><br><span class="line"></span><br><span class="line"><span class="meta"># 停止</span></span><br><span class="line">systemctl stop rclone</span><br><span class="line"></span><br><span class="line"><span class="meta"># 状态</span></span><br><span class="line">systemctl status rclone</span><br></pre></td></tr></table></figure><p>好啦，这样就可以安心的跟小姐姐们玩耍啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是webdav协议&quot;&gt;&lt;a href=&quot;#什么是webdav协议&quot; class=&quot;headerlink&quot; title=&quot;什么是webdav协议&quot;&gt;&lt;/a&gt;什么是webdav协议&lt;/h1&gt;&lt;p&gt;WebDAV 基于 HTTP 协议的通信协议，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。因为基于HTTP，在广域网上共享文件有天然的优势，移动端文件管理APP也大多支持WebDAV协议。使用HTTPS还能保安全性。Apache和Nginx支持WebDAV，可作为WebDAV文件共享服务器软件。也可以使用专门的WebDAV软件部署。&lt;/p&gt;
&lt;p&gt;可以认为通过webdav，我们可以直接将云盘挂载到本地，不需要使用服务商提供的专门软件就能进行管理使用。目前国内支持的最好的就是坚果云了，自身就支持webdav，但是坚果云免费的限制流量。阿里云盘明面上不支持，但是通过搭建 &lt;a href=&quot;https://github.com/zxbu/webdav-aliyundriver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webdav-aliyundriver&lt;/a&gt; 项目，来代理转发请求，实现阿里云盘支持webdav协议。&lt;/p&gt;
&lt;h1 id=&quot;流程梳理&quot;&gt;&lt;a href=&quot;#流程梳理&quot; class=&quot;headerlink&quot; title=&quot;流程梳理&quot;&gt;&lt;/a&gt;流程梳理&lt;/h1&gt;&lt;p&gt;本篇将会讲解如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭建&lt;code&gt;webdav-aliyundriver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;windows通过&lt;code&gt;Raidrive&lt;/code&gt;挂载阿里云盘&lt;/li&gt;
&lt;li&gt;Linux通过&lt;code&gt;Rclone&lt;/code&gt; 挂载阿里云盘&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="运维" scheme="https://www.guaosi.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 1.22集群安装教程(基于Ubuntu)</title>
    <link href="https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/"/>
    <id>https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/</id>
    <published>2021-12-05T13:43:59.000Z</published>
    <updated>2021-12-05T15:39:39.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&#160; &#160; &#160; &#160; 之前有写过 <a href="https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/">Kubernetes 18.04集群安装教程(基于Centos7)</a> 。现在补上基于<code>Ubuntu20</code>的环境进行安装。由于<code>Ubuntu</code>使用的<code>Linux</code>内核一直都是最新的，并且因为工作原因<code>k8s</code>安装得多了，有了很多简单设置的方式，所以<code>K8s</code>的目前安装过程就会比<code>Centos</code>的简单了很多</p><a id="more"></a> <h1 id="教程环境"><a href="#教程环境" class="headerlink" title="教程环境"></a>教程环境</h1><p>操作系统: <code>Ubuntu20</code> (如果还不会安装Ubuntu20的话可以看<a href="https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/">这个</a>)</p><p>个人学习使用<code>k8s</code>的话一般推荐2种方案, 一种是<code>all in one</code>，另一种就是1个<code>master</code>跟1个<code>node</code>。(自己玩没必要搞多个master跟多个node，安装过程都是重复性的工作)</p><p><code>all in one</code>的本质就是一个<code>master</code>，然后将<code>master</code>上的污点删除，允许pod可以调度到<code>master</code>。而<code>node</code>跟<code>master</code>安装过程也相差无几，只差在<code>master</code>需要执行<code>k8s</code>的初始化操作，而<code>node</code>只需要加入<code>k8s</code>的集群即可。本文两种方式都会讲解到。</p><h2 id="all-in-one-推荐配置"><a href="#all-in-one-推荐配置" class="headerlink" title="all in one 推荐配置"></a>all in one 推荐配置</h2><table><thead><tr><th style="text-align:center"><strong>节点</strong></th><th style="text-align:center"><strong>操作系统</strong></th><th style="text-align:center"><strong>cpu</strong></th><th style="text-align:center"><strong>内存</strong></th><th style="text-align:center"><strong>磁盘</strong></th><th style="text-align:center"><strong>IP</strong></th></tr></thead><tbody><tr><td style="text-align:center">k8s-master</td><td style="text-align:center">Ubuntu20</td><td style="text-align:center">2核2线程</td><td style="text-align:center">8G</td><td style="text-align:center">60G</td><td style="text-align:center">192.168.137.200</td></tr></tbody></table><h2 id="master-and-node-推荐配置"><a href="#master-and-node-推荐配置" class="headerlink" title="master and node 推荐配置"></a>master and node 推荐配置</h2><table><thead><tr><th style="text-align:center"><strong>节点</strong></th><th style="text-align:center"><strong>操作系统</strong></th><th style="text-align:center"><strong>cpu</strong></th><th style="text-align:center"><strong>内存</strong></th><th style="text-align:center"><strong>磁盘</strong></th><th style="text-align:center"><strong>IP</strong></th></tr></thead><tbody><tr><td style="text-align:center">k8s-master</td><td style="text-align:center">Ubuntu20</td><td style="text-align:center">2核1线程</td><td style="text-align:center">4G</td><td style="text-align:center">30G</td><td style="text-align:center">192.168.137.200</td></tr><tr><td style="text-align:center">k8s-node</td><td style="text-align:center">Ubuntu20</td><td style="text-align:center">2核1线程</td><td style="text-align:center">4G</td><td style="text-align:center">30G</td><td style="text-align:center">192.168.137.210</td></tr></tbody></table><h1 id="安装前的准备工作"><a href="#安装前的准备工作" class="headerlink" title="安装前的准备工作"></a>安装前的准备工作</h1><p>以下操作到<code>安装Kubernetes</code>前，<code>master</code>跟<code>node</code>都要执行。如果是<code>all in one</code>，那就只要<code>master</code>执行即可。</p><h2 id="设置系统主机名"><a href="#设置系统主机名" class="headerlink" title="设置系统主机名"></a>设置系统主机名</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master上执行</span></span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">k8s-master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">node01上</span>执行</span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">k8s-node</span></span><br></pre></td></tr></table></figure><h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><p>网络IP的配置地址文件为<code>/etc/netplan/50-cloud-init.yaml</code></p><p><code>master</code>修改为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">    ethernets:</span></span><br><span class="line"><span class="attr">        ens33:</span></span><br><span class="line"><span class="attr">            dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.137.200/24]</span></span><br><span class="line"><span class="attr">            optional:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            gateway4:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.2</span></span><br><span class="line"><span class="attr">            nameservers:</span></span><br><span class="line"><span class="attr">                    addresses:</span> <span class="string">[223.5.5.5,223.6.6.6]</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><code>node</code>修改为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">    ethernets:</span></span><br><span class="line"><span class="attr">        ens33:</span></span><br><span class="line"><span class="attr">            dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.137.210/24]</span></span><br><span class="line"><span class="attr">            optional:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            gateway4:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.2</span></span><br><span class="line"><span class="attr">            nameservers:</span></span><br><span class="line"><span class="attr">                    addresses:</span> <span class="string">[223.5.5.5,223.6.6.6]</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>完成后应用配置<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netplan <span class="built_in">apply</span></span><br></pre></td></tr></table></figure></p><p>查看修改是否生效<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ip addr</span></span><br></pre></td></tr></table></figure></p><h2 id="修改Hosts"><a href="#修改Hosts" class="headerlink" title="修改Hosts"></a>修改Hosts</h2><p><code>hosts</code> 所在位置为 <code>/etc/hosts</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">1.200</span> k8s-<span class="literal">master</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.210</span> k8s-<span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>卸载旧版本(如果有的话)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><p>更新索引</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>安装 <code>apt</code> 依赖包，用于通过<code>HTTPS</code>来获取仓库</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get install <span class="string">\</span></span><br><span class="line"> apt-transport-https <span class="string">\</span></span><br><span class="line"> ca-certificates <span class="string">\</span></span><br><span class="line"> curl <span class="string">\</span></span><br><span class="line"> gnupg-agent <span class="string">\</span></span><br><span class="line"> ipvsadm <span class="string">\</span></span><br><span class="line"> software-properties-common</span><br></pre></td></tr></table></figure><p>添加 <code>Docker</code> 的官方 <code>GPG</code> 密钥</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/ubuntu/gpg | sudo apt-key <span class="built_in">add</span> -</span><br></pre></td></tr></table></figure><p>设置<code>docker</code>稳定版源仓库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span><span class="bash">-apt-repository \</span></span><br><span class="line"><span class="bash"> <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span></span><br><span class="line"><span class="bash"> bionic \</span></span><br><span class="line"><span class="bash"> stable<span class="string">"</span></span></span><br></pre></td></tr></table></figure><p>更新 <code>apt</code> 包索引</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>安装 <code>Docker Engine-Community</code>和<code>containerd</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure><p>查看docker版本是否安装成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">version</span></span><br></pre></td></tr></table></figure><h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><p>使用的是<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云的免费加速</a>进行配置，根据文档内容进行修改</p><h3 id="修改cgroup驱动"><a href="#修改cgroup驱动" class="headerlink" title="修改cgroup驱动"></a>修改cgroup驱动</h3><p>修改<code>daemon.json</code>文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>docker<span class="regexp">/daemon.json</span></span><br></pre></td></tr></table></figure><p>加入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启docker</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h1 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h1><p>一样的<code>master</code>跟<code>node</code>都要执行，如果只需要<code>master</code>执行的，标题会有提示。如果是<code>all in one</code>，那就只要<code>master</code>执行即可。</p><h2 id="节点关闭交换区"><a href="#节点关闭交换区" class="headerlink" title="节点关闭交换区"></a>节点关闭交换区</h2><p>暂时禁止：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">swapoff -a</span></span><br></pre></td></tr></table></figure><p>永久禁止：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>fstab <span class="comment">#注释掉swap一行</span></span><br></pre></td></tr></table></figure><h2 id="开启支持转发"><a href="#开启支持转发" class="headerlink" title="开启支持转发"></a>开启支持转发</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee /etc/sysctl.d/k8s.conf</span><br><span class="line"><span class="built_in">net</span>.bridge.bridge-nf-<span class="keyword">call</span>-ip6tables = <span class="number">1</span></span><br><span class="line"><span class="built_in">net</span>.bridge.bridge-nf-<span class="keyword">call</span>-iptables = <span class="number">1</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>生效</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl <span class="comment">--system</span></span><br></pre></td></tr></table></figure><h2 id="安装kubeadm-kubeadm-kubectl"><a href="#安装kubeadm-kubeadm-kubectl" class="headerlink" title="安装kubeadm kubeadm kubectl"></a>安装kubeadm kubeadm kubectl</h2><p>添加 <code>kubernetes</code> 的阿里云 <code>GPG</code> 密钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/kubernetes/</span>apt<span class="regexp">/doc/</span>apt-key.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>设置<code>kubernetes</code>阿里云的源仓库</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/apt/sources<span class="selector-class">.list</span><span class="selector-class">.d</span>/kubernetes<span class="selector-class">.list</span> &lt;&lt;EOF </span><br><span class="line">deb https:<span class="comment">//mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>更新 <code>apt</code> 包索引</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>安装kubeadm kubeadm kubectl</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>阻止 <code>apt</code> 自动更新</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="selector-tag">mark</span> hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>设置开机启动以及现在立即启动 <code>kubelet</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">kubelet</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">kubelet</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><h2 id="初始化节点-只要操作master节点"><a href="#初始化节点-只要操作master节点" class="headerlink" title="初始化节点(只要操作master节点)"></a>初始化节点(只要操作master节点)</h2><p>导出<code>kubeadm</code>的默认配置文件到本地</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm<span class="built_in"> config </span><span class="builtin-name">print</span> init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>修改<code>kubeadm-config.yaml</code>，需要修改跟新增的项如下所示(看注释项)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="attr">- groups:</span></span><br><span class="line"><span class="attr">  - system:</span><span class="attr">bootstrappers:kubeadm:default-node-token</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line"><span class="attr">  ttl:</span> <span class="number">24</span><span class="string">h0m0s</span></span><br><span class="line"><span class="attr">  usages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">signing</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.200</span>  <span class="comment"># 修改为本机ip地址</span></span><br><span class="line"><span class="attr">  bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line"><span class="attr">  criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line"><span class="attr">  imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">k8s-master</span> <span class="comment"># 设置该节点在k8s集群中node的名称 </span></span><br><span class="line"><span class="attr">  taints:</span> <span class="literal">null</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line"><span class="attr">  timeoutForControlPlane:</span> <span class="number">4</span><span class="string">m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">dns:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line"><span class="attr">  local:</span></span><br><span class="line"><span class="attr">    dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span> <span class="comment"># 修改为国内阿里云镜像地址，否则因为墙的原因无法下载</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="number">1.22</span><span class="number">.0</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">  serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span> <span class="comment"># 新增 设定service的子网范围</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span> <span class="comment"># 新增 设定pod的子网范围</span></span><br><span class="line"><span class="attr">scheduler:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kubeProxy:</span> <span class="comment"># 新增 变更 kube-proxy 转发方式为ipvs</span></span><br><span class="line"><span class="attr">  config:</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure><h2 id="下载所需镜像-node节点也需要下载进行"><a href="#下载所需镜像-node节点也需要下载进行" class="headerlink" title="下载所需镜像(node节点也需要下载进行)"></a>下载所需镜像(node节点也需要下载进行)</h2><p><code>node</code> 可以直接通过<code>scp</code>命令拷贝 <code>master</code> 的<code>kubeadm-config.yaml</code> 过来使用，也可以通过 <code>kubeadm config print init-defaults &gt; kubeadm-config.yaml</code> 重新导出一份到本地修改，看个人喜好</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm<span class="built_in"> config </span>images pull --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><h2 id="初始化集群-只要操作master节点"><a href="#初始化集群-只要操作master节点" class="headerlink" title="初始化集群(只要操作master节点)"></a>初始化集群(只要操作master节点)</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --<span class="built_in">config</span>=kubeadm-<span class="built_in">config</span>.yaml | tee kubeadm-init.log</span><br></pre></td></tr></table></figure><p>完毕后，控制台输出的日志会告诉我们继续执行什么指令以及<code>node</code>节点如何加入</p><p>执行日志中的指令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="node节点加入k8s集群"><a href="#node节点加入k8s集群" class="headerlink" title="node节点加入k8s集群"></a>node节点加入k8s集群</h2><p>切换到<code>node</code>，执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">master</span>初始化完成后给的加入命令</span><br><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 192<span class="selector-class">.168</span><span class="selector-class">.137</span><span class="selector-class">.200</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">xxxx</span></span><br></pre></td></tr></table></figure><h2 id="整理文件"><a href="#整理文件" class="headerlink" title="整理文件"></a>整理文件</h2><p>因为初始化的日志很有用，里面包含了子节点如何加入<code>master</code>的，所以我们把这些文件保存起来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/usr/</span>local<span class="regexp">/install-k8s/</span>core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将重要文件移入core </span></span><br><span class="line">mv kubeadm-init.log kubeadm-config.yaml <span class="regexp">/usr/</span>local<span class="regexp">/install-k8s/</span>core</span><br></pre></td></tr></table></figure><h2 id="部署网络-只要操作master节点"><a href="#部署网络-只要操作master节点" class="headerlink" title="部署网络(只要操作master节点)"></a>部署网络(只要操作master节点)</h2><p>现在我们执行<code>kubectl</code>相关指令已经会有了正常响应，但是此时节点处于<code>NotReady</code>的状态，这是因为我们还没有为<code>Kubernetes</code>指定它的网络模式。我们使用<code>flannel</code>来作为它的网络模式，这样就可以让不同节点上的容器跨主机通信。<code>Overlay</code>网络这块以后会再出文章讲解，目前先进行部署。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p /usr/local/<span class="keyword">install</span>-k8s/<span class="keyword">plugin</span>/flannel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入flannel文件夹</span></span><br><span class="line">cd /usr/<span class="keyword">local</span>/<span class="keyword">install</span>-k8s/<span class="keyword">plugin</span>/flannel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载flannel配置文件</span></span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/<span class="keyword">master</span>/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装flannel</span></span><br><span class="line">kubectl <span class="keyword">create</span> -f kube-flannel.yml</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看命名空间为kube-system的pod情况</span></span><br><span class="line">kubectl <span class="builtin-name">get</span> pod -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看更详细的信息</span></span><br><span class="line">kubectl <span class="builtin-name">get</span> pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看k8s所有节点连接情况</span></span><br><span class="line">kubectl <span class="builtin-name">get</span> node</span><br></pre></td></tr></table></figure><h2 id="去除master污点"><a href="#去除master污点" class="headerlink" title="去除master污点"></a>去除master污点</h2><p>如果你是<code>all in one</code>，或者你想master也参与pod的调度，那么可以执行如下指令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除污点，允许调度</span></span><br><span class="line">kubectl taint <span class="keyword">node</span> <span class="title">k8s-master</span> <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="literal">master</span>-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加污点，不允许调度</span></span><br><span class="line">kubectl taint <span class="keyword">node</span> <span class="title">k8s-master</span> <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="attr">master=</span><span class="string">""</span></span><br></pre></td></tr></table></figure><h1 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h1><h2 id="获取资源清单"><a href="#获取资源清单" class="headerlink" title="获取资源清单"></a>获取资源清单</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kubernetes/</span>dashboard<span class="regexp">/v2.0.0-beta4/</span>aio<span class="regexp">/deploy/</span>recommended.yaml</span><br></pre></td></tr></table></figure><h2 id="添加nodePort"><a href="#添加nodePort" class="headerlink" title="添加nodePort"></a>添加nodePort</h2><p>修改 <code>recommended.yaml</code> 里的 <code>Service</code>，新增一个<code>nodePort</code>方便我们外部进行访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span>      <span class="comment">#新增type类型为NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30002</span>   <span class="comment">#设置nodeport 端口</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="部署Dashboard"><a href="#部署Dashboard" class="headerlink" title="部署Dashboard"></a>部署Dashboard</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f recommended.yaml</span><br></pre></td></tr></table></figure><h2 id="创建管理员账户登录dashboard"><a href="#创建管理员账户登录dashboard" class="headerlink" title="创建管理员账户登录dashboard"></a>创建管理员账户登录dashboard</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在default命名空间下创建admin账户</span></span><br><span class="line">kubectl create serviceaccount admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定到Dashboard所在的命名空间</span></span><br><span class="line">kubectl create clusterrolebinding dash-admin <span class="attribute">--clusterrole</span>=cluster-admin <span class="attribute">--serviceaccount</span>=default:admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建密钥</span></span><br><span class="line"><span class="attribute">secret</span>=$(kubectl <span class="builtin-name">get</span> sa admin -o <span class="attribute">jsonpath</span>=<span class="string">'&#123;.secrets[0].name&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得token</span></span><br><span class="line">kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span><span class="variable">$secret</span> -o <span class="attribute">go-template</span>=<span class="string">'&#123;&#123; .data.token | base64decode &#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>然后通过 <code>http://master的ip:30002</code> 进行访问。输入之前获取的token，即可正常进入。(这里无论<code>dashboard</code>在<code>master</code>还是<code>node</code>上都可以访问到，因为有<code>kube-proxy</code>会帮我们进行转发)</p><h1 id="k8s节点重置"><a href="#k8s节点重置" class="headerlink" title="k8s节点重置"></a>k8s节点重置</h1><p>如果过程<code>kubeadm init</code>中失败了，不让再一次<code>kubeadm init</code>，那么可以这样做</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 重置k8s集群</span></span><br><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除kube信息</span></span><br><span class="line">rm -rf /root/.kube/</span><br></pre></td></tr></table></figure><p>然后再重新执行<code>kubeadm init</code>进行初始化</p><h2 id="从阿里云下载私有镜像"><a href="#从阿里云下载私有镜像" class="headerlink" title="从阿里云下载私有镜像"></a>从阿里云下载私有镜像</h2><h3 id="登陆认证阿里云"><a href="#登陆认证阿里云" class="headerlink" title="登陆认证阿里云"></a>登陆认证阿里云</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=xxx registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><blockquote><p>xxx是你的阿里云登录名，例如我的是 <a href="mailto:guaosi@vip.qq.com" target="_blank" rel="noopener">guaosi@vip.qq.com</a></p></blockquote><h3 id="在集群中创建保存授权令牌的-Secret"><a href="#在集群中创建保存授权令牌的-Secret" class="headerlink" title="在集群中创建保存授权令牌的 Secret"></a>在集群中创建保存授权令牌的 Secret</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Secret，命名为 regcred：</span></span><br><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry regcred <span class="attribute">--docker-server</span>=&lt;your-registry-server&gt; <span class="attribute">--docker-username</span>=&lt;your-name&gt; <span class="attribute">--docker-password</span>=&lt;your-pword&gt; <span class="attribute">--docker-email</span>=&lt;your-email&gt; -n &lt;your-namespace&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;your-registry-server&gt; 是你的私有 Docker 仓库全限定域名（FQDN）</span></span><br><span class="line"><span class="comment"># &lt;your-name&gt; 是你的 Docker 用户名。</span></span><br><span class="line"><span class="comment"># &lt;your-pword&gt; 是你的 Docker 密码。</span></span><br><span class="line"><span class="comment"># &lt;your-email&gt; 是你的 Docker 邮箱。</span></span><br><span class="line"><span class="comment"># &lt;your-namespace&gt; 创建后的该密钥属于k8s集群中哪一个namespace的</span></span><br></pre></td></tr></table></figure><h3 id="在pod清单中加入使用密钥"><a href="#在pod清单中加入使用密钥" class="headerlink" title="在pod清单中加入使用密钥"></a>在pod清单中加入使用密钥</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Pod</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">namespace:</span> <span class="params">&lt;your-namespace&gt;</span></span><br><span class="line"><span class="symbol">  name:</span> private-reg</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  containers:</span></span><br><span class="line">  - name: private-reg-container</span><br><span class="line"><span class="symbol">    image:</span> <span class="params">&lt;your-private-image&gt;</span></span><br><span class="line"><span class="symbol">  imagePullSecrets:</span> <span class="meta"># 使用指定的密钥</span></span><br><span class="line">  - name: regcred <span class="meta"># 与上面创建的secret名称相同</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 之前有写过 &lt;a href=&quot;https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/&quot;&gt;Kubernetes 18.04集群安装教程(基于Centos7)&lt;/a&gt; 。现在补上基于&lt;code&gt;Ubuntu20&lt;/code&gt;的环境进行安装。由于&lt;code&gt;Ubuntu&lt;/code&gt;使用的&lt;code&gt;Linux&lt;/code&gt;内核一直都是最新的，并且因为工作原因&lt;code&gt;k8s&lt;/code&gt;安装得多了，有了很多简单设置的方式，所以&lt;code&gt;K8s&lt;/code&gt;的目前安装过程就会比&lt;code&gt;Centos&lt;/code&gt;的简单了很多&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="运维" scheme="https://www.guaosi.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Kubernetes" scheme="https://www.guaosi.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>安装 ubuntu-server 20.04 并进行初始化配置</title>
    <link href="https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/"/>
    <id>https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/</id>
    <published>2021-12-05T08:43:59.000Z</published>
    <updated>2021-12-05T13:40:25.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>&#160; &#160; &#160; &#160;国外以及云原生的环境下，用<code>ubuntu</code>的比较多，而且目前<code>centos</code>也处于商业状态，所以掌握以及使用<code>ubuntu</code>作为服务环境还是很有必要的。</p><a id="more"></a> <h1 id="教程环境"><a href="#教程环境" class="headerlink" title="教程环境"></a>教程环境</h1><p>操作系统: <code>win10</code><br>所需文件: </p><ul><li><p>VMware16虚拟机</p><blockquote><p>下载地址： <a href="https://cloud.189.cn/web/share?code=ZjUF3yMJvaIr（访问码：uo2y）" target="_blank" rel="noopener">https://cloud.189.cn/web/share?code=ZjUF3yMJvaIr（访问码：uo2y）</a></p></blockquote></li><li><p>Ubuntu-20.04.2-live-server-amd64镜像文件</p><blockquote><p>下载地址： <a href="https://cloud.189.cn/web/share?code=7bqEneaIrQJ3（访问码：p0nm）" target="_blank" rel="noopener">https://cloud.189.cn/web/share?code=7bqEneaIrQJ3（访问码：p0nm）</a></p></blockquote></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="VMware安装"><a href="#VMware安装" class="headerlink" title="VMware安装"></a>VMware安装</h2><p>将给的VMware16下载好后打开，一路下一步，最后会自动填写许可证，完成退出重启电脑即可。</p><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>基于正常使用的话，配置一个<code>2核4G内存60G磁盘容量</code>的虚拟机即可。当然，这个看个人需求。以下是操作过程：</p><ol><li>打开VMware-文件</li><li>新建虚拟机</li><li>选择<code>自定义(高级)</code>后点击下一步</li><li>硬件兼容性选择<code>16.2</code>后点击下一步</li><li>选择<code>稍后安装操作系统</code>后点击下一步</li><li>选择<code>Linux</code>后版本选择<code>Ubuntu64</code>下一步</li><li><code>位置</code>可以自定义选择喜欢的，然后点下一步</li><li>处理器数量选择<code>2</code>后下一步</li><li>内存设置为 <code>4096</code>后下一步</li><li>网络选择<code>使用网络地址转换(NAT)</code>后下一步</li><li><code>SCSI</code>控制器选择<code>LSI Logic</code>后下一步</li><li>选择<code>SCSI</code>后下一步</li><li>选择<code>创建新虚拟磁盘</code>后下一步</li><li>磁盘大小给<code>60</code>,选择<code>将虚拟磁盘存储为单个文件</code>后下一步</li><li>磁盘文件路径自定义选择喜欢的，然后下一步</li><li>完成</li><li>点击刚刚创建的虚拟机，点击<code>编辑虚拟机设置</code></li><li>点击<code>CD/DVD(SATA)</code>，选择 <code>使用ISO映像文件</code>，点击 <code>浏览</code> 找到下载好的 <code>Ubuntu-20.04.2-live-server-amd64.iso</code> 镜像文件后点击确定。</li><li>点击 <code>开启此虚拟机</code> 开始进行<code>Ubuntu</code>的安装<h1 id="安装ubuntu"><a href="#安装ubuntu" class="headerlink" title="安装ubuntu"></a>安装ubuntu</h1></li></ol><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li>选择 <code>English</code> 回车</li><li>选择 <code>continue without updating</code> 回车</li><li>选择 <code>Done</code> 回车</li><li>先允许自动dhcp获取ip地址，选择<code>Done</code>回车</li><li>不需要<code>proxy</code>代理，选择<code>Done</code>回车</li><li>修改源地址为阿里云 <code>http://mirrors.aliyun.com/ubuntu/</code> ，方便我们进行以及<code>apt</code>安装或安装软件，修改完毕后选择<code>Done</code>回车</li><li>磁盘没什么要修改的，选择<code>Done</code>回车</li><li>文件系统之类也没什么要改的，直接选择<code>Done</code>回车，然后选择<code>continue</code>回车</li><li>输入想设置的名称，主机host名称，登陆用的账号跟密码后选择<code>Done</code>回车</li><li>勾选 <code>Install OpenSSH server</code> 后选择<code>Done</code>回车</li><li>不需要安装任何软件，直接选择<code>Done</code>回车</li><li>然后等待安装过程结束，因为我们改了源为阿里云的，安装跟更新过程还是挺快的，根据网速而定，可以等到所有都安装以及更新完毕后，选择<code>Reboot Now</code>后回车，等待系统重启<h2 id="安装完成后的配置"><a href="#安装完成后的配置" class="headerlink" title="安装完成后的配置"></a>安装完成后的配置</h2><h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3>使用预先设置的账号密码登陆后，输入</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo passwd root</span></span><br></pre></td></tr></table></figure><h3 id="ssh允许root登陆"><a href="#ssh允许root登陆" class="headerlink" title="ssh允许root登陆"></a>ssh允许root登陆</h3><p>修改sshd的配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>ssh<span class="regexp">/sshd_config</span></span><br></pre></td></tr></table></figure><p>搜索 <code>PermitRootLogin</code> ，将 <code>#PermitRootLogin prohibit-password</code> 修改为 <code>PermitRootLogin yes</code> 保存退出</p><p>重启ssh，使配置生效</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>ssh restart</span><br></pre></td></tr></table></figure><p>然后就可以直接用<code>root</code>账号来进行<code>ssh</code>登陆了</p><h3 id="设置静态ip地址"><a href="#设置静态ip地址" class="headerlink" title="设置静态ip地址"></a>设置静态ip地址</h3><p>系统安装成功网络IP的配置地址文件为<code>/etc/netplan/50-cloud-init.yaml</code>，可以看一下里面的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">  ethernets:</span></span><br><span class="line"><span class="attr">    ens33:</span></span><br><span class="line"><span class="attr">      dhcp4:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>我们将dhcp获取ip方式修改为手动设置静态ip(做这步前请先确认目前ubuntu自身的ip信息，不要改成其他网段跟网关了，否则无法通信)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">    ethernets:</span></span><br><span class="line"><span class="attr">        ens33:</span></span><br><span class="line"><span class="attr">            dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.137.220/24]</span></span><br><span class="line"><span class="attr">            optional:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            gateway4:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.2</span> <span class="comment"># 注意网关ip是 .2 而不是 .1</span></span><br><span class="line"><span class="attr">            nameservers:</span></span><br><span class="line"><span class="attr">                    addresses:</span> <span class="string">[223.5.5.5,223.6.6.6]</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>完成后应用配置<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netplan <span class="built_in">apply</span></span><br></pre></td></tr></table></figure></p><p>查看修改是否生效<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ip addr</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;国外以及云原生的环境下，用&lt;code&gt;ubuntu&lt;/code&gt;的比较多，而且目前&lt;code&gt;centos&lt;/code&gt;也处于商业状态，所以掌握以及使用&lt;code&gt;ubuntu&lt;/code&gt;作为服务环境还是很有必要的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-4.3 Jenkins构建部署Kubernetes</title>
    <link href="https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes/"/>
    <id>https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes/</id>
    <published>2020-07-15T07:38:44.000Z</published>
    <updated>2021-12-05T08:13:24.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建任务"><a href="#构建任务" class="headerlink" title="构建任务"></a>构建任务</h1><h2 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h2><p>当我们推送代码到<code>Gitlab</code>时，<code>Gitlab</code>会主动地通知<code>Jenkins</code>对应的任务，它会通过设置的<code>源码管理</code>去拉取<code>Gitlab</code>上对应地址的代码，然后执行我们预先设置好的构建的脚本(脚本是我们在之前做的构建镜像以及推送到阿里云)。接着再通过我们上面<code>Publish over SSH</code>配置好的信息登陆到<code>Kubernetes</code>的部署节点，最后执行我们后面将会放置在上面的<code>部署脚本</code>进行部署，更新<code>pod</code>。</p><a id="more"></a><h2 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h2><p>我们进入到部署节点创建我们的部署脚本。<br><code>/root/account/deploy/k8s/k8s-deploy.sh</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale <span class="attribute">--replicas</span>=0 deployment/svc-account -n go-micro &amp;&amp; kubectl scale <span class="attribute">--replicas</span>=3 deployment/svc-account -</span><br></pre></td></tr></table></figure><blockquote><p>想要触发pod更新，需要部署文件的某些指定位置有被修改过才会触发。生产环境中，我们是通过更改镜像的tag也就是版本号镜像更新，比较简单。这个系列中，我们通过缩小增大pod的副本数量，来达到触发更新pod。</p></blockquote><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><ol><li>新建任务<br>点击<code>Jenkins</code>-&gt;新建任务，创建一个<code>Jenkins</code>任务<br><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-create.png" alt="jenkins-job-create"></li><li>General<br>填写项目的<code>Gitlab</code>链接以及勾选<code>丢弃旧的构建</code>。</li></ol><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-build.png" alt="jenkins-job-build"></p><ol start="3"><li>源码管理<br>选择<code>Git</code>选项，填写<code>Repositories</code>信息，并创建<code>Gitlab</code>账号密码凭据。</li></ol><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-git.png" alt="jenkins-job-git"></p><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-auth.png" alt="jenkins-job-auth"></p><ol start="4"><li>构建触发器<br>勾选<code>Build when a change is pushed to GitLab. GitLab webhook URL: http://192.168.1.220:8080/project/go-micro</code></li></ol><p>填入相关信息<br><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-build.png" alt="jenkins-job-build"></p><p>我们拿到上图中，我们可以拿到<code>webhook</code>的<code>通知URL</code>以及<code>密钥</code>，我们回到<code>gitlab</code>的<code>account</code>仓库中进行配置<br><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-webhook.png" alt="jenkins-job-webhook"></p><ol start="5"><li>构建环境</li></ol><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-build-env.png" alt="jenkins-job-webhook"></p><ol start="6"><li>构建<br>以在Jenkins容器为例，构建时当前所在的位置为<code>/var/jenkins_home/workspace/构建任务名</code>。</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd deploy</span><br><span class="line">chmod a+x docker_build<span class="selector-class">.sh</span> docker_push<span class="selector-class">.sh</span> &amp;&amp; ./docker_build<span class="selector-class">.sh</span> &amp;&amp; ./docker_push.sh</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-build2.png" alt="jenkins-job-build2"></p><blockquote><p>执行我们之前就已经写好的构建和推送脚本</p></blockquote><ol start="7"><li>构建后操作</li></ol><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-build-after.png" alt="jenkins-job-build-after"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root/account/deploy/k8s</span></span><br><span class="line">chmod a+x k8s-deploy.sh &amp;&amp; <span class="string">./k8s-deploy.sh</span></span><br></pre></td></tr></table></figure><p>最后保存退出</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>保存之后，我们立即更改<code>account</code>中部分代码，比如打印输出的字符串进行修改。然后推送到<code>Gitlab</code>仓库，先观察<code>jenkins</code>任务中的<code>控制台输出</code>是否返回<code>SUCCESS</code>。再观察此时请求后的<code>标准输出</code>是否已经发生了变化，来验证我们重新整个<code>CI/CD</code>流程是否成功~</p><p><img src="/assets/blogImg/go-micro-service-jenkins-deploy-kubernetes/jenkins-job-success.png" alt="jenkins-job-success"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建任务&quot;&gt;&lt;a href=&quot;#构建任务&quot; class=&quot;headerlink&quot; title=&quot;构建任务&quot;&gt;&lt;/a&gt;构建任务&lt;/h1&gt;&lt;h2 id=&quot;流程梳理&quot;&gt;&lt;a href=&quot;#流程梳理&quot; class=&quot;headerlink&quot; title=&quot;流程梳理&quot;&gt;&lt;/a&gt;流程梳理&lt;/h2&gt;&lt;p&gt;当我们推送代码到&lt;code&gt;Gitlab&lt;/code&gt;时，&lt;code&gt;Gitlab&lt;/code&gt;会主动地通知&lt;code&gt;Jenkins&lt;/code&gt;对应的任务，它会通过设置的&lt;code&gt;源码管理&lt;/code&gt;去拉取&lt;code&gt;Gitlab&lt;/code&gt;上对应地址的代码，然后执行我们预先设置好的构建的脚本(脚本是我们在之前做的构建镜像以及推送到阿里云)。接着再通过我们上面&lt;code&gt;Publish over SSH&lt;/code&gt;配置好的信息登陆到&lt;code&gt;Kubernetes&lt;/code&gt;的部署节点，最后执行我们后面将会放置在上面的&lt;code&gt;部署脚本&lt;/code&gt;进行部署，更新&lt;code&gt;pod&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-4.2 Jenkins的搭建、插件的安装与配置</title>
    <link href="https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting/"/>
    <id>https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting/</id>
    <published>2020-07-12T09:55:21.000Z</published>
    <updated>2021-12-05T08:13:24.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本系列CI-CD-流程图"><a href="#本系列CI-CD-流程图" class="headerlink" title="本系列CI/CD 流程图"></a>本系列CI/CD 流程图</h1><p>我们先来回顾一下本系列的<code>CI/CD 流程图</code></p><p><img src="/assets/blogImg/go-micro-service-introduce-components-and-framework/ci,cd整体流程.png" alt="ci/cd整体流程"></p><p>所以我们现在就差最后一个<code>Jenkins</code>工具，就可以做我们想要的持续集成，交付，部署的功能了。</p><a id="more"></a><blockquote><p>本文参考<a href="https://juejin.im/post/5eb7d4b4f265da7bf32d43d3" target="_blank" rel="noopener">该文</a>后，验证成功后总结得出。</p></blockquote><h1 id="安装配置Jenkins"><a href="#安装配置Jenkins" class="headerlink" title="安装配置Jenkins"></a>安装配置Jenkins</h1><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -p /usr/local/<span class="class"><span class="keyword">data</span>/jenkins/<span class="keyword">data</span></span></span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>我们继续使用<code>Docker</code>进行安装</p><p><code>jenkins/docker-compose.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  jenkins:</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'jenkins/jenkins:2.242'</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cicd</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'8080:8080'</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'50000:50000'</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/local/data/jenkins/data:/var/jenkins_home</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/bin/docker:/bin/docker</span>  <span class="comment"># linux使用</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  cicd:</span></span><br><span class="line"><span class="attr">    external:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">cicd</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意哦，docker.sock跟docker表示在Jenkins里可以直接使用外部的docker命令了</p></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> jenkins</span><br><span class="line">docker-compose up -<span class="built_in">d</span></span><br></pre></td></tr></table></figure><p>完全启动时间大约3分钟</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="查询gitlab的IP"><a href="#查询gitlab的IP" class="headerlink" title="查询gitlab的IP"></a>查询gitlab的IP</h3><p>我们查询<code>Gitlab</code>在<code>Docker</code>容器里的<code>ip</code>地址<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">inspect</span> gitlab --<span class="keyword">format</span> <span class="string">"&#123;&#123;.NetworkSettings.Networks.cicd.IPAddress&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><h3 id="容器内安装必备软件"><a href="#容器内安装必备软件" class="headerlink" title="容器内安装必备软件"></a>容器内安装必备软件</h3><p>等待3分钟后，我们进入<code>Jenkins</code>容器内<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> jenkins /bin/bash</span><br></pre></td></tr></table></figure></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><h4 id="安装gcc跟vim"><a href="#安装gcc跟vim" class="headerlink" title="安装gcc跟vim"></a>安装gcc跟vim</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">install</span> vim</span><br><span class="line">apt <span class="keyword">install</span> gcc</span><br></pre></td></tr></table></figure><h4 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h4><p>我们在<code>Jenkins</code>容器里做一个跟<code>gitlab</code>的域名映射。(<code>IP</code>是我们上面查询的噢~)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172<span class="selector-class">.21</span><span class="selector-class">.0</span><span class="selector-class">.3</span>  <span class="selector-tag">git</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><h4 id="安装golang"><a href="#安装golang" class="headerlink" title="安装golang"></a>安装golang</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://studygolang.com/dl/golang/go1.14.4.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -zxvf go1.14.4.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加进环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在最后一行添加</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># wq保存退出后source一下</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h4 id="给Jenkins换源"><a href="#给Jenkins换源" class="headerlink" title="给Jenkins换源"></a>给Jenkins换源</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/jenkins_home/updates</span><br><span class="line"></span><br><span class="line">sed -i 's/http:<span class="symbol">\/</span><span class="symbol">\/</span>updates.jenkins-ci.org<span class="symbol">\/</span>download/https:<span class="symbol">\/</span><span class="symbol">\/</span>mirrors.tuna.tsinghua.edu.cn<span class="symbol">\/</span>jenkins/g' default.json &amp;&amp; sed -i 's/http:<span class="symbol">\/</span><span class="symbol">\/</span>www.google.com/https:<span class="symbol">\/</span><span class="symbol">\/</span>www.baidu.com/g' default.json</span><br></pre></td></tr></table></figure><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker restart jenkins</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>等待三分钟后，我们输入<code>http://192.168.1.220:8080</code>。我们将会看到<br><img src="/assets/blogImg/go-micro-service-jenkins-build-and-setting/jenkins-init.png" alt="jenkins-init"><br>我们进入容器中，然后执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/var/</span>jenkins_home<span class="regexp">/secrets/i</span>nitialAdminPassword</span><br></pre></td></tr></table></figure></p><p>将获得到的密码复制后输入。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>我们解锁后，不要跳过，直接将所有插件进行的安装。</p><h3 id="额外插件安装"><a href="#额外插件安装" class="headerlink" title="额外插件安装"></a>额外插件安装</h3><p>等完全安装完毕后进入到主界面。<br>进入<code>Jenkins</code> -&gt; <code>Plugin Manager</code>页面安装以下插件(或者直接进入 <a href="http://localhost:8080/pluginManager/available)：" target="_blank" rel="noopener">http://localhost:8080/pluginManager/available)：</a></p><ul><li>Localization: Chinese (Simplified)</li><li>Publish Over SSH</li><li>Gitlab</li><li>Golang</li></ul><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><h3 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h3><h4 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h4><p>我们进入<code>系统管理</code>-<code>全局工具配置</code>,在<code>Go</code>那一栏选择<code>Go</code>安装，因为我们上面已经在<code>Jenkins</code>容器里安装好go了，所以我们这里配置目录就好.</p><p>配置如下：</p><p><img src="/assets/blogImg/go-micro-service-jenkins-build-and-setting/jenkins-go-setting.png" alt="jenkins-go-setting"></p><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>我们进入<code>系统管理</code>-<code>系统配置</code> 进行大体的配置</p><h4 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h4><h5 id="access-token"><a href="#access-token" class="headerlink" title="access_token"></a>access_token</h5><p>我们使用上一章中在自建<code>Gitlab</code>中创建了仓库并且上传了代码的账户进行登录，然后根据下图获取<code>access_token</code><br><img src="/assets/blogImg/go-micro-service-jenkins-build-and-setting/jenkins-gitlab-access-token.png" alt="jenkins-gitlab-access-token"></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>然后我们回到<code>jenkins</code>的<code>系统配置</code>。<br>到<code>Gitlab</code>栏，勾选上<code>Enable authentication for &#39;/project&#39; end-point</code>，然后点击<code>Credentials</code>旁边的<code>添加</code>-<code>Jenkins</code>。然后按下图步骤添加<br><img src="/assets/blogImg/go-micro-service-jenkins-build-and-setting/jenkins-gitlab-add-token.png" alt="jenkins-gitlab-add-token"></p><p>然后配置好,测试一下连通性。<br><img src="/assets/blogImg/go-micro-service-jenkins-build-and-setting/jenkins-gitlab-add.png" alt="jenkins-gitlab-add"></p><h4 id="Publish-over-SSH"><a href="#Publish-over-SSH" class="headerlink" title="Publish over SSH"></a>Publish over SSH</h4><p>找到<code>Publish over SSH</code>配置，如下图所示(方便演示我是直接账户密码登录的，可以自行密钥登陆或者免密认证登录)：</p><p><img src="/assets/blogImg/go-micro-service-jenkins-build-and-setting/jenkins-publish-over-ssh.png" alt="jenkins-publish-over-ssh"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本系列CI-CD-流程图&quot;&gt;&lt;a href=&quot;#本系列CI-CD-流程图&quot; class=&quot;headerlink&quot; title=&quot;本系列CI/CD 流程图&quot;&gt;&lt;/a&gt;本系列CI/CD 流程图&lt;/h1&gt;&lt;p&gt;我们先来回顾一下本系列的&lt;code&gt;CI/CD 流程图&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/go-micro-service-introduce-components-and-framework/ci,cd整体流程.png&quot; alt=&quot;ci/cd整体流程&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以我们现在就差最后一个&lt;code&gt;Jenkins&lt;/code&gt;工具，就可以做我们想要的持续集成，交付，部署的功能了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-4.1 Gitlab的搭建与设置</title>
    <link href="https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting/"/>
    <id>https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting/</id>
    <published>2020-07-12T09:42:58.000Z</published>
    <updated>2021-12-05T08:13:24.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>我们打算把<code>gitlab</code>跟<code>jenkins</code>都通过<code>docker</code>的方式，安装在同一个虚拟机里。虚拟机IP：<code>192.168.1.220</code>。</p><h2 id="创建专属网络"><a href="#创建专属网络" class="headerlink" title="创建专属网络"></a>创建专属网络</h2><p>我们跟之前一样，创建一个专属网络<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create cicd --driver bridge</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="更改虚拟机ssh端口"><a href="#更改虚拟机ssh端口" class="headerlink" title="更改虚拟机ssh端口"></a>更改虚拟机ssh端口</h2><p>把虚拟机的ssh端口从22改为222(因为GIT底层也是22端口)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="meta-keyword">/etc/</span>ssh/sshd_config</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h1 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h1><h2 id="映射文件夹创建"><a href="#映射文件夹创建" class="headerlink" title="映射文件夹创建"></a>映射文件夹创建</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="params">-p</span> /usr/<span class="built_in">local</span>/<span class="built_in">data</span>/gitlab/etc</span><br><span class="line">mkdir <span class="params">-p</span> /usr/<span class="built_in">local</span>/<span class="built_in">data</span>/gitlab/<span class="keyword">log</span></span><br><span class="line">mkdir <span class="params">-p</span> /usr/<span class="built_in">local</span>/<span class="built_in">data</span>/gitlab/<span class="built_in">data</span></span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>gitlab/docker-compose.yml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: '3'</span><br><span class="line"></span><br><span class="line"><span class="attribute">services:</span></span><br><span class="line">  gitlab:</span><br><span class="line">    <span class="attribute">image</span>: 'gitlab/gitlab-ce:13.1.1-ce.0'</span><br><span class="line">    <span class="attribute">restart</span>: always</span><br><span class="line">    <span class="attribute">hostname</span>: 'git.guaosi.com'</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - cicd</span><br><span class="line">    <span class="attribute">container_name</span>: gitlab</span><br><span class="line">    <span class="attribute">environment:</span></span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url 'http://git.guaosi.com'</span><br><span class="line">        gitlab_rails['time_zone'] = 'Asia/Shanghai'</span><br><span class="line">        gitlab_rails['smtp_enable'] = true</span><br><span class="line">        gitlab_rails['smtp_address'] = "smtp.exmail.qq.com"</span><br><span class="line">        gitlab_rails['smtp_tls'] = true</span><br><span class="line">        gitlab_rails['smtp_port'] = 465</span><br><span class="line">        gitlab_rails['smtp_user_name'] = "xxx@qq.com"</span><br><span class="line">        gitlab_rails['smtp_password'] = "xxx"</span><br><span class="line">        gitlab_rails['smtp_domain'] = "smtp.qq.com"</span><br><span class="line">        gitlab_rails['smtp_authentication'] = "login"</span><br><span class="line">        gitlab_rails['smtp_enable_starttls_auto'] = true</span><br><span class="line">        gitlab_rails['gitlab_email_from'] = 'guaosi'</span><br><span class="line">        gitlab_rails['backup_keep_time'] = 14515200</span><br><span class="line">        logging['logrotate_frequency'] = "weekly"</span><br><span class="line">        logging['logrotate_rotate'] = 52</span><br><span class="line">        logging['logrotate_compress'] = "compress"</span><br><span class="line">        logging['logrotate_method'] = "copytruncate"</span><br><span class="line">        logging['logrotate_delaycompress'] = "delaycompress"</span><br><span class="line">        gitlab_rails['gitlab_shell_ssh_port'] = 22</span><br><span class="line">        # Add any other gitlab.rb configuration options</span><br><span class="line">    <span class="attribute">ports:</span></span><br><span class="line">      - '443:443'</span><br><span class="line">      - '22:22'</span><br><span class="line">      - '80:80'</span><br><span class="line">      - '9090:9090'</span><br><span class="line">    <span class="attribute">volumes:</span></span><br><span class="line">      - '/usr/local/data/gitlab/etc:/etc/gitlab'</span><br><span class="line">      - '/usr/local/data/gitlab/log:/var/log/gitlab'</span><br><span class="line">      - '/usr/local/data/gitlab/data:/var/opt/gitlab'</span><br><span class="line">      - '/root/.ssh:/root/.ssh'</span><br><span class="line"></span><br><span class="line"><span class="attribute">networks:</span></span><br><span class="line">  cicd:</span><br><span class="line">    <span class="attribute">external:</span></span><br><span class="line">      name: cicd</span><br></pre></td></tr></table></figure></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> gitlab</span><br><span class="line">docker-compose up -<span class="built_in">d</span></span><br></pre></td></tr></table></figure><blockquote><p>完全启动时间大约5分钟</p></blockquote><h2 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h2><p>我们在<code>Mac</code>上更改<code>hosts</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.220</span>  <span class="selector-tag">git</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="Outbound-requests"><a href="#Outbound-requests" class="headerlink" title="Outbound requests"></a>Outbound requests</h3><p>我们在<code>Mac</code>上登陆 <a href="http://git.guaosi.com，第一次会让我们初始化`root`用户的密码，设置成功后进入`gitlab`界面。" target="_blank" rel="noopener">http://git.guaosi.com，第一次会让我们初始化`root`用户的密码，设置成功后进入`gitlab`界面。</a></p><p>我们进入 <a href="http://git.guaosi.com/admin/application_settings/network" target="_blank" rel="noopener">http://git.guaosi.com/admin/application_settings/network</a><br>然后在 <code>Outbound requests</code> 中勾上 </p><p><code>Allow requests to the local network from web hooks and services</code> </p><p>以及 </p><p><code>Allow requests to the local network from system hooks</code> </p><p>然后点击保存，退出当前账号，重新注册一个自己喜欢的账号。</p><h3 id="设置密钥"><a href="#设置密钥" class="headerlink" title="设置密钥"></a>设置密钥</h3><p>我们进入 <a href="http://git.guaosi.com/profile/keys" target="_blank" rel="noopener">http://git.guaosi.com/profile/keys</a></p><p>将我们<code>Mac</code>的公钥填入，然后保存即可。现在我们就可以直接通过<code>Git</code>命令与<code>Gitlab</code>进行交互了。</p><p>我们可以创建一个<code>projects</code>，然后将我们本地的<code>account</code>文件夹用<code>git</code>初始化后上传到我们自建的<code>gitlab</code>中。</p><blockquote><p>id_key的生成以及git指令这块相信大家应该都很清楚了，所以我就说一下大体流程而已。如果还不懂Git的小伙伴们，只能自行百度学习一下了噢~</p></blockquote><blockquote><p>如果是直接<code>git clone</code>我<code>github</code>里代码的小伙伴，里面<code>account</code>文件夹下是有<code>.git</code>信息的，记得删除后再初始化<code>git</code>噢~</p></blockquote><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>对应的相关代码和部署文件，已经传至github，欢迎star。</p><p>持续交付、集成、部署：<a href="https://github.com/guaosi/go-cicd" target="_blank" rel="noopener">https://github.com/guaosi/go-cicd</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;我们打算把&lt;code&gt;gitlab&lt;/code&gt;跟&lt;code&gt;jenkins&lt;/code&gt;都通过&lt;code&gt;docker&lt;/code&gt;的方式，安装在同一个虚拟机里。虚拟机IP：&lt;code&gt;192.168.1.220&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;创建专属网络&quot;&gt;&lt;a href=&quot;#创建专属网络&quot; class=&quot;headerlink&quot; title=&quot;创建专属网络&quot;&gt;&lt;/a&gt;创建专属网络&lt;/h2&gt;&lt;p&gt;我们跟之前一样，创建一个专属网络&lt;br&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker&lt;span class=&quot;built_in&quot;&gt; network &lt;/span&gt;create cicd --driver bridge&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-3.4 Kubernetes下的构建执行</title>
    <link href="https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution/"/>
    <id>https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution/</id>
    <published>2020-07-12T08:22:59.000Z</published>
    <updated>2021-12-05T08:13:24.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整理环境"><a href="#整理环境" class="headerlink" title="整理环境"></a>整理环境</h1><p>上一章中，我们通过<code>Docker Compose</code>已经创建了<code>etcd</code>、<code>account</code>、<code>apigw</code>、<code>Traefik</code>多个镜像对应的容器。为了不被干扰，并且我们改用<code>Kubetnetes</code>作为容器编排，我们需要删除之前创建的容器。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f apigw apigw<span class="number">2</span> accou<span class="symbol">nt1</span> accou<span class="symbol">nt2</span> accou<span class="symbol">nt3</span> go_micro_traefik_proxy_<span class="number">1</span> etcd<span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>我们将<code>Kubernetes</code>搭建在了同网段的<code>Windows</code>下的<code>Vmware</code>虚拟机中，使用的是<code>桥接模式</code>。也就是我的<code>Mac</code>可以直接与虚拟机通讯。还不会搭建<code>Kubernetes</code>的小伙伴可以先看 <a href="https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/">Kubernetes 18.04集群安装教程(基于Centos7)</a> 这篇文章进行搭建</p><p>网络配置与 <a href="https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/">1.2 环境的准备与安装</a> 里的相同。</p><h1 id="Kubernetes下搭建"><a href="#Kubernetes下搭建" class="headerlink" title="Kubernetes下搭建"></a>Kubernetes下搭建</h1><p>由于配置有限，所以我只搭建了一个<code>Master</code>节点，没有搭建<code>Node</code>节点，并且通过污点，设置<code>master</code>允许<code>pod</code>创建</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint <span class="keyword">node</span> <span class="title">k8s-master</span> <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="literal">master</span>-</span><br></pre></td></tr></table></figure><p>以下操作都是在<code>Kubetnetes</code>的<code>Master</code>节点做的</p><h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><p>如果你使用的是公开公共仓库镜像，即不需要登陆，就可以下载的镜像，则可以跳过<code>私有仓库</code>这个步骤。</p><blockquote><p>我的镜像已经开放了公有权限,可以直接下载,不需要进行验证。如果你想使用自己的镜像,请按照下面进行操作。</p></blockquote><h3 id="阿里云登陆"><a href="#阿里云登陆" class="headerlink" title="阿里云登陆"></a>阿里云登陆</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login <span class="comment">--username=&lt;your-name&gt; registry.cn-shenzhen.aliyuncs.com</span></span><br><span class="line"><span class="comment"># &lt;your-name&gt; 是你在阿里云上的登陆名</span></span><br></pre></td></tr></table></figure><h3 id="在集群中创建保存授权令牌的-Secret"><a href="#在集群中创建保存授权令牌的-Secret" class="headerlink" title="在集群中创建保存授权令牌的 Secret"></a>在集群中创建保存授权令牌的 Secret</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Secret,命名为 regcred：</span></span><br><span class="line"></span><br><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry regcred <span class="attribute">--docker-server</span>=&lt;your-registry-server&gt; <span class="attribute">--docker-username</span>=&lt;your-name&gt; <span class="attribute">--docker-password</span>=&lt;your-pword&gt; <span class="attribute">--docker-email</span>=&lt;your-email&gt; -n &lt;your-namespace&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;your-registry-server&gt; 是你的私有 Docker 仓库全限定域名（FQDN）</span></span><br><span class="line"><span class="comment"># &lt;your-name&gt; 是你的 Docker 用户名。</span></span><br><span class="line"><span class="comment"># &lt;your-pword&gt; 是你的 Docker 密码。</span></span><br><span class="line"><span class="comment"># &lt;your-email&gt; 是你的 Docker 邮箱。</span></span><br><span class="line"><span class="comment"># &lt;your-namespace&gt; 创建后的该密钥属于k8s集群中哪一个namespace的</span></span><br></pre></td></tr></table></figure><p>举个栗子<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry regcred <span class="attribute">--docker-server</span>=registry.cn-shenzhen.aliyuncs.com <span class="attribute">--docker-username</span>=guaosi@vip.qq.com <span class="attribute">--docker-password</span>=a123654 <span class="attribute">--docker-email</span>=guaosi@vip.qq.com -n go-micro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: -n 后面是我想这个密钥归属于哪个namespace,即哪个namespace可以使用</span></span><br></pre></td></tr></table></figure></p><h3 id="在pod清单中加入使用密钥"><a href="#在pod清单中加入使用密钥" class="headerlink" title="在pod清单中加入使用密钥"></a>在pod清单中加入使用密钥</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Pod</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> private-reg</span><br><span class="line"><span class="symbol">  namespace:</span> <span class="params">&lt;your-namespace&gt;</span></span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  containers:</span></span><br><span class="line">  - name: private-reg-container</span><br><span class="line"><span class="symbol">    image:</span> <span class="params">&lt;your-private-image&gt;</span></span><br><span class="line"><span class="symbol">  imagePullSecrets:</span> <span class="meta"># 使用指定的密钥</span></span><br><span class="line">  - name: regcred <span class="meta"># 与上面创建的secret名称相同</span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>创建名字为<code>go-micro</code>的<code>namespace</code>,我们把需要的<code>pod</code>、<code>deploy</code>、<code>svc</code>、<code>secret</code>等等都放在这个<code>namespace</code>下方便管理。</p><p><code>deploy/k8s/k8s-namespace.yml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Namespace</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> go-micro</span><br><span class="line"><span class="symbol">  namespace:</span> go-micro</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> -f deploy/k8s/k8s-<span class="keyword">namespace</span>.yml</span><br></pre></td></tr></table></figure></p><h3 id="给Pod创建RBAC权限"><a href="#给Pod创建RBAC权限" class="headerlink" title="给Pod创建RBAC权限"></a>给Pod创建RBAC权限</h3><p><code>deploy/k8s/k8s-pod-rbac.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">micro-services</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">micro-registry</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pods</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">list</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">patch</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">micro-registry</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">micro-registry</span> <span class="comment"># 要被绑定的ClusterRole的name</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">micro-services</span> <span class="comment"># 要被绑定的serviceAccount的name</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">go-micro</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deploy<span class="regexp">/k8s/</span>k8s-pod-rbac.yml</span><br></pre></td></tr></table></figure></p><h2 id="account"><a href="#account" class="headerlink" title="account"></a>account</h2><h3 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h3><p><code>account/deploy/k8s/k8s-pod-account.yml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> apps/v1</span><br><span class="line"><span class="symbol">kind:</span> Deployment <span class="meta"># pod部署</span></span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  namespace:</span> go-micro  <span class="meta"># 都设置在一个命名空间下，相同网络</span></span><br><span class="line"><span class="symbol">  name:</span> svc-account</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span> <span class="meta"># pod 数量</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line"><span class="symbol">      app:</span> svc-account</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        app:</span> svc-account</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">        - name: svc-account</span><br><span class="line"><span class="symbol">          command:</span> [</span><br><span class="line">            <span class="string">"/account"</span>,</span><br><span class="line">            <span class="string">"--registry=kubernetes"</span>,</span><br><span class="line">          ]</span><br><span class="line"><span class="symbol">          image:</span> registry.cn-shenzhen.aliyuncs.com/go_micro/account:v1<span class="number">.0</span></span><br><span class="line"><span class="symbol">          imagePullPolicy:</span> Always</span><br><span class="line"><span class="symbol">      serviceAccountName:</span> micro-services <span class="meta"># serviceAccount的名称 用于权限</span></span><br><span class="line">      <span class="meta">#imagePullSecrets: # 使用指定的密钥,才能下载私有镜像</span></span><br><span class="line">      <span class="meta">#  - name: regcred</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> -f <span class="keyword">account</span>/deploy/k8s/k8s-pod-account.yml</span><br></pre></td></tr></table></figure></p><blockquote><p>关于<code>account</code>的负载均衡,只需要扩容<code>deploy</code>的<code>replicas</code>即可  kubectl scale –replicas=3 deployment/svc-account -n go-micro</p></blockquote><h3 id="svc"><a href="#svc" class="headerlink" title="svc"></a>svc</h3><p><code>account/deploy/k8s/k8s-svc-account.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span> <span class="comment"># 网络服务</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">svc-account</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span> <span class="comment"># 都设置在一个命名空间下，相同网络</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">svc-account</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span> <span class="comment"># 必须填写，否则报错</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">svc-account</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> -f <span class="keyword">account</span>/deploy/k8s/k8s-svc-account.yml</span><br></pre></td></tr></table></figure></p><h2 id="apigateway"><a href="#apigateway" class="headerlink" title="apigateway"></a>apigateway</h2><h3 id="pod-1"><a href="#pod-1" class="headerlink" title="pod"></a>pod</h3><p><code>apigateway/deploy/k8s/k8s-pod-apigw.yml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> apps/v1</span><br><span class="line"><span class="symbol">kind:</span> Deployment <span class="meta"># pod部署</span></span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  namespace:</span> go-micro  <span class="meta"># 都设置在一个命名空间下，相同网络</span></span><br><span class="line"><span class="symbol">  name:</span> svc-apigw</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span>  <span class="meta"># pod 数量</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line"><span class="symbol">      app:</span> svc-apigw</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        app:</span> svc-apigw</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">        - name: svc-apigw</span><br><span class="line"><span class="symbol">          command:</span> [</span><br><span class="line">            <span class="string">"/apigw"</span>,</span><br><span class="line">            <span class="string">"--p=8091"</span>, <span class="meta"># 只能用 = 不能用空格隔开</span></span><br><span class="line">            <span class="string">"--registry=kubernetes"</span>,</span><br><span class="line">          ]</span><br><span class="line"><span class="symbol">          image:</span> registry.cn-shenzhen.aliyuncs.com/go_micro/apigw:v1<span class="number">.0</span></span><br><span class="line"><span class="symbol">          imagePullPolicy:</span> Always</span><br><span class="line"><span class="symbol">          ports:</span></span><br><span class="line">            - containerPort: <span class="number">8091</span></span><br><span class="line"><span class="symbol">              name:</span> apigw-port</span><br><span class="line"><span class="symbol">      serviceAccountName:</span> micro-services <span class="meta"># serviceAccount的名称 用于权限</span></span><br><span class="line">      <span class="meta">#imagePullSecrets: # 使用指定的密钥,才能下载私有镜像</span></span><br><span class="line">      <span class="meta">#  - name: regcred</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f apigateway<span class="regexp">/deploy/</span>k8s<span class="regexp">/k8s-pod-apigw.yml</span></span><br></pre></td></tr></table></figure></p><blockquote><p>关于<code>apigateway</code>的负载均衡,只需要扩容<code>deploy</code>的<code>replicas</code>即可  kubectl scale –replicas=3 deployment/svc-apigw -n go-micro</p></blockquote><h3 id="svc-1"><a href="#svc-1" class="headerlink" title="svc"></a>svc</h3><p><code>apigateway/deploy/k8s/k8s-svc-apigw.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span> <span class="comment"># 网络服务</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">svc-apigw</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span> <span class="comment"># 都设置在一个命名空间下，相同网络</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">svc-apigw</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8091</span> <span class="comment"># cluster模式访问的端口</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30088</span>   <span class="comment">#设置 nodeport 端口 30000-32767 此时</span></span><br><span class="line">                      <span class="comment"># targetPort:访问容器内部的端口,与containerPort值相同。 当没有设置targetPort时,此时targetPort的值与port相同</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">svc-apigw</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f apigateway<span class="regexp">/deploy/</span>k8s<span class="regexp">/k8s-svc-apigw.yml</span></span><br></pre></td></tr></table></figure></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">"username=guaosi&amp;password=guaosi"</span> http:<span class="comment">//192.168.1.200</span></span><br><span class="line">:<span class="number">30088</span>/account/register</span><br><span class="line"></span><br><span class="line">`&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"message"</span>:<span class="string">""</span>&#125;`</span><br></pre></td></tr></table></figure><p>下面继续使用<code>Traefik</code>来进行反向代理了。</p><h2 id="Traefik"><a href="#Traefik" class="headerlink" title="Traefik"></a>Traefik</h2><p>由于<code>Kubernetes</code>的<code>Ingress</code>只能支持四层的<code>IP:Port</code>转发，所以我们需要使用<code>Traefik</code>来代替<code>Ingress</code>。</p><blockquote><p>该部分参考 <a href="http://www.mydlq.club/article/72/" target="_blank" rel="noopener">Kubernetes 部署 Ingress 控制器 Traefik v2.2</a> 后运行成功后,总结得出。</p></blockquote><h3 id="创建-CRD-资源"><a href="#创建-CRD-资源" class="headerlink" title="创建 CRD 资源"></a>创建 CRD 资源</h3><blockquote><p>在<code>Traefik v2.0</code>版本后,开始使用<code>CRD</code>（Custom Resource Definition）来完成路由配置等,所以需要提前创建<code>CRD</code>资源。</p></blockquote><p><code>traefik/k8s/k8s-crd-traefik.yaml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## IngressRoute</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingressroutes.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">ingressroutes</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">ingressroute</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## IngressRouteTCP</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingressroutetcps.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">IngressRouteTCP</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">ingressroutetcps</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">ingressroutetcp</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Middleware</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">middlewares.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">Middleware</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">middlewares</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">middleware</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## TLSOption</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tlsoptions.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">TLSOption</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">tlsoptions</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">tlsoption</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## TraefikService</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">traefikservices.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">traefikservices</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">traefikservice</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## TLSStore</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tlsstores.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">TLSStore</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">tlsstores</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">tlsstore</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## IngressRouteUDP</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingressrouteudps.traefik.containo.us</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v1alpha1</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line"><span class="attr">    kind:</span> <span class="string">IngressRouteUDP</span></span><br><span class="line"><span class="attr">    plural:</span> <span class="string">ingressrouteudps</span></span><br><span class="line"><span class="attr">    singular:</span> <span class="string">ingressrouteudp</span></span><br><span class="line"><span class="attr">  scope:</span> <span class="string">Namespaced</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f traefik<span class="regexp">/k8s/</span>k8s-crd-traefik.yaml</span><br></pre></td></tr></table></figure></p><h3 id="创建-RBAC-权限"><a href="#创建-RBAC-权限" class="headerlink" title="创建 RBAC 权限"></a>创建 RBAC 权限</h3><p><code>traefik/k8s/k8s-rbac-traefik.yaml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">## ServiceAccount</span></span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> ServiceAccount</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  namespace:</span> go-micro</span><br><span class="line"><span class="symbol">  name:</span> traefik-ingress-services</span><br><span class="line">---</span><br><span class="line"><span class="meta">## ClusterRole</span></span><br><span class="line"><span class="symbol">kind:</span> ClusterRole</span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  namespace:</span> go-micro</span><br><span class="line"><span class="symbol">  name:</span> traefik-ingress-controller</span><br><span class="line"><span class="symbol">rules:</span></span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"services"</span>,<span class="string">"endpoints"</span>,<span class="string">"secrets"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"ingresses"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"ingresses/status"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"traefik.containo.us"</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"middlewares"</span>,<span class="string">"ingressroutes"</span>,<span class="string">"ingressroutetcps"</span>,<span class="string">"tlsoptions"</span>,<span class="string">"ingressrouteudps"</span>,<span class="string">"traefikservices"</span>,<span class="string">"tlsstores"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"watch"</span>]</span><br><span class="line">---</span><br><span class="line"><span class="meta">## ClusterRoleBinding</span></span><br><span class="line"><span class="symbol">kind:</span> ClusterRoleBinding</span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  namespace:</span> go-micro</span><br><span class="line"><span class="symbol">  name:</span> traefik-ingress-controller</span><br><span class="line"><span class="symbol">roleRef:</span></span><br><span class="line"><span class="symbol">  apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"><span class="symbol">  kind:</span> ClusterRole</span><br><span class="line"><span class="symbol">  name:</span> traefik-ingress-controller</span><br><span class="line"><span class="symbol">subjects:</span></span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line"><span class="symbol">    name:</span> traefik-ingress-services</span><br><span class="line"><span class="symbol">    namespace:</span> go-micro</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f traefik<span class="regexp">/k8s/</span>k8s-rbac-traefik.yml</span><br></pre></td></tr></table></figure></p><h3 id="创建-Traefik-配置文件"><a href="#创建-Traefik-配置文件" class="headerlink" title="创建 Traefik 配置文件"></a>创建 Traefik 配置文件</h3><p>下面配置中可以通过配置<code>kubernetesCRD</code>与<code>kubernetesIngress</code>两项参数,让<code>Traefik</code>支持<code>CRD</code>与<code>Ingress</code>两种路由方式。<br><code>traefik/k8s/k8s-config-traefik.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">traefik-config</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">traefik.yaml:</span> <span class="string">|-</span></span><br><span class="line"><span class="attr">    ping:</span> <span class="string">""</span>                    <span class="comment">## 启用 Ping</span></span><br><span class="line"><span class="attr">    serversTransport:</span></span><br><span class="line"><span class="attr">      insecureSkipVerify:</span> <span class="literal">true</span>  <span class="comment">## Traefik 忽略验证代理服务的 TLS 证书</span></span><br><span class="line"><span class="attr">    api:</span></span><br><span class="line"><span class="attr">      insecure:</span> <span class="literal">true</span>            <span class="comment">## 允许 HTTP 方式访问 API</span></span><br><span class="line"><span class="attr">      dashboard:</span> <span class="literal">true</span>           <span class="comment">## 启用 Dashboard</span></span><br><span class="line"><span class="attr">      debug:</span> <span class="literal">true</span>              <span class="comment">## 启用 Debug 调试模式</span></span><br><span class="line"><span class="attr">    metrics:</span></span><br><span class="line"><span class="attr">      prometheus:</span> <span class="string">""</span>            <span class="comment">## 配置 Prometheus 监控指标数据，并使用默认配置</span></span><br><span class="line"><span class="attr">    entryPoints:</span></span><br><span class="line"><span class="attr">      web:</span></span><br><span class="line"><span class="attr">        address:</span> <span class="string">":80"</span>          <span class="comment">## 配置 80 端口，并设置入口名称为 web</span></span><br><span class="line"><span class="attr">      websecure:</span></span><br><span class="line"><span class="attr">        address:</span> <span class="string">":443"</span>         <span class="comment">## 配置 443 端口，并设置入口名称为 websecure</span></span><br><span class="line"><span class="attr">    providers:</span></span><br><span class="line"><span class="attr">      kubernetesCRD:</span> <span class="string">""</span>         <span class="comment">## 启用 Kubernetes CRD 方式来配置路由规则</span></span><br><span class="line"><span class="attr">      kubernetesIngress:</span> <span class="string">""</span>     <span class="comment">## 启动 Kubernetes Ingress 方式来配置路由规则</span></span><br><span class="line"><span class="attr">    log:</span></span><br><span class="line"><span class="attr">      filePath:</span> <span class="string">""</span>              <span class="comment">## 设置调试日志文件存储路径，如果为空则输出到控制台</span></span><br><span class="line"><span class="attr">      level:</span> <span class="string">error</span>              <span class="comment">## 设置调试日志级别</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">json</span>              <span class="comment">## 设置调试日志格式</span></span><br><span class="line"><span class="attr">    accessLog:</span></span><br><span class="line"><span class="attr">      filePath:</span> <span class="string">""</span>              <span class="comment">## 设置访问日志文件存储路径，如果为空则输出到控制台</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">json</span>              <span class="comment">## 设置访问调试日志格式</span></span><br><span class="line"><span class="attr">      bufferingSize:</span> <span class="number">0</span>          <span class="comment">## 设置访问日志缓存行数</span></span><br><span class="line"><span class="attr">      filters:</span></span><br><span class="line">        <span class="comment">#statusCodes: ["200"]   ## 设置只保留指定状态码范围内的访问日志</span></span><br><span class="line"><span class="attr">        retryAttempts:</span> <span class="literal">true</span>     <span class="comment">## 设置代理访问重试失败时，保留访问日志</span></span><br><span class="line"><span class="attr">        minDuration:</span> <span class="number">20</span>         <span class="comment">## 设置保留请求时间超过指定持续时间的访问日志</span></span><br><span class="line"><span class="attr">      fields:</span>                   <span class="comment">## 设置访问日志中的字段是否保留（keep 保留、drop 不保留）</span></span><br><span class="line"><span class="attr">        defaultMode:</span> <span class="string">keep</span>       <span class="comment">## 设置默认保留访问日志字段</span></span><br><span class="line"><span class="attr">        names:</span>                  <span class="comment">## 针对访问日志特别字段特别配置保留模式</span></span><br><span class="line"><span class="attr">          ClientUsername:</span> <span class="string">drop</span></span><br><span class="line"><span class="attr">        headers:</span>                <span class="comment">## 设置 Header 中字段是否保留</span></span><br><span class="line"><span class="attr">          defaultMode:</span> <span class="string">keep</span>     <span class="comment">## 设置默认保留 Header 中字段</span></span><br><span class="line"><span class="attr">          names:</span>                <span class="comment">## 针对 Header 中特别字段特别配置保留模式</span></span><br><span class="line"><span class="attr">            User-Agent:</span> <span class="string">redact</span></span><br><span class="line"><span class="attr">            Authorization:</span> <span class="string">drop</span></span><br><span class="line"><span class="attr">            Content-Type:</span> <span class="string">keep</span></span><br><span class="line">    <span class="comment">#tracing:                     ## 链路追踪配置,支持 zipkin、datadog、jaeger、instana、haystack 等</span></span><br><span class="line">    <span class="comment">#  serviceName:               ## 设置服务名称（在链路追踪端收集后显示的服务名）</span></span><br><span class="line">    <span class="comment">#  zipkin:                    ## zipkin配置</span></span><br><span class="line">    <span class="comment">#    sameSpan: true           ## 是否启用 Zipkin SameSpan RPC 类型追踪方式</span></span><br><span class="line">    <span class="comment">#    id128Bit: true           ## 是否启用 Zipkin 128bit 的跟踪 ID</span></span><br><span class="line">    <span class="comment">#    sampleRate: 0.1          ## 设置链路日志采样率（可以配置0.0到1.0之间的值）</span></span><br><span class="line">    <span class="comment">#    httpEndpoint: http://localhost:9411/api/v2/spans     ## 配置 Zipkin Server 端点</span></span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">create</span> -f traefik/k8s/k8s-<span class="built_in">config</span>-traefik.yml</span><br></pre></td></tr></table></figure></p><h3 id="部署-Traefik"><a href="#部署-Traefik" class="headerlink" title="部署 Traefik"></a>部署 Traefik</h3><p>下面将用<code>DaemonSet</code>方式部署<code>Traefik</code>,便于在多服务器间扩展,用<code>hostport</code>方式绑定服务器<code>80</code>、<code>443</code>端口,方便流量通过物理机进入<code>Kubernetes</code>内部。</p><p><code>traefik/k8s/k8s-pod-traefik.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span> <span class="comment"># 这个svc主要用来跟rule转发规则里转到至的端口相对应</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">websecure</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">traefik</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span> <span class="comment"># DaemonSet保证在每个Node上都运行一个Pod，如果 新增一个Node，这个Pod也会运行在新增的Node上，如果删除这个DadmonSet，就会清除它所创建的Pod。</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">traefik-ingress-services</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span> <span class="comment">## 将容器端口绑定所在服务器端口</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - image:</span> <span class="attr">traefik:v2.2.1</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">websecure</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">8080</span>  <span class="comment">## Traefik Dashboard 端口</span></span><br><span class="line"><span class="attr">          resources:</span></span><br><span class="line"><span class="attr">            limits:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="number">2000</span><span class="string">m</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">1024</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">            requests:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="number">1000</span><span class="string">m</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">1024</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          securityContext:</span></span><br><span class="line"><span class="attr">            capabilities:</span></span><br><span class="line"><span class="attr">              drop:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">ALL</span></span><br><span class="line"><span class="attr">              add:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">--configfile=/config/traefik.yaml</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - mountPath:</span> <span class="string">"/config"</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">"config"</span></span><br><span class="line"><span class="attr">          readinessProbe:</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/ping</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          livenessProbe:</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line"><span class="attr">              path:</span> <span class="string">/ping</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">traefik-config</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f traefik<span class="regexp">/k8s/</span>k8s-pod-traefik.yml</span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>DaemonSet</code>保证在每个<code>Node</code>都运行一个<code>Pod</code>,如果 新增一个<code>Node</code>,这个<code>Pod</code>也会运行在新增的<code>Node</code>上,如果删除这个<code>DadmonSet</code>,就会清除它所创建的<code>Pod</code>。</p><p>如果想指定只能在哪些<code>node</code>上创建<code>traefik</code>,则需要提前指定<code>Label</code>,这样当程序部署时会自动调度到设置<code>Label</code>的节点上。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式：kubectl <span class="built_in">label</span> nodes [节点名] [<span class="built_in">key</span>=value]</span><br><span class="line">kubectl <span class="built_in">label</span> nodes docker-desktop IngressProxy=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 查看节点是否设置 Label 成功</span><br><span class="line">kubectl <span class="built_in">get</span> nodes --<span class="built_in">show</span>-<span class="built_in">labels</span></span><br></pre></td></tr></table></figure><p>同时,需要修改 <code>traefik/k8s/k8s-pod-traefik.yml</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - name: config</span><br><span class="line">    configMap:</span><br><span class="line">      name: traefik-config </span><br><span class="line"><span class="comment"># 以上是已经存在的设置,下面为要添加的设置</span></span><br><span class="line">tolerations:              # 设置容忍所有污点,防止节点被设置污点</span><br><span class="line">  - operator: <span class="string">"Exists"</span></span><br><span class="line">nodeSelector:             # 设置node筛选器,在特定label的节点上启动</span><br><span class="line">  IngressProxy: <span class="string">"true"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>我懒就没做了。。。</p></blockquote><h3 id="配置路由规则"><a href="#配置路由规则" class="headerlink" title="配置路由规则"></a>配置路由规则</h3><p>Traefik 应用已经部署完成,但是想让外部访问<code>Kubernetes</code>内部服务,还需要配置路由规则,上面部署<code>Traefik</code>时开启了<code>Traefik Dashboard</code>,这是<code>Traefik</code>提供的视图看板,所以,首先配置基于<code>HTTP</code>的<code>Traefik Dashboard</code>路由规则,使外部能够访问 <code>Traefik Dashboard</code>。这里使用<code>CRD</code>进行演示。</p><blockquote><p>想使用Ingress或者加上HTTPS认证,请参考<a href="http://www.mydlq.club/article/72/" target="_blank" rel="noopener">这篇文章</a></p></blockquote><blockquote><p>使用 CRD 方式创建路由规则可言参考 Traefik 文档 <a href="https://docs.traefik.io/v2.2/routing/providers/kubernetes-crd/" target="_blank" rel="noopener">Kubernetes IngressRoute</a></p></blockquote><p><code>traefik/k8s/k8s-crd-router-traefik.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">traefik-dashboard-route</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">go-micro</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  entryPoints:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    - match:</span> <span class="string">Host(`traefik.guaosi.com`)</span></span><br><span class="line"><span class="attr">      kind:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">      services:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">traefik</span> <span class="comment"># svc的名称</span></span><br><span class="line"><span class="attr">          port:</span> <span class="number">8080</span> <span class="comment"># cluster 访问</span></span><br><span class="line"><span class="attr">    - match:</span> <span class="string">Host(`apigw.guaosi.com`)</span></span><br><span class="line"><span class="attr">      kind:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">      services:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">svc-apigw</span> <span class="comment"># svc的名称</span></span><br><span class="line"><span class="attr">          port:</span> <span class="number">8091</span> <span class="comment"># cluster 访问</span></span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f traefik<span class="regexp">/k8s/</span>k8s-crd-router-traefik.yml</span><br></pre></td></tr></table></figure></p><h3 id="配置-Host-文件"><a href="#配置-Host-文件" class="headerlink" title="配置 Host 文件"></a>配置 Host 文件</h3><p>客户端想通过域名访问服务,必须要进行<code>DNS</code> 解析,由于这里没有<code>DNS</code>服务器进行域名解析,所以修改<code>hosts</code>文件将<code>Traefik</code>、<code>apigw</code>所在节点服务器的<code>IP</code>和自定义<code>Host</code>绑定,。打开电脑的<code>Hosts</code>配置文件,往其加入下面配置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.200</span>  <span class="selector-tag">traefik</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.200</span>  <span class="selector-tag">apigw</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><p>打开浏览器输入地址：<a href="http://traefik.guaosi.com" target="_blank" rel="noopener">http://traefik.guaosi.com</a>  ,即可打开<code>Traefik Dashboard</code></p><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">"username=guaosi&amp;password=guaosi"</span> http:<span class="regexp">//</span>apigw.guaosi.com<span class="regexp">/account/</span>register</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"message"</span>:<span class="string">""</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>最终的代码和部署文件，已经传至github，欢迎star。</p><p><a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;整理环境&quot;&gt;&lt;a href=&quot;#整理环境&quot; class=&quot;headerlink&quot; title=&quot;整理环境&quot;&gt;&lt;/a&gt;整理环境&lt;/h1&gt;&lt;p&gt;上一章中，我们通过&lt;code&gt;Docker Compose&lt;/code&gt;已经创建了&lt;code&gt;etcd&lt;/code&gt;、&lt;code&gt;account&lt;/code&gt;、&lt;code&gt;apigw&lt;/code&gt;、&lt;code&gt;Traefik&lt;/code&gt;多个镜像对应的容器。为了不被干扰，并且我们改用&lt;code&gt;Kubetnetes&lt;/code&gt;作为容器编排，我们需要删除之前创建的容器。&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker rm -f apigw apigw&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; accou&lt;span class=&quot;symbol&quot;&gt;nt1&lt;/span&gt; accou&lt;span class=&quot;symbol&quot;&gt;nt2&lt;/span&gt; accou&lt;span class=&quot;symbol&quot;&gt;nt3&lt;/span&gt; go_micro_traefik_proxy_&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; etcd&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-3.3 Docker Compose下的构建执行</title>
    <link href="https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution/"/>
    <id>https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution/</id>
    <published>2020-07-11T14:03:29.000Z</published>
    <updated>2021-12-05T08:13:24.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整理环境"><a href="#整理环境" class="headerlink" title="整理环境"></a>整理环境</h1><p>上一章中，我们已经创建了<code>etcd</code>、<code>account</code>、<code>apigw</code>这三个镜像对应的容器。在<code>Docker Compose</code>中，我们想重新创建新的容器，不被之前的容器所干扰，并且把它们放在一个专属的网络中去，所以我们需要删除之前创建的容器。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm -f etcd1 account apigw</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后我们创建一个名为<code>gomicro</code>的<code>bridge</code>类型专属的网络，将<code>Docker Compose</code>创建的容器的网络都放在<code>gomicro</code>这个网络下。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create gomicro --driver bridge</span><br></pre></td></tr></table></figure></p><h1 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h1><p>上一章和之前，我们都是通过<code>IP:Port</code>的形式来进行服务的访问。当时实际环境中，我们是需要通过域名来进行访问的，所以，我们还需要一款反向代理、负载均衡软件来帮助我们，这里我们使用的是——<code>Traefik</code></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p><code>Traefik</code> 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (<code>Docker</code>, <code>Swarm</code>, <code>Kubernetes</code>, <code>Marathon</code>, <code>Mesos</code>, <code>Consul</code>, <code>Etcd</code>, <code>Zookeeper</code>, <code>BoltDB</code>, <code>Rest API</code>, <code>file</code>…) 来自动化、动态的应用它的配置文件设置。</p><p>它跟Nginx最大的不同有两点：</p><ul><li>完美支持<code>Docker Compose</code>, <code>Swarm</code>, <code>Kubernetes</code>不同容器编排工具</li><li>可以动态发现服务(服务主动注册通知<code>traefik</code>)，然而Nginx只能通过手动更改配置文件来增删节点。</li></ul><blockquote><p>最重要的是它是用Go写的呀~</p></blockquote><p>更多相关内容可以通过Traefik的<a href="https://docs.traefik.io/" target="_blank" rel="noopener">官方文档</a>进行了解使用</p><h2 id="toml"><a href="#toml" class="headerlink" title="toml"></a>toml</h2><p>我们先来编写一下<code>traefik</code>的配置文件<code>traefik/traefik.toml</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">defaultEntryPoints = [<span class="string">"http"</span>]</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">  checkNewVersion = <span class="literal">false</span></span><br><span class="line">  sendAnonymousUsage = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[log]</span><br><span class="line">  level = <span class="string">"WARN"</span></span><br><span class="line">  format = <span class="string">"common"</span></span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">  dashboard = <span class="literal">true</span></span><br><span class="line">  insecure = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[ping]</span><br><span class="line"></span><br><span class="line">[accessLog]</span><br><span class="line"></span><br><span class="line">[providers]</span><br><span class="line">  [providers.docker]</span><br><span class="line">    watch = <span class="literal">true</span></span><br><span class="line">    exposedByDefault = <span class="literal">false</span></span><br><span class="line">    endpoint = <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line">    swarmMode = <span class="literal">false</span></span><br><span class="line">    useBindPortIP = <span class="literal">false</span></span><br><span class="line">   <span class="built_in"> network </span>= <span class="string">"traefik"</span></span><br><span class="line">  [providers.file]</span><br><span class="line">    watch = <span class="literal">true</span></span><br><span class="line">    directory = <span class="string">"/etc/traefik/config"</span></span><br><span class="line">    debugLogGeneratedTemplate = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line"> <span class="built_in"> address </span>= <span class="string">":80"</span></span><br></pre></td></tr></table></figure></p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>traefik/docker-compose.yml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  proxy:</span></span><br><span class="line"><span class="symbol">    image:</span> traefik:v2<span class="number">.2</span></span><br><span class="line"><span class="symbol">    command:</span> --api.insecure=true --providers.docker</span><br><span class="line"><span class="symbol">    networks:</span></span><br><span class="line">      - web</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"80:80"</span></span><br><span class="line">      - <span class="string">"8080:8080"</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/var/</span>run/docker.sock:<span class="meta-keyword">/var/</span>run/docker.sock</span><br><span class="line">      - ./traefik.toml:<span class="meta-keyword">/etc/</span>traefik/traefik.toml</span><br><span class="line"></span><br><span class="line"><span class="symbol">networks:</span></span><br><span class="line"><span class="symbol">  web:</span></span><br><span class="line"><span class="symbol">    external:</span></span><br><span class="line"><span class="symbol">      name:</span> gomicro</span><br></pre></td></tr></table></figure></p><p>然后我们执行<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure></p><p>此时traefik已经启动了，我们访问<code>http://127.0.0.1:8080</code>查看一下它提供的<code>dashboard</code></p><p><img src="/assets/blogImg/go-micro-service-docker-compose-build-execution/traefik-init.png" alt="traefik-init"></p><h1 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h1><h2 id="Docker-Compose-1"><a href="#Docker-Compose-1" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>etcd/docker-compose.yml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: '2'</span><br><span class="line"></span><br><span class="line"><span class="attribute">services:</span></span><br><span class="line">  etcd1:</span><br><span class="line">    <span class="attribute">image</span>: quay.io/coreos/etcd:v3.3.8</span><br><span class="line">    <span class="attribute">container_name</span>: etcd1</span><br><span class="line">    <span class="attribute">command</span>: etcd -name etcd1 --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://0.0.0.0:2379</span><br><span class="line">    <span class="attribute">ports:</span></span><br><span class="line">      - "2379:2379"</span><br><span class="line">      - "2380:2380"</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - web</span><br><span class="line"></span><br><span class="line"><span class="attribute">networks:</span></span><br><span class="line">  web:</span><br><span class="line">    <span class="attribute">external:</span></span><br><span class="line">      name: gomicro</span><br></pre></td></tr></table></figure></p><p>然后我们启动<code>etcd</code><br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure></p><h1 id="account"><a href="#account" class="headerlink" title="account"></a>account</h1><h2 id="Docker-Compose-2"><a href="#Docker-Compose-2" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>account/deploy/docker-compose.yml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: '2'</span><br><span class="line"></span><br><span class="line"><span class="attribute">services:</span></span><br><span class="line">  # account service</span><br><span class="line">  <span class="attribute">account1:</span></span><br><span class="line">    image: registry.cn-shenzhen.aliyuncs.com/go_micro/account:v1.0</span><br><span class="line">    <span class="attribute">container_name</span>: account1</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - web</span><br><span class="line">    <span class="attribute">environment:</span></span><br><span class="line">      - PARAMS=--registry etcd --registry_address etcd1:2379</span><br><span class="line"></span><br><span class="line">  <span class="attribute">account2:</span></span><br><span class="line">    image: registry.cn-shenzhen.aliyuncs.com/go_micro/account:v1.0</span><br><span class="line">    <span class="attribute">container_name</span>: account2</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - web</span><br><span class="line">    <span class="attribute">environment:</span></span><br><span class="line">      - PARAMS=--registry etcd --registry_address etcd1:2379</span><br><span class="line"></span><br><span class="line">  <span class="attribute">account3:</span></span><br><span class="line">    image: registry.cn-shenzhen.aliyuncs.com/go_micro/account:v1.0</span><br><span class="line">    <span class="attribute">container_name</span>: account3</span><br><span class="line">    <span class="attribute">networks:</span></span><br><span class="line">      - web</span><br><span class="line">    <span class="attribute">environment:</span></span><br><span class="line">      - PARAMS=--registry etcd --registry_address etcd1:2379</span><br><span class="line"></span><br><span class="line"><span class="attribute">networks:</span></span><br><span class="line">  web:</span><br><span class="line">    <span class="attribute">external:</span></span><br><span class="line">      name: gomicro</span><br></pre></td></tr></table></figure></p><p>这里，我们特意创建了3个<code>account</code>服务实现高可用。</p><p>因为docker-compose启动时会根据当前的所在目录名取名,这样目录名称下执行<code>docker-compose</code>会被认为冲突 所以需要特定名称<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -<span class="selector-tag">p</span> go_micro_account up -d</span><br></pre></td></tr></table></figure></p><h1 id="apigw"><a href="#apigw" class="headerlink" title="apigw"></a>apigw</h1><h2 id="Docker-Compose-3"><a href="#Docker-Compose-3" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>apigw/deploy/docker-compose.yml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line">  <span class="meta"># apigw service</span></span><br><span class="line"><span class="symbol">  apigw:</span></span><br><span class="line"><span class="symbol">    image:</span> registry.cn-shenzhen.aliyuncs.com/go_micro/apigw:v1<span class="number">.0</span></span><br><span class="line"><span class="symbol">    container_name:</span> apigw</span><br><span class="line"><span class="symbol">    networks:</span></span><br><span class="line">      - web</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"8091:8091"</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - PARAMS=-p <span class="number">8091</span> --registry etcd --registry_address etcd1:<span class="number">2379</span></span><br><span class="line"><span class="symbol">    labels:</span></span><br><span class="line">      <span class="meta"># traefik固定，与traefik设置的container_name无关</span></span><br><span class="line">      <span class="meta"># apigw 是 container_name</span></span><br><span class="line">      - <span class="string">"traefik.enable=true"</span> <span class="meta"># 必填 否则无法加入traefik</span></span><br><span class="line">      - <span class="string">"traefik.http.routers.apigw.rule=Host(`apigw.guaosi.com`)"</span> <span class="meta"># 外部域名请求</span></span><br><span class="line">      - <span class="string">"traefik.http.services.apigw.loadbalancer.server.port=8091"</span> <span class="meta"># 转发至本容器指定port</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">  apigw2:</span></span><br><span class="line"><span class="symbol">    image:</span> registry.cn-shenzhen.aliyuncs.com/go_micro/apigw:v1<span class="number">.0</span></span><br><span class="line"><span class="symbol">    container_name:</span> apigw2</span><br><span class="line"><span class="symbol">    networks:</span></span><br><span class="line">      - web</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"8092:8092"</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - PARAMS=-p <span class="number">8092</span> --registry etcd --registry_address etcd1:<span class="number">2379</span></span><br><span class="line"><span class="symbol">    labels:</span></span><br><span class="line">      <span class="meta"># traefik固定，与traefik设置的container_name无关</span></span><br><span class="line">      <span class="meta"># apigw 是 container_name</span></span><br><span class="line">      - <span class="string">"traefik.enable=true"</span> <span class="meta"># 必填 否则无法加入traefik</span></span><br><span class="line">      - <span class="string">"traefik.http.routers.apigw2.rule=Host(`apigw.guaosi.com`)"</span> <span class="meta"># 外部域名请求</span></span><br><span class="line">      - <span class="string">"traefik.http.services.apigw2.loadbalancer.server.port=8092"</span> <span class="meta"># 转发至本容器指定port</span></span><br><span class="line"><span class="symbol">networks:</span></span><br><span class="line"><span class="symbol">  web:</span></span><br><span class="line"><span class="symbol">    external:</span></span><br><span class="line"><span class="symbol">      name:</span> gomicro</span><br></pre></td></tr></table></figure></p><p>这里，我们特意创建了2个<code>apigw</code>服务实现高可用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -<span class="selector-tag">p</span> go_micro_apigw up -d</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>此时我们再进入<code>traefik</code>的<a href="http://127.0.0.1:8080/dashboard/#/http/routers" target="_blank" rel="noopener">dashboard</a>，我们可以发现网关信息已经注册到<code>Traefik</code>上了</p><p><img src="/assets/blogImg/go-micro-service-docker-compose-build-execution/traefik-register.png" alt="traefik-register"></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>我们直接更改<code>hosts</code>文件，将<code>apigw.guaosi.com</code>指向本地<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">apigw</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></p><h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p>我们发送请求进行验证<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">"username=guaosi&amp;password=guaosi"</span> http:<span class="regexp">//</span>apigw.guaosi.com<span class="regexp">/account/</span>register</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"message"</span>:<span class="string">""</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>我们可以通过查看相同服务不同容器的日志，以及停止容器来验证服务的高可用与负载均衡调度。</p></blockquote><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>最终的代码和部署文件，已经传至github，欢迎star。</p><p><a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;整理环境&quot;&gt;&lt;a href=&quot;#整理环境&quot; class=&quot;headerlink&quot; title=&quot;整理环境&quot;&gt;&lt;/a&gt;整理环境&lt;/h1&gt;&lt;p&gt;上一章中，我们已经创建了&lt;code&gt;etcd&lt;/code&gt;、&lt;code&gt;account&lt;/code&gt;、&lt;code&gt;apigw&lt;/code&gt;这三个镜像对应的容器。在&lt;code&gt;Docker Compose&lt;/code&gt;中，我们想重新创建新的容器，不被之前的容器所干扰，并且把它们放在一个专属的网络中去，所以我们需要删除之前创建的容器。&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;docker&lt;/span&gt; rm -f etcd1 account apigw&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-3.2 直接Docker容器构建执行</title>
    <link href="https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution/"/>
    <id>https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution/</id>
    <published>2020-07-11T13:37:46.000Z</published>
    <updated>2021-12-05T08:13:24.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器执行"><a href="#容器执行" class="headerlink" title="容器执行"></a>容器执行</h1><p>这一章中，我们来测试一下上一章制作的镜像是否可以正常使用。</p><a id="more"></a><h2 id="获取etcd在docker中的地址"><a href="#获取etcd在docker中的地址" class="headerlink" title="获取etcd在docker中的地址"></a>获取etcd在docker中的地址</h2><p>还记得吗？在<a href="https://www.guaosi.com/2020/07/11/go-micro-service-write-service/">2.3 服务编写</a>时我们说过，<code>go-micro</code>默认查找的地址是<code>127.0.0.1</code>，但是<code>etcd</code>、<code>account</code>、<code>apigw</code>都是在不同容器中运行的，所以需要我们启动时手动指定<code>etcd</code>容器所在的地址。</p><p>我们执行<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; docker inspect etcd1 --format <span class="string">"&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure></p><p>这样我们就能拿到etcd在docker容器中的地址。</p><blockquote><p>docker容器运行时不指定网络命名空间，则默认使用default，default之间的容器在同一个网段中，所以可以互相通讯。</p></blockquote><h2 id="account"><a href="#account" class="headerlink" title="account"></a>account</h2><p>我们接着启动<code>account</code>服务<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -e <span class="attribute">PARAMS</span>=<span class="string">"--registry etcd --registry_address 172.17.0.2:2379"</span> <span class="attribute">--name</span>=<span class="string">"account"</span> -d registry.cn-shenzhen.aliyuncs.com/go_micro/account:v1.0</span><br></pre></td></tr></table></figure></p><blockquote><p>通过 -e 传递环境变量到PARAMS中，这跟我们上一章编写的Dockerfile文件有关</p></blockquote><h2 id="apigw"><a href="#apigw" class="headerlink" title="apigw"></a>apigw</h2><p>我们继续启动<code>apigw</code>服务<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e PARAMS=<span class="string">"-p 8091 --registry etcd --registry_address 172.17.0.2:2379"</span> -<span class="selector-tag">p</span> <span class="number">8091</span>:<span class="number">8091</span> --name=<span class="string">"apigw"</span> -d registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/go_micro/apigw:v1.<span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们最后发送请求进行测试<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">"username=guaosi&amp;password=guaosi"</span> http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8091</span><span class="regexp">/account/</span>register</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"message"</span>:<span class="string">""</span>&#125;</span><br></pre></td></tr></table></figure></p><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>最终的代码和部署文件，已经传至github，欢迎star。</p><p><a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;容器执行&quot;&gt;&lt;a href=&quot;#容器执行&quot; class=&quot;headerlink&quot; title=&quot;容器执行&quot;&gt;&lt;/a&gt;容器执行&lt;/h1&gt;&lt;p&gt;这一章中，我们来测试一下上一章制作的镜像是否可以正常使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-3.1 Dockerfile编写与镜像制作</title>
    <link href="https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image/"/>
    <id>https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image/</id>
    <published>2020-07-11T13:08:37.000Z</published>
    <updated>2021-12-05T08:13:24.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile编写"><a href="#Dockerfile编写" class="headerlink" title="Dockerfile编写"></a>Dockerfile编写</h1><p>我们根据<a href="https://www.guaosi.com/2020/07/11/go-micro-service-write-service/">2.3 服务编写</a> 与 <a href="https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/">2.4 网关编写</a>所建立好的目录，编写对应的<code>Dockerfile文件</code></p><h2 id="account"><a href="#account" class="headerlink" title="account"></a>account</h2><p><code>account/deploy/Dockerfile</code><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> bin/account /</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN chmod 777 /account</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 通过先设置一个环境变量，然后在容器运行时传入环境变量具体的值，达到外部指定参数运行的效果</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENV PARAMS=<span class="string">""</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"sh"</span>,<span class="string">"-c"</span>,<span class="string">"/account <span class="variable">$PARAMS</span>"</span>]</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="apigateway"><a href="#apigateway" class="headerlink" title="apigateway"></a>apigateway</h2><p><code>apigateway/deploy/Dockerfile</code><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> bin/apigw /</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN chmod 777 /apigw</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 通过先设置一个环境变量，然后在容器运行时传入环境变量具体的值，达到外部指定参数运行的效果</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENV PARAMS=<span class="string">""</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"sh"</span>,<span class="string">"-c"</span>,<span class="string">"/apigw <span class="variable">$PARAMS</span>"</span>]</span></span><br></pre></td></tr></table></figure></p><p>编写好<code>Dockerfile</code>后，我们先不急着立刻使用<code>docker build</code>来创建镜像，因为我们需要经常重新制作镜像以及上传到我们私人的镜像仓库，所以我们接下面编写<code>shell</code>脚本</p><h1 id="容器制作"><a href="#容器制作" class="headerlink" title="容器制作"></a>容器制作</h1><h2 id="docker私人仓库"><a href="#docker私人仓库" class="headerlink" title="docker私人仓库"></a>docker私人仓库</h2><p>企业的私人仓库可以自己构建<code>Harbor</code>，这个演示我就直接使用阿里云的免费<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">容器镜像服务</a>作为私人仓库</p><blockquote><p>请自行开通容器镜像服务与创建好<code>命名空间哦</code></p></blockquote><p>我们在阿里云上将仓库设置为私有，然后我们在本地进行docker仓库的认证登陆<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=guaosi@vip.qq.<span class="keyword">com</span> registry.<span class="keyword">cn</span>-shenzhen.aliyuncs.<span class="keyword">com</span></span><br><span class="line"></span><br><span class="line"># guaosi@vip.qq.<span class="keyword">com</span> 是阿里云的登录名 请自行修改后，回车后输入密码，回车通过认证</span><br></pre></td></tr></table></figure></p><h2 id="account-1"><a href="#account-1" class="headerlink" title="account"></a>account</h2><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p><code>account/deploy/docker_build.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DOCKER_IMAGE_HOST=<span class="string">"registry.cn-shenzhen.aliyuncs.com"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_NAMESPACE=<span class="string">"go_micro"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_HUB=<span class="string">"account"</span></span><br><span class="line"></span><br><span class="line">IMAGE_TAG=<span class="string">"v1.0"</span></span><br><span class="line"></span><br><span class="line">WORK_PATH=$(dirname <span class="variable">$0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前位置跳到脚本位置</span></span><br><span class="line"><span class="built_in">cd</span> ./<span class="variable">$&#123;WORK_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取到脚本目录</span></span><br><span class="line">WORK_PATH=$(<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">mkdir bin</span><br><span class="line"></span><br><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨平台 Mac编译Linux 需要交叉编译</span></span><br><span class="line"><span class="comment"># CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $&#123;WORK_PATH&#125;/bin/ $&#123;WORK_PATH&#125;/../</span></span><br><span class="line">go build -o <span class="variable">$&#123;WORK_PATH&#125;</span>/bin/ <span class="variable">$&#123;WORK_PATH&#125;</span>/../</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m编译完成: \033[0m <span class="variable">$&#123;WORK_PATH&#125;</span>/bin/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器制作</span></span><br><span class="line">docker build -t <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span> -f ./Dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m镜像打包完成，请推送: \033[0m <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span>\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原二进制文件以及所在目录</span></span><br><span class="line">rm -rf bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m残留二进制文件清理成功"</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>DOCKER_IMAGE_NAMESPACE</code> 请自行修改为自己的阿里云容器镜像服务的<code>命名空间</code></p></blockquote><p>然后我们执行如下命令，进行<code>account</code>的镜像制作<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x account<span class="regexp">/deploy/</span>docker_build.sh &amp;&amp; account<span class="regexp">/deploy/</span>docker_build.sh</span><br></pre></td></tr></table></figure></p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p><code>account/deploy/docker_push.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DOCKER_IMAGE_HOST=<span class="string">"registry.cn-shenzhen.aliyuncs.com"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_NAMESPACE=<span class="string">"go_micro"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_HUB=<span class="string">"account"</span></span><br><span class="line"></span><br><span class="line">IMAGE_TAG=<span class="string">"v1.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">docker push <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m镜像推送完成: \033[0m <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span> \n"</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>DOCKER_IMAGE_NAMESPACE</code> 请自行修改为自己的阿里云容器镜像服务的<code>命名空间</code></p></blockquote><p>然后我们执行如下命令，进行<code>account</code>的镜像推送<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x account<span class="regexp">/deploy/</span>docker_push.sh &amp;&amp; account<span class="regexp">/deploy/</span>docker_push.sh</span><br></pre></td></tr></table></figure></p><h2 id="apigateway-1"><a href="#apigateway-1" class="headerlink" title="apigateway"></a>apigateway</h2><h3 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h3><p><code>apigateway/deploy/docker_build.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DOCKER_IMAGE_HOST=<span class="string">"registry.cn-shenzhen.aliyuncs.com"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_NAMESPACE=<span class="string">"go_micro"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_HUB=<span class="string">"apigw"</span></span><br><span class="line"></span><br><span class="line">IMAGE_TAG=<span class="string">"v1.0"</span></span><br><span class="line"></span><br><span class="line">WORK_PATH=$(dirname <span class="variable">$0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前位置跳到脚本位置</span></span><br><span class="line"><span class="built_in">cd</span> ./<span class="variable">$&#123;WORK_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取到脚本目录</span></span><br><span class="line">WORK_PATH=$(<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">mkdir bin</span><br><span class="line"></span><br><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨平台 Mac编译Linux 需要交叉编译</span></span><br><span class="line"><span class="comment"># CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $&#123;WORK_PATH&#125;/bin/ $&#123;WORK_PATH&#125;/../</span></span><br><span class="line">go build -o <span class="variable">$&#123;WORK_PATH&#125;</span>/bin/ <span class="variable">$&#123;WORK_PATH&#125;</span>/../</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m编译完成: \033[0m <span class="variable">$&#123;WORK_PATH&#125;</span>/bin/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器制作</span></span><br><span class="line">docker build -t <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span> -f ./Dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m镜像打包完成，请推送: \033[0m <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span>\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原二进制文件以及所在目录</span></span><br><span class="line">rm -rf bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m残留二进制文件清理成功"</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>DOCKER_IMAGE_NAMESPACE</code> 请自行修改为自己的阿里云容器镜像服务的<code>命名空间</code></p></blockquote><p>然后我们执行如下命令，进行<code>apigw</code>的镜像制作<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x account<span class="regexp">/deploy/</span>docker_build.sh &amp;&amp; account<span class="regexp">/deploy/</span>docker_build.sh</span><br></pre></td></tr></table></figure></p><h3 id="push-1"><a href="#push-1" class="headerlink" title="push"></a>push</h3><p><code>apigateway/deploy/docker_push.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DOCKER_IMAGE_HOST=<span class="string">"registry.cn-shenzhen.aliyuncs.com"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_NAMESPACE=<span class="string">"go_micro"</span></span><br><span class="line"></span><br><span class="line">DOCKER_IMAGE_HUB=<span class="string">"apigw"</span></span><br><span class="line"></span><br><span class="line">IMAGE_TAG=<span class="string">"v1.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">docker push <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m镜像推送完成: \033[0m <span class="variable">$&#123;DOCKER_IMAGE_HOST&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_NAMESPACE&#125;</span>/<span class="variable">$&#123;DOCKER_IMAGE_HUB&#125;</span>:<span class="variable">$&#123;IMAGE_TAG&#125;</span> \n"</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>DOCKER_IMAGE_NAMESPACE</code> 请自行修改为自己的阿里云容器镜像服务的<code>命名空间</code></p></blockquote><p>然后我们执行如下命令，进行<code>apigw</code>的镜像推送<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x account<span class="regexp">/deploy/</span>docker_push.sh &amp;&amp; account<span class="regexp">/deploy/</span>docker_push.sh</span><br></pre></td></tr></table></figure></p><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>最终的代码和部署文件，已经传至github，欢迎star。</p><p><a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dockerfile编写&quot;&gt;&lt;a href=&quot;#Dockerfile编写&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile编写&quot;&gt;&lt;/a&gt;Dockerfile编写&lt;/h1&gt;&lt;p&gt;我们根据&lt;a href=&quot;https://www.guaosi.com/2020/07/11/go-micro-service-write-service/&quot;&gt;2.3 服务编写&lt;/a&gt; 与 &lt;a href=&quot;https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/&quot;&gt;2.4 网关编写&lt;/a&gt;所建立好的目录，编写对应的&lt;code&gt;Dockerfile文件&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;account&quot;&gt;&lt;a href=&quot;#account&quot; class=&quot;headerlink&quot; title=&quot;account&quot;&gt;&lt;/a&gt;account&lt;/h2&gt;&lt;p&gt;&lt;code&gt;account/deploy/Dockerfile&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; centos:&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; bin/account /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;RUN chmod 777 /account&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过先设置一个环境变量，然后在容器运行时传入环境变量具体的值，达到外部指定参数运行的效果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;ENV PARAMS=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;ENTRYPOINT [&lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;/account &lt;span class=&quot;variable&quot;&gt;$PARAMS&lt;/span&gt;&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-2.4 网关编写</title>
    <link href="https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/"/>
    <id>https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/</id>
    <published>2020-07-11T10:59:05.000Z</published>
    <updated>2021-12-05T08:13:24.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>上一章中，我们已经编写好了<code>account</code>服务。这一章我们来完成<code>apigateway</code>，也就是网关的编写。</p><p>我们将会使用<code>gin</code>框架，来对外提供<code>HTTP</code>服务与<code>路由</code>。一个<code>url</code>请求进入后，<code>gin</code>框架的路由解析后找到对应的<code>handler</code>方法，然后该<code>handler</code>中会调用对应的<code>服务</code>，获得最终的结果，返回给用户。</p><blockquote><p>对外HTTP，对内RPC</p></blockquote><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>我们来看一下<code>apigateway</code>的最终目录结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─apigateway</span><br><span class="line">  ├─deploy                   （部署相关）</span><br><span class="line">  ├─handler</span><br><span class="line">    └─account.go</span><br><span class="line">  ├─proto                    （proto文件）</span><br><span class="line">    ├─account</span><br><span class="line">      ├─account<span class="selector-class">.pb</span><span class="selector-class">.go</span>           </span><br><span class="line">      └─account<span class="selector-class">.pb</span><span class="selector-class">.micro</span><span class="selector-class">.go</span>     </span><br><span class="line">  ├─router                    （路由）</span><br><span class="line">    └─router.go</span><br><span class="line">  ├─serviceclient             （client）</span><br><span class="line">    └─init<span class="selector-class">.go</span>   </span><br><span class="line">  ├─apigw<span class="selector-class">.go</span>                  （入口文件）</span><br><span class="line">  ├─go.mod</span><br><span class="line">  └─go.sum</span><br></pre></td></tr></table></figure><a id="more"></a><p>文件夹大家根据结构自行创建~</p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><p>好，那我们现在开始编写相关文件。</p><p>最终的代码和部署文件，已经传至github，欢迎star。</p><p><a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h2><p><code>account</code>的<code>proto</code>相关文件已经在之前的 <a href="https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/">GO微服务系列-2.1 proto文件的编写与生成</a> 已经编写并且成功好了，我们复制到<code>proto</code>文件夹中即可。</p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p><code>serviceclient/init.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> serviceclient</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"apigw/handler"</span></span><br><span class="line">proto <span class="string">"apigw/proto/account"</span></span><br><span class="line"><span class="string">"github.com/micro/cli/v2"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line"><span class="comment">// 这里使用 kubernetes 是为了之后可以通过命令行指定注册中心用 kubernetes</span></span><br><span class="line">_ <span class="string">"github.com/micro/go-plugins/registry/kubernetes/v2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Port <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterService</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接服务注册中心</span></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Flags(</span><br><span class="line">&amp;cli.StringFlag&#123;</span><br><span class="line">Name:  <span class="string">"p"</span>,</span><br><span class="line">Usage: <span class="string">"port"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 解析命令行参数</span></span><br><span class="line"><span class="comment">// 我们希望可以使用 -p 参数来手动指定我们HTTP服务对外提供服务时的端口</span></span><br><span class="line">service.Init(</span><br><span class="line">micro.Action(<span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">Port = c.String(<span class="string">"p"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(Port) == <span class="number">0</span> &#123;</span><br><span class="line">Port = <span class="string">"8091"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 复用服务注册的客户端</span></span><br><span class="line">cli := service.Client()</span><br><span class="line"><span class="comment">// 获取在服务注册中心上 micro.service.account 的客户端</span></span><br><span class="line">handler.AccountServiceClient = proto.NewAccountService(<span class="string">"micro.service.account"</span>, cli)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h2><p><code>handler/account.go</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">proto <span class="string">"apigw/proto/account"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="type">AccountServiceClient</span> proto.<span class="type">AccountService</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterHandler</span><span class="params">(<span class="built_in">c</span> *gin.Context)</span></span> &#123;</span><br><span class="line">username := <span class="built_in">c</span>.<span class="type">PostForm</span>(<span class="string">"username"</span>)</span><br><span class="line">password := <span class="built_in">c</span>.<span class="type">PostForm</span>(<span class="string">"password"</span>)</span><br><span class="line"><span class="comment">// 通过AccountService服务的client，调用 AccountRegister 方法</span></span><br><span class="line">res, err := <span class="type">AccountServiceClient</span>.<span class="type">AccountRegister</span>(context.<span class="type">TODO</span>(), &amp;proto.<span class="type">ReqAccountRegister</span>&#123;</span><br><span class="line"><span class="type">Username</span>: username,</span><br><span class="line"><span class="type">Password</span>: password,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.<span class="type">Print</span>(err.<span class="type">Error</span>())</span><br><span class="line"><span class="built_in">c</span>.<span class="type">JSON</span>(http.<span class="type">StatusInternalServerError</span>, gin.<span class="type">H</span>&#123;</span><br><span class="line"><span class="string">"code"</span>:    -<span class="number">2</span>,</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"server error"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">c</span>.<span class="type">JSON</span>(http.<span class="type">StatusOK</span>, gin.<span class="type">H</span>&#123;</span><br><span class="line"><span class="string">"code"</span>:    res.<span class="type">Code</span>,</span><br><span class="line"><span class="string">"message"</span>: res.<span class="type">Message</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="编写路由"><a href="#编写路由" class="headerlink" title="编写路由"></a>编写路由</h2><p><code>router/router.go</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package router</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">"apigw/handler"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func NewRouter() *gin.Engine &#123;</span><br><span class="line"><span class="built_in">route </span>:= gin.Default()</span><br><span class="line">route.POST(<span class="string">"/account/register"</span>, handler.RegisterHandler)</span><br><span class="line">return route</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="开启HTTP服务"><a href="#开启HTTP服务" class="headerlink" title="开启HTTP服务"></a>开启HTTP服务</h2><p><code>apigw.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"apigw/router"</span></span><br><span class="line"><span class="string">"apigw/serviceclient"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">serviceclient.RegisterService()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := router.NewRouter()</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">"0.0.0.0:"</span> + serviceclient.Port); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写完毕后，我们运行直接指定以<code>8091</code>作为端口启动<code>http</code>服务，并且服务发现和注册切换为<code>etcd</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">run</span> . -p <span class="number">8091</span> <span class="comment">--registry etcd</span></span><br></pre></td></tr></table></figure></p><blockquote><p>记得要启动我们上一章编写的account服务哦~</p></blockquote><p>开启成功后，我们发送curl请求，进行验证<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">"username=guaosi&amp;password=guaosi"</span> http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8091</span><span class="regexp">/account/</span>register</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"code"</span>:<span class="number">0</span>,<span class="string">"message"</span>:<span class="string">""</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;上一章中，我们已经编写好了&lt;code&gt;account&lt;/code&gt;服务。这一章我们来完成&lt;code&gt;apigateway&lt;/code&gt;，也就是网关的编写。&lt;/p&gt;
&lt;p&gt;我们将会使用&lt;code&gt;gin&lt;/code&gt;框架，来对外提供&lt;code&gt;HTTP&lt;/code&gt;服务与&lt;code&gt;路由&lt;/code&gt;。一个&lt;code&gt;url&lt;/code&gt;请求进入后，&lt;code&gt;gin&lt;/code&gt;框架的路由解析后找到对应的&lt;code&gt;handler&lt;/code&gt;方法，然后该&lt;code&gt;handler&lt;/code&gt;中会调用对应的&lt;code&gt;服务&lt;/code&gt;，获得最终的结果，返回给用户。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对外HTTP，对内RPC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;p&gt;我们来看一下&lt;code&gt;apigateway&lt;/code&gt;的最终目录结构&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├─apigateway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─deploy                   （部署相关）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └─account.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─proto                    （proto文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├─account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ├─account&lt;span class=&quot;selector-class&quot;&gt;.pb&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      └─account&lt;span class=&quot;selector-class&quot;&gt;.pb&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.micro&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─router                    （路由）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └─router.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─serviceclient             （client）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └─init&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─apigw&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;                  （入口文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─go.mod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  └─go.sum&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-2.3 服务编写</title>
    <link href="https://www.guaosi.com/2020/07/11/go-micro-service-write-service/"/>
    <id>https://www.guaosi.com/2020/07/11/go-micro-service-write-service/</id>
    <published>2020-07-11T10:28:22.000Z</published>
    <updated>2021-12-05T08:13:24.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>在 <a href="https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/">1.1 涉及的组件、框架介绍</a> 中已经大致介绍了一下我们微服务的整个请求流程。我们这章就开始编写一个最简单的服务——<code>account</code>，作为<code>服务A</code></p><blockquote><p>注意：这个系列的重心在整个微服务的创建以及部署上，所以会尽可能地简化业务逻辑代码。</p></blockquote><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>我们来看一下<code>account</code>的最终目录结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─account</span><br><span class="line">  ├─deploy                   （部署相关）</span><br><span class="line">  ├─handler</span><br><span class="line">    └─account.go</span><br><span class="line">  ├─proto                    （proto文件）</span><br><span class="line">    ├─account<span class="selector-class">.pb</span><span class="selector-class">.go</span>           </span><br><span class="line">    └─account<span class="selector-class">.pb</span><span class="selector-class">.micro</span><span class="selector-class">.go</span>     </span><br><span class="line">  ├─accountservice<span class="selector-class">.go</span>        （入口文件）</span><br><span class="line">  ├─go.mod</span><br><span class="line">  └─go.sum</span><br></pre></td></tr></table></figure><a id="more"></a><p>文件夹大家根据结构自行创建~</p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><p>好，那我们现在开始编写相关文件。</p><p>最终的代码和部署文件，已经传至github，欢迎star。</p><p><a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h2><p><code>account</code>的<code>proto</code>相关文件已经在之前的 <a href="https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/">GO微服务系列-2.1 proto文件的编写与生成</a> 已经编写并且成功好了，我们复制到<code>proto</code>文件夹中即可。</p><h2 id="实现服务接口"><a href="#实现服务接口" class="headerlink" title="实现服务接口"></a>实现服务接口</h2><p><code>handler/account.go</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package handler</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">"account/proto"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type AccountService struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="selector-tag">a</span> *AccountService) AccountRegister(c context<span class="selector-class">.Context</span>, req *proto<span class="selector-class">.ReqAccountRegister</span>, res *proto.ResAccountRegister) error &#123;</span><br><span class="line">fmt.Println(<span class="string">"hit here"</span>)</span><br><span class="line"><span class="keyword">if</span> req<span class="selector-class">.Username</span> == <span class="string">"guaosi"</span> &amp;&amp; req<span class="selector-class">.Password</span> == <span class="string">"guaosi"</span> &#123;</span><br><span class="line">res<span class="selector-class">.Code</span> = <span class="number">0</span></span><br><span class="line">res<span class="selector-class">.Message</span> = <span class="string">""</span></span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">res<span class="selector-class">.Code</span> = -<span class="number">1</span></span><br><span class="line">res<span class="selector-class">.Message</span> = <span class="string">"账号或者密码不正确"</span></span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们做一个小小的限制，只有当请求时<code>Username</code>和<code>Password</code>都为<code>guaosi</code>时才返回正确，否则返回<code>账号或者密码不正确</code>的提示。当被请求时，我们都会在标准输出中打印<code>hit here</code>，以便我们高可用时可以进行验证。</p><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><p><code>accountservice.go</code><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">"account/handler"</span></span><br><span class="line"><span class="string">"account/proto"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line"><span class="comment">// 这里使用 kubernetes 是为了之后可以通过命令行指定注册中心用 kubernetes</span></span><br><span class="line">_ <span class="string">"github.com/micro/go-plugins/registry/kubernetes/v2"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">"micro.service.account"</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 初始化相关操作</span></span><br><span class="line">service.Init()</span><br><span class="line"><span class="comment">// 注册实现了服务的handler</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> := proto.RegisterAccountServiceHandler(service.Server(), new(handler.AccountService)); <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>.<span class="keyword">Error</span>())</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行server</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> := service.<span class="keyword">Run</span>(); <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>.<span class="keyword">Error</span>())</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写完毕后，我们运行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="keyword">run</span><span class="bash"> .</span></span><br></pre></td></tr></table></figure></p><p>如果提示以下相关内容，则表明此时我们使用mdns来服务发现，服务开启成功~<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-07-11 18:35:27  <span class="attribute">file</span>=v2@v2.9.0/service.go:200 <span class="attribute">level</span>=info Starting [service] micro.service.account</span><br><span class="line">2020-07-11 18:35:27  <span class="attribute">file</span>=grpc/grpc.go:864 <span class="attribute">level</span>=info<span class="built_in"> Server </span>[grpc] Listening on [::]:57088</span><br><span class="line">2020-07-11 18:35:27  <span class="attribute">file</span>=grpc/grpc.go:697 <span class="attribute">level</span>=info Registry [mdns] Registering node: micro.service.account-d3fbac56-26ab-4916-ae2d-0a56ee396300</span><br></pre></td></tr></table></figure></p><p>然后我们接着将服务发现，服务注册切换为使用<code>etcd</code>。</p><h1 id="安装etcd"><a href="#安装etcd" class="headerlink" title="安装etcd"></a>安装etcd</h1><p>我们直接使用<code>docker</code>来安装<code>etcd</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># etcd单一节点</span></span><br><span class="line"></span><br><span class="line">docker run -d <span class="string">\</span></span><br><span class="line">  -p <span class="number">2379</span>:<span class="number">2379</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">2380</span>:<span class="number">2380</span> <span class="string">\</span></span><br><span class="line">  --name etcd1 <span class="string">\</span></span><br><span class="line">  quay.io/coreos/etcd:v3.<span class="number">3.8</span> <span class="string">\</span></span><br><span class="line">  /usr/local/bin/etcd <span class="string">\</span></span><br><span class="line">  --name s1 <span class="string">\</span></span><br><span class="line">  --listen-client-urls http:<span class="regexp">//0.0.0.0:2379 \</span></span><br><span class="line"><span class="regexp">  --advertise-client-urls http://</span><span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span></span><br></pre></td></tr></table></figure></p><p>如果想在<code>etcd</code>容器中使用<code>cli</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker exec -it etcd1 sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置docker中环境变量</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ETCDCTL_API</span>=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至etcdctl目录</span></span><br><span class="line">cd /bin</span><br></pre></td></tr></table></figure></p><p>然后我们可以顺便看一下在<code>etcd</code>中注册的服务的信息<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl <span class="keyword">get</span> /micro/registry/ <span class="comment">--prefix</span></span><br></pre></td></tr></table></figure></p><h1 id="切换服务注册为etcd"><a href="#切换服务注册为etcd" class="headerlink" title="切换服务注册为etcd"></a>切换服务注册为etcd</h1><p>请先确保你的etcd跟你的服务在一个网络下，因为<code>go-micro</code>默认查找组件的地址为<code>127.0.0.1</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="builtin-name">run</span> . <span class="attribute">--registry</span>=etcd</span><br></pre></td></tr></table></figure></p><p>如果不在同一个网络下，或者端口不是<code>2379</code>，那个可以使用<code>--registry_address</code>来手动指定(比如在<code>192.168.1.1</code>下，并且端口为<code>23790</code>)<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="builtin-name">run</span> . <span class="attribute">--registry</span>=etcd <span class="attribute">--registry_address</span>=192.168.1.1:23790</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;在 &lt;a href=&quot;https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/&quot;&gt;1.1 涉及的组件、框架介绍&lt;/a&gt; 中已经大致介绍了一下我们微服务的整个请求流程。我们这章就开始编写一个最简单的服务——&lt;code&gt;account&lt;/code&gt;，作为&lt;code&gt;服务A&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这个系列的重心在整个微服务的创建以及部署上，所以会尽可能地简化业务逻辑代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;p&gt;我们来看一下&lt;code&gt;account&lt;/code&gt;的最终目录结构&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├─account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─deploy                   （部署相关）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └─account.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─proto                    （proto文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├─account&lt;span class=&quot;selector-class&quot;&gt;.pb&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └─account&lt;span class=&quot;selector-class&quot;&gt;.pb&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.micro&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─accountservice&lt;span class=&quot;selector-class&quot;&gt;.go&lt;/span&gt;        （入口文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ├─go.mod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  └─go.sum&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-2.2 简单介绍了解go-micro</title>
    <link href="https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/"/>
    <id>https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/</id>
    <published>2020-07-10T03:50:22.000Z</published>
    <updated>2021-12-05T08:13:24.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-micro核心组件介绍"><a href="#go-micro核心组件介绍" class="headerlink" title="go-micro核心组件介绍"></a>go-micro核心组件介绍</h1><p>前面已经说过<code>Micro</code>和<code>go-micro的区别了</code>。<code>micro</code>是使用<code>go-micro</code>框架编写的运行时工具集，它最主要的作用是辅助微服务开发。比如想自己马上构建一个<code>web</code>环境或者<code>api</code>环境进行调试，或者查看服务的健康状态，注册信息之类的。</p><p>而我们开发微服务时，使用的框架是<code>go-micro</code>。它可以很好地帮助我们创建服务、服务注册与发现、负载均衡、扩展网关功能等等。</p><p>我们来简单了解一下<code>go-micro</code>框架中的核心组件</p><p><img src="/assets/blogImg/go-micro-service-brief-introduction-go-micro/go-micro核心组件.png" alt="go-micro核心组件"></p><a id="more"></a><p>我们来简单看一下右边的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line"><span class="attribute">service </span>:= micro.<span class="built_in">NewService</span>( // 表示创建一个go-micro的服务</span><br><span class="line">micro.Name(<span class="string">"micro.service.account"</span>), // 服务注册到注册中心时的名字,为空表示不注册</span><br><span class="line">)</span><br><span class="line">service.<span class="built_in">Run</span>() // 运行 server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码最后是<code>service.Run()</code>实际上是开启<code>server</code>服务，供其他服务的<code>client</code>进行调用。</p><p>我们现在来说一下左边核心组件各自的功能：</p><ul><li>Client：发送RPC请求与广播消息</li><li>Server：接收RPC请求与消费消息</li><li>Broker：异步通信组件</li><li>Codec：数据编码组件</li><li>Registry：服务注册组件</li><li>Selector：客户端均衡器</li><li>Transport：同步通信组件</li></ul><p>其中，<code>Broker</code>和<code>Transport</code>都是通讯组件，区别就是一个是<code>异步</code>，另一个是<code>同步</code>。所以我们在业务中使用<code>Transport</code>组件会比较频繁，因为业务需要关心调用结果。</p><p><code>Codec</code>是数据编码组件，它可以自动将请求及其参数，转换为需要的格式。例如，当我们需要调用其他服务时，<code>Transport</code>默认的是使用<code>grpc2</code>,<code>grpc2</code>使用的通讯格式是<code>Protobuf</code>，所以<code>Codec</code>会帮我们将数据转为<code>Protobuf</code>格式进行发送。</p><p><code>Registry</code>是服务注册组件，它既可以帮我们把我们的服务注册到服务中心，又可以在服务中心中获取已经注册的服务列表，供我们进行调用。</p><p><code>Selector</code>客户端均衡器配合服务注册组件。当从服务中心中获取已经注册的服务列表时，由于相同的一个服务可能是高可用的架构，所以需要一个均衡调度器，根据不同的均衡权重算法，来帮我们选择一个合适的节点进行调用。</p><p>下面我们来通过<code>核心组件调用关系</code>来加深一下理解</p><h1 id="go-micro核心组件调用关系"><a href="#go-micro核心组件调用关系" class="headerlink" title="go-micro核心组件调用关系"></a>go-micro核心组件调用关系</h1><p><img src="/assets/blogImg/go-micro-service-brief-introduction-go-micro/go-micro基础组件调用关系.png" alt="go-micro基础组件调用关系"></p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>当执行<code>service.Run()</code>时，<code>Registry</code>服务注册组件会将我们之前设置的<code>micro.Name</code>，当前服务所在的<code>IP</code>与<code>端口</code>信息注册到服务中心，供其他服务的<code>Client</code>进行调用。</p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p><code>Client</code>是当我们需要其他服务时使用的。它会先通过<code>Registry</code>服务注册组件，从注册中心获取到服务以及其对应的地址列表，然后<code>Selector</code>客户端均衡器会根据算法选择一个合适的地址。确定之后，再通过<code>Broker</code>或者是<code>Transport</code>通讯组件，在<code>Codec</code>数据编码组件的编码过后，进行发送。</p><p>服务端收到的请求，经过<code>Codec</code>数据编码组件的解码后，计算得出结果。如果是<code>Transport</code>，则再通过通讯组件、数据编码组件的编码后进行发送。调用方获得获得结果。</p><h1 id="go-micro核心组件的默认使用"><a href="#go-micro核心组件的默认使用" class="headerlink" title="go-micro核心组件的默认使用"></a>go-micro核心组件的默认使用</h1><p>由于<code>go-micro</code>的扩展性支持<code>Registry</code>、<code>Transport</code>、<code>Broker</code>、<code>Server</code>都可以是使用不同协议或不同工具的。所以我们有必要来了解一下默认都是使用哪一些协议或工具。</p><p>我提前使用下一章编写好的的<code>account</code>服务注册通过<code>etcd</code>的注册方式到服务中心后，通过<code>micro</code>工具查看注册信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt; micro <span class="attribute">--registry</span>=etcd <span class="builtin-name">get</span><span class="built_in"> service </span>micro.service.account</span><br><span class="line"></span><br><span class="line">service  micro.service.account</span><br><span class="line"></span><br><span class="line">version latest</span><br><span class="line"></span><br><span class="line">ID<span class="built_in">Address</span>Metadata</span><br><span class="line">micro.service.account-37cf2bd5-87bd-4912-b324-4dac0af013b5192.168.1.40:49648<span class="attribute">protocol</span>=grpc,registry=etcd,server=grpc,transport=grpc,broker=http</span><br><span class="line"></span><br><span class="line">Endpoint: AccountService.AccountRegister</span><br><span class="line"></span><br><span class="line">Request: &#123;</span><br><span class="line">message_state MessageState &#123;</span><br><span class="line">no_unkeyed_literals NoUnkeyedLiterals</span><br><span class="line">do_not_compare DoNotCompare</span><br><span class="line">do_not_copy DoNotCopy</span><br><span class="line">message_info MessageInfo</span><br><span class="line">&#125;</span><br><span class="line">int32 int32</span><br><span class="line">unknown_fields []uint8</span><br><span class="line">username string</span><br><span class="line">password string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response: &#123;</span><br><span class="line">message_state MessageState &#123;</span><br><span class="line">no_unkeyed_literals NoUnkeyedLiterals</span><br><span class="line">do_not_compare DoNotCompare</span><br><span class="line">do_not_copy DoNotCopy</span><br><span class="line">message_info MessageInfo</span><br><span class="line">&#125;</span><br><span class="line">int32 int32</span><br><span class="line">unknown_fields []uint8</span><br><span class="line">code int32</span><br><span class="line">message string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>protocol=grpc,registry=etcd,server=grpc,transport=grpc,broker=http</code><br>我们可以看出：</p><ul><li>通讯协议默认是<code>grpc</code></li><li><code>server</code>默认是<code>grpc</code></li><li><code>transport</code>默认是<code>grpc</code></li><li><code>broker</code>默认是<code>http</code></li><li><code>registry</code>实际上默认是<code>mdns</code>，我通过参数指定的方式让它使用的是<code>etcd</code>(因为后面使用的基本都是etcd)。</li></ul><p>这篇文章也只是大致简单的介绍了一下<code>go-micro</code>框架。如果对<code>micro</code>有兴趣的小伙伴去<a href="http://microhq.cn/index-cn" target="_blank" rel="noopener">Micro中国</a>以及<a href="https://github.com/micro-in-cn/tutorials" target="_blank" rel="noopener">micro中文资源</a>进行更加深入、系统的学习和使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;go-micro核心组件介绍&quot;&gt;&lt;a href=&quot;#go-micro核心组件介绍&quot; class=&quot;headerlink&quot; title=&quot;go-micro核心组件介绍&quot;&gt;&lt;/a&gt;go-micro核心组件介绍&lt;/h1&gt;&lt;p&gt;前面已经说过&lt;code&gt;Micro&lt;/code&gt;和&lt;code&gt;go-micro的区别了&lt;/code&gt;。&lt;code&gt;micro&lt;/code&gt;是使用&lt;code&gt;go-micro&lt;/code&gt;框架编写的运行时工具集，它最主要的作用是辅助微服务开发。比如想自己马上构建一个&lt;code&gt;web&lt;/code&gt;环境或者&lt;code&gt;api&lt;/code&gt;环境进行调试，或者查看服务的健康状态，注册信息之类的。&lt;/p&gt;
&lt;p&gt;而我们开发微服务时，使用的框架是&lt;code&gt;go-micro&lt;/code&gt;。它可以很好地帮助我们创建服务、服务注册与发现、负载均衡、扩展网关功能等等。&lt;/p&gt;
&lt;p&gt;我们来简单了解一下&lt;code&gt;go-micro&lt;/code&gt;框架中的核心组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/go-micro-service-brief-introduction-go-micro/go-micro核心组件.png&quot; alt=&quot;go-micro核心组件&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-2.1 proto文件的编写与生成</title>
    <link href="https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/"/>
    <id>https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/</id>
    <published>2020-07-10T03:23:12.000Z</published>
    <updated>2021-12-05T08:13:24.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>上一篇文章我们已经安装过<code>Proto</code>但是还是不能生成<code>go</code>与<code>go-micro</code>版本的对应的文件。</p><p>所以我们还需要安装<code>protoc-gen-go</code>和<code>protoc-gen-micro</code>这2个插件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/golang/protobuf/protoc-gen-<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/micro/micro/v2/cmd/protoc-gen-micro@master</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="编写proto文件"><a href="#编写proto文件" class="headerlink" title="编写proto文件"></a>编写proto文件</h1><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p goprotobuf/<span class="keyword">proto</span> goprotobuf/build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">vim goprotobuf/<span class="keyword">proto</span>/account.<span class="keyword">proto</span></span><br></pre></td></tr></table></figure><p>然后我们编写如下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">syntax</span>=<span class="string">"proto3"</span>;</span><br><span class="line">package proto;</span><br><span class="line">option <span class="attribute">go_package</span>=<span class="string">".;proto"</span>;</span><br><span class="line"></span><br><span class="line">service AccountService&#123;</span><br><span class="line">  rpc AccountRegister(ReqAccountRegister) returns(ResAccountRegister)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message ReqAccountRegister&#123;</span><br><span class="line">  string <span class="attribute">username</span>=1;</span><br><span class="line">  string <span class="attribute">password</span>=2;</span><br><span class="line">&#125;</span><br><span class="line">message ResAccountRegister&#123;</span><br><span class="line">  int32 <span class="attribute">code</span>=1;</span><br><span class="line">  string <span class="attribute">message</span>=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个<code>request</code>跟一个<code>response</code>结构体。其中，<code>request</code>需要传递<code>username</code>(用户名)跟<code>password</code>(密码)。当请求成功后，收到的<code>response</code>中包含<code>code</code>(内部状态码)跟<code>message</code>(信息)</p><h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># protoc --go_out=转换输出为go文件的目录 --micro_out=转换输出为micro微服务文件的目录 原始proto文件所在位置</span></span><br><span class="line"></span><br><span class="line">protoc <span class="attribute">--go_out</span>=goprotobuf/build <span class="attribute">--micro_out</span>=goprotobuf/build goprotobuf/proto/account.proto</span><br></pre></td></tr></table></figure><p>生成成功后，我们<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; ls goprotobuf/build</span><br><span class="line"></span><br><span class="line">account<span class="selector-class">.pb</span><span class="selector-class">.go</span>  account<span class="selector-class">.pb</span><span class="selector-class">.micro</span><span class="selector-class">.go</span></span><br></pre></td></tr></table></figure></p><p><code>account.pb.go</code>是定义<code>ReqAccountRegister</code>与<code>ResAccountRegister</code>结构体。</p><p><code>account.pb.go</code>定义了<code>AccountService</code>接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;上一篇文章我们已经安装过&lt;code&gt;Proto&lt;/code&gt;但是还是不能生成&lt;code&gt;go&lt;/code&gt;与&lt;code&gt;go-micro&lt;/code&gt;版本的对应的文件。&lt;/p&gt;
&lt;p&gt;所以我们还需要安装&lt;code&gt;protoc-gen-go&lt;/code&gt;和&lt;code&gt;protoc-gen-micro&lt;/code&gt;这2个插件&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;u&lt;/span&gt; github.&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/golang/protobuf/protoc-gen-&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; github.&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/micro/micro/v2/cmd/protoc-gen-micro@master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-1.2 环境的准备与安装</title>
    <link href="https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/"/>
    <id>https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/</id>
    <published>2020-07-08T03:58:50.000Z</published>
    <updated>2021-12-05T08:13:24.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>组件我想的是尽量都是使用容器，这样方便运行环境的统一。所以像<code>Gitlab</code>、<code>Jenkins</code>、<code>Traefik</code>等等，这些组件我会在后面等用到了直接使用容器构建。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>除了以上那些,像<code>Go</code>运行环境,<code>Micro</code>、<code>ProtoBuf</code>、<code>Kubernetes</code>还是需要我们手动进行安装的。</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>这个没啥好说的，可以去<code>GO语言中文网</code>进行<a href="https://studygolang.com/dl" target="_blank" rel="noopener">下载</a>安装，我使用的是<code>1.14.1</code>版本。记得配置好系统变量。同时，请设置好<code>go mod</code>代理.</p><blockquote><p>不会设置请看 <a href="https://goproxy.io/zh/" target="_blank" rel="noopener">https://goproxy.io/zh/</a></p></blockquote><a id="more"></a><h2 id="Micro"><a href="#Micro" class="headerlink" title="Micro"></a>Micro</h2><p><code>Micro</code>是使用<code>go-micro</code>框架编写的运行时工具集，它最主要的作用是辅助微服务开发。比如想自己马上构建一个<code>web</code>环境或者<code>api</code>环境进行调试，或者查看服务的健康状态，注册信息之类的。</p><p>感兴趣的可以安装(这个系列用到的不是很经常)：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/micro/micro/v2</span><br></pre></td></tr></table></figure><p>可以去了解一下它的<a href="http://microhq.cn/docs/micro/cli-cn" target="_blank" rel="noopener">cli</a>文档</p><h2 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h2><p><code>go-micro</code>的<code>transport</code>跟<code>server</code>默认通讯协议是<code>grpc</code>,<code>grpc</code>使用的通讯格式是<code>Protobuf</code>,所以我们需要安装<code>Protobuf</code>环境，以便我们编写生成对应的<code>Protobuf</code>文件。</p><p>如果跟我一样是<code>Mac</code>环境并且安装了<code>brew</code>,那么可以直接使用下面指令进行安装<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>protobuf</span><br></pre></td></tr></table></figure></p><p>其他环境的小伙伴，可以先去下载<a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">protobuf</a>中最新的发布包，解压放到<code>bin</code>目录下即可。举个例子，如果是Ubuntu，可以按照如下步骤操作：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line">$ wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/protocolbuffers/</span>protobuf<span class="regexp">/releases/</span>download<span class="regexp">/v3.12.1/</span>protoc-<span class="number">3.12</span>.<span class="number">1</span>-linux-x86_64.zip</span><br><span class="line"><span class="comment"># 解压到 /usr/local 目录下</span></span><br><span class="line">$ sudo <span class="number">7</span>z x protoc-<span class="number">3.12</span>.<span class="number">1</span>-linux-x86_64.zip -o<span class="regexp">/usr/</span>local</span><br></pre></td></tr></table></figure></p><p>如果不想安装在 <code>/usr/local</code> 目录下，可以解压到其他的其他，并把解压路径下的 <code>bin</code> 目录 加入到环境变量即可。</p><p>如果能正常显示版本，则表示安装成功。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ protoc --version</span><br><span class="line">libprotoc <span class="number">3.12</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p><p>最好是可以知道<a href="http://www.topgoer.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1/gRPC/Protobuf%E8%AF%AD%E6%B3%95.html?h=protobuf" target="_blank" rel="noopener">Protobuf的语法</a>以及如何<a href="http://www.topgoer.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1/gRPC/Protobuf%E8%BD%AC%E6%8D%A2.html?h=protobuf" target="_blank" rel="noopener">转换为go</a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>大家可以根据自己不同的操作系统，来决定如何安装<code>Docker</code>。例如，<code>Mac</code>可以安装<code>Docker Desktop For Mac</code>，<code>windows</code>用户我建议是虚拟机安装<code>Ceentos</code>系统或<code>Ubuntu</code>系统后，再在里面安装<code>Docker</code>来使用，而不是使用<code>Docker Desktop For Windows</code>。</p><p>大家可以根据<code>菜鸟教程</code>里的<a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">Docker教程</a>里，根据自己不同的操作系统进行安装，并且记得设置好<code>镜像加速器</code>噢~</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>自行参考菜鸟教程中的<a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener">Docker Compose</a>进行安装即可。</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>我之前的文章已经完整的写过如何安装<code>Kubetnetes</code>:</p><p><a href="https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/">Kubernetes 18.04集群安装教程(基于Centos7)</a></p><p><a href="https://www.guaosi.com/2020/07/05/kubernetes-for-mac-install/">Kubernetes 基于 Mac OS 安装教程</a></p><blockquote><p>注意，我是使用Windows下的VMware构建Kubernetes集群环境以及Gitlab和Jenkins环境</p></blockquote><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>我的本机运行环境是<code>Mac</code>,<code>Kubetnetes</code>跟Gitlab和Jenkins环境都是安装在<code>Windows</code>的<code>Vmware</code>虚拟机里，虚拟机使用的是桥接模式。<code>Mac</code>和虚拟机在同一个网段下，可以正常通讯。还不是很清楚<code>Vmware</code>跟<code>Docker</code>网络模式区别的，可以看一看<a href="https://www.guaosi.com/2020/01/22/network-of-vmware-and-docker/">Vmware和Docker的网络模式讲解</a></p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">cpu</th><th style="text-align:center">内存</th><th style="text-align:center">磁盘</th><th style="text-align:center">IP</th></tr></thead><tbody><tr><td style="text-align:center">Mac</td><td style="text-align:center">6核12线</td><td style="text-align:center">16G</td><td style="text-align:center">50G</td><td style="text-align:center">192.168.1.10</td></tr><tr><td style="text-align:center">K8s</td><td style="text-align:center">2核2线</td><td style="text-align:center">4G</td><td style="text-align:center">30G</td><td style="text-align:center">192.168.1.200</td></tr><tr><td style="text-align:center">Jenkins</td><td style="text-align:center">2核2线</td><td style="text-align:center">8G</td><td style="text-align:center">30G</td><td style="text-align:center">192.168.1.220</td></tr><tr><td style="text-align:center">Gitlab</td><td style="text-align:center">2核2线</td><td style="text-align:center">8G</td><td style="text-align:center">30G</td><td style="text-align:center">192.168.1.220</td></tr></tbody></table><blockquote><p>Jenkins跟Gitlab我放在同一个虚拟机里噢~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;组件我想的是尽量都是使用容器，这样方便运行环境的统一。所以像&lt;code&gt;Gitlab&lt;/code&gt;、&lt;code&gt;Jenkins&lt;/code&gt;、&lt;code&gt;Traefik&lt;/code&gt;等等，这些组件我会在后面等用到了直接使用容器构建。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;除了以上那些,像&lt;code&gt;Go&lt;/code&gt;运行环境,&lt;code&gt;Micro&lt;/code&gt;、&lt;code&gt;ProtoBuf&lt;/code&gt;、&lt;code&gt;Kubernetes&lt;/code&gt;还是需要我们手动进行安装的。&lt;/p&gt;
&lt;h2 id=&quot;Go&quot;&gt;&lt;a href=&quot;#Go&quot; class=&quot;headerlink&quot; title=&quot;Go&quot;&gt;&lt;/a&gt;Go&lt;/h2&gt;&lt;p&gt;这个没啥好说的，可以去&lt;code&gt;GO语言中文网&lt;/code&gt;进行&lt;a href=&quot;https://studygolang.com/dl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;安装，我使用的是&lt;code&gt;1.14.1&lt;/code&gt;版本。记得配置好系统变量。同时，请设置好&lt;code&gt;go mod&lt;/code&gt;代理.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不会设置请看 &lt;a href=&quot;https://goproxy.io/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://goproxy.io/zh/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>GO微服务系列-1.1 涉及的组件、框架介绍</title>
    <link href="https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/"/>
    <id>https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/</id>
    <published>2020-07-06T23:20:19.000Z</published>
    <updated>2021-12-05T08:13:24.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p>首先来看一下整体的流程图</p><h2 id="请求微服务流程图"><a href="#请求微服务流程图" class="headerlink" title="请求微服务流程图"></a>请求微服务流程图</h2><p><img src="/assets/blogImg/go-micro-service-introduce-components-and-framework/微服务整体流程.png" alt="微服务整体流程"></p><a id="more"></a><p>在这张图中：</p><ul><li>反向代理使用的是<code>traefik</code>，它的特色是可以动态发现，完美支持<code>docker</code>，<code>kubernetes</code>。</li><li>网关中微服务部分使用的是<code>go-micro</code>框架，由于<code>go-micro</code>的web和路由功能并不能很好地满足现实需求，所以的对外提供HTTP服务的部分使用的是<code>gin</code>框架。</li><li>服务部分使用的是<code>go-micro</code>框架编写微服务</li><li>由于使用的是<code>go-micro</code>框架，该框架默认使用的是<code>grpc</code>通讯，<code>grpc</code>通讯的通讯格式是<code>Protobuf</code></li><li>go-micro默认的服务发现是通过<code>mdns</code>,我们更换为使用<code>etcd</code>做服务注册中心。当使用<code>Kubernetes</code>部署时,<code>Kubernetes</code>将<code>Service</code>的名称当做域名注册到<code>kube-dns</code>中，通过<code>Service</code>的名称就可以访问其提供的服务</li><li>编排工具会先使用<code>docker-compose</code>，最终使用<code>Kubernetes</code></li></ul><h2 id="CI-CD流程图"><a href="#CI-CD流程图" class="headerlink" title="CI/CD流程图"></a>CI/CD流程图</h2><p><img src="/assets/blogImg/go-micro-service-introduce-components-and-framework/ci,cd整体流程.png" alt="ci/cd整体流程"></p><p>在这张图中：</p><ul><li>代码仓库使用的是<code>gitlab</code></li><li>持续集成使用的是<code>jenkins</code></li><li>远程镜像仓库使用的是阿里云的容器镜像服务</li><li><code>jenkins</code>需要安装的插件有:<code>Localization Chinese(Simplified)</code>、<code>Publish Over SSH</code>、<code>Gitlab</code>、<code>Golang</code></li></ul><h1 id="涉及到的组件、框架及其版本"><a href="#涉及到的组件、框架及其版本" class="headerlink" title="涉及到的组件、框架及其版本"></a>涉及到的组件、框架及其版本</h1><table><thead><tr><th style="text-align:center">技术</th><th style="text-align:center">使用</th><th style="text-align:center">版本</th></tr></thead><tbody><tr><td style="text-align:center">语言</td><td style="text-align:center">Golang</td><td style="text-align:center">1.14.1</td></tr><tr><td style="text-align:center">Web框架(网关)</td><td style="text-align:center">Gin</td><td style="text-align:center">v1.6.3</td></tr><tr><td style="text-align:center">通讯格式</td><td style="text-align:center">Protobuf</td><td style="text-align:center">v3.12.1</td></tr><tr><td style="text-align:center">微服务框架</td><td style="text-align:center">Go-micro</td><td style="text-align:center">v2.9.0</td></tr><tr><td style="text-align:center">反向代理</td><td style="text-align:center">Traefik</td><td style="text-align:center">v2.2.1</td></tr><tr><td style="text-align:center">服务注册中心</td><td style="text-align:center">Etcd/Kubernetes</td><td style="text-align:center">v3.3.8/v1.16.5</td></tr><tr><td style="text-align:center">容器</td><td style="text-align:center">Docker</td><td style="text-align:center">v19.03.8</td></tr><tr><td style="text-align:center">编排工具</td><td style="text-align:center">Docker-Compose/Kubernetes</td><td style="text-align:center">v1.25.5/v1.16.5</td></tr><tr><td style="text-align:center">代码仓库</td><td style="text-align:center">Gitlab</td><td style="text-align:center">v13.1.1-ce.0</td></tr><tr><td style="text-align:center">持续集成</td><td style="text-align:center">Jenkins</td><td style="text-align:center">v2.242</td></tr></tbody></table><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>对应的相关代码和部署文件，已经传至github，欢迎star。</p><p>微服务与部署：<a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p><p>持续交付、集成、部署：<a href="https://github.com/guaosi/go-cicd" target="_blank" rel="noopener">https://github.com/guaosi/go-cicd</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;流程图&quot;&gt;&lt;a href=&quot;#流程图&quot; class=&quot;headerlink&quot; title=&quot;流程图&quot;&gt;&lt;/a&gt;流程图&lt;/h1&gt;&lt;p&gt;首先来看一下整体的流程图&lt;/p&gt;
&lt;h2 id=&quot;请求微服务流程图&quot;&gt;&lt;a href=&quot;#请求微服务流程图&quot; class=&quot;headerlink&quot; title=&quot;请求微服务流程图&quot;&gt;&lt;/a&gt;请求微服务流程图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/blogImg/go-micro-service-introduce-components-and-framework/微服务整体流程.png&quot; alt=&quot;微服务整体流程&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你从开发到部署(CI/CD)GO微服务系列-介绍与目录</title>
    <link href="https://www.guaosi.com/2020/07/05/go-microservice-series-from-development-to-deployment-introduction-contents/"/>
    <id>https://www.guaosi.com/2020/07/05/go-microservice-series-from-development-to-deployment-introduction-contents/</id>
    <published>2020-07-05T13:46:18.000Z</published>
    <updated>2021-12-05T08:13:24.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>我觉得微服务是什么？什么是微服务这种问题都老生常谈了，随便百度的回答都是各式各样的，我也没什么好介绍的了。开门见山，我就直接说我想做成什么样的。</p><ul><li>既然是微服务，那肯定首先要有服务，这个系列重点在微服务的构建，而不是业务逻辑的编写，所以业务逻辑尽可能做到最简单。其次有一个服务即可。</li><li>微服务中最重要的是网关，它是所有请求的入口，所以我会用<code>gin</code>框架结合<code>go-micro</code>作为微服务的网关，后期加入<code>链路追踪</code>、<code>熔断与降级</code>、<code>监控</code>等扩展功能。</li><li>微服务就意味着需要快速迭代更新，所以持续交付、集成、部署(CI/CD)是必不可少的</li><li>容器编排部署，肯定是使用Kubernetes，这也没啥好说的</li></ul><a id="more"></a><h1 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h1><p>这个系列开发、部署各占一半，所以需要你能满足以下要求：</p><ul><li>熟悉golang语法</li><li>了解go-micro</li><li>熟悉docker</li><li>了解kubernetes</li><li>熟悉git</li><li>了解jenkins、gitlab</li></ul><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>对应的相关代码和部署文件，已经传至github，欢迎star。</p><p>微服务与部署：<a href="https://github.com/guaosi/go-micro-build" target="_blank" rel="noopener">https://github.com/guaosi/go-micro-build</a></p><p>持续交付、集成、部署：<a href="https://github.com/guaosi/go-cicd" target="_blank" rel="noopener">https://github.com/guaosi/go-cicd</a></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>由于涉及的点很多，一篇文章是肯定写不完的，所以分了几个模块，几个章节进行介绍。(hexo的有序列表有子节点会有问题，所以就只能这样凑合看吧，排班不是很舒服)</p><p>1.环境构建</p><p><a href="https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/">1.1 涉及的组件、框架介绍</a><br><a href="https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/">1.2 环境的准备与安装</a></p><p>2.微服务的编写</p><p><a href="https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/">2.1 proto文件的编写与生成</a><br><a href="https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/">2.2 简单介绍了解go-micro</a><br><a href="https://www.guaosi.com/2020/07/11/go-micro-service-write-service/">2.3 服务编写</a><br><a href="https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/">2.4 网关编写</a></p><p>3.基于容器的构建运行</p><p><a href="https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image">3.1 Dockerfile编写与镜像制作</a><br><a href="https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution">3.2 直接Docker容器构建执行</a><br><a href="https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution">3.3 Docker Compose下的构建执行</a><br><a href="https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution">3.4 Kubernetes下的构建执行</a></p><p>4.持续交付、集成、部署(CI/CD)</p><p><a href="https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting">4.1 Gitlab的搭建与设置</a><br><a href="https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting">4.2 Jenkins的搭建、插件的安装与配置</a><br><a href="https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes">4.3 Jenkins构建部署Kubernetes</a></p><p>5.网关功能扩展(TODO)</p><p>5.1 链路追踪-jaeger<br>5.2 熔断与降级-hystrix<br>5.3 监控-prometheus</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;我觉得微服务是什么？什么是微服务这种问题都老生常谈了，随便百度的回答都是各式各样的，我也没什么好介绍的了。开门见山，我就直接说我想做成什么样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既然是微服务，那肯定首先要有服务，这个系列重点在微服务的构建，而不是业务逻辑的编写，所以业务逻辑尽可能做到最简单。其次有一个服务即可。&lt;/li&gt;
&lt;li&gt;微服务中最重要的是网关，它是所有请求的入口，所以我会用&lt;code&gt;gin&lt;/code&gt;框架结合&lt;code&gt;go-micro&lt;/code&gt;作为微服务的网关，后期加入&lt;code&gt;链路追踪&lt;/code&gt;、&lt;code&gt;熔断与降级&lt;/code&gt;、&lt;code&gt;监控&lt;/code&gt;等扩展功能。&lt;/li&gt;
&lt;li&gt;微服务就意味着需要快速迭代更新，所以持续交付、集成、部署(CI/CD)是必不可少的&lt;/li&gt;
&lt;li&gt;容器编排部署，肯定是使用Kubernetes，这也没啥好说的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.guaosi.com/tags/Docker/"/>
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="微服务" scheme="https://www.guaosi.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="go-micro" scheme="https://www.guaosi.com/tags/go-micro/"/>
    
      <category term="Kubernetes" scheme="https://www.guaosi.com/tags/Kubernetes/"/>
    
      <category term="CI/CD" scheme="https://www.guaosi.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 基于 Mac OS 安装教程</title>
    <link href="https://www.guaosi.com/2020/07/05/kubernetes-for-mac-install/"/>
    <id>https://www.guaosi.com/2020/07/05/kubernetes-for-mac-install/</id>
    <published>2020-07-05T10:37:24.000Z</published>
    <updated>2021-12-05T08:13:24.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Kubernetes在前一篇 <a href="https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/">Kubernetes 18.04集群安装教程(基于Centos7)</a> 已经介绍过了，这里不做过多的描述，重点讲述 Mac OS 下如何使用Kubernetes。</p><p>其实非常简单，因为我们使用的是 <a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Docker For Mac</a> 。下载下来安装即可。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>以版本为 2.3.0.3 为例</p><p>打开 <code>Docker For Mac</code> ,点击 <code>Preferences</code> 偏好设置进入控制面板。</p><a id="more"></a><h2 id="配置Docker镜像加速服务器"><a href="#配置Docker镜像加速服务器" class="headerlink" title="配置Docker镜像加速服务器"></a>配置Docker镜像加速服务器</h2><p>点击 <code>Docker Engine</code>,配置如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"镜像加速服务器地址"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"experimental"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>镜像加速服务器推荐使用阿里云，可以去阿里云的容器服务里免费申请噢~</p></blockquote><h2 id="配置Kubernetes代理"><a href="#配置Kubernetes代理" class="headerlink" title="配置Kubernetes代理"></a>配置Kubernetes代理</h2><p>由于Kubernetes的镜像是谷歌源被墙，所以需要提前自行准备一个代理。</p><p>这里用的代理工具是<code>Clash</code>工具，<code>Clash</code>默认的<code>HTTP</code>代理端口是<code>7890</code>，<code>Socks5</code>代理端口是<code>7891</code>。</p><p>回到<code>Docker For Mac</code>控制面板，依次点击<code>Resources</code>-&gt;<code>PROXIES</code></p><p>我们开启<code>Manual proxy configuration</code></p><p>然后我们将<code>Web Server (HTTP)</code>跟<code>Secure Web Server (HTTPS)</code>都配置为<code>http://127.0.0.1:7890</code>即可</p><h2 id="开启Kubernetes"><a href="#开启Kubernetes" class="headerlink" title="开启Kubernetes"></a>开启Kubernetes</h2><p><code>Docker For Mac</code>控制面板，点击<code>Kubernetes</code></p><p>然后我们勾上 <code>Enable Kubernetes</code>(启动Kubernetes) 以及 <code>Show system containers (advanced)</code>(docker容器里可以看到Kubernetes的容器)，然后点击 <code>Apply &amp; Restart</code>即可。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>如果 <code>Docker For Mac</code> 一直显示 <code>Kubernetes is starting</code> ，并且网络速率没有下载的迹象，那么请退出 <code>Docker For Mac</code> (点击 <code>Quit Docker Desktop</code>)。然后再重新打开 <code>Docker For Mac</code> 即可</li><li>启用<code>Kubernetes</code>后，那么之前使用<code>Docker</code>以及<code>Docker-Compose</code>启动的容器都无法继续启动，只能使用Pod创建的容器。关闭<code>Kubernetes</code>后，重新退出再开启<code>Docker For Mac</code>，这样才能恢复容器启动。就是容器跟<code>Kubernetes</code>只能选一个。</li><li>Mac不支持Host的网络模式，这个我在<a href="https://www.guaosi.com/2020/01/22/network-of-vmware-and-docker/">Vmware和Docker的网络模式讲解</a>有介绍，一定要注意这个问题噢~所以不要使用Host的网络模式，是没有任何效果的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Kubernetes在前一篇 &lt;a href=&quot;https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/&quot;&gt;Kubernetes 18.04集群安装教程(基于Centos7)&lt;/a&gt; 已经介绍过了，这里不做过多的描述，重点讲述 Mac OS 下如何使用Kubernetes。&lt;/p&gt;
&lt;p&gt;其实非常简单，因为我们使用的是 &lt;a href=&quot;https://download.docker.com/mac/stable/Docker.dmg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker For Mac&lt;/a&gt; 。下载下来安装即可。&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;以版本为 2.3.0.3 为例&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;Docker For Mac&lt;/code&gt; ,点击 &lt;code&gt;Preferences&lt;/code&gt; 偏好设置进入控制面板。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="运维" scheme="https://www.guaosi.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://www.guaosi.com/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://www.guaosi.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 18.04集群安装教程(基于Centos7)</title>
    <link href="https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/"/>
    <id>https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/</id>
    <published>2020-07-05T07:37:24.000Z</published>
    <updated>2021-12-05T08:13:24.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>kubernetes，简称K8s，是用8代替8个字符“ubernete”而成的缩写。是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>在开始之前，先简单介绍一下环境以及配置。这里使用的是vmware创建的虚拟机。</p><table><thead><tr><th>节点</th><th>操作系统</th><th>cpu</th><th>内存</th><th>磁盘</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master</td><td>centos7</td><td>2核2线</td><td>4G</td><td>50G</td><td>192.168.1.200</td></tr></tbody></table><blockquote><p>kubernetes的服务器必须是2核4G以上配置才可以安装的</p></blockquote><a id="more"></a><p>当然，如果你想是一个Kubernetes集群，则node节点给是相同的配置即可，例如：</p><table><thead><tr><th>节点</th><th>操作系统</th><th>cpu</th><th>内存</th><th>磁盘</th><th>IP</th></tr></thead><tbody><tr><td>k8s-node01</td><td>centos7</td><td>2核2线</td><td>4G</td><td>50G</td><td>192.168.1.211</td></tr><tr><td>k8s-node02</td><td>centos7</td><td>2核2线</td><td>4G</td><td>50G</td><td>192.168.1.212</td></tr></tbody></table><p>Centos7的镜像用的是<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">阿里源下载</a>的。使用的是<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-2003.iso" target="_blank" rel="noopener">CentOS-7-x86_64-Minimal-2003</a>镜像。</p><blockquote><p>Centos7系统的安装过程就不给出了，自行下一步下一步即可</p></blockquote><h1 id="Kubernets安装"><a href="#Kubernets安装" class="headerlink" title="Kubernets安装"></a>Kubernets安装</h1><p>这里要说明一点，Kubernetes需要的资源较多，如果配置跟不上或者只是学习体验，只有一个master，没有node节点是可以正常使用的。master默认是不允许被pod调度，只要设置污点为允许即可。这个在文章后面会讲如何设置。</p><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>以下操作对3个节点都是相同的噢~</p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BOOTPROTO</span>=static</span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">192.168</span>.<span class="number">1.200</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">DNS2</span>=<span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><h4 id="node01"><a href="#node01" class="headerlink" title="node01"></a>node01</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BOOTPROTO</span>=static</span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">192.168</span>.<span class="number">1.211</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">DNS2</span>=<span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><h4 id="node02"><a href="#node02" class="headerlink" title="node02"></a>node02</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BOOTPROTO</span>=static</span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">192.168</span>.<span class="number">1.212</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">DNS2</span>=<span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><h3 id="设置系统主机名以及-Host-文件的相互解析"><a href="#设置系统主机名以及-Host-文件的相互解析" class="headerlink" title="设置系统主机名以及 Host 文件的相互解析"></a>设置系统主机名以及 Host 文件的相互解析</h3><h4 id="设置系统主机名"><a href="#设置系统主机名" class="headerlink" title="设置系统主机名"></a>设置系统主机名</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master上执行</span></span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">k8s-master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">node01上</span>执行</span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">k8s-node01</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">node02上</span>执行</span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">k8s-node02</span></span><br></pre></td></tr></table></figure><h4 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.200</span> <span class="selector-tag">k8s-master</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.211</span> <span class="selector-tag">k8s-node01</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.212</span> <span class="selector-tag">k8s-node02</span></span><br></pre></td></tr></table></figure><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y conntrack ntpdate<span class="built_in"> ntp </span>ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git lrzsz</span><br></pre></td></tr></table></figure><h3 id="设置防火墙为-Iptables"><a href="#设置防火墙为-Iptables" class="headerlink" title="设置防火墙为 Iptables"></a>设置防火墙为 Iptables</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="builtin-name">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">yum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl <span class="builtin-name">enable</span> iptables &amp;&amp; iptables -F &amp;&amp;<span class="built_in"> service </span>iptables save</span><br></pre></td></tr></table></figure><h3 id="关闭-SELINUX"><a href="#关闭-SELINUX" class="headerlink" title="关闭 SELINUX"></a>关闭 SELINUX</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapoff -<span class="selector-tag">a</span> &amp;&amp; sed -<span class="selector-tag">i</span> <span class="string">'/ swap / s/^\(.*\)$/#\1/g'</span> /etc/fstab</span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span> &amp;&amp; sed -<span class="selector-tag">i</span> <span class="string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="调整内核参数，对于-K8S"><a href="#调整内核参数，对于-K8S" class="headerlink" title="调整内核参数，对于 K8S"></a>调整内核参数，对于 K8S</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kubernetes.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.<span class="attribute">bridge-nf-call-iptables</span>=1</span><br><span class="line">net.bridge.<span class="attribute">bridge-nf-call-ip6tables</span>=1</span><br><span class="line">net.ipv4.<span class="attribute">ip_forward</span>=1</span><br><span class="line">net.ipv4.<span class="attribute">tcp_tw_recycle</span>=0</span><br><span class="line">vm.<span class="attribute">swappiness</span>=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span><br><span class="line">vm.<span class="attribute">overcommit_memory</span>=1 # 不检查物理内存是否够用</span><br><span class="line">vm.<span class="attribute">panic_on_oom</span>=0 # 开启 OOM</span><br><span class="line">fs.inotify.<span class="attribute">max_user_instances</span>=8192</span><br><span class="line">fs.inotify.<span class="attribute">max_user_watches</span>=1048576</span><br><span class="line">fs.<span class="attribute">file-max</span>=52706963</span><br><span class="line">fs.<span class="attribute">nr_open</span>=52706963</span><br><span class="line">net.ipv6.conf.all.<span class="attribute">disable_ipv6</span>=1</span><br><span class="line">net.netfilter.<span class="attribute">nf_conntrack_max</span>=2310720</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cp kubernetes.conf /etc/sysctl.d/kubernetes.conf</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure><h3 id="调整系统时区"><a href="#调整系统时区" class="headerlink" title="调整系统时区"></a>调整系统时区</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置系统时区为 中国/上海</span></span><br><span class="line"><span class="string">timedatectl </span><span class="built_in">set-timezone</span> <span class="string">Asia/</span><span class="string">Shanghai</span></span><br><span class="line"><span class="string">#</span> 将当前的 <span class="string">UTC </span>时间写入硬件时钟</span><br><span class="line"><span class="string">timedatectl </span><span class="built_in">set-local-rtc</span> 0</span><br><span class="line"><span class="comment"># 重启依赖于系统时间的服务</span></span><br><span class="line"><span class="string">systemctl </span><span class="string">restart </span><span class="string">rsyslog</span></span><br><span class="line"><span class="string">systemctl </span><span class="string">restart </span><span class="string">crond</span></span><br></pre></td></tr></table></figure><h3 id="关闭系统不需要服务"><a href="#关闭系统不需要服务" class="headerlink" title="关闭系统不需要服务"></a>关闭系统不需要服务</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> postfix &amp;&amp; systemctl <span class="keyword">disable</span> postfix</span><br></pre></td></tr></table></figure><h3 id="设置-rsyslogd-和-systemd-journald"><a href="#设置-rsyslogd-和-systemd-journald" class="headerlink" title="设置 rsyslogd 和 systemd journald"></a>设置 rsyslogd 和 systemd journald</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/log/journal </span><br><span class="line"><span class="comment"># 持久化保存日志的目录</span></span><br><span class="line"></span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF</span><br><span class="line">[Journal]</span><br><span class="line"><span class="comment"># 持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="comment"># 压缩历史日志</span></span><br><span class="line">Compress=yes</span><br><span class="line">SyncIntervalSec=5m</span><br><span class="line">RateLimitInterval=30s</span><br><span class="line">RateLimitBurst=1000</span><br><span class="line"><span class="comment"># 最大占用空间 10G</span></span><br><span class="line">SystemMaxUse=10G</span><br><span class="line"><span class="comment"># 单日志文件最大 200M</span></span><br><span class="line">SystemMaxFileSize=200M</span><br><span class="line"><span class="comment"># 日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"><span class="comment"># 不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h3 id="升级系统内核为-4-44"><a href="#升级系统内核为-4-44" class="headerlink" title="升级系统内核为 4.44"></a>升级系统内核为 4.44</h3><p>CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定，例如<code>rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</code></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http:<span class="comment">//www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span></span><br><span class="line"><span class="meta"># 安装完成后检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装</span></span><br><span class="line">一次！</span><br><span class="line"></span><br><span class="line">yum --enablerepo=elrepo-kernel install -y kernel-lt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置开机从新内核启动</span></span><br><span class="line">grub2-<span class="keyword">set</span>-<span class="keyword">default</span> <span class="string">'CentOS Linux (4.4.202-1.el7.elrepo.x86_64) 7 (Core)'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查是否安装新内核成功</span></span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure><blockquote><p>注意，内核会随着时间升级的，我写这篇文章的时候，内核版本是 4.4.202 ，这并不意味着你做的时候还是这个内核版本，如果变动了，请自行修改上面的命令即可。</p></blockquote><h2 id="安装Kubeadm"><a href="#安装Kubeadm" class="headerlink" title="安装Kubeadm"></a>安装Kubeadm</h2><p>以下操作对3个节点依旧都是相同的噢~ </p><h3 id="kube-proxy开启ipvs的前置条件"><a href="#kube-proxy开启ipvs的前置条件" class="headerlink" title="kube-proxy开启ipvs的前置条件"></a>kube-proxy开启ipvs的前置条件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-软件"><a href="#安装-Docker-软件" class="headerlink" title="安装 Docker 软件"></a>安装 Docker 软件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y yum-utils device-mapper-persistent-<span class="keyword">data</span> lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line"><span class="comment">--add-repo \</span></span><br><span class="line"><span class="keyword">http</span>://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum <span class="keyword">update</span> -y &amp;&amp; yum <span class="keyword">install</span> -y docker-ce</span><br><span class="line"><span class="comment">## 创建 /etc/docker 目录</span></span><br><span class="line"></span><br><span class="line">grub2-<span class="keyword">set</span>-<span class="keyword">default</span> <span class="string">'CentOS Linux (4.4.202-1.el7.elrepo.x86_64) 7 (Core)'</span> &amp;&amp; reboot</span><br><span class="line"><span class="comment"># 重新设置内核</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl restart docker &amp;&amp; systemctl <span class="keyword">enable</span> docker</span><br><span class="line"><span class="comment"># 设置开机自动</span></span><br><span class="line"></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"><span class="comment"># 配置 daemon.</span></span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">    <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">    <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/systemd/<span class="keyword">system</span>/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>daemon.json文件里也可以配置你的镜像加速器地址噢~</p></blockquote><h3 id="安装-Kubeadm-（主从配置）"><a href="#安装-Kubeadm-（主从配置）" class="headerlink" title="安装 Kubeadm （主从配置）"></a>安装 Kubeadm （主从配置）</h3><p>使用该工具来快速部署kubernets<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF </span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line"><span class="section">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.18.4 kubeadm-1.18.4 kubectl-1.18.4</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet.service</span><br></pre></td></tr></table></figure></p><blockquote><p>注意，kubelet、kubeadm、kubectl也是会随着时间升级的，我写的时候是18.04是最新的，如果到时候执行报错了，请自行安装最新版本即可。</p></blockquote><h2 id="初始化节点"><a href="#初始化节点" class="headerlink" title="初始化节点"></a>初始化节点</h2><h3 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h3><p>只要操作master节点即可噢~</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubeadm</span> <span class="string">config</span> <span class="string">print</span> <span class="string">init-defaults</span> <span class="string">&gt; kubeadm-config.yaml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 修改(以及新增)kubeadm-config.yaml以下内容</span></span><br><span class="line"><span class="string"></span><span class="attr">localAPIEndpoint:</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.200</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.18.4</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">  serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打开kubeadm-config.yaml并在最后新增以下内容</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line"><span class="attr">  SupportIPVSProxyMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure><h3 id="下载初始化必备镜像"><a href="#下载初始化必备镜像" class="headerlink" title="下载初始化必备镜像"></a>下载初始化必备镜像</h3><p>因为Kubernetes所需要的初始化必备镜像都是从谷歌官方拉取的，不会走docker的加速镜像服务器。由于谷歌被墙，所以我们需要自行下载必备镜像，怎么做呢？</p><p>首先列出使用的镜像以及版本号</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm<span class="built_in"> config </span>images list --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>接着，我们<code>通过国内的第三方镜像仓库下载完毕后再更改镜像名称与谷歌的镜像名称一致</code>即可</p><p>我们编写一个shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">images=(</span><br><span class="line">    kube-apiserver:v1.18.4</span><br><span class="line">    kube-controller-manager:v1.18.4</span><br><span class="line">    kube-scheduler:v1.18.4</span><br><span class="line">    kube-proxy:v1.18.4</span><br><span class="line">    pause:3.2</span><br><span class="line">    etcd:3.4.3-0</span><br><span class="line">    coredns:1.6.7</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">    docker pull mirrorgcrio/<span class="variable">$imageName</span></span><br><span class="line">    docker tag mirrorgcrio/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">    docker rmi mirrorgcrio/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>当然这里用什么版本，是由Kubeadm的版本节点的。通过上方的<code>列出使用的镜像以及版本号</code>我们可以很清楚的知道要下什么版本，下哪些的镜像了。</p><p>然后我们执行脚本，开始下载镜像(注意哦，这个下载镜像，2个node节点也要做的)<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给予执行权限</span></span><br><span class="line">chmod +x docker-download.<span class="keyword">sh</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>初始化,并且将标准输出同时写入至kubeadm-init.log文件</span><br><span class="line">kubeadm init --<span class="built_in">config</span>=kubeadm-<span class="built_in">config</span>.yaml <span class="title">| tee kubeadm-init.log</span></span><br></pre></td></tr></table></figure></p><p>完毕后，控制台输出的日志会告诉我们继续执行什么指令以及node节点如何加入</p><p>执行日志中的指令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="整理文件"><a href="#整理文件" class="headerlink" title="整理文件"></a>整理文件</h3><p>因为初始化的日志很有用，里面包含了子节点如何加入<code>master</code>的，所以我们把这些文件保存起来<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/usr/</span>local<span class="regexp">/install-k8s/</span>core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将重要文件移入core </span></span><br><span class="line">mv kubeadm-init.log kubeadm-config.yaml <span class="regexp">/usr/</span>local<span class="regexp">/install-k8s/</span>core</span><br></pre></td></tr></table></figure></p><h3 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h3><p>只要操作master节点即可噢~</p><p>现在我们执行<code>kubectl</code>相关指令已经会有了正常响应，但是此时节点处于<code>NotReady</code>的状态，这是因为我们还没有为Kubernetes指定它的网络模式。我们使用<code>flannel</code>来作为它的网络模式，这样就可以让不同节点上的容器跨主机通信。如果对这块感兴趣，可以自行搜索<code>flannel</code>的网络实现。</p><p>现在我们开始安装<code>flannel</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p /usr/local/<span class="keyword">install</span>-k8s/<span class="keyword">plugin</span>/flannel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入flannel文件夹</span></span><br><span class="line">cd /usr/<span class="keyword">local</span>/<span class="keyword">install</span>-k8s/<span class="keyword">plugin</span>/flannel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载flannel配置文件</span></span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/<span class="keyword">master</span>/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装flannel</span></span><br><span class="line">kubectl <span class="keyword">create</span> -f kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看命名空间为kube-system的pod情况</span></span><br><span class="line">kubectl <span class="builtin-name">get</span> pod -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看更详细的信息</span></span><br><span class="line">kubectl <span class="builtin-name">get</span> pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看k8s所有节点连接情况</span></span><br><span class="line">kubectl <span class="builtin-name">get</span> node</span><br></pre></td></tr></table></figure><h3 id="加入子节点"><a href="#加入子节点" class="headerlink" title="加入子节点"></a>加入子节点</h3><p>根据<code>kubeadm-init.log</code>日志文件内容或者安装的时候的标准输出,在node节点执行指令<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.200</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">abcdef</span><span class="selector-class">.0123456789abcdef</span> \</span><br><span class="line">    <span class="selector-tag">--discovery-token-ca-cert-hash</span> <span class="selector-tag">sha256</span><span class="selector-pseudo">:7c2677754a3b09da10d5ffa6a7d6348ad63219cd69d2f5c3a27642d4b95ff15b</span></span><br></pre></td></tr></table></figure></p><p>即可将node节点加入master</p><h3 id="设置master节点是否可以被任务调度安装pod"><a href="#设置master节点是否可以被任务调度安装pod" class="headerlink" title="设置master节点是否可以被任务调度安装pod"></a>设置master节点是否可以被任务调度安装pod</h3><p>如果你只有一个master没有node节点，或者你想master也参与pod的调度，那么可以执行如下指令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许</span></span><br><span class="line">kubectl taint <span class="keyword">node</span> <span class="title">k8s-master</span> <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="literal">master</span>-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不允许</span></span><br><span class="line">kubectl taint <span class="keyword">node</span> <span class="title">k8s-master</span> <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="attr">master=</span><span class="string">""</span></span><br></pre></td></tr></table></figure><h2 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取资源清单</span></span><br><span class="line"><span class="string">wget</span>  <span class="attr">https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta4/aio/deploy/recommended.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改recommended.yaml里的端口,外网开放</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span>      <span class="comment">#新增type类型为NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30002</span>   <span class="comment">#设置nodeport 端口</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据资源清单创建dashboard</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="bullet">-f</span> <span class="string">recommended.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果处于running状态，要在看一下他的log日志</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">logs</span>  <span class="bullet">-f</span>  <span class="string">kubernetes-dashboard-cdbc9547c-7sb2n</span> <span class="bullet">-n</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">logs</span>  <span class="bullet">-f</span>  <span class="string">dashboard-metrics-scraper-fb986f88d-nd9d6</span>  <span class="bullet">-n</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><h3 id="创建管理员账户登录dashboard"><a href="#创建管理员账户登录dashboard" class="headerlink" title="创建管理员账户登录dashboard"></a>创建管理员账户登录dashboard</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建admin账户</span></span><br><span class="line">kubectl create serviceaccount admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定组</span></span><br><span class="line">kubectl create clusterrolebinding dash-admin <span class="attribute">--clusterrole</span>=cluster-admin <span class="attribute">--serviceaccount</span>=default:admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建密钥</span></span><br><span class="line"><span class="attribute">secret</span>=$(kubectl <span class="builtin-name">get</span> sa admin -o <span class="attribute">jsonpath</span>=<span class="string">'&#123;.secrets[0].name&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得token</span></span><br><span class="line">kubectl <span class="builtin-name">get</span><span class="built_in"> secret </span><span class="variable">$secret</span> -o <span class="attribute">go-template</span>=<span class="string">'&#123;&#123; .data.token | base64decode &#125;&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="登陆Dashboard"><a href="#登陆Dashboard" class="headerlink" title="登陆Dashboard"></a>登陆Dashboard</h3><p>然后我们输入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pod -n kubernetes-dashboard -o wide</span><br></pre></td></tr></table></figure></p><p>查看此时dashboard所在的服务器节点。通过 <code>http://所在服务器IP:nodePort</code> 进行访问。输入之前获取的token，即可正常进入。</p><h2 id="从阿里云下载私有镜像"><a href="#从阿里云下载私有镜像" class="headerlink" title="从阿里云下载私有镜像"></a>从阿里云下载私有镜像</h2><h3 id="登陆认证阿里云"><a href="#登陆认证阿里云" class="headerlink" title="登陆认证阿里云"></a>登陆认证阿里云</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=xxx registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><blockquote><p>xxx是你的阿里云登录名，例如我的是 <a href="mailto:guaosi@vip.qq.com" target="_blank" rel="noopener">guaosi@vip.qq.com</a></p></blockquote><h3 id="在集群中创建保存授权令牌的-Secret"><a href="#在集群中创建保存授权令牌的-Secret" class="headerlink" title="在集群中创建保存授权令牌的 Secret"></a>在集群中创建保存授权令牌的 Secret</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Secret，命名为 regcred：</span></span><br><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry regcred <span class="attribute">--docker-server</span>=&lt;your-registry-server&gt; <span class="attribute">--docker-username</span>=&lt;your-name&gt; <span class="attribute">--docker-password</span>=&lt;your-pword&gt; <span class="attribute">--docker-email</span>=&lt;your-email&gt; -n &lt;your-namespace&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;your-registry-server&gt; 是你的私有 Docker 仓库全限定域名（FQDN）</span></span><br><span class="line"><span class="comment"># &lt;your-name&gt; 是你的 Docker 用户名。</span></span><br><span class="line"><span class="comment"># &lt;your-pword&gt; 是你的 Docker 密码。</span></span><br><span class="line"><span class="comment"># &lt;your-email&gt; 是你的 Docker 邮箱。</span></span><br><span class="line"><span class="comment"># &lt;your-namespace&gt; 创建后的该密钥属于k8s集群中哪一个namespace的</span></span><br></pre></td></tr></table></figure><h3 id="在pod清单中加入使用密钥"><a href="#在pod清单中加入使用密钥" class="headerlink" title="在pod清单中加入使用密钥"></a>在pod清单中加入使用密钥</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Pod</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">namespace:</span> <span class="params">&lt;your-namespace&gt;</span></span><br><span class="line"><span class="symbol">  name:</span> private-reg</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  containers:</span></span><br><span class="line">  - name: private-reg-container</span><br><span class="line"><span class="symbol">    image:</span> <span class="params">&lt;your-private-image&gt;</span></span><br><span class="line"><span class="symbol">  imagePullSecrets:</span> <span class="meta"># 使用指定的密钥</span></span><br><span class="line">  - name: regcred <span class="meta"># 与上面创建的secret名称相同</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;kubernetes，简称K8s，是用8代替8个字符“ubernete”而成的缩写。是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;在开始之前，先简单介绍一下环境以及配置。这里使用的是vmware创建的虚拟机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;操作系统&lt;/th&gt;
&lt;th&gt;cpu&lt;/th&gt;
&lt;th&gt;内存&lt;/th&gt;
&lt;th&gt;磁盘&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;centos7&lt;/td&gt;
&lt;td&gt;2核2线&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;50G&lt;/td&gt;
&lt;td&gt;192.168.1.200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;kubernetes的服务器必须是2核4G以上配置才可以安装的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="运维" scheme="https://www.guaosi.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Kubernetes" scheme="https://www.guaosi.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>记录一次因为MTU问题导致网络丢包无响应</title>
    <link href="https://www.guaosi.com/2020/05/16/record-data-loss-problem-caused-by-MTU/"/>
    <id>https://www.guaosi.com/2020/05/16/record-data-loss-problem-caused-by-MTU/</id>
    <published>2020-05-16T02:25:56.000Z</published>
    <updated>2021-12-05T08:13:24.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>首先，先上一下公司测试环境的简单网络结构</p><p><img src="/assets/blogImg/record-data-loss-problem-caused-by-MTU/network.png" alt="network"></p><p>简单说一下，测试环境的上游服务是放在阿里云服务器的，通过阿里云的VPN网关，发起HTTP请求到公司内部测试环境的下游服务。然后下游服务处理后，再返回对应的相关数据。</p><p>之前一直都没什么网络问题。今天突然发现上游服务请求某一接口一直报服务超时，但是其他接口又是正常的。问题探究之路从这里展开~</p><a id="more"></a><h2 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h2><p>首先，先简单猜想一下会有哪些原因造成这种情况的？</p><h3 id="猜想一-上游服务请求已发出，但是数据包在网络中丢失"><a href="#猜想一-上游服务请求已发出，但是数据包在网络中丢失" class="headerlink" title="猜想一 上游服务请求已发出，但是数据包在网络中丢失"></a>猜想一 上游服务请求已发出，但是数据包在网络中丢失</h3><p>这种猜想比较容易验证。由于上游服务请求少有服务不止一个接口，但是只有其中一个接口一直是报请求超时，其他接口都正常，可以排除网络丢包的问题。</p><h3 id="猜想二-下游服务器未收到请求数据包或已收到但是相关服务未启动"><a href="#猜想二-下游服务器未收到请求数据包或已收到但是相关服务未启动" class="headerlink" title="猜想二 下游服务器未收到请求数据包或已收到但是相关服务未启动"></a>猜想二 下游服务器未收到请求数据包或已收到但是相关服务未启动</h3><p>这种猜想也非常好验证,首先检查一下下游服务的相关进程，相关端口是否正常开启，检查下游服务的日志信息，请求记录。发现下游服务的请求记录中有上游服务请求超时的接口，并且正常响应，程序没有报异常。<br>为了进一步验证，使用<code>tcmpdump</code>进行抓包，再将抓取的数据导入<code>Wireshark</code>进行tcp流追踪，最后确认请求数据正常接收以及响应。</p><h3 id="猜想三-下游服务已响应，但是数据包在网络中丢失或被阿里云服务器丢弃"><a href="#猜想三-下游服务已响应，但是数据包在网络中丢失或被阿里云服务器丢弃" class="headerlink" title="猜想三 下游服务已响应，但是数据包在网络中丢失或被阿里云服务器丢弃"></a>猜想三 下游服务已响应，但是数据包在网络中丢失或被阿里云服务器丢弃</h3><p>如今只剩下最后一个猜想，数据丢包问题。会不会是被阿里云的VPN网关主动丢弃？因为有一个想不透的点，为什么只有这个接口出现了问题，并且问题是请求超时，其他的接口都可以正常响应？这样一想，数据丢包的可能性非常的话。于是查阅了阿里云VPN网关文档，查看是否有相关限制。然后看到<a href="https://help.aliyun.com/document_detail/119749.html?spm=5176.11065259.1996646101.searchclickresult.135d2134tkgzbL" target="_blank" rel="noopener">MTU注意事项</a>,其中有一段注意事项</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您必须配置本地VPN网关，将其使用的MTU限制在<span class="number">1400</span>字节之内，建议MTU设置为<span class="number">1400</span>字节。</span><br></pre></td></tr></table></figure><blockquote><p>当然，如果你对MTU很陌生，可以查看<a href="https://yq.aliyun.com/articles/222535" target="_blank" rel="noopener">这篇文章</a>，补充一些关于数据帧方面的知识。</p></blockquote><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>既然阿里云VPN网关有这个限制，不妨先设置看看，是否可以解决问题。于是在下游服务器的出口网卡上设置MTU为1300(安全起见)</p><p>以Centos为例:</p><p>临时设定<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 mtu <span class="number">1300</span> up</span><br></pre></td></tr></table></figure></p><p>永久设定<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加如下内容</span></span><br><span class="line">MTU=<span class="string">"9000"</span></span><br></pre></td></tr></table></figure></p><p>然后重启网卡生效<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service<span class="built_in"> network </span>restart</span><br></pre></td></tr></table></figure></p><p>然后回到上游服务查看相关日志，发现接口已经正常响应，服务正常了。</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>原因很明显，就是VPN网关的MTU与下游服务器的网卡MTU不一致。默认的MTU都是1500字节，当数据包超过这个大小时，就会被分包。当然，分包这个工作是由网卡替我们完成的。</p><p>阿里云的VPN网关规定大小为1400字节，返回的数据帧不超过1400字节时，正常转发放行。如果超过，就会被丢弃。就算假设数据帧总大小为1800字节，下游服务器此时MTU还是1500字节，在网络层拆成小于1500(考虑帧也有大小)字节和大于300字节的数据包。此时<strong>1500字节的帧被阿里云的VPN网关丢弃，300字节的数据帧转发到上游服务器，上游服务器到网络层进行数据包的重组，发现该数据包无法重组，就进行丢弃。这也就是为什么有的接口正常，但是有的接口超时的原因了</strong></p><p>之前没有出现这个问题，是由于因为数据量不够，导致数据帧的大小还没达到1400字节，所以一直没出现。</p><blockquote><p>数据报(传输层)&gt;数据包(网络层)&gt;数据帧(数据链路层)</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要忽略基础知识，网络知识的重要性，有时候依靠这些知识，才能更好地分析问题，解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;首先，先上一下公司测试环境的简单网络结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/record-data-loss-problem-caused-by-MTU/network.png&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单说一下，测试环境的上游服务是放在阿里云服务器的，通过阿里云的VPN网关，发起HTTP请求到公司内部测试环境的下游服务。然后下游服务处理后，再返回对应的相关数据。&lt;/p&gt;
&lt;p&gt;之前一直都没什么网络问题。今天突然发现上游服务请求某一接口一直报服务超时，但是其他接口又是正常的。问题探究之路从这里展开~&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="网络编程" scheme="https://www.guaosi.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ集群架构模式</title>
    <link href="https://www.guaosi.com/2020/02/10/cluster-architecture-pattern-rabbit/"/>
    <id>https://www.guaosi.com/2020/02/10/cluster-architecture-pattern-rabbit/</id>
    <published>2020-02-10T13:11:21.000Z</published>
    <updated>2021-12-05T08:13:24.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主备模式"><a href="#主备模式" class="headerlink" title="主备模式"></a>主备模式</h2><h3 id="主备与主从"><a href="#主备与主从" class="headerlink" title="主备与主从"></a>主备与主从</h3><ul><li>主备和主从的概念是有区别的，主备是主节点可以提供读写的，从节点是不提供任何读写的，只是一个备用的服务。</li><li>主要的目的就是在主节点产生故障或者宕机的时候它能够实现一个自动切换，由原来的主节点切换到我们的备用节点，由备用节点继续提供读写服务，这时候备用节点就是充当主节点的角色了。而原来的节点恢复后又会加入到集群中，变成了备用节点。</li><li>主从是主服节点可以提供读写，但从节点是只读的。主从更多的是实现读写分离和数据备份的效果。</li></ul><a id="more"></a><h3 id="主备模式-1"><a href="#主备模式-1" class="headerlink" title="主备模式"></a>主备模式</h3><ul><li>主备模式，也称之为Warren模式，即主节点如果挂了，切换到从节点继续提供服务，和activemq利用zookeeper做主/备是一样的效果。</li><li>主备未必是两个节点，可以一主多备。</li><li>主备模式：实现RabbitMQ的高可用集群，一般在并发和数据量不高的情况下，这种模型非常的好用且简单。</li></ul><h3 id="主备集群架构"><a href="#主备集群架构" class="headerlink" title="主备集群架构"></a>主备集群架构</h3><p>如图为主备模式的简单架构模型，主要是利用<code>HaProxy</code>去做的主备切换，当主节点挂掉时，<code>HaProxy</code>会自动进行切换，把备份节点升级为主节点</p><p><img src="/assets/blogImg/cluster-architecture-pattern-rabbit/RabbitMQ-Framework-Warren.jpg" alt="RabbitMQ-Framework-Warren"></p><h4 id="HaProxy配置"><a href="#HaProxy配置" class="headerlink" title="HaProxy配置"></a>HaProxy配置</h4><p>HAProxy 是一款提供高可用性、负载均衡以及基于TCP(第四层)和HTTP(第七层)应用的代理软件， 简单了解一下它的相关配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#监听集群</span><br><span class="line"><span class="selector-tag">listen</span> <span class="selector-tag">rabbitmq_cluster</span></span><br><span class="line"><span class="selector-tag">bind</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:5672</span></span><br><span class="line">#配置<span class="selector-tag">TCP</span>模式</span><br><span class="line"><span class="selector-tag">mode</span> <span class="selector-tag">tcp</span></span><br><span class="line">#简单的轮询</span><br><span class="line"><span class="selector-tag">balance</span> <span class="selector-tag">roundrobin</span></span><br><span class="line">#主节点</span><br><span class="line"><span class="selector-tag">server</span> <span class="selector-tag">rmq76</span> 192<span class="selector-class">.168</span><span class="selector-class">.11</span><span class="selector-class">.76</span><span class="selector-pseudo">:5672</span> <span class="selector-tag">check</span> <span class="selector-tag">inter</span> 5000 <span class="selector-tag">rise</span> 2 <span class="selector-tag">fall</span> 3</span><br><span class="line">#备用节点，<span class="selector-tag">rxy77</span>代表主机名，<span class="selector-tag">backup</span>代表备份节点</span><br><span class="line"><span class="selector-tag">server</span> <span class="selector-tag">rmq77</span> 192<span class="selector-class">.168</span><span class="selector-class">.11</span><span class="selector-class">.77</span><span class="selector-pseudo">:5672</span> <span class="selector-tag">backup</span> <span class="selector-tag">check</span> <span class="selector-tag">inter</span> 5000 <span class="selector-tag">rise</span> 2 <span class="selector-tag">fall</span> 3 </span><br><span class="line">备注: <span class="selector-tag">rabbitmq</span>集群节点配置 </span><br><span class="line"># <span class="selector-tag">inter</span>每隔五秒对<span class="selector-tag">mq</span>集群做健康检查，2次正确证明服务器可用，3次失败证明服务器不可用，并且配置主备机制</span><br></pre></td></tr></table></figure><h2 id="远程模式-Shovel"><a href="#远程模式-Shovel" class="headerlink" title="远程模式(Shovel)"></a>远程模式(Shovel)</h2><ul><li>远程模式：远距离通信和复制，可以实现双活的一种模式，简称Shovel模式。</li><li>所谓Shovel就是我们可以把消息进行不同数据中心的复制工作，我们可以跨地域的让俩个mq集群互联。</li></ul><h3 id="架构模型"><a href="#架构模型" class="headerlink" title="架构模型"></a>架构模型</h3><p>Shovel架构模型：绿色部分就代表了两个不同地域的MQ节点，假设用户在A地方下一个订单，然后订单投递到了MQ，第一个地方的MQ节点为了避免压力过大、负载过高可以设置一个阈值，如果负载过高将订单信息转到另一个地方的MQ，分摊服务压力。同时也可以进行两个或多个中心的数据同步。</p><p>好处：在使用了shovel插件后，模型变成了近端同步确认，远端异步确认的方式，大大提高了订单确认速度，并且还能保证可靠性</p><h3 id="怎么去做的？"><a href="#怎么去做的？" class="headerlink" title="怎么去做的？"></a>怎么去做的？</h3><p>Shovel集群的拓扑图如下所示 ，一个订单进来之后，里面有两个队列，如果正常队列压力过大，会将订单路由到backup队列，这个队列和另一个地域的MQ(某个交换机)产生了Shovel联系，就会把数据复制到远端MQ中心，在远端会有相应的队列进行消费</p><p><img src="/assets/blogImg/cluster-architecture-pattern-rabbit/RabbitMQ-Framework-Shovel.jpg" alt="RabbitMQ-Framework-Shovel"></p><h3 id="远程模式的使用"><a href="#远程模式的使用" class="headerlink" title="远程模式的使用"></a>远程模式的使用</h3><ul><li>Shovel集群的配置，首先启动rabbitmq插件，命令如下：<br> <code>rabbitmq-plugins enable amqp_client</code><br> <code>rabbitmq-plugins enable rabbitmq_shovel</code></li><li>创建rabbitmq.config文件：<code>touch /etc/rabbitmq/rabbitmq.config</code></li><li>在config文件中添加相关的配置</li><li>最后我们需要源服务器和目的地服务器都使用相同的配置文件(rabbitmq.config)</li></ul><p>事实上这个配置会相对复杂一些，实现双活已经有更好的方式，所以远程模式了解即可。</p><h2 id="镜像模式"><a href="#镜像模式" class="headerlink" title="镜像模式"></a>镜像模式</h2><ul><li>镜像模式：集群模式非常经典的就是Mirror镜像模式，保证100%数据不丢失，在实际工作中也是用的最多的。</li><li>并且实现集群非常的简单，一般互联网大厂都会构建这种镜像集群模式。</li><li>Mirror镜像队列，目的是为了保证rabbitmq数据的高可靠性解决方案，主要就是实现数据的同步，一般来讲是2-3个节点实现数据同步(对于100%数据可靠性解决方案一般是3节点)</li></ul><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><p>黄色的就是应用服务器，里面包含了RabbitMQ节点，节点里面有个<code>Mirror queue</code>，这三个镜像队列数据是要同步的。<br>外部发送一条消息，落到一台服务器上，这台服务器将数据进行同步，同步到另外两个节点上。<br>利用<code>HA-proxy</code>做负载均衡，然后<code>KeepAlived</code>做多个HA-proxy的高可用切换</p><p><img src="/assets/blogImg/cluster-architecture-pattern-rabbit/RabbitMQ-Framework-Mirror.jpg" alt="RabbitMQ-Framework-Mirror"></p><h2 id="多活模式-Federation"><a href="#多活模式-Federation" class="headerlink" title="多活模式(Federation)"></a>多活模式(Federation)</h2><ul><li>多活模式：这种模式也是实现异地数据复制的主流模式，因为Shovel模式配置比较复杂，所以一般来说实现异地集群都是使用这种双活或者多活模型来实现的。</li><li>这种模型需要依赖rabbitmq的<code>federation</code>插件，可以实现持续的可靠的AMQP数据通信，多活模式在实际配置与应用上非常的简单。</li><li>提供了更可靠的完备的数据保障，即使一个集群挂掉，也还有另外一个集群。</li><li>RabbitMQ部署架构采用双中心模式(多中心) , 那么在两套(或多套)数据中心中各部署一套RabbitMQ集群，各中心的RabbitMQ服务除了需要为业务提供正常的消息服务外，中心之间还需要实现部分队列消息共享。</li></ul><h3 id="多活集群架构"><a href="#多活集群架构" class="headerlink" title="多活集群架构"></a>多活集群架构</h3><p>上层就是应用层，然后经过LBS负载均衡，两套RabbitMQ集群，可能是两套镜像队列，两套集群通过federation插件进行数据的复制和流转。<br>当然federation插件不是建立在集群上的，而是建立到单个节点上，比如左边node3可以和右边任意一台建立这种多活机制，然后，自己这边的集群如果是采用镜像队列那么也会去进行同步，所以这种性能也是非常好的。</p><p><img src="/assets/blogImg/cluster-architecture-pattern-rabbit/RabbitMQ-Framework-Federation.jpg" alt="RabbitMQ-Framework-Federation"></p><h3 id="Federation插件说明"><a href="#Federation插件说明" class="headerlink" title="Federation插件说明"></a>Federation插件说明</h3><ul><li>Federation插件是一个不需要构建Cluster，而在Brokers之间传输消息的高性能插件，Federation 插件可以在Brokers或者Cluster之间传输消息，连接的双方可以使用不同的users和virtual hosts，双方也可以使用版本不同的RabbitMQ和Erlang</li><li>Federation 插件使用AMQP协议通讯，可以接受不连续的传输</li><li>Federation Exchanges，可以看成Downstream从Upstream主动拉取消息，但并不是拉取所有消息，必须是在Downstream上已经明确定义Bindings关系的Exchange，也就是有实际的物理Queue来接收消息，才会从Upstream拉取消息到Downstream。使用AMQP协议实施代理间通信，Downstream会将绑定关系组合在一起，绑定/解除绑定命令将发送到Upstream交换机。因此，FederationExchange只接收具有订阅的消息。</li></ul><h3 id="流转过程"><a href="#流转过程" class="headerlink" title="流转过程"></a>流转过程</h3><ul><li>如图所示上游服务和下游服务，建立一个Link连接，可以认为就是federation，X代表Exchange</li><li>上游过来的数据，可以通过Exchange，直接转到下游，下游Exchange去接收数据，然后路由到具体的队列进行消费。</li><li>上游过来的数据不是说所有的数据都会流转到下游的，而是说建立连接关系，下游需要有具体的队列进行存储。</li><li>上游也可以自己去监听，同一个数据可以发到两个集群中，都可以用队列去接收存储然后消费。</li></ul><p><img src="/assets/blogImg/cluster-architecture-pattern-rabbit/RabbitMQ-Framework-Federation2.jpg" alt="RabbitMQ-Framework-Federation"></p><h2 id="镜像模式集群构建过程"><a href="#镜像模式集群构建过程" class="headerlink" title="镜像模式集群构建过程"></a>镜像模式集群构建过程</h2><h3 id="Haproxy"><a href="#Haproxy" class="headerlink" title="Haproxy"></a>Haproxy</h3><h4 id="Haproxy简介"><a href="#Haproxy简介" class="headerlink" title="Haproxy简介"></a>Haproxy简介</h4><p>HAProxy是一款提供高可用性、负载均衡以及基于TCP和HTTP应用的代理软件，HAProxy是完全免费的、借助HAProxy可以快速并且可靠的提供基于TCP和HTTP应用的代理解决方案。</p><p>HAProxy适用于那些负载较大的web站点，这些站点通常又需要会话保持或七层处理。</p><p>HAProxy可以支持数以万计的并发连接,并且HAProxy的运行模式使得它可以很简单安全的整合进架构中，同时可以保护web服务器不被暴露到网络上。</p><h4 id="性能最大化"><a href="#性能最大化" class="headerlink" title="性能最大化"></a>性能最大化</h4><p>Haproxy借助于OS上几种常见的技术来实现性能的最大化：</p><ol><li>单进程、事件驱动模型显著降低了上下文切换的开销及内存占用</li><li>在任何可用的情况下，单缓冲(single buffering)机制能以不复制任何数据的方式完成读写操作，这会节约大量的CPU时钟周期以及内存带宽</li><li>借助于Linux 2.6(&gt;=2.6.27.19)上的splice()系统调用，Haproxy可以实现零复制转发(Zero-copy forwarding)，在Linux 3.5及以上的OS中还可以实现零复制启动(zero-starting)</li><li>内存分配器在固定大小的内存池中可实现即时内存分配，这能够显著减少创建一个会话的时长</li><li>树型存储：侧重于使用作者多年前开发的弹性二叉树，实现了以O(log(N))的低开销来保持计时器命令、保持运行队列命令及管理轮询及最少连接队列</li></ol><h3 id="KeepAlived"><a href="#KeepAlived" class="headerlink" title="KeepAlived"></a>KeepAlived</h3><p>Keepalived，它是一个高性能的服务器高可用或热备解决方案，Keepalived主要来防止服务器单点故障的发生问题，可以通过其与Nginx、Haproxy等反向代理的负载均衡服务器配合实现web服务端的高可用。Keepalived以VRRP协议为实现基础，用VRRP协议来实现高可用性（HA）.VRRP（Virtual Router Redundancy Protocol）协议是用于实现路由器冗余的协议，VRRP协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器IP（一个或多个）。</p><h4 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h4><p>KeepAlived服务的三个重要功能：</p><ul><li>管理LVS负载均衡软件</li><li>实现LVS集群节点的健康检查中</li><li>作为系统网络服务的高可用性(failover)</li></ul><h3 id="高可用原理"><a href="#高可用原理" class="headerlink" title="高可用原理"></a>高可用原理</h3><p>Keepalived高可用服务对之间的故障切换转移,是通过VRRP(Virtual Router Redundancy Protocol,虚拟路由器冗余协议)来实现的。在Keepalived服务正常工作时,主Master节点会不断地向备节点发送(多播的方式)心跳消息,用以告诉备Backup节点自己还活看,当主Master节点发生故障时,就无法发送心跳消息,备节点也就因此无法继续检测到来自主Master节点的心跳了,于是调用自身的接管程序,接管主Master节点的IP资源及服务.而当主Master节点恢复时，备Backup节点又会释放主节点故障时自身接管的IP资源及服务,恢复到原来的备用角色(nopreempt 开启恢复抢占)</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="集群环境节点"><a href="#集群环境节点" class="headerlink" title="集群环境节点"></a>集群环境节点</h4><table><thead><tr><th style="text-align:center">服务器IP</th><th style="text-align:center">hostname</th><th style="text-align:center">端口</th><th style="text-align:center">管控台地址</th></tr></thead><tbody><tr><td style="text-align:center">192.168.0.201</td><td style="text-align:center">controller1</td><td style="text-align:center">8100</td><td style="text-align:center"><a href="http://192.168.0.201:8100/rabbitmq-status" target="_blank" rel="noopener">http://192.168.0.201:8100/rabbitmq-status</a></td></tr><tr><td style="text-align:center">192.168.0.202</td><td style="text-align:center">controller2</td><td style="text-align:center">8100</td><td style="text-align:center"><a href="http://192.168.0.202:8100/rabbitmq-status" target="_blank" rel="noopener">http://192.168.0.202:8100/rabbitmq-status</a></td></tr><tr><td style="text-align:center">192.168.0.211</td><td style="text-align:center">rabbitmq master</td><td style="text-align:center">5672</td><td style="text-align:center"><a href="http://192.168.0.211:15672" target="_blank" rel="noopener">http://192.168.0.211:15672</a></td></tr><tr><td style="text-align:center">192.168.0.212</td><td style="text-align:center">rabbitmq slave</td><td style="text-align:center">5672</td><td style="text-align:center"><a href="http://192.168.0.212:15672" target="_blank" rel="noopener">http://192.168.0.212:15672</a></td></tr><tr><td style="text-align:center">192.168.0.213</td><td style="text-align:center">rabbitmq slave</td><td style="text-align:center">5672</td><td style="text-align:center"><a href="http://192.168.0.213:15672" target="_blank" rel="noopener">http://192.168.0.213:15672</a></td></tr></tbody></table><p><strong>设置VIP为： 192.168.0.200</strong></p><h4 id="额外操作"><a href="#额外操作" class="headerlink" title="额外操作"></a>额外操作</h4><p>关闭防火墙，SELinux。设置好主机名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止防火墙开机自启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">vim /etc/selinux/config <span class="comment"># 将SELINUX=enforcing改为SELINUX=disabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置hostname</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname xxx</span><br></pre></td></tr></table></figure><h4 id="Rabbit集群组建"><a href="#Rabbit集群组建" class="headerlink" title="Rabbit集群组建"></a>Rabbit集群组建</h4><h5 id="Rabbit安装"><a href="#Rabbit安装" class="headerlink" title="Rabbit安装"></a>Rabbit安装</h5><p>请查看<a href="[https://www.guaosi.com/2020/01/28/core-concepts-of-rabbitmq-with-golang/#%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85](https://www.guaosi.com/2020/01/28/core-concepts-of-rabbitmq-with-golang/#环境安装">入门RabbitMQ之核心概念(Golang演示)</a>)</p><p>停止RabbitMQ服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure><h5 id="文件同步"><a href="#文件同步" class="headerlink" title="文件同步"></a>文件同步</h5><p>选择211、212、213任意一个节点为Master（这里选择211为Master），也就是说我们需要把76的Cookie文件同步到212、213节点上去。</p><p>进入/var/lib/rabbitmq目录下，把/var/lib/rabbitmq/.erlang.cookie文件的权限修改为777，原来是400；然后把.erlang.cookie文件copy到各个节点下；最后把所有cookie文件权限还原为400即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod -R 777 /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制到其他节点</span></span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie 192.168.0.212:/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie 192.168.0.213:/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有节点改回权限</span></span><br><span class="line">chmod -R 400 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><h5 id="组成集群"><a href="#组成集群" class="headerlink" title="组成集群"></a>组成集群</h5><ol><li>使用集群命令启动rabbitmq</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure><ol start="2"><li>slave加入集群操作（重新加入集群也是如此，以最开始的主节点为加入节点）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl join_cluster rabbit@master <span class="comment"># 以磁盘存储形式加入主节点</span></span><br><span class="line"><span class="comment"># rabbitmqctl join_cluster --ram rabbit@master # 以内存存储形式加入主节点</span></span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另外其他节点上操作要移除的集群节点</span></span><br><span class="line">rabbitmqctl forget_cluster_node rabbit@master</span><br></pre></td></tr></table></figure><ol start="3"><li>修改集群名称</li></ol><blockquote><p>修改集群名称，随便在某一个节点执行，全部都有效（默认为第一个node名称）</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl <span class="keyword">set</span>_cluster_name rabbitmq_cluster</span><br></pre></td></tr></table></figure><ol start="4"><li>查看集群状态</li></ol><blockquote><p>最后在集群的任意一个节点执行命令：查看集群状态</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询集群状态</span></span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如下显示</span></span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@master,rabbit@slave1,rabbit@slave2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@slave2,rabbit@slave1,rabbit@master]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbitmq_cluster"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@slave2,[]&#125;,&#123;rabbit@slave1,[]&#125;,&#123;rabbit@master,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>同时此时查看管控台，也会都是集群展示</p><ol start="5"><li>配置镜像队列</li></ol><p>设置镜像队列策略（在任意一个节点上执行）</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-<span class="keyword">all</span> <span class="string">"^"</span> '&#123;<span class="string">"ha-mode"</span>:<span class="string">"all"</span>&#125;'</span><br></pre></td></tr></table></figure><p>将所有队列设置为镜像队列，即队列会被复制到各个节点，各个节点状态一致，RabbitMQ高可用集群就已经搭建好了,我们可以重启服务，查看其队列是否在从节点同步。</p><ol start="6"><li>检查</li></ol><p>此时发送一条信息的rabbitmq的任意一个节点，其他两个节点都会进行同步。同时，此时如果消费任意一个节点的任意一个消息，其他节点上也会消失。</p><h4 id="负载均衡-haproxy"><a href="#负载均衡-haproxy" class="headerlink" title="负载均衡-haproxy"></a>负载均衡-haproxy</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>HAProxy是一款提供高可用性、负载均衡以及基于TCP和HTTP应用的代理软件，HAProxy是完全免费的、借助HAProxy可以快速并且可靠的提供基于TCP和HTTP应用的代理解决方案。</p><p>HAProxy适用于那些负载较大的web站点，这些站点通常又需要会话保持或七层处理。</p><p>HAProxy可以支持数以万计的并发连接,并且HAProxy的运行模式使得它可以很简单安全的整合进架构中，同时可以保护web服务器不被暴露到网络上。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>在控制节点都进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//下载依赖包</span><br><span class="line">yum install gcc vim wget</span><br><span class="line">//下载haproxy</span><br><span class="line">wget http://www.haproxy.org/download/1.6/src/haproxy-1.6.5.tar.gz</span><br><span class="line">//解压</span><br><span class="line">tar -zxvf haproxy-1.6.5.tar.gz -C /usr/<span class="built_in">local</span></span><br><span class="line">//进入目录、进行编译、安装</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/haproxy-1.6.5</span><br><span class="line">make TARGET=linux31 PREFIX=/usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">//赋权</span><br><span class="line">groupadd -r -g 149 haproxy</span><br><span class="line">useradd -g haproxy -r -s /sbin/nologin -u 149 haproxy</span><br><span class="line">//创建haproxy配置文件</span><br><span class="line">touch /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/haproxy/haproxy.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#logging options</span></span><br><span class="line">global</span><br><span class="line"><span class="built_in">log</span> 127.0.0.1 local0 info</span><br><span class="line">maxconn 5120</span><br><span class="line">chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">uid 99</span><br><span class="line">gid 99</span><br><span class="line">daemon</span><br><span class="line">quiet</span><br><span class="line">nbproc 20</span><br><span class="line">pidfile /var/run/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line"><span class="built_in">log</span> global</span><br><span class="line"><span class="comment">#使用4层代理模式，”mode http”为7层代理模式</span></span><br><span class="line">mode tcp</span><br><span class="line"><span class="comment">#if you set mode to tcp,then you nust change tcplog into httplog</span></span><br><span class="line">option tcplog</span><br><span class="line">option dontlognull</span><br><span class="line">retries 3</span><br><span class="line">option redispatch</span><br><span class="line">maxconn 2000</span><br><span class="line">contimeout 5s</span><br><span class="line">     <span class="comment">##客户端空闲超时时间为 60秒 则HA 发起重连机制</span></span><br><span class="line">     clitimeout 60s</span><br><span class="line">     <span class="comment">##服务器端链接超时时间为 15秒 则HA 发起重连机制</span></span><br><span class="line">     srvtimeout 15s</span><br><span class="line"><span class="comment">#front-end IP for consumers and producters</span></span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line"><span class="comment"># 名字任意</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0:5672</span><br><span class="line"><span class="comment">#配置TCP模式</span></span><br><span class="line">mode tcp</span><br><span class="line"><span class="comment">#balance url_param userid</span></span><br><span class="line"><span class="comment">#balance url_param session_id check_post 64</span></span><br><span class="line"><span class="comment">#balance hdr(User-Agent)</span></span><br><span class="line"><span class="comment">#balance hdr(host)</span></span><br><span class="line"><span class="comment">#balance hdr(Host) use_domain_only</span></span><br><span class="line"><span class="comment">#balance rdp-cookie</span></span><br><span class="line"><span class="comment">#balance leastconn</span></span><br><span class="line"><span class="comment">#balance source //ip</span></span><br><span class="line"><span class="comment">#简单的轮询</span></span><br><span class="line">balance roundrobin</span><br><span class="line"><span class="comment">#rabbitmq集群节点配置 #inter 每隔五秒对mq集群做健康检查， 2次正确证明服务器可用，2次失败证明服务器不可用，并且配置主备机制</span></span><br><span class="line">        server master 192.168.0.211:5672 check inter 5000 rise 2 fall 2</span><br><span class="line">        server slave1 192.168.0.212:5672 check inter 5000 rise 2 fall 2</span><br><span class="line">        server slave2 192.168.0.213:5672 check inter 5000 rise 2 fall 2</span><br><span class="line"><span class="comment">#配置haproxy web监控，查看统计信息</span></span><br><span class="line">listen stats</span><br><span class="line"><span class="built_in">bind</span> 192.168.0.201:8100</span><br><span class="line">mode http</span><br><span class="line">option httplog</span><br><span class="line">stats <span class="built_in">enable</span></span><br><span class="line"><span class="comment">#设置haproxy监控地址为http://localhost:8100/rabbitmq-stats</span></span><br><span class="line">stats uri /rabbitmq-status</span><br><span class="line">stats refresh 5s</span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">//查看haproxy进程状态</span><br><span class="line">ps -ef | grep haproxy</span><br></pre></td></tr></table></figure><h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><p>查看haproxy监控: <a href="http://192.168.0.201:8100/rabbitmq-status" target="_blank" rel="noopener">http://192.168.0.201:8100/rabbitmq-status</a></p><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">killall haproxy</span><br><span class="line">ps -ef | grep haproxy</span><br></pre></td></tr></table></figure><h4 id="保活负载均衡-KeepAlived"><a href="#保活负载均衡-KeepAlived" class="headerlink" title="保活负载均衡-KeepAlived"></a>保活负载均衡-KeepAlived</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>Keepalived，它是一个高性能的服务器高可用或热备解决方案，Keepalived主要来防止服务器单点故障的发生问题，可以通过其与Nginx、Haproxy等反向代理的负载均衡服务器配合实现web服务端的高可用。Keepalived以VRRP协议为实现基础，用VRRP协议来实现高可用性（HA）.VRRP（Virtual Router Redundancy Protocol）协议是用于实现路由器冗余的协议，VRRP协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器IP（一个或多个）。</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//安装所需软件包</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">//下载</span><br><span class="line">wget http://www.keepalived.org/software/keepalived-1.2.18.tar.gz</span><br><span class="line">//解压、编译、安装</span><br><span class="line">tar -zxvf keepalived-1.2.18.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"><span class="built_in">cd</span> keepalived-1.2.18/ &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/keepalived</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">//将keepalived安装成Linux系统服务，因为没有使用keepalived的默认安装路径（默认路径：/usr/<span class="built_in">local</span>）,安装完成之后，需要做一些修改工作</span><br><span class="line"></span><br><span class="line">//首先创建文件夹，将keepalived配置文件进行复制：</span><br><span class="line">mkdir /etc/keepalived</span><br><span class="line">cp /usr/<span class="built_in">local</span>/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class="line">//然后复制keepalived脚本文件：</span><br><span class="line">cp /usr/<span class="built_in">local</span>/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</span><br><span class="line">cp /usr/<span class="built_in">local</span>/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/sbin/keepalived /usr/sbin/</span><br><span class="line">rm -rf /sbin/keepalived</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/keepalived/sbin/keepalived /sbin/</span><br><span class="line"></span><br><span class="line">//可以设置开机启动：chkconfig keepalived on，到此我们安装完毕!</span><br><span class="line">chkconfig keepalived on</span><br></pre></td></tr></table></figure><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><h6 id="检测脚本制作"><a href="#检测脚本制作" class="headerlink" title="检测脚本制作"></a>检测脚本制作</h6><p>添加文件位置为<code>/etc/keepalived/haproxy_check.sh</code>（主，从两个节点文件内容一致即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">COUNT=`ps -C haproxy --no-header |wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$COUNT</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">    sleep 2</span><br><span class="line">    <span class="keyword">if</span> [ `ps -C haproxy --no-header |wc -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        killall keepalived</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>赋予执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/keepalived/haproxy_check.sh</span><br></pre></td></tr></table></figure><h6 id="主节点"><a href="#主节点" class="headerlink" title="主节点"></a>主节点</h6><p><code>vim /etc/keepalived/keepalived.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id controller1  <span class="comment">##标识节点的字符串，通常为hostname</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script <span class="string">"/etc/keepalived/haproxy_check.sh"</span>  <span class="comment">##执行脚本位置</span></span><br><span class="line">    interval 2  <span class="comment">##检测时间间隔</span></span><br><span class="line">    weight -20  <span class="comment">##如果条件成立则权重减20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER  <span class="comment">## 主节点为MASTER，备份节点为BACKUP</span></span><br><span class="line">    interface ens33 <span class="comment">## 绑定虚拟IP的网络接口（网卡），与本机IP地址所在的网络接口相同（我这里是ens33）</span></span><br><span class="line">    virtual_router_id 200  <span class="comment">## 虚拟路由ID号（主备节点一定要相同）</span></span><br><span class="line">    mcast_src_ip 192.168.0.201 <span class="comment">## 本机ip地址</span></span><br><span class="line">    priority 100  <span class="comment">##优先级配置（0-254的值）</span></span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 1  <span class="comment">## 组播信息发送间隔，俩个节点必须配置一致，默认1s</span></span><br><span class="line">authentication &#123;  <span class="comment">## 认证匹配</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass guaosi</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.0.200  <span class="comment">## 虚拟ip，可以指定多个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="从节点"><a href="#从节点" class="headerlink" title="从节点"></a>从节点</h6><p><code>vim /etc/keepalived/keepalived.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id controller2  <span class="comment">##标识节点的字符串，通常为hostname</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script <span class="string">"/etc/keepalived/haproxy_check.sh"</span>  <span class="comment">##执行脚本位置</span></span><br><span class="line">    interval 2  <span class="comment">##检测时间间隔</span></span><br><span class="line">    weight -20  <span class="comment">##如果条件成立则权重减20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP  <span class="comment">## 主节点为MASTER，备份节点为BACKUP</span></span><br><span class="line">    interface ens33 <span class="comment">## 绑定虚拟IP的网络接口（网卡），与本机IP地址所在的网络接口相同（我这里是ens33）</span></span><br><span class="line">    virtual_router_id 200  <span class="comment">## 虚拟路由ID号（主备节点一定要相同）</span></span><br><span class="line">    mcast_src_ip 192.168.0.202  <span class="comment">## 本机ip地址</span></span><br><span class="line">    priority 90  <span class="comment">##优先级配置（0-254的值）</span></span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 1  <span class="comment">## 组播信息发送间隔，俩个节点必须配置一致，默认1s</span></span><br><span class="line">authentication &#123;  <span class="comment">## 认证匹配</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass guaosi</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.0.200  <span class="comment">## 虚拟ip，可以指定多个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><p>当我们启动俩个haproxy节点以后，我们可以启动keepalived服务程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//启动两台机器的keepalived</span><br><span class="line">service keepalived start | stop | status | restart</span><br><span class="line">//查看状态</span><br><span class="line">ps -ef | grep haproxy</span><br><span class="line">ps -ef | grep keepalived</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>此时只要连上VIP即可，如果主节点挂了，从节点会立刻设置VIP</p><h4 id="主配置文件参考"><a href="#主配置文件参考" class="headerlink" title="主配置文件参考"></a>主配置文件参考</h4><blockquote><p>不用配置</p></blockquote><p><code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</code></p><p>tcp_listerners ：设置rabbimq的监听端口，默认为[5672]。</p><p> disk_free_limit ：磁盘低水位线，若磁盘容量低于指定值则停止接收数据，默认值为{mem_relative, 1.0},即与内存相关联1：1，也可定制为多少byte.</p><p> vm_memory_high_watermark ：设置内存低水位线，若低于该水位线，则开启流控机制，默认值是0.4，即内存总量的40%。</p><p> hipe_compile ：将部分rabbimq代码用High Performance Erlang compiler编译，可提升性能，该参数是实验性，若出现erlang vm segfaults，应关掉。</p><p> force_fine_statistics ：该参数属于rabbimq_management，若为true则进行精细化的统计，但会影响性能</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Haproxy和KeepAlived在同一个节点上(称为高可用负载均衡代理节点)，当主节点故障时，VIP漂浮到备用节点，由备用节点变成主节点。KeepAlived的作用是检测高可用负载均衡代理节点是否挂了，挂了会影响Haproxy。Haproxy的作用是观察下游服务(rabbitmq)集群中是否有机器挂了，挂了则不将消息转发到该节点。</p><h2 id="集群恢复与故障转移的5种解决方案"><a href="#集群恢复与故障转移的5种解决方案" class="headerlink" title="集群恢复与故障转移的5种解决方案"></a>集群恢复与故障转移的5种解决方案</h2><p>RabbitMQ镜像队列集群的恢复的解决方案和应用场景：</p><p>前提：比如两个节点A和B组成一个镜像队列</p><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p>A先停，B后停</p><p>方案1： 该场景下B是Master，只要先启动B，再启动A即可。或者先启动A，再30秒内启动B即可恢复镜像队列。</p><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>A、B同时停机</p><p>方案：该场景可能是由于机房掉电等原因造成的，只需在30秒之内连续启动A和B即可恢复镜像。</p><h3 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h3><p>A先停，B后停，且A无法恢复</p><p>方案：改场景是1场景的加强版,因为B是Master,所以等B起来以后,在B节点上调用控制台命令:<code>rabbitmqctl forget_cluster_node A</code>解除与A的Cluster关系,再将新的Slave节点加入B即可重新恢复镜像队列</p><h3 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h3><p>A先停，B后停，且B无法恢复</p><p>方案：该场景是场景3的加强版,比较难处理,原因是因为Master节点无法恢复,早在3.1.x时代之前没有什么好的解决方案,但是现在已经有解决方案了,在3.4.2以后的版本。 因为B是主节点,所以直接启动A是不行的,当A无法启动的时候,也就没办法在A节点上调用之前的<code>rabbitmqctl forget_cluster_node B</code>命令了。新版本中,<code>forget_cluster_node</code> 支持<code>--offline</code>参数。</p><p>这就意味着允许rabbitmqctl在理想节点上执行该命令,迫使RabbitMQ在未启动Slave节点中选择一个节点作为Master。当在A节点执行 <code>rabbitmqctl forget_cluster_node --offline B</code>时,RabbitMQ会mock一个节点代表A,执行<code>forget_cluster_node</code>命令将B剔除cluster,然后A就可以正常启动了（此时将A作为Master）,最后将新的Slave节点加入A即可重新恢复镜像队列</p><h3 id="场景5"><a href="#场景5" class="headerlink" title="场景5"></a>场景5</h3><p>A先停、B后停，且A、B均无法恢复，但是能得到A或B的磁盘文件</p><p>方案：这种场景更加难处理,只能通过恢复数据的方式去尝试恢复,将A或B的数据库文件默认在<code>$RABBIT_HOME/var/lib/</code>目录中,把它拷贝到新节点(比如C、D)的对应目录下,再将新节点(比如C、D)的hostname改成A或B的hostname,如果是A节点(Slave)的磁盘文件,则按照场景4处理即可,如果是B节点(Master)的磁盘文件,则按照场景3处理,最后将新的Slave加入到新节点后完成恢复。</p><h3 id="场景6"><a href="#场景6" class="headerlink" title="场景6"></a>场景6</h3><p>A先停、B后停，且A、B均无法恢复，且得不到A或B的磁盘文件</p><p>方案：洗洗睡吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主备模式&quot;&gt;&lt;a href=&quot;#主备模式&quot; class=&quot;headerlink&quot; title=&quot;主备模式&quot;&gt;&lt;/a&gt;主备模式&lt;/h2&gt;&lt;h3 id=&quot;主备与主从&quot;&gt;&lt;a href=&quot;#主备与主从&quot; class=&quot;headerlink&quot; title=&quot;主备与主从&quot;&gt;&lt;/a&gt;主备与主从&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主备和主从的概念是有区别的，主备是主节点可以提供读写的，从节点是不提供任何读写的，只是一个备用的服务。&lt;/li&gt;
&lt;li&gt;主要的目的就是在主节点产生故障或者宕机的时候它能够实现一个自动切换，由原来的主节点切换到我们的备用节点，由备用节点继续提供读写服务，这时候备用节点就是充当主节点的角色了。而原来的节点恢复后又会加入到集群中，变成了备用节点。&lt;/li&gt;
&lt;li&gt;主从是主服节点可以提供读写，但从节点是只读的。主从更多的是实现读写分离和数据备份的效果。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="消息队列" scheme="https://www.guaosi.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.guaosi.com/tags/RabbitMQ/"/>
    
      <category term="中间件" scheme="https://www.guaosi.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis复制的原理与优化</title>
    <link href="https://www.guaosi.com/2020/02/05/replication-principle-and-optimization-redis/"/>
    <id>https://www.guaosi.com/2020/02/05/replication-principle-and-optimization-redis/</id>
    <published>2020-02-05T10:16:43.000Z</published>
    <updated>2021-12-05T08:13:24.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单机有什么问题？"><a href="#单机有什么问题？" class="headerlink" title="单机有什么问题？"></a>单机有什么问题？</h2><p>单机即在一台机器上部署一个redis节点，主要会存在以下问题：</p><h3 id="机器故障"><a href="#机器故障" class="headerlink" title="机器故障"></a>机器故障</h3><p>如果发生机器故障，例如磁盘损坏，主板损坏等，未能在短时间内修复好，客户端将无法连接redis。<br>当然如果仅仅是redis节点挂掉了，可以进行问题排查然后重启，姑且不考虑这段时间对外服务的可用性，那还是可以接受的。<br>而发生机器故障，基本是无济于事。除非把redis迁移到另一台机器上，并且还要考虑数据同步的问题。</p><a id="more"></a><h3 id="容量瓶颈"><a href="#容量瓶颈" class="headerlink" title="容量瓶颈"></a>容量瓶颈</h3><p>假如一台机器是16G内存，redis使用了12G内存，而其他应用还需要使用内存，假设我们总共需要60G内存要如何去做呢，是否有必要购买64G内存的机器？</p><h3 id="QPS瓶颈"><a href="#QPS瓶颈" class="headerlink" title="QPS瓶颈"></a>QPS瓶颈</h3><p>redis官方数据显示可以达到10w的QPS，如果业务需要100w的QPS怎么去做呢？</p><p>关于容量瓶颈和QPS瓶颈是redis分布式需要解决的问题，而机器故障就是高可用的问题了。</p><h2 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h2><h3 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h3><p>如图所示左边是Master节点，右边是slave节点，即主节点和从节点。从节点也是可以对外提供服务的，主节点是有数据的，从节点可以通过复制操作将主节点的数据同步过来，并且随着主节点数据不断写入，从节点数据也会做同步的更新。<br>整体起到的就是数据备份的效果。</p><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/主从复制的作用.jpg" alt="主从复制的作用"></p><h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><p>除了一主一从模型之外，redis还提供了一主多从的模型，也就是一个master可以有多个slave，也就相当于有了多份的数据副本。<br>这样可以做一个更加高可用的选择，例如一个master和一个slave挂掉了，还能有其他的slave数据备份。</p><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/一主多从.jpg" alt="一主多从"></p><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>除了作为数据备份，主从模型还能做另外一个功能，就是读写分离。<br>让master节点负责提供写服务，而将数据读取的压力进行分流和负载，分摊给所有的从节点。</p><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/读写分离.jpg" alt="读写分离"></p><h3 id="主从复制的作用-1"><a href="#主从复制的作用-1" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ol><li>数据副本(备份)</li><li>扩展读性能(读写分离)</li></ol><h3 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h3><ol><li>一个master可以有多个slave</li><li>一个slave只能有一个master</li><li>数据流向是单向的，master到slave</li></ol><h3 id="主从复制的配置"><a href="#主从复制的配置" class="headerlink" title="主从复制的配置"></a>主从复制的配置</h3><h4 id="slaveof命令"><a href="#slaveof命令" class="headerlink" title="slaveof命令"></a>slaveof命令</h4><p>如图，想让6380节点成为6379的从节点，只需要执行 <code>slaveof</code> 命令即可，此复制命令是异步进行的，redis会自动进行后续数据复制的操作。</p><p>注：一般生产环境不允许主从节点都在一台机器上，因为没有任何的价值。</p><blockquote><p>注意，执行这个命令成功后，从节点会把自身原有数据情空，完全与主节点数据相同</p></blockquote><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/saveof命令.jpg" alt="saveof命令"></p><h5 id="取消复制"><a href="#取消复制" class="headerlink" title="取消复制"></a>取消复制</h5><p>如果6380节点不希望成为6379的从节点，可以执行 <code>slave of on one</code> 命令，<code>取消后6380节点的数据不会被清除</code>，只是说后续6379节点新写入的数据不会再同步到该节点了。</p><blockquote><p>注意：如果取消复制后想slave一个新的主节点，新的主节点在同步给slave节点数据时，会先将从节点的数据全部清除</p></blockquote><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/取消主从复制.jpg" alt="取消主从复制"></p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置主节点的IP和端口号</span></span><br><span class="line">slaveof ip port</span><br><span class="line"> <span class="comment"># 从节点只做读的操作，保证主从数据的一致性</span></span><br><span class="line">slave-read-only yes</span><br></pre></td></tr></table></figure><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">命令</th><th style="text-align:center">配置</th></tr></thead><tbody><tr><td style="text-align:center">优点</td><td style="text-align:center">无需重启</td><td style="text-align:center">统一配置</td></tr><tr><td style="text-align:center">缺点</td><td style="text-align:center">不便于管理</td><td style="text-align:center">需要重启</td></tr></tbody></table><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">redis</span> &gt; <span class="literal">info</span> replication <span class="comment">#可以查询当前节点是否为主节点</span></span><br></pre></td></tr></table></figure><h3 id="runid和复制偏移量"><a href="#runid和复制偏移量" class="headerlink" title="runid和复制偏移量"></a>runid和复制偏移量</h3><p>redis每次启动的时候都会有一个随机的ID，作为一个标识，这个ID就是<code>runid</code>，当然重启之后值就改变了。<br>查看runid：<code>redis-cli -p 6379 info | grep run</code><br>假如端口为6380的redis去复制6379，知道<code>runid</code>后，在6380上做一个标识，如果<code>runid</code>改变了，说明主可能重启了或者发生了其它变化，这时候就可以做一个全量复制把数据同步过来。或者第一次启动时根本不知道6379的<code>runid</code>，也会进行全量复制</p><p>偏移量：数据写入量的字节<br>比如主执行set hello world，就会有一个偏移量，然后从同步数据，也会记录一个偏移量<br>当两个偏移量达到一致时候，实际上数据就是完全同步的状态。</p><p>启动主从redis，并在写入命令执行前后查看主偏移量：<br><code>redis-cli -p 6379 info replication | grep master_repl</code></p><p>从节点会向主节点做一个上报，把从节点的状态同步给主节点，这样主节点就知道了从节点的偏移量</p><p>生产环境我们一般不关心这个值，有时候做监控的时候会比对一下这两个值的差，如果差的太多，说明主从是有问题的。</p><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><p>全量复制主节点会将RDB文件也就是当前状态去同步给slave，在此期间主新写入的命令会单独记录起来，然后当RDB文件加载完毕之后，会通过偏移量对比将这个期间产生的写入值同步给slave，这样就能达到数据完全同步的效果</p><h4 id="全量复制过程"><a href="#全量复制过程" class="headerlink" title="全量复制过程"></a>全量复制过程</h4><ol><li>在其内部有一条命令<code>psync</code>，是做同步的命令，它可以完成全量复制和部分复制的功能，当启动slave节点时，它会发送<code>psync</code>命令给主节点，需要传递两个参数，<code>runid</code>和<code>offset</code>(偏移量)，也就是从向主传递主节点的runid以及自己的偏移量，对于第一次复制而言，就直接传递？和 -1，当然这个参数是由slave内部传的。</li><li>master接收到命令后知道从希望做全量复制，主就会将自己的runid和offset传递给从</li><li>slave节点保存master的基本信息</li><li>master执行<code>bgsave</code>生成RDB文件，并且在此期间新产生的写入命令会被记录到<code>repl_back_buffer</code>(复制缓冲区)</li><li>主向从传输RDB文件</li><li>主向从发送复制缓冲区内容</li><li>清空从节点旧的数据</li><li>从节点加载RDB文件到内存中，同时加载缓冲区数据</li></ol><h4 id="全量复制的开销"><a href="#全量复制的开销" class="headerlink" title="全量复制的开销"></a>全量复制的开销</h4><p>实际上全量复制的开销是非常大的，主要体现在如下方面</p><ol><li>bgsave时间(对cpu、 内存、硬盘都会有一定的开销)</li><li>RDB文件网络传输时间(网络带宽)</li><li>从节点清空数据时间(根据从节点的数据规模)</li><li>从节点加载RDB的时间</li><li>可能的AOF重写时间(在最后从加载完RDB之后如果开启了AOF，会做AOF重写)</li></ol><p>全量复制除了上述开销之外，还会有个问题：<br>假如master和slave网络发生了抖动，那一段时间内这些数据就会丢失，对于slave来说这段时间master更新的数据是不知道的。最简单的方式就是再做一次全量复制，从而获取到最新的数据，在redis2.8之前是这么做的。</p><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/全量复制.jpg" alt="全量复制"></p><h3 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h3><p>部分复制，redis2.8之后提供。如果发生类似抖动时候，可以有一种机制将这种损失降低到最低，如何实现的？</p><ol><li>如果发生了抖动，相当于连接断开了</li><li>主会将写命令记录到缓冲区，repl_back_buffer</li><li>当slave再次去连接master时候，就是说网络抖动结束之后，会触发增量复制</li><li>从会执行pysnc命令，将当前自己的offset和主的runid传递给master</li><li>如果发现传输的offset偏移量是在buffer内的，不在期间内就证明你已经错过了很多数据，buffer也是有限的，默认是1M，会将offset开始到队列结束的数据同步给从。这样master和slave就达到了一致。</li></ol><p>通过部分复制(增量复制)有效的降低了全量复制的开销。</p><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/部分复制.jpg" alt="部分复制"></p><h3 id="复制的相关配置"><a href="#复制的相关配置" class="headerlink" title="复制的相关配置"></a>复制的相关配置</h3><h4 id="无磁盘化复制"><a href="#无磁盘化复制" class="headerlink" title="无磁盘化复制"></a>无磁盘化复制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启无磁盘化复制</span></span><br><span class="line">repl-diskless-sync yes</span><br><span class="line"><span class="comment"># 当收到第一个复制请求时，等待 5s 后再开始复制，因为要等更多 slave 一起连接过来</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br></pre></td></tr></table></figure><h4 id="复制的限制"><a href="#复制的限制" class="headerlink" title="复制的限制"></a>复制的限制</h4><p>如果在复制期间，rdb复制时间超过60秒，内存缓冲区持续消耗超过64MB，或者一次性超过256MB，那么将会停止复制(失败)<br>配置项：<code>client-output-buffer-limit slave 256MB 64MB 60</code></p><h2 id="主从复制故障转移问题"><a href="#主从复制故障转移问题" class="headerlink" title="主从复制故障转移问题"></a>主从复制故障转移问题</h2><p><img src="/assets/blogImg/replication-principle-and-optimization-redis/主从复制故障转移问题.jpg" alt="主从复制故障转移问题"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单机有什么问题？&quot;&gt;&lt;a href=&quot;#单机有什么问题？&quot; class=&quot;headerlink&quot; title=&quot;单机有什么问题？&quot;&gt;&lt;/a&gt;单机有什么问题？&lt;/h2&gt;&lt;p&gt;单机即在一台机器上部署一个redis节点，主要会存在以下问题：&lt;/p&gt;
&lt;h3 id=&quot;机器故障&quot;&gt;&lt;a href=&quot;#机器故障&quot; class=&quot;headerlink&quot; title=&quot;机器故障&quot;&gt;&lt;/a&gt;机器故障&lt;/h3&gt;&lt;p&gt;如果发生机器故障，例如磁盘损坏，主板损坏等，未能在短时间内修复好，客户端将无法连接redis。&lt;br&gt;当然如果仅仅是redis节点挂掉了，可以进行问题排查然后重启，姑且不考虑这段时间对外服务的可用性，那还是可以接受的。&lt;br&gt;而发生机器故障，基本是无济于事。除非把redis迁移到另一台机器上，并且还要考虑数据同步的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.guaosi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化的取舍和选择</title>
    <link href="https://www.guaosi.com/2020/02/04/persistent-trade-offs-and-choices-redis/"/>
    <id>https://www.guaosi.com/2020/02/04/persistent-trade-offs-and-choices-redis/</id>
    <published>2020-02-04T13:26:47.000Z</published>
    <updated>2021-12-05T08:13:24.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="持久化的作用"><a href="#持久化的作用" class="headerlink" title="持久化的作用"></a>持久化的作用</h2><h3 id="什么是持久化"><a href="#什么是持久化" class="headerlink" title="什么是持久化"></a>什么是持久化</h3><p>redis所有数据保存在内存中，对数据的更新将异步地保存到磁盘上。<br> 将数据持久化到硬盘中，这样redis重启数据也不会丢失。当需要恢复数据时，就可以从硬盘中读取数据到内存中，然后进行数据恢复。</p><h3 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h3><p>快照 –&gt; 某个时刻的完整数据备份(MySQL Dump、Redis RDB)<br>写日志 –&gt; 记录数据的变化信息(MySQL Binlog、Hbase Hlog、Redis AOF)</p><a id="more"></a><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><h3 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h3><p>RDB方式其实是通过一条命令将当前redis内存数据完整的生成一个<code>快照</code>然后写入到RDB文件中，RDB文件有自身的一些格式，是采用二进制形式来保存的，当需要对redis数据进行恢复，比如redis做了一次重启，那么就可以将该文件重新载入到redis中，将某个时刻的redis数据备份恢复到redis当中。<br> 在主从复制中RDB还充当了复制的媒介作用。</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/RDB-什么是RDB.jpg" alt="RDB-什么是RDB"></p><h3 id="触发机制-主要三种方式"><a href="#触发机制-主要三种方式" class="headerlink" title="触发机制 - 主要三种方式"></a>触发机制 - 主要三种方式</h3><p>主要三种方式包括：save(同步)、bgsave(异步)、自动</p><h4 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h4><p>在客户端执行save命令，redis就会帮我们生成一个RDB文件。<br>执行这个命令有个问题就是它是一个同步命令，如果save命令执行比较慢，其他所有命令都需要排队，也就是说数据量大的时候可能造成redis服务器阻塞。</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/RBD-save命令.jpg" alt="RBD-save命令"></p><p>文件策略是当存在老的RDB文件时，执行命令会先生成一个临时文件，当命令执行完毕后将老的文件替换掉(复杂度O(n))。</p><h4 id="bgsave命令-异步"><a href="#bgsave命令-异步" class="headerlink" title="bgsave命令(异步)"></a>bgsave命令(异步)</h4><p>首先客户端执行 <code>bgsave</code> 命令，它不会像save命令一样去同步生成RDB，而是会在后台单独开启一个线程去执行。<br> 即使用了linux的<code>fork()</code>函数生成了主进程的一个子进程，由redis子进程去生成RDB文件，当RDB文件生成完毕后会通知主进程文件已经生成成功了。<br> 注意：fast说明子进程是执行非常快的(大多数情况)，但是极少数情况下fork执行慢的话依然会阻塞redis</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/RDB-bgsave命令.jpg" alt="RDB-bgsave命令"></p><p>其文件策略和复杂度与save命令相同，对于客户端而言执行完第一和第二步之后服务器就可以正常响应客户端了。</p><h4 id="两种方式对比"><a href="#两种方式对比" class="headerlink" title="两种方式对比"></a>两种方式对比</h4><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">save</th><th style="text-align:center">bgsave</th></tr></thead><tbody><tr><td style="text-align:center">IO类型</td><td style="text-align:center">同步</td><td style="text-align:center">异步</td></tr><tr><td style="text-align:center">阻塞</td><td style="text-align:center">是</td><td style="text-align:center">是(阻塞发生在fork)</td></tr><tr><td style="text-align:center">复杂度</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">优点</td><td style="text-align:center">不会消耗额外内存</td><td style="text-align:center">不阻塞客户端命令</td></tr><tr><td style="text-align:center">缺点</td><td style="text-align:center">阻塞客户端命令</td><td style="text-align:center">需要fork，消耗内存</td></tr></tbody></table><h4 id="自动生成RDB"><a href="#自动生成RDB" class="headerlink" title="自动生成RDB"></a>自动生成RDB</h4><p>通过配置实现，达到某些条件情况下自动生成RDB文件。<br> 如图所示的配置代表，如果60s改变了1万次数据，300s改变了10次数据，900s内改变了一条数据，三个条件任意满足一条即会自动生成RDB文件，当然它的自动生成实际是执行了<code>bgsave</code>命令。</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/RDB-自动生成RDB.jpg" alt="RDB-自动生成RDB"></p><h5 id="自动生成问题"><a href="#自动生成问题" class="headerlink" title="自动生成问题"></a>自动生成问题</h5><p>那么自动生成是否真的很好呢，显然不是。因为这样我们无法控制它生成RDB的频率。或者说它生成RDB文件频率有可能太高了。</p><p>比如60s有1万条改变，对于写入量非常大的应用也是非常容易达到这样的条件，或者达到前两条，那么就会频繁的去生成RDB。</p><p>这里姑且不讨论RDB文件生成可能带来的一些问题，姑且认为一个内存中的数据写一个快照到硬盘当中，如果数据非常大的话，或者说很频繁去做这样的操作，肯定会对硬盘造成一定的压力。而且生成的规则也不太好控制，因为写入量我们无法控制。</p><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><p>除了save的三个配置外，redis提供的配置还包括<br> <code>dbfilename:</code> 配置生成的文件名<br> <code>dir:</code> 包括rdb/aof和日志文件存放在哪，默认是当前目录<br> <code>stop-writes-on-bgsave-error:</code> 如果bgsave发生错误是否停止写入<br> <code>rdbcompression:</code> rdb文件是否采用压缩格式<br> <code>rdbchecksum:</code> 是否对rdb文件的校验和进行检验</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir ./</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure><h4 id="最佳配置"><a href="#最佳配置" class="headerlink" title="最佳配置"></a>最佳配置</h4><ol><li>将save配置全部关闭</li><li>使用端口号区分文件</li><li>选用大硬盘目录作为保存路径</li><li>bgsave发生错误选择停止写入</li><li>选用压缩格式，因为文件会比较小</li><li>采用校验和方式</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dbfilename</span> dump-<span class="variable">$&#123;port&#125;</span>.db</span><br><span class="line">dir /bigdiskpath</span><br><span class="line">stop-writes-<span class="literal">on</span>-bgsave-<span class="literal">error</span> <span class="literal">yes</span></span><br><span class="line">rdbcompression <span class="literal">yes</span></span><br><span class="line">rdbchecksum <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h3 id="触发机制-不容忽略方式"><a href="#触发机制-不容忽略方式" class="headerlink" title="触发机制 - 不容忽略方式"></a>触发机制 - 不容忽略方式</h3><h4 id="全量复制-主从复制介绍"><a href="#全量复制-主从复制介绍" class="headerlink" title="全量复制(主从复制介绍)"></a>全量复制(主从复制介绍)</h4><p>有时候没有执行save和bgsave，也没有配置自动生成策略，为什么还会生成RDB文件？这就要考虑到全量复制，也就是主从之间要进行复制的时候，主会自动生成RDB文件</p><h4 id="debug-reload"><a href="#debug-reload" class="headerlink" title="debug reload"></a>debug reload</h4><p>Redis还提供了<code>debug reload</code>来进行debug级别的重启，也就是不需要将内存(数据)进行清空的重启，这时候这个机制仍然会触发RDB文件的生成</p><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>我们在执行shutdown时候，它会有一个参数叫shutdownsave会执行RDB文件的生成</p><h3 id="RDB总结"><a href="#RDB总结" class="headerlink" title="RDB总结"></a>RDB总结</h3><ol><li>RDB是Redis内存到硬盘的快照，用于持久化</li><li>save通常会阻塞Redis</li><li>bgsave不会阻塞Redis，但是会fork新进程</li><li>save自动配置满足任一条件就会被执行(通常不使用)</li><li>有些触发机制不容忽视</li></ol><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><h3 id="RDB现存问题"><a href="#RDB现存问题" class="headerlink" title="RDB现存问题"></a>RDB现存问题</h3><h4 id="耗时、耗性能"><a href="#耗时、耗性能" class="headerlink" title="耗时、耗性能"></a>耗时、耗性能</h4><p>RDB生成过程就是内存中的Redis数据dump到硬盘当中，形成一个RDB文件。<br> 因为需要将所有数据进行dump，所以是比较耗时的，写比较消耗CPU资源，fork消耗内存。如果数据量很大，写入硬盘也会消耗IO性能。</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/RDB-耗时耗性能.jpg" alt="RDB-耗时耗性能"></p><h4 id="不可控、丢失数据"><a href="#不可控、丢失数据" class="headerlink" title="不可控、丢失数据"></a>不可控、丢失数据</h4><p>无论是定时执行save/bgsave命令，还是使用自动生成策略，都存在数据丢失的可能性</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/RDB-不可控丢失数据.jpg" alt="RDB-不可控丢失数据"></p><h3 id="AOF运行原理"><a href="#AOF运行原理" class="headerlink" title="AOF运行原理"></a>AOF运行原理</h3><p><strong>创建：</strong>基于日志的原理，客户端执行每条写入命令都会追加到AOF文件中，当然存入命令时肯定是使用AOF特定的格式</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-创建.jpg" alt="AOF-创建"><br><strong>恢复：</strong>当redis发生宕机之后，就可以使用AOF将redis中的数据进行完整的恢复，而且恢复基本是实时的。因为有记录到每个写入命令，当然根据不同AOF的策略也会决定写入的频率</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-恢复.jpg" alt="AOF-恢复"></p><h4 id="开启AOF"><a href="#开启AOF" class="headerlink" title="开启AOF"></a>开启AOF</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">appendonly</span>  <span class="literal">yes</span>      <span class="comment">#  (默认no,关闭)表示是否开启AOF持久化： </span></span><br><span class="line"></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span>   <span class="comment"># AOF持久化配置文件的名称：</span></span><br></pre></td></tr></table></figure><h3 id="AOF的三种策略"><a href="#AOF的三种策略" class="headerlink" title="AOF的三种策略"></a>AOF的三种策略</h3><p>三种策略: always、everysec、no<br>在记录写入命令时，通常会先存放在缓冲区中，可以提高写入的效率，缓冲区再根据生成策略刷新到AOF文件中。<br><code>always:</code> 每条命令都会fsync到硬盘中，这样redis的写入数据就不会丢失</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-always.jpg" alt="AOF-always"></p><p><code>everysec:</code> 每秒都会刷新缓冲区到硬盘中(默认值)<br>在高写入量时候会适当保护到硬盘，但是如果redis出现故障，有可能会丢失1秒的数据</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-everysec.jpg" alt="AOF-everysec"></p><p><code>no:</code> 根据当前操作系统的规则决定什么时候刷新到硬盘中，不需要我们来考虑</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-no.jpg" alt="AOF-no"></p><h6 id="三种策略选择"><a href="#三种策略选择" class="headerlink" title="三种策略选择"></a>三种策略选择</h6><p>通常采用默认配置：<code>everysec</code>，第一种如果redis写入量非常大，硬盘压力也会非常大。</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">always</th><th style="text-align:center">everysec</th><th style="text-align:center">no</th></tr></thead><tbody><tr><td style="text-align:center">优点</td><td style="text-align:center">不丢失数据</td><td style="text-align:center">每秒一次fsync 丢1秒数据</td><td style="text-align:center">不用管</td></tr><tr><td style="text-align:center">缺点</td><td style="text-align:center">IO开销较大，一般的stat盘只有几百TPS</td><td style="text-align:center">丢1秒数据</td><td style="text-align:center">不可控</td></tr></tbody></table><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>AOF存在的问题是随着时间逐步推移，AOF文件也会逐渐变大，那就会出现很多问题，比如如果使用AOF文件来进行恢复会非常慢。</p><p>如果文件无限制的增大，无论是对硬盘的管理还是写入命令的速度都会有一定影响，所以redis提供了AOF重写的方式来解决这个问题。</p><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-重写.jpg" alt="AOF-重写"></p><h4 id="AOF重写作用"><a href="#AOF重写作用" class="headerlink" title="AOF重写作用"></a>AOF重写作用</h4><p>其实AOF重写就是将一些过期的、没有用的、重复的以及一些可优化的命令都可以进行化简，化简成一个很小的AOF文件。<br> 从而达到如下目的：<strong>减少硬盘占用量、加速恢复速度</strong></p><p>比如对一个key执行了一亿次<code>incr key</code>操作，那么对于AOF文件来说就有一亿次的incr，可以想像文件量是非常大的，会占用很多的磁盘空间，如果做了AOF文件重写的话，实际上就是一条命令<code>set key 一亿</code>。</p><p>对于文件恢复来说也是一样的，如果写了一亿次的incr到文件当中，当redis需要使用AOF来进行恢复的时候，需要执行一亿次命令实际上是没有任何意义的，而且速度会非常慢，所以AOF文件重写就是用来解决上面这两个问题。</p><h4 id="AOF重写实现两种方式"><a href="#AOF重写实现两种方式" class="headerlink" title="AOF重写实现两种方式"></a>AOF重写实现两种方式</h4><h5 id="bgrewriteaof命令-类似bgsave"><a href="#bgrewriteaof命令-类似bgsave" class="headerlink" title="bgrewriteaof命令(类似bgsave)"></a>bgrewriteaof命令(类似bgsave)</h5><p>客户端发送此命令到redis，redis返回OK结果，并异步执行命令，会fork出一个子进程来完成AOF的重写。<br>注意这里的AOF重写实际上就是将redis内存当中的数据进行一次回溯，回溯成AOF文件，而不是真的去将AOF文件抽象成去做重写，然后抽象成一个新的AOF文件。(而是从redis内存中进行重写)</p><h4 id="AOF重写配置-自动重写，实际也是执行命令"><a href="#AOF重写配置-自动重写，实际也是执行命令" class="headerlink" title="AOF重写配置(自动重写，实际也是执行命令)"></a>AOF重写配置(自动重写，实际也是执行命令)</h4><p>第一个配置就是说当AOF文件多大时进行重写，第二个就是说下一次增长率是多少进行重写。<br>比如达到100M进行重写，并且文件增长率为100%，即200M，400M后会再次进行重写。</p><table><thead><tr><th style="text-align:center">配置名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">auto-aof-rewrite-min-size</td><td style="text-align:center">AOF文件重写需要的尺寸</td></tr><tr><td style="text-align:center">auto-aof-rewrite-percentage</td><td style="text-align:center">AOF文件增长率</td></tr></tbody></table><p>AOF统计项</p><table><thead><tr><th style="text-align:center">统计名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">aof_current_size</td><td style="text-align:center">AOF当前尺寸(单位：字节)</td></tr><tr><td style="text-align:center">aof_base_size</td><td style="text-align:center">AOF上次启动和重写的尺寸(单位：字节)</td></tr></tbody></table><p>自动触发时机：当达到以下两个条件才可以进行自动重写<br> 1.当前尺寸 &gt; 重写需要的最小尺寸<br> <code>aof_current_size &gt; auto-aof-rewrite-min-size</code><br> 2.当前尺寸 - 上次重写尺寸 / 上次重写尺寸 &gt; 增长率<br><code>aof_current_size - aof_base_size/aof_base_size &gt; auto-aof-rewrite-percentage</code></p><h4 id="AOF重写流程"><a href="#AOF重写流程" class="headerlink" title="AOF重写流程"></a>AOF重写流程</h4><ol><li>客户端发送<code>bgrewriteaof</code>命令，由redis主(父)进程执行</li><li>父进程会<code>fork</code>出一个子进程</li></ol><ul><li>子进程去完成AOF重写过程，其实是将内存中的数据进行回溯，然后写到新的AOF文件中</li></ul><ol start="3"><li>父进程仍然会进行正常的客户端的读写以及3.1和3.2过程<br>① redis仍然会将写命令写入到<code>aof_buf</code>当中，然后去写入到旧的AOF文件当中<br>② 除此之外，redis还会将这期间的写命令写入到<code>aof_rewrite_buf</code>当中</li><li>子进程去完成AOF重写过程，其实是将内存中的数据进行回溯，然后写到新的AOF文件中</li><li>① 当新文件生成之后，子进程会发送信号通知父进程<br>② 当新文件生成之后，会将这个buffer(在重写期间新的增长数据)补充到新的AOF文件当中<br>③ 最终会用新的AOF文件来替换老的AOF文件完成AOF重写过程</li></ol><p><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF-重写流程.jpg" alt="AOF-重写流程"></p><h3 id="AOF相关配置"><a href="#AOF相关配置" class="headerlink" title="AOF相关配置"></a>AOF相关配置</h3><p> <code>appendonly:</code> 要使用AOF功能需要设置为yes，默认为no<br> <code>appendfilename:</code> AOF文件名<br> <code>appendfsync:</code> AOF生成策略<br> <code>dir:</code> 保存RDB、AOF文件以及日志文件的目录<br> <code>no-appendfsync-on-rewrite:</code> 在AOF重写的时候，是否要做正常的append操作，yes代表不做这个操作<br> <code>auto-aof-rewrite-percentage:</code> AOF文件增长率<br> <code>auto-aof-rewrite-min-size:</code> AOF文件重写需要的尺寸</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">appendonly</span> <span class="literal">yes</span></span><br><span class="line">appendfilename <span class="string">"appendonly-<span class="variable">$&#123;port&#125;</span>.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">dir /bigdiskapth</span><br><span class="line"><span class="literal">no</span>-appendfsync-<span class="literal">on</span>-rewrite <span class="literal">yes</span></span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><h2 id="RDB和AOF抉择"><a href="#RDB和AOF抉择" class="headerlink" title="RDB和AOF抉择"></a>RDB和AOF抉择</h2><h3 id="RDB与AOF对比"><a href="#RDB与AOF对比" class="headerlink" title="RDB与AOF对比"></a>RDB与AOF对比</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">RDB</th><th style="text-align:center">AOF</th></tr></thead><tbody><tr><td style="text-align:center">启动优先级</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">体积</td><td style="text-align:center">小</td><td style="text-align:center">大</td></tr><tr><td style="text-align:center">恢复速度</td><td style="text-align:center">快</td><td style="text-align:center">慢</td></tr><tr><td style="text-align:center">数据重要性</td><td style="text-align:center">丢数据</td><td style="text-align:center">根据策略决定</td></tr><tr><td style="text-align:center">轻重</td><td style="text-align:center">重</td><td style="text-align:center">轻</td></tr></tbody></table><h3 id="RDB最佳策略"><a href="#RDB最佳策略" class="headerlink" title="RDB最佳策略"></a>RDB最佳策略</h3><ul><li>“关”掉RDB</li><li>集中管理</li><li>主从,从开</li></ul><h3 id="AOF最佳策略"><a href="#AOF最佳策略" class="headerlink" title="AOF最佳策略"></a>AOF最佳策略</h3><ul><li>“开” : 缓存和存储</li><li>AOF重写集中管理</li><li>使用everysec策略</li></ul><h3 id="最佳策略"><a href="#最佳策略" class="headerlink" title="最佳策略"></a>最佳策略</h3><ul><li>小分片</li><li>缓存或者存储</li><li>监控</li><li>足够的内存</li></ul><h2 id="常见的持久化开发运维问题"><a href="#常见的持久化开发运维问题" class="headerlink" title="常见的持久化开发运维问题"></a>常见的持久化开发运维问题</h2><h3 id="fork-操作"><a href="#fork-操作" class="headerlink" title="fork 操作"></a>fork 操作</h3><ul><li><p>fork 操作是一个同步操作，若执行较慢会阻塞 redis 主线程</p></li><li><p>执行时间与内存量相关：内存越大，耗时越长；虚拟机较慢，真机较快</p></li><li><p>查看 fork 执行时间，可做监控</p><p>info : latest_fork_usec 上一次执行fork的微秒数</p></li></ul><h4 id="改善-fork"><a href="#改善-fork" class="headerlink" title="改善 fork"></a>改善 fork</h4><ul><li><p>优先使用物理机或者高效支持fork操作的虚拟化技术</p></li><li><p>控制 Redis 实际最大可用内存：maxmemory</p></li><li><p>合理配置 Linux 内存分配策略 <code>vm.overcommit_memory = 1</code></p><p>默认这个值为 0，表示当发现没有足够内存做内存分配的时候，就不去分配。在内存比较低的时候，会发生fork 阻塞。设置为 1 表示认为机器有足够内存，来做内存分配。</p></li><li><p>降低 fork 频率：例如放宽 AOF 重写自动触发时机，不必要的全量复制</p></li></ul><h3 id="子进程开销和优化"><a href="#子进程开销和优化" class="headerlink" title="子进程开销和优化"></a>子进程开销和优化</h3><ul><li><p>CPU 开销</p><ul><li>RDB 和 AOF 都会生成文件，属于 CPU 密集型</li><li>优化1：不做 CPU 绑定，不和 CPU 密集型的应用部署在同一台服务器上</li><li>优化2：避免在单机多部署的场景大量发生 AOF 重写</li></ul></li><li><p>内存</p><ul><li><p>开销：fork内存开销，copy-on-write，子进程会共享父进程的物理内存页，当父进程执行写请求的时候会创建一个副本，此时会消耗内存。即父进程在大量写入的时候，子进程开销会比较大，创建副本。</p></li><li><p>优化1：防止单机多部署的时候发生大量的重写</p></li><li><p>优化2：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo never &gt; <span class="regexp">/sys/</span>kernel<span class="regexp">/mm/</span>transparent_hugepage<span class="regexp">/enabled</span></span><br></pre></td></tr></table></figure><ul><li>Linux 内核的 2.6.38 版本中增加以上配置，支持大的内存页的分配</li><li>内存页分配越大，会提高创建副本页的大小，影响性能</li></ul></li></ul></li><li><p>硬盘</p><ul><li>开销：RDB 与 AOF 文件写入的场景，可以结合 iostat、iotop 工具进行分析</li><li>优化1：不要和高硬盘负载服务部署在一起，例如存储服务、消息队列</li><li>配置：<code>no-appendfsync-on-rewrite = yes</code></li><li>根据写入量决定磁盘类型：例如 SSD</li><li>单机多实例持久化目录可以考虑分盘以及做资源限制，例如 cgroup</li></ul></li></ul><h3 id="AOF-追加阻塞"><a href="#AOF-追加阻塞" class="headerlink" title="AOF 追加阻塞"></a>AOF 追加阻塞</h3><p>Redis在执行 fsync 的时候，redis 为了保证 AOF 文件安全性，会校验上次 fsync 的时间是否大于2秒。若超过2秒，会发生阻塞。</p><h4 id="AOF-阻塞定位"><a href="#AOF-阻塞定位" class="headerlink" title="AOF 阻塞定位"></a><img src="/assets/blogImg/persistent-trade-offs-and-choices-redis/AOF追加阻塞.jpg" alt="AOF追加阻塞">AOF 阻塞定位</h4><ul><li><p>通过Redis日志进行定位。出行这行，即发生阻塞：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Asynchronous AOF fsync <span class="keyword">is</span> taking too long (disk <span class="keyword">is</span> busy?)</span><br><span class="line">Writing the AOF <span class="keyword">buffer</span> without waiting <span class="keyword">for</span> fsync <span class="keyword">to</span> <span class="built_in">complete</span>,this may show down Redis</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>info persistence</code> 命令进行查看：每发生一次，<code>aof_delayed_fsync</code> 会增 1 。<code>aof_deloayed_fsync:0</code>，说明 aof 并没有发生阻塞。</p></li><li><p>通过 <code>df -h</code> 和 <code>du -sh</code> 统计整体磁盘情况和查看单独目录点用情况。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;持久化的作用&quot;&gt;&lt;a href=&quot;#持久化的作用&quot; class=&quot;headerlink&quot; title=&quot;持久化的作用&quot;&gt;&lt;/a&gt;持久化的作用&lt;/h2&gt;&lt;h3 id=&quot;什么是持久化&quot;&gt;&lt;a href=&quot;#什么是持久化&quot; class=&quot;headerlink&quot; title=&quot;什么是持久化&quot;&gt;&lt;/a&gt;什么是持久化&lt;/h3&gt;&lt;p&gt;redis所有数据保存在内存中，对数据的更新将异步地保存到磁盘上。&lt;br&gt; 将数据持久化到硬盘中，这样redis重启数据也不会丢失。当需要恢复数据时，就可以从硬盘中读取数据到内存中，然后进行数据恢复。&lt;/p&gt;
&lt;h3 id=&quot;持久化方式&quot;&gt;&lt;a href=&quot;#持久化方式&quot; class=&quot;headerlink&quot; title=&quot;持久化方式&quot;&gt;&lt;/a&gt;持久化方式&lt;/h3&gt;&lt;p&gt;快照 –&amp;gt; 某个时刻的完整数据备份(MySQL Dump、Redis RDB)&lt;br&gt;写日志 –&amp;gt; 记录数据的变化信息(MySQL Binlog、Hbase Hlog、Redis AOF)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.guaosi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>瑞士军刀Redis</title>
    <link href="https://www.guaosi.com/2020/02/04/swiss-army-knife-redis/"/>
    <id>https://www.guaosi.com/2020/02/04/swiss-army-knife-redis/</id>
    <published>2020-02-04T07:13:28.000Z</published>
    <updated>2021-12-05T08:13:24.112Z</updated>
    
    <content type="html"><![CDATA[<ul><li>慢查询-可以帮助我们找到系统性能瓶颈的命令</li><li>pipeline-可以帮助我们提高客户端的效率</li><li>发布订阅-可以帮助我们使用redis实现发布订阅功能</li><li>Bitmap-为我们在某些功能上提供一个很好的思路，而且可以提供一个很好的节省内存方案</li><li>HyperLogLog-更加极端的一种节省内存方案的数据结构，可以用极小的内存来实现独立用户的统计</li><li>GEO-Redis3.2版本提供的地理定位的功能</li></ul><a id="more"></a><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>如图所示为客户端请求到Redis的完整生命周期：发送命令、排队、执行命令、返回结果</p><p><img src="/assets/blogImg/swiss-army-knife-redis/redis-发送指令生命周期.jpg" alt="redis-发送指令生命周期"></p><ol><li>慢查询发生在第三阶段(也就是说其他阶段像排队耗时都不算)</li><li>客户端超时不一定慢查询，但慢查询是客户端超时的一个可能因素</li></ol><h3 id="两个配置"><a href="#两个配置" class="headerlink" title="两个配置"></a>两个配置</h3><ul><li><code>slowlog-max-len</code><br> 1.配置慢查询队列最大长度<br> 2.筛选出的慢查询会进入一个先进先出队列<br> 3.该队列是固定长度的<br> 4.该队列是保存在内存中</li><li><code>slowlog-log-slower-than</code><br> 1.慢查询阈值(单位：微秒)，也就是说超过多少时间的查询是慢查询<br> 2.slowlog-log-slower-than=0; 记录所有命令<br> 3.slowlog-log-slower-than&lt;0; 不记录任何命令</li></ul><p><img src="/assets/blogImg/swiss-army-knife-redis/慢查询.jpg" alt="慢查询"></p><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><ol><li>默认值<br> config get slowlog-max-len = 128<br> config get slowlog-log-slower-than = 10000</li><li>修改配置文件重启(不建议，因为生产环境要尽量避免重启，在第一次启动redis前可以这么做)</li><li>动态配置<br> config set slowlog-max-len 1000<br> config set slowlog-log-slower-than 1000</li></ol><h3 id="三个命令"><a href="#三个命令" class="headerlink" title="三个命令"></a>三个命令</h3><ul><li><code>slowlog get [n]:</code> 获取慢查询队列(n为可选参数，指定慢查询条数)</li><li><code>slowlog len:</code> 获取慢查询队列长度</li><li><code>slowlog reset:</code> 清空慢查询队列</li></ul><h3 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h3><ol><li><code>slowlog-log-slower-than</code>不要设置过大，默认10ms，通常设置1ms</li><li><code>slowlog-max-len</code>不要设置过小，通常设置1000左右</li><li>理解命令生命周期</li><li>定期持久化慢查询（方便查到历史慢查询操作）</li></ol><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><h3 id="什么是流水线"><a href="#什么是流水线" class="headerlink" title="什么是流水线"></a>什么是流水线</h3><p>对比: 1次网络命令通信模型 vs 批量网络命令通信模型</p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipeline-1次 网络命令通信模型.jpg" alt="pipeline-1次 网络命令通信模型"></p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipeline-批量网络命令通信模型.jpg" alt="pipeline-批量网络命令通信模型"></p><p>执行redis命令时间通常是非常快的，而网络则存在很多不稳定因素。另外redis虽然提供了mget、mset和hmget、hmset等这样的命令，但是如果我们需要同时执行get和hget命令需要怎么做呢，其实这就是流水线帮助我们实现的功能。</p><p>流水线就是将一批命令进行一个打包，而在服务端进行批量的计算，然后按顺序将结果返回给客户端，使用流水线可以大大节省网络的开销。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipeline-流水线.jpg" alt="pipeline-流水线"></p><h3 id="流水线的作用"><a href="#流水线的作用" class="headerlink" title="流水线的作用"></a>流水线的作用</h3><p>两点说明：<br> 1.redis的命令时间是微秒级别<br> 2.pipeline每次条数要控制(网络)</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">N个命令操作</th><th style="text-align:center">1个pipline(n个命令)</th></tr></thead><tbody><tr><td style="text-align:center">时间</td><td style="text-align:center">n次网络+n次命令</td><td style="text-align:center">1次网络+n次命令</td></tr><tr><td style="text-align:center">数据量</td><td style="text-align:center">1条命令</td><td style="text-align:center">n条命令</td></tr></tbody></table><p>分析一个极端例子，假设客户端和服务端相距1300公里，粗略计算命令传输时间为13毫秒，而命令执行时间只有微秒级，所以如果想要做批量操作而没有使用pipeline这样的功能，那redis的使用效率就不会很高。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipeline-流水线的作用.jpg" alt="pipeline-流水线的作用"></p><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><p>假设需要执行hset命令1万次，key也有1万个，这样的操作是无法使用hmset来完成的，因为hmset是只针对一个key。<br>我们先使用for循环进行批量命令操作，最终执行时间为50s，显然对于这样的时间是没办法接受的。</p><p>我们换成使用pipeline实现，每次执行100个命令，执行100次pipeline操作，最终时间只需要0.7秒，速度大大提升。</p><h3 id="与原生M操作"><a href="#与原生M操作" class="headerlink" title="与原生M操作"></a>与原生M操作</h3><p>与原生M操作对比，M操作是一个原子操作，只需要执行和计算一次，而pipeline是将命令进行打包，传送到redis时，则会拆分成子命令，结果会按顺序返回。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipeline-与原生M操作-原子.jpg" alt="pipeline-与原生M操作-原子"></p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipeline-与原生M操作-非原子.jpg" alt="pipeline-与原生M操作-非原子"></p><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ol><li>注意每次pipeline携带数据量(数据量过大需合理拆分次数)</li><li>pipeline每次只能作用在一个Redis节点上</li><li>明确M操作与pipeline区别</li></ol><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>角色主要有发布者(publisher)、订阅者(subscriber)、频道(channel)<br> 发布者会发布消息到频道上，订阅者通过订阅频道来获取消息。<br> 类似一些新闻APP(微信公众号)，只要订阅了某些频道，这些频道有新消息发布订阅者就能收到消息。</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>模型如图所示(类似生产者与消费者模型)，对于订阅者而言其实也是个客户端，订阅者是可以订阅多个频道的，有个问题就是假如发布者已经发布了一条消息到频道中，但是一个新的订阅者是收不到之前已经发送过的消息的，使用时一定要注意这种场景，就是说redis并没有提供消息堆积的功能，所以无法获取历史消息。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/发布订阅-模型-单一订阅.jpg" alt="发布订阅-模型-单一订阅"></p><p><img src="/assets/blogImg/swiss-army-knife-redis/发布订阅-模型-多个订阅.jpg" alt="发布订阅-模型-多个订阅"></p><h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><p>发布消息：<code>publish channel message</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">publish</span> <span class="selector-tag">sohu</span><span class="selector-pseudo">:tv</span> "<span class="selector-tag">hello</span> <span class="selector-tag">world</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>) 3 #订阅者个数</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">publish</span> <span class="selector-tag">sohu</span><span class="selector-pseudo">:auto</span> "<span class="selector-tag">taxi</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>订阅频道：<code>subscribe [channel]</code> # 一个或多个<br>返回信息：订阅了哪个频道，收到消息详细信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">subscribe</span> <span class="selector-tag">sohu</span><span class="selector-pseudo">:tv</span></span><br><span class="line">1) "<span class="selector-tag">subscribe</span>"</span><br><span class="line">2) "<span class="selector-tag">sohu</span><span class="selector-pseudo">:tv"</span></span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">1) "<span class="selector-tag">message</span>"</span><br><span class="line">2) "<span class="selector-tag">sohu</span><span class="selector-pseudo">:tv"</span></span><br><span class="line">3) "<span class="selector-tag">hello</span> <span class="selector-tag">world</span>"</span><br></pre></td></tr></table></figure><p>取消订阅：<code>unsubscribe [channel]</code># 一个或多个</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">unsubscribe</span> <span class="selector-tag">sohu</span><span class="selector-pseudo">:tv</span></span><br><span class="line">1) "<span class="selector-tag">unsubscribe</span>"</span><br><span class="line">2) "<span class="selector-tag">sohu</span><span class="selector-pseudo">:tv"</span></span><br><span class="line">3) (<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>其他API，例如第一个命令根据pattern去匹配订阅，如: v*，匹配v开头的频道</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">psubscribe [pattern...] #订阅模式</span><br><span class="line">punsubscribe [pattern...] #退出指定的模式</span><br><span class="line">pubsub channels #列出只有少一个订阅者的频道</span><br><span class="line">pubsub numsub [channel...] #列出给定频道的订阅者数量</span><br><span class="line">pubsub numpat #列出被订阅模式的数量</span><br></pre></td></tr></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>发布订阅是频道发送一条消息，订阅该频道的订阅者都能收到消息。而消息队列是抢模式，最终只有一个订阅者能抢到消息进行消费。<br> 当然redis本身没有提供消息队列这样的功能，我们可以使用list实现，使用阻塞去拉取…<br> 具体根据场景选择相应的模式，就是要搞清楚你的消费者是都需要收到还是只有一个收到。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/pipelie-消息队列.jpg" alt="pipelie-消息队列"></p><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><p>每个字符串对应的有其ASCII码，将ASCII码转换成对应的二进制，二进制每个数字代表位，即bit<br> <code>bitmap</code>就是可以用来对位进行操作。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/bitmap-位图1.jpg" alt="bitmap-位图1"></p><p>例如设置了一个键值后，我们可以通过key获取到对应的value，同时我们也可以获取每一位二进制数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">hello</span>  <span class="selector-tag">big</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">hello</span> 0</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">hello</span> 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>设置位图：<code>setbit key offset value</code> #给位图指定索引设置值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 0 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 5 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 11 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 15 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 19 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>最终效果，设置对应的位为对应的值，其他都用0补充</p><p><img src="/assets/blogImg/swiss-army-knife-redis/bitmap-位图2.jpg" alt="bitmap-位图2"></p><p>如果对刚才的user执行<code>setbit key 50 1</code>，那么从19位到49位全部补0。这个过程本身会比较慢，所以在执行 <code>setbit</code> 命令时最好不要在很短的位图上做很大的偏移量。</p><p><img src="/assets/blogImg/swiss-army-knife-redis/bitmap-位图3.jpg" alt="bitmap-位图3"></p><p>获取位图：<code>getbit key offset</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 8</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 19</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>范围获取：<code>bitcount key [start end]</code> #获取位图指定范围(start到end，单位为字节，如果不指定就是获取全部)位值为1的个数</p><p>注意start和end指定的是字节，1个字节代表8位</p><p>如0 0代表第一个字节，即0-7位，1 2代表第二个字节到第三个字节，即8-23位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">bitcount</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">bitcount</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> 1 3</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br></pre></td></tr></table></figure><p>多位图操作：<code>bitop op destkey key[key...]</code># 做多个Bitmap的and(交集)、or(并集)、not(非)、xor(异或) 操作并将结果保存在destkey中<br>op代表操作符，比如and、or，返回值为操作后的值字节长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 求两个位图的并集</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">bitop</span> <span class="selector-tag">and</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:and</span><span class="selector-pseudo">:2016_04_04-2016_04_05</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-05</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-04</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">bitcount</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:and</span><span class="selector-pseudo">:2016_04_04-2016_04_05</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br></pre></td></tr></table></figure><p>获取索引：<code>bitpos key targetBit [start] [end]</code>  # 计算位图指定范围(start到end，单位为字节，如果不指定就是获取全部)第一个偏移量对应的值等于targetBit的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">bitpos</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-04</span> 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">bitpos</span> <span class="selector-tag">unique</span><span class="selector-pseudo">:users</span><span class="selector-pseudo">:2016-04-04</span> 0 1 2</span><br><span class="line">(<span class="selector-tag">integer</span>) 8</span><br></pre></td></tr></table></figure><h3 id="独立用户统计"><a href="#独立用户统计" class="headerlink" title="独立用户统计"></a>独立用户统计</h3><ol><li>使用set和Bitmap</li><li>有1亿用户，5千万独立(每天有5千万人独立访问)</li></ol><p>使用位图实现的思路就是，每个用户的ID占一位，比如用户的ID为10000，那我们就将key的第1万位设置为1。<br>当然这里内存只是个预估值，如果每天都要进行统计，使用位图还是能节省非常大的内存开销的。</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">每个userid占用空间</th><th style="text-align:center">需要存储的用户量</th><th style="text-align:center">全部内存量</th></tr></thead><tbody><tr><td style="text-align:center">set</td><td style="text-align:center">32位(假设userid用的是整型，实际很多网站用的是长整型)</td><td style="text-align:center">50,000,000</td><td style="text-align:center">32位*50,000,000=200MB</td></tr><tr><td style="text-align:center">Bitmap</td><td style="text-align:center">1位</td><td style="text-align:center">100,000,000</td><td style="text-align:center">1位*100,000,000=12.5MB</td></tr></tbody></table><p>随着时间的迁移</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">一天</th><th style="text-align:center">一个月</th><th style="text-align:center">一年</th></tr></thead><tbody><tr><td style="text-align:center">set</td><td style="text-align:center">200MB</td><td style="text-align:center">6G</td><td style="text-align:center">72G</td></tr><tr><td style="text-align:center">Bitmap</td><td style="text-align:center">12.5M</td><td style="text-align:center">375M</td><td style="text-align:center">4.5G</td></tr></tbody></table><p>那么是不是说在做这样的功能的时候 <code>set</code> 就完全不如 <code>bitmap</code> 好呢。其实是没有完美绝对的事情。<br>假设只有100万独立用户呢，可以看到使用<code>set</code>会更节省内存，所以使用<code>bitmap</code>也不是绝对的好</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">每个userid占用空间</th><th style="text-align:center">需要存储的用户量</th><th style="text-align:center">全部内存量</th></tr></thead><tbody><tr><td style="text-align:center">set</td><td style="text-align:center">32位(假设userid用的是整型，实际很多网站用的是长整型)</td><td style="text-align:center">1,000,000</td><td style="text-align:center">32位*1,000,000=4MB</td></tr><tr><td style="text-align:center">Bitmap</td><td style="text-align:center">1位</td><td style="text-align:center">100,000,000</td><td style="text-align:center">1位*100,000,000=12.5MB</td></tr></tbody></table><p>实际上位图的id不一定要和userid一样，两者之前可以有一定的偏移量。只要有规则就好，这样可以避免过多的空间浪费。</p><h3 id="使用建议-1"><a href="#使用建议-1" class="headerlink" title="使用建议"></a>使用建议</h3><ol><li>bitmap实际是string类型，type=string，值最大可以存储512MB，对于大部分的独立用户统计应该都可以满足</li><li>注意 setbit 时的偏移量，可能有较大耗时，如果偏移量过大可能造成redis服务器阻塞</li><li>位图不是绝对好，合理的场景选择合适的类型</li></ol><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><ol><li>基于HyperLogLog算法：使用极小空间完成独立数量统计</li><li>本质还是字符串：type hyperloglog_key (返回的是string)</li></ol><h3 id="三个命令-1"><a href="#三个命令-1" class="headerlink" title="三个命令"></a>三个命令</h3><ul><li><code>pfadd key element [element ...]</code>   #向hyperloglog添加元素</li><li><code>pfcount key [key ...]</code>   #计算hyperloglog的独立总数</li><li><code>pfmerge destkey sourcekey [sourcekey ...]</code>   #合并多个hyperloglog</li></ul><p>API使用示例一</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfadd</span> 2017_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span> "<span class="selector-tag">uuid-1</span>" "<span class="selector-tag">uuid-2</span>" "<span class="selector-tag">uuid-3</span>" "<span class="selector-tag">uuid-4</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfcount</span> 2017_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfadd</span> 2017_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span> "<span class="selector-tag">uuid-1</span>" "<span class="selector-tag">uuid-2</span>" "<span class="selector-tag">uuid-3</span>" "<span class="selector-tag">uuid-90</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfcount</span> 2017_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br></pre></td></tr></table></figure><p>API使用示例二</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfadd</span> 2016_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span> "<span class="selector-tag">uuid-1</span>" "<span class="selector-tag">uuid-2</span>" "<span class="selector-tag">uuid-3</span>" "<span class="selector-tag">uuid-4</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfcount</span> 2016_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfadd</span> 2016_03_05<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span> "<span class="selector-tag">uuid-4</span>" "<span class="selector-tag">uuid-5</span>" "<span class="selector-tag">uuid-6</span>" "<span class="selector-tag">uuid-7</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfcount</span> 2016_03_05<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfmerge</span> 2016_03_05_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span> 2016_03_05<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span> 2016_03_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfcount</span> 2016_03_05_06<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 7</span><br></pre></td></tr></table></figure><h3 id="内存消耗-百万独立用户"><a href="#内存消耗-百万独立用户" class="headerlink" title="内存消耗(百万独立用户)"></a>内存消耗(百万独立用户)</h3><p>使用shell脚本实现百万用户添加，分1千次添加，每次加入1千条数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">elements=<span class="string">""</span></span><br><span class="line">key=<span class="string">"2020_05_01:unique:ids"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 1000000`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        elements=<span class="string">"<span class="variable">$&#123;elements&#125;</span> uuid-"</span><span class="variable">$&#123;i&#125;</span></span><br><span class="line">        <span class="keyword">if</span> [[ $((i%1000)) == 0 ]]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                /usr/<span class="built_in">local</span>/redis/bin/redis-cli pfadd <span class="variable">$&#123;key&#125;</span> <span class="variable">$&#123;elements&#125;</span></span><br><span class="line">                elements=<span class="string">""</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>内存消耗情况如图，相对于使用bitmap或者set来说，消耗内存是非常的小。</p><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">内存消耗</th></tr></thead><tbody><tr><td style="text-align:center">1天</td><td style="text-align:center">15KB</td></tr><tr><td style="text-align:center">1个月</td><td style="text-align:center">450KB</td></tr><tr><td style="text-align:center">1年</td><td style="text-align:center">15KB*365=5MB</td></tr></tbody></table><h3 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h3><p>还是那句话，没有绝对完美的事情，在使用<code>HyperLogLog</code>前考虑以下两点</p><ol><li>数据是否容忍错误(错误率：0.81%)</li><li>是否需要单条数据？(hyperLogLog无法获取)</li></ol><p>例如我们之前插入的百万数据，真实查询结果是有偏差的，并且再次插入新的值然后查询结果又会不一样。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">pfcount</span> 2016_05_01<span class="selector-pseudo">:unique</span><span class="selector-pseudo">:ids</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br></pre></td></tr></table></figure><h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2><p>redis3.2新特性，用来计算地理位置信息相关的功能<br> GEO(地理信息定位)：存储经纬度，计算两地距离、范围计算等</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>比如实现类似微信摇一摇这样的功能(社交)</li><li>计算周围酒店、餐馆功能(外卖)</li></ul><h3 id="相关API-1"><a href="#相关API-1" class="headerlink" title="相关API"></a>相关API</h3><p>首先给出5个城市的经纬度</p><table><thead><tr><th style="text-align:center">城市</th><th style="text-align:center">经度</th><th style="text-align:center">纬度</th><th style="text-align:center">简称</th></tr></thead><tbody><tr><td style="text-align:center">北京</td><td style="text-align:center">116.28</td><td style="text-align:center">39.55</td><td style="text-align:center">beijing</td></tr><tr><td style="text-align:center">天津</td><td style="text-align:center">117.12</td><td style="text-align:center">39.08</td><td style="text-align:center">tianjin</td></tr><tr><td style="text-align:center">石家庄</td><td style="text-align:center">114.29</td><td style="text-align:center">38.02</td><td style="text-align:center">shijiazhuang</td></tr><tr><td style="text-align:center">唐山</td><td style="text-align:center">118.01</td><td style="text-align:center">39.38</td><td style="text-align:center">tangshan</td></tr><tr><td style="text-align:center">保定</td><td style="text-align:center">115.29</td><td style="text-align:center">38.51</td><td style="text-align:center">baoding</td></tr></tbody></table><p>添加地理位置：<code>geoadd key lng lat member[lng lat member...]</code>  # 增加地理位置信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">geoadd</span> <span class="selector-tag">cities</span><span class="selector-pseudo">:locations</span> 116<span class="selector-class">.28</span> 39<span class="selector-class">.55</span> <span class="selector-tag">beijing</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">geoadd</span> <span class="selector-tag">cities</span><span class="selector-pseudo">:locations</span> 117<span class="selector-class">.12</span> 39<span class="selector-class">.08</span> <span class="selector-tag">tianjin</span> 114<span class="selector-class">.29</span> 38<span class="selector-class">.02</span> <span class="selector-tag">shijiazhuang</span> 118<span class="selector-class">.01</span> 39<span class="selector-class">.38</span> <span class="selector-tag">tangshan</span> 115<span class="selector-class">.29</span> 38<span class="selector-class">.51</span> <span class="selector-tag">baoding</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br></pre></td></tr></table></figure><p>获取地理位置：<code>geopos key memeber[member...]</code>  # 获取地理位置信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">geopos</span> <span class="selector-tag">cities</span><span class="selector-pseudo">:locations</span> <span class="selector-tag">tianjin</span></span><br><span class="line">1) 1)"117<span class="selector-class">.12000042200088501</span>"</span><br><span class="line">   2)"39<span class="selector-class">.0800000535766543</span>"</span><br></pre></td></tr></table></figure><p>计算距离：<code>geodist key member1 member2 [unit]</code>  # 获取两个地理位置的距离 # unit: m(米)、km(千米)、mi(英尺)、ft(尺)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">geodist</span> <span class="selector-tag">cities</span><span class="selector-pseudo">:locations</span> <span class="selector-tag">tianjin</span> <span class="selector-tag">beijing</span> <span class="selector-tag">km</span></span><br><span class="line">"89<span class="selector-class">.2061</span>"</span><br></pre></td></tr></table></figure><p>获取周边：<code>georadius</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">georadius key longitude radiusm|km|ft|mi [<span class="string">withcoord</span>] [<span class="string">withdist</span>] [<span class="string">withhash</span>] [<span class="string">COUNT count</span>] [<span class="string">asc|desc</span>] [<span class="string">store key</span>][<span class="symbol">storedist key</span>]</span><br><span class="line">georadiusbymember key member radiusm|km|ft|mi [<span class="string">withcoord</span>] [<span class="string">withdist</span>] [<span class="string">withhash</span>] [<span class="string">COUNT count</span>] [<span class="string">asc|desc</span>] [<span class="string">store key</span>][<span class="symbol">storedist key</span>] # 获取指定范围内的地理位置信息合集</span><br><span class="line"></span><br><span class="line">withcoord: 返回结果中包含经纬度</span><br><span class="line">withdist: 返回结果中包含距离中心节点位置</span><br><span class="line">withhash: 返回结果中包含geohash</span><br><span class="line">COUNT count: 指定返回结果的数量</span><br><span class="line">asc|desc: 返回结果按照距离中心节点的距离做升序或降序</span><br><span class="line">store key: 将返回结果的地理位置信息保存到指定键</span><br><span class="line">storedist key: 将返回结果距离中心的距离保存到指定键</span><br></pre></td></tr></table></figure><p>示例：计算在北京150km以内的城市</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> georadiusbymember <span class="symbol">cities:</span>locations beijing <span class="number">150</span> km</span><br><span class="line"><span class="number">1</span>) <span class="string">"beijing"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"tianjin"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"tangshan"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"baoding"</span></span><br></pre></td></tr></table></figure><h3 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h3><ol><li>since 3.2+（3.2版本提供）</li><li>类型实际上是zset，type geoKey = zset</li><li>没有删除API，zrem key member(直接使用zset的API)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;慢查询-可以帮助我们找到系统性能瓶颈的命令&lt;/li&gt;
&lt;li&gt;pipeline-可以帮助我们提高客户端的效率&lt;/li&gt;
&lt;li&gt;发布订阅-可以帮助我们使用redis实现发布订阅功能&lt;/li&gt;
&lt;li&gt;Bitmap-为我们在某些功能上提供一个很好的思路，而且可以提供一个很好的节省内存方案&lt;/li&gt;
&lt;li&gt;HyperLogLog-更加极端的一种节省内存方案的数据结构，可以用极小的内存来实现独立用户的统计&lt;/li&gt;
&lt;li&gt;GEO-Redis3.2版本提供的地理定位的功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.guaosi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis API的理解和使用</title>
    <link href="https://www.guaosi.com/2020/02/03/understanding-and-use-of-redis-api/"/>
    <id>https://www.guaosi.com/2020/02/03/understanding-and-use-of-redis-api/</id>
    <published>2020-02-03T10:21:34.000Z</published>
    <updated>2021-12-05T08:13:24.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><p><code>keys *</code> #遍历所有的key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> php good</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> java best</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; keys *</span><br><span class="line">1) <span class="string">"java"</span></span><br><span class="line">2) <span class="string">"php"</span></span><br><span class="line">3) <span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379 &gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>)3</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>keys [pattern]</code> #遍历所有的key，指定模式(通配符)进行筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; mset hello world hehe haha php good phe his</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; keys he*</span><br><span class="line">1)<span class="string">"hehe"</span></span><br><span class="line">2)<span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379 &gt; keys he[h<span class="_">-l</span>]*</span><br><span class="line">1)<span class="string">"hehe"</span></span><br><span class="line">2)<span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379 &gt; keys ph?</span><br><span class="line">1)<span class="string">"php"</span></span><br><span class="line">2)<span class="string">"phe"</span></span><br></pre></td></tr></table></figure><p><code>keys</code> 命令一般不在生产环境中使用，因为生产环境数据庞大，而redis又是单线程机制，keys命令是o(n)复杂度，执行会很慢，且容易阻塞其他命令。<br><code>keys *</code>怎么用：热备从节点(在从节点上使用)、scan(使用scan命令)</p><h3 id="dbsize"><a href="#dbsize" class="headerlink" title="dbsize"></a>dbsize</h3><p><code>dbsize</code> #计算key的总数<br>该命令可以随便使用，因为redis内置了计数器，会实时更新keys总数，而不需要遍历所有数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; mset k1 v1 k2 v2 k3 v3 k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>)4</span><br><span class="line">127.0.0.1:6379 &gt; sadd myset a b c d e</span><br><span class="line">(<span class="built_in">integer</span>)5</span><br><span class="line">127.0.0.1:6379 &gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>)5</span><br></pre></td></tr></table></figure><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p><code>exists key</code> #检查key是否存在<br>返回值：存在返回1，不存在返回0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> a b</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; exists a</span><br><span class="line">(<span class="built_in">integer</span>)1</span><br><span class="line">127.0.0.1:6379 &gt; del a</span><br><span class="line">(<span class="built_in">integer</span>)1</span><br><span class="line">127.0.0.1:6379 &gt; exists a</span><br><span class="line">(<span class="built_in">integer</span>)0</span><br></pre></td></tr></table></figure><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p><code>del key [key...]</code> #删除指定key-value，可删除多个<br>返回值：删除成功返回1，key不存在返回0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> a b</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; get a</span><br><span class="line"><span class="string">"b"</span></span><br><span class="line">127.0.0.1:6379 &gt; del a</span><br><span class="line">(<span class="built_in">integer</span>)1</span><br><span class="line">127.0.0.1:6379 &gt; get a</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="expire、ttl、persist"><a href="#expire、ttl、persist" class="headerlink" title="expire、ttl、persist"></a>expire、ttl、persist</h3><p><code>expire key seconds</code>    #key在seconds秒后过期<br> <code>ttl key</code>      #查看key剩余的过期时间，-1代表没有过期时间，-2代表key不存在<br> <code>persist key</code>      #去掉key的过期时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1</span></span><br><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; expire hello 20</span><br><span class="line">(<span class="built_in">integer</span>)1</span><br><span class="line">127.0.0.1:6379 &gt; ttl hello</span><br><span class="line">(<span class="built_in">integer</span>)16</span><br><span class="line">127.0.0.1:6379 &gt; get hello</span><br><span class="line"><span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379 &gt; ttl hello</span><br><span class="line">(<span class="built_in">integer</span>)7</span><br><span class="line">127.0.0.1:6379 &gt; ttl hello</span><br><span class="line">(<span class="built_in">integer</span>)-2(-2表示key已经不存在了)</span><br><span class="line">127.0.0.1:6379 &gt; get hello</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2</span></span><br><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; expire hello 20</span><br><span class="line">(<span class="built_in">integer</span>)1</span><br><span class="line">127.0.0.1:6379 &gt; ttl hello</span><br><span class="line">(<span class="built_in">integer</span>)16(还有16秒过期)</span><br><span class="line">127.0.0.1:6379 &gt; persist hello</span><br><span class="line">(<span class="built_in">integer</span>)1</span><br><span class="line">127.0.0.1:6379 &gt; ttl hello</span><br><span class="line">(<span class="built_in">integer</span>)-1(-1代表key存在并且没有过期时间。)</span><br><span class="line">127.0.0.1:6379 &gt; get hello</span><br><span class="line"><span class="string">"world"</span></span><br></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p><code>type key</code> #返回key的类型<br>返回值：string、hash、list、set、zset、none(key不存在)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; <span class="built_in">set</span> a b</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379 &gt; <span class="built_in">type</span> a</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379 &gt; sadd myset 1 2 3</span><br><span class="line">(<span class="built_in">integer</span>)3</span><br><span class="line">127.0.0.1:6379 &gt; <span class="built_in">type</span> myset</span><br><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>了解命令的时间复杂度对我们使用Redis的API是非常有帮助的，因为我们需要在合理的场景以及合理的数据规模下进行使用。</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">时间复杂度</th></tr></thead><tbody><tr><td style="text-align:center">keys</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">dbsize</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">del</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">exists</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">expire</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">O(1)</td></tr></tbody></table><h2 id="内部编码与单线程"><a href="#内部编码与单线程" class="headerlink" title="内部编码与单线程"></a>内部编码与单线程</h2><h3 id="数据结构与内部编码"><a href="#数据结构与内部编码" class="headerlink" title="数据结构与内部编码"></a>数据结构与内部编码</h3><p>Redis对外主要提供了5种数据结构，分别是string、hash、list、set、sorted set<br> 并且对于每一种数据结构redis都提供了至少2种相应的内部编码实现以应对不同的使用场景。</p><h4 id="这么做的目的"><a href="#这么做的目的" class="headerlink" title="这么做的目的"></a>这么做的目的</h4><ol><li>对于用户的数据存储选择合适的处理策略以达到内存最优使用的目的，即采用以空间换取时间还是以时间换取空间策略</li><li>采用面向接口编程思想以达到很好的扩展性，比如对于list类型又完成了一种针对特定场景使用的内部编码实现，那么只需要将内部编码集成到list类型之中，而用户无需关心实际内部编码的使用情况，仍然使用list类型即可</li></ol><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/数据结构和内部编码.jpg" alt="数据结构和内部编码"></p><h4 id="redisObject"><a href="#redisObject" class="headerlink" title="redisObject"></a>redisObject</h4><p>在Redis源码内部有一个<code>redisObject</code>这样的对象或者说结构体，redis使用<code>redisObject</code>表示所有的key-value。<br> 它里面有很多属性，比较重要的就是数据类型type和编码方式encoding，如图所示。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/数据结构.jpg" alt="数据结构"></p><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>redis在一个瞬间只会执行一条命令，所有命令以串行方式进行排列，等待顺序执行。如图所示当第一个get命令执行完成之后才会执行第二个get命令，其实这就是redis单线程最简单的一个表现。<br>理解redis单线程非常重要，同时这也是redis设计的精髓所在。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/单线程.jpg" alt="单线程"></p><h4 id="单线程为什么这么快？"><a href="#单线程为什么这么快？" class="headerlink" title="单线程为什么这么快？"></a>单线程为什么这么快？</h4><h5 id="纯内存"><a href="#纯内存" class="headerlink" title="纯内存"></a>纯内存</h5><p>redis会将所有数据放在内存中，而内存的响应速度是非常快的。所以redis之所以能达到如此高性能是依赖于内存的。<br> 其实无论你做了很多优化或者说代码的优化实际它的本质是数据放在内存当中。</p><h5 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h5><p>redis使用了epoll模型作为IO多路复用的实现，redis自身也实现了事件处理，将epoll的连接、读写、关闭转换为自身的事件，不在网络IO上浪费过多的时间。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/非阻塞IO.jpg" alt="非阻塞IO"></p><h5 id="避免线程切换和竞态消耗"><a href="#避免线程切换和竞态消耗" class="headerlink" title="避免线程切换和竞态消耗"></a>避免线程切换和竞态消耗</h5><p>这其实也是单线程的特性，很多时候如果多线程没有达到一个合理的使用时，它甚至比单线程还要慢。</p><h4 id="单线程注意事项"><a href="#单线程注意事项" class="headerlink" title="单线程注意事项"></a>单线程注意事项</h4><ol><li>一次只运行一条命令</li><li>拒绝长(慢)命令(keys, flushall, flushdb, slow lua script, mutil/exec, operatebig value(collection))</li><li>其实不是真正的单线程，在执行<code>fysnc file descriptor</code>和<code>close file descriptor</code>操作时也会单独开一个线程，了解即可</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串键值结构"><a href="#字符串键值结构" class="headerlink" title="字符串键值结构"></a>字符串键值结构</h3><p>key：对于redis而言所有的key都是一个字符串<br> value：实际可以为字符串、数字、二进制、json串<br> 字符串的value最大限制为512MB，其实已经足够大了，实际使用最好不要过大，建议在100k以内。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/字符串键值结构.jpg" alt="字符串键值结构"></p><h3 id="字符串使用场景"><a href="#字符串使用场景" class="headerlink" title="字符串使用场景"></a>字符串使用场景</h3><ul><li>缓存</li><li>分布式锁</li><li>计数器</li></ul><p>还有很多很多应用场景，只要你掌握了这样的API就可以结合你的应用场景进行思考，然后进行API的选用来实现你的功能。</p><h3 id="字符串常用命令"><a href="#字符串常用命令" class="headerlink" title="字符串常用命令"></a>字符串常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get key <span class="comment"># 获取key对应的value </span></span><br><span class="line"><span class="built_in">set</span> key value <span class="comment"># 设置key-value</span></span><br><span class="line">del key <span class="comment"># 删除key-value</span></span><br><span class="line">incr key <span class="comment"># key自增1，如果key不存在，自增后get(key)=1</span></span><br><span class="line">decr key <span class="comment"># key自减1，如果key不存在，自减后get(key)=-1</span></span><br><span class="line">incrby key k <span class="comment"># key自增k，如果key不存在，自增后get(key)=k</span></span><br><span class="line">decrby key k <span class="comment"># key自减k，如果key不存在，自减后get(key)=-k</span></span><br></pre></td></tr></table></figure><h4 id="get、set、del命令演示"><a href="#get、set、del命令演示" class="headerlink" title="get、set、del命令演示"></a>get、set、del命令演示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">hello</span> "<span class="selector-tag">world</span>"</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">hello</span></span><br><span class="line">"<span class="selector-tag">world</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">del</span> <span class="selector-tag">hello</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">hello</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h4 id="incr、decr、incrby、decrby命令演示"><a href="#incr、decr、incrby、decrby命令演示" class="headerlink" title="incr、decr、incrby、decrby命令演示"></a>incr、decr、incrby、decrby命令演示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">counter</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">incr</span> <span class="selector-tag">counter</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">counter</span></span><br><span class="line">"1"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">incrby</span> <span class="selector-tag">counter</span> 99</span><br><span class="line">(<span class="selector-tag">integer</span>)100</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">decr</span> <span class="selector-tag">counter</span></span><br><span class="line">(<span class="selector-tag">integer</span>)99</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">counter</span></span><br><span class="line">"99"</span><br></pre></td></tr></table></figure><h3 id="简单实战"><a href="#简单实战" class="headerlink" title="简单实战"></a>简单实战</h3><h4 id="记录网站每个用户个人主页的访问量"><a href="#记录网站每个用户个人主页的访问量" class="headerlink" title="记录网站每个用户个人主页的访问量"></a>记录网站每个用户个人主页的访问量</h4><p><code>incr userid:pageview</code> (单线程 : 无竞争)<br> redis是天然适合做计数器的，因为是单线程的，所以并发执行incr的时候不会有竞争问题，无论并发量多大都不会记错数。<br> 很多网站或者应用会使用incr或者decr这样的命令来做计数器，非常简单但是非常实用。</p><h4 id="分布式id生成器"><a href="#分布式id生成器" class="headerlink" title="分布式id生成器"></a>分布式id生成器</h4><p><code>incr id</code> (原子操作)<br> 分布式id生成器，即多个应用并发访问获取的id是自增且不重复的，仍然可以使用incr这样的命令来实现，当然实际的实现方案会比这个要复杂一些，但是最基础的一个实现的思路或者原理都是使用这样一个规则。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/分布式id生成器.jpg" alt="分布式id生成器"></p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="setnx、setxx、setex"><a href="#setnx、setxx、setex" class="headerlink" title="setnx、setxx、setex"></a>setnx、setxx、setex</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span> # 不管<span class="built_in">key</span>是否存在，都进行设置</span><br><span class="line">setnx <span class="built_in">key</span> <span class="built_in">value</span> # <span class="built_in">key</span>不存在，才设置，成功返回<span class="number">1</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span> xx # <span class="built_in">key</span>存在，才设置，成功返回OK</span><br><span class="line">setex <span class="built_in">key</span> seconds <span class="built_in">value</span> # 设置<span class="built_in">key</span>-<span class="built_in">value</span>,同时设置<span class="built_in">key</span>的过期时间</span><br></pre></td></tr></table></figure><p>其实这些都是set命令及选项的组合，使用这种组合命令好处是将多个操作作为一个原子操作来执行，就不会存在并发竞争的问题，在实现一些场景比如分布式锁是非常有用的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">exists</span> <span class="selector-tag">php</span></span><br><span class="line">(<span class="selector-tag">integer</span>)0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">php</span> <span class="selector-tag">good</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">setnx</span> <span class="selector-tag">php</span> <span class="selector-tag">bad</span></span><br><span class="line">(<span class="selector-tag">integer</span>)0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">php</span> <span class="selector-tag">best</span> <span class="selector-tag">xx</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">php</span></span><br><span class="line">"<span class="selector-tag">best</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">exists</span> <span class="selector-tag">java</span></span><br><span class="line">(<span class="selector-tag">integer</span>)0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">setnx</span> <span class="selector-tag">java</span> <span class="selector-tag">best</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">java</span> <span class="selector-tag">easy</span> <span class="selector-tag">xx</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">java</span></span><br><span class="line">"<span class="selector-tag">easy</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">exists</span> <span class="selector-tag">lua</span></span><br><span class="line">(<span class="selector-tag">integer</span>)0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">lua</span> <span class="selector-tag">hehe</span> <span class="selector-tag">xx</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="mget、mset"><a href="#mget、mset" class="headerlink" title="mget、mset"></a>mget、mset</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mget key1 key2 key3... # 批量获取key，原子操作</span><br><span class="line">mset key1 value1 key2 value2 key3 value3... # 批量设置key-value 两个命令的时间复杂度都是O(n)</span><br></pre></td></tr></table></figure><p>mget和mset是批量操作，时间复杂度都是o(n)，是非常方便且能提高性能的命令，但是一定要节制去使用。<br> 使用时需要注意的是对于大数据量的获取，最好将其拆分成多个mget操作，例如获取10万个key操作，每次获取1000个，执行100次mget操作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">mset</span> <span class="selector-tag">hello</span> <span class="selector-tag">world</span> <span class="selector-tag">java</span> <span class="selector-tag">best</span> <span class="selector-tag">php</span> <span class="selector-tag">good</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">mget</span> <span class="selector-tag">hello</span> <span class="selector-tag">java</span> <span class="selector-tag">php</span></span><br><span class="line">1)"<span class="selector-tag">world</span>"</span><br><span class="line">2)"<span class="selector-tag">best</span>"</span><br><span class="line">3)"<span class="selector-tag">good</span>"</span><br></pre></td></tr></table></figure><p>n次get命令 = n次网络时间 + n次命令时间</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/n次get命令.jpg" alt="n次get命令"></p><p>1次mget操作 = 1次网络时间 + n次命令时间</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/1次mget操作.jpg" alt="1次mget操作"></p><p>这里需要注意的是网络时间，因为客户端和服务端通常是在不同机器甚至是不同的机房、不同的地区，所以网络时间通常是一个很大的开销，而命令本身开销是非常小的，redis大部分命令执行速度都非常快，那么网络时间就显得非常珍贵。<br>所以使用mget这样的操作可以省去大量的网络时间。在很多场景下它的效率是非常高的，当然如果网络时间越长、获取key的个数越多效果越明显。</p><h3 id="查缺补漏"><a href="#查缺补漏" class="headerlink" title="查缺补漏"></a>查缺补漏</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getset <span class="built_in">key</span> newvalue <span class="meta"># set key newvalue并且返回旧的value值</span></span><br><span class="line">append <span class="built_in">key</span> value <span class="meta"># 将value追加到旧的value</span></span><br><span class="line"><span class="built_in">strlen</span> <span class="built_in">key</span> <span class="meta"># 返回字符串长度(注意中文，一个汉字长度为2)</span></span><br><span class="line">incrbyfloat <span class="built_in">key</span> <span class="number">3.5</span> <span class="meta">#增加key对应的值加上3.5</span></span><br><span class="line">getrange <span class="built_in">key</span> start <span class="keyword">end</span> <span class="meta"># 获取字符串指定下标所有的值</span></span><br><span class="line">setrange <span class="built_in">key</span> index <span class="keyword">end</span> <span class="meta"># 获取指定下标所对应的值</span></span><br></pre></td></tr></table></figure><h4 id="getset、append、strlen"><a href="#getset、append、strlen" class="headerlink" title="getset、append、strlen"></a>getset、append、strlen</h4><p>其中<code>strlen</code>命令的时间复杂度也是o(1)，redis字符串内部也会对字符串长度进行实时更新，不需要遍历字符串来计算完整的长度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">hello</span> <span class="selector-tag">world</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">getset</span> <span class="selector-tag">hello</span> <span class="selector-tag">php</span></span><br><span class="line">"<span class="selector-tag">world</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">append</span> <span class="selector-tag">hello</span> ",<span class="selector-tag">java</span>"</span><br><span class="line">(<span class="selector-tag">integer</span>)8</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">hello</span></span><br><span class="line">"<span class="selector-tag">php</span>,<span class="selector-tag">java</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">strlen</span> <span class="selector-tag">hello</span></span><br><span class="line">(<span class="selector-tag">integer</span>)8</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">hello</span> "足球"</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">strlen</span> <span class="selector-tag">hello</span></span><br><span class="line">(<span class="selector-tag">integer</span>)4</span><br></pre></td></tr></table></figure><h4 id="incrbyfloat、getrange、setrange"><a href="#incrbyfloat、getrange、setrange" class="headerlink" title="incrbyfloat、getrange、setrange"></a>incrbyfloat、getrange、setrange</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">incr</span> <span class="selector-tag">counter</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">incrbyfloat</span> <span class="selector-tag">counter</span> 1<span class="selector-class">.1</span></span><br><span class="line">(<span class="selector-tag">integer</span>)2<span class="selector-class">.1</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">counter</span></span><br><span class="line">(<span class="selector-tag">integer</span>)2<span class="selector-class">.1</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">set</span> <span class="selector-tag">hello</span> <span class="selector-tag">javabest</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">getrange</span> <span class="selector-tag">hello</span> 0 2</span><br><span class="line">"<span class="selector-tag">jav</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">setrange</span> <span class="selector-tag">hello</span> 4 <span class="selector-tag">p</span></span><br><span class="line">(<span class="selector-tag">integer</span>)8</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">get</span> <span class="selector-tag">hello</span></span><br><span class="line">"<span class="selector-tag">javapest</span>"</span><br></pre></td></tr></table></figure><h3 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th><th style="text-align:center">复杂度</th></tr></thead><tbody><tr><td style="text-align:center">set key value</td><td style="text-align:center">设置key-value</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">get key</td><td style="text-align:center">获取key-value</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">del key</td><td style="text-align:center">删除key-value</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">setnx setxx</td><td style="text-align:center">根据key是否存在设置key-value</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">incr decr</td><td style="text-align:center">计数</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">mget mset</td><td style="text-align:center">批量操作key-value</td><td style="text-align:center">O(n)</td></tr></tbody></table><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="哈希键值结构"><a href="#哈希键值结构" class="headerlink" title="哈希键值结构"></a>哈希键值结构</h3><p>key仍然是一个字符串，value其实分为两个部分，field代表某个属性，value代表属性的值。在哈希结构中，可以添加一个新的属性和值，也可以修改或者删除某个属性，这与字符串有很大的不同。如果用字符串实现新增属性的话需要将整个value取出来做一个反序列化，然后添加属性后重新序列化存入Redis中。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/哈希键值结构.jpg" alt="哈希键值结构"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>实际上哈希是一个Mapmap的结构，也就是外层是一个key-value结构，对于value内部而言又是一个map结构。<br> 对于内部的map结构而言，field不能相同，而value可以相同。</p><h3 id="哈希相关API"><a href="#哈希相关API" class="headerlink" title="哈希相关API"></a>哈希相关API</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hget <span class="built_in">key</span> field # 获取hash <span class="built_in">key</span>对应field的<span class="built_in">value</span></span><br><span class="line">hset <span class="built_in">key</span> field <span class="built_in">value</span> # 设置hash <span class="built_in">key</span>对应field的<span class="built_in">value</span></span><br><span class="line"><span class="built_in">hdel</span> <span class="built_in">key</span> field # 删除hash <span class="built_in">key</span>对应field的<span class="built_in">value</span></span><br><span class="line">hexists <span class="built_in">key</span> field # 判断hash <span class="built_in">key</span>是否有field</span><br><span class="line">hlen <span class="built_in">key</span> # 获取hash <span class="built_in">key</span> field的数量</span><br></pre></td></tr></table></figure><h4 id="常用命令演示"><a href="#常用命令演示" class="headerlink" title="常用命令演示"></a>常用命令演示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span> <span class="selector-tag">age</span> 23</span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hget</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span> <span class="selector-tag">age</span> 23</span><br><span class="line">"23"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span> <span class="selector-tag">name</span> <span class="selector-tag">ronaldo</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hgetall</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span></span><br><span class="line">1)"<span class="selector-tag">age</span>"</span><br><span class="line">2)"23"</span><br><span class="line">3)"<span class="selector-tag">name</span>"</span><br><span class="line">4)"<span class="selector-tag">ronaldo</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hexists</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span> <span class="selector-tag">name</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span></span><br><span class="line">(<span class="selector-tag">integer</span>)2</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hdel</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span> <span class="selector-tag">age</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hgetall</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:info</span></span><br><span class="line">1)"<span class="selector-tag">name</span>"</span><br><span class="line">2)"<span class="selector-tag">ronaldo</span>"</span><br></pre></td></tr></table></figure><h5 id="hmget、hmset"><a href="#hmget、hmset" class="headerlink" title="hmget、hmset"></a>hmget、hmset</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hmget key field1 field2... fieldN # 批量获取hash key的一批field对应的值</span><br><span class="line">hmset key field1 value1 field2 value2... fieldN valueN # 批量设置hash key的一批field value</span><br><span class="line"># 两个命令的时间复杂度都是O(n)</span><br></pre></td></tr></table></figure><h5 id="hmget、hmset命令演示"><a href="#hmget、hmset命令演示" class="headerlink" title="hmget、hmset命令演示"></a>hmget、hmset命令演示</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hmset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span><span class="selector-pseudo">:info</span> <span class="selector-tag">age</span> 30 <span class="selector-tag">name</span> <span class="selector-tag">kaka</span> <span class="selector-tag">page</span> 50</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span><span class="selector-pseudo">:info</span></span><br><span class="line">(<span class="selector-tag">integer</span>)3</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">hmget</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span><span class="selector-pseudo">:info</span> <span class="selector-tag">age</span> <span class="selector-tag">name</span></span><br><span class="line">1)"30"</span><br><span class="line">2)"<span class="selector-tag">kaka</span>"</span><br></pre></td></tr></table></figure><h5 id="hgetall、hvals、hkeys"><a href="#hgetall、hvals、hkeys" class="headerlink" title="hgetall、hvals、hkeys"></a>hgetall、hvals、hkeys</h5><p>小心使用 <code>hgetall</code> 命令，它会返回所有的field和value，如果你的hash key存入了很多属性比如一万条，使用该命令执行速度就会非常慢，牢记redis是单线程的。大多数情况下应该都不需要把所有的属性都取出来。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hgetall <span class="built_in">key</span> # 返回hash <span class="built_in">key</span>对应所有的field和<span class="built_in">value</span></span><br><span class="line">hkeys <span class="built_in">key</span> # 返回hash <span class="built_in">key</span>对应所有field</span><br><span class="line">hvals <span class="built_in">key</span> # 返回hash <span class="built_in">key</span>对应所有field的<span class="built_in">value</span></span><br><span class="line"># 三个时间复杂度都是O(n)</span><br></pre></td></tr></table></figure><h5 id="hgetall、hvals、hkeys命令演示"><a href="#hgetall、hvals、hkeys命令演示" class="headerlink" title="hgetall、hvals、hkeys命令演示"></a>hgetall、hvals、hkeys命令演示</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379 &gt;</span> hgetall <span class="symbol">user:</span><span class="number">2</span><span class="symbol">:info</span></span><br><span class="line"><span class="number">1</span>)<span class="string">"age"</span></span><br><span class="line"><span class="number">2</span>)<span class="string">"30"</span></span><br><span class="line"><span class="number">3</span>)<span class="string">"name"</span></span><br><span class="line"><span class="number">4</span>)<span class="string">"kaka"</span></span><br><span class="line"><span class="number">5</span>)<span class="string">"page"</span></span><br><span class="line"><span class="number">6</span>)<span class="string">"50"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379 &gt;</span> hvals <span class="symbol">user:</span><span class="number">2</span><span class="symbol">:info</span></span><br><span class="line"><span class="number">1</span>)<span class="string">"30"</span></span><br><span class="line"><span class="number">2</span>)<span class="string">"kaka"</span></span><br><span class="line"><span class="number">3</span>)<span class="string">"50"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379 &gt;</span> hkeys <span class="symbol">user:</span><span class="number">2</span><span class="symbol">:info</span></span><br><span class="line"><span class="number">1</span>)<span class="string">"age"</span></span><br><span class="line"><span class="number">2</span>)<span class="string">"name"</span></span><br><span class="line"><span class="number">3</span>)<span class="string">"page"</span></span><br></pre></td></tr></table></figure><h5 id="hsetnx、hincrby、hincrbyfloat"><a href="#hsetnx、hincrby、hincrbyfloat" class="headerlink" title="hsetnx、hincrby、hincrbyfloat"></a>hsetnx、hincrby、hincrbyfloat</h5><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hsetnx <span class="built_in">key</span> field <span class="built_in">value</span> # 设置hash <span class="built_in">key</span>对应field的<span class="built_in">value</span>(如field已经存在，则失败)</span><br><span class="line">hincyby <span class="built_in">key</span> field intCounter # hash <span class="built_in">key</span>对应的field的<span class="built_in">value</span>自增intCounter</span><br><span class="line">hincybyfloat <span class="built_in">key</span> field floatCounter # hincyby浮点数版</span><br></pre></td></tr></table></figure><h3 id="简单实战-1"><a href="#简单实战-1" class="headerlink" title="简单实战"></a>简单实战</h3><h4 id="记录网站每个用户个人主页的访问量-1"><a href="#记录网站每个用户个人主页的访问量-1" class="headerlink" title="记录网站每个用户个人主页的访问量"></a>记录网站每个用户个人主页的访问量</h4><p><code>hincrby user:1:info pageview count</code><br>定义一个含有用户ID的key，然后在value中我们增加了pageview属性，用它来记录该用户的访问量。这种方式与字符串不同的是，字符串一个key只能存储访问量，如果还需要存储用户的其他属性，需要再单独定义相应的key，而使用哈希则可以存储用户的完整信息。</p><h4 id="如何更新用户属性"><a href="#如何更新用户属性" class="headerlink" title="如何更新用户属性"></a>如何更新用户属性</h4><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>将用户的ID作为key，然后它的value是将所有的属性作为一个整体序列化的结果，比如是一个json串。如果需要获取就将value取出进行反序列化成相应的对象，如果需要重新写入，就将修改后的对象重新序列化写回给redis</p><h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>用户ID和每个属性作为一个key，属性值作为value进行存储。这样更新某个属性值就非常方便，而且添加新的属性也不会影响原有的key，缺点是用户的信息不是一个整体，不便于管理。</p><h5 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h5><p>就是我们介绍的使用hash的方式，将所有的属性和值作为hash的value进行存储，可以单独更新或者删除某个属性，并且也可以很方便的添加新的属性。</p><h5 id="三种方案对比"><a href="#三种方案对比" class="headerlink" title="三种方案对比"></a>三种方案对比</h5><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">string v1</td><td style="text-align:center">编程简单 可能节约内存</td><td style="text-align:center">1. 序列化开销大 2.设置属性要操作整个数据</td></tr><tr><td style="text-align:center">string v2</td><td style="text-align:center">直观 可以部分更新</td><td style="text-align:center">1. 内存占用较大 2. Key较为分散</td></tr><tr><td style="text-align:center">hash</td><td style="text-align:center">直观 节约空间 可以部分更新</td><td style="text-align:center">1. 编程稍微控制 2. ttl不好控制</td></tr></tbody></table><h3 id="哈希总结"><a href="#哈希总结" class="headerlink" title="哈希总结"></a>哈希总结</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">复杂度</th></tr></thead><tbody><tr><td style="text-align:center">hget hset hdel</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">hexists</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">hincyby</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">hgetall hvals hkeys</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">hmget hmset</td><td style="text-align:center">O(n)</td></tr></tbody></table><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表结构"><a href="#列表结构" class="headerlink" title="列表结构"></a>列表结构</h3><p>key仍然是一个字符串，value是一个有序队列，且可以重复，左右两边插入弹出。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/列表结构.jpg" alt="列表结构"></p><p>可以计算列表的长度-<code>llen</code>，删除列表中指定的某个元素-<code>lrem</code>，获取子列表-<code>lrange</code>，按照索引获取列表值-<code>lindex</code></p><h3 id="列表重要API"><a href="#列表重要API" class="headerlink" title="列表重要API"></a>列表重要API</h3><h4 id="增相关"><a href="#增相关" class="headerlink" title="增相关"></a>增相关</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpush key value1 value2 ...valueN # 从列表右边插入值(<span class="number">1</span>-N个)，O(<span class="number">1</span>~N)</span><br><span class="line">lpush key value1 value2 ...valueN # 从列表左边插入值(<span class="number">1</span>-N个)，O(<span class="number">1</span>~N)</span><br><span class="line"><span class="keyword">linsert</span> key before|<span class="keyword">after</span> value newValue # 在<span class="keyword">list</span>指定的值前|后插入newValue,O(n)</span><br></pre></td></tr></table></figure><p>命令演示效果如图</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/列表-增相关.jpg" alt="列表-增相关"></p><h4 id="删相关"><a href="#删相关" class="headerlink" title="删相关"></a>删相关</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lpop <span class="built_in">key</span> # 从列表左侧弹出一个item</span><br><span class="line">rpop <span class="built_in">key</span> # 从列表右侧弹出一个item</span><br><span class="line"><span class="built_in">ltrim</span> <span class="built_in">key</span> start end # 按照索引|范围修减列表,O(n)</span><br><span class="line">lrem <span class="built_in">key</span> <span class="built_in">count</span> <span class="built_in">value</span> # 根据<span class="built_in">count</span>值，从列表中删除所有<span class="built_in">value</span>相等的项，O(n)</span><br><span class="line">(<span class="number">1</span>)<span class="built_in">count</span>&gt;<span class="number">0</span>，从左到右，删除最多<span class="built_in">count</span>个<span class="built_in">value</span>相等的项</span><br><span class="line">(<span class="number">2</span>)<span class="built_in">count</span>&lt;<span class="number">0</span>，从右到左，删除最多Math.abs(<span class="built_in">count</span>)个<span class="built_in">value</span>相等的项</span><br><span class="line">(<span class="number">3</span>)<span class="built_in">count</span>=<span class="number">0</span>，删除所有<span class="built_in">value</span>相等的项</span><br></pre></td></tr></table></figure><p>lpop、rpop、lrem命令演示效果</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/列表-删相关1.png" alt="列表-删相关1"></p><p>ltrim命令演示效果<br>ltrim命令在做一些大的列表删除时是非常有用的，假设数据量是上百万，如果直接执行del key会将redis阻塞掉，我们可以使用ltrim每次裁剪10万分之一数据，最后达到一个删除的效果。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/列表-删相关2.png" alt="列表-删相关2"></p><h4 id="查相关"><a href="#查相关" class="headerlink" title="查相关"></a>查相关</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lrange</span> key start end(包含end) # 获取列表指定索引范围所有item，O(n)</span><br><span class="line"><span class="keyword">lindex</span> key index # 获取列表指定索引的item，O(n)</span><br><span class="line">llen key # 获取列表长度，O(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>命令演示效果如图</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/列表-查相关.jpg" alt="列表-查相关"></p><h4 id="改相关"><a href="#改相关" class="headerlink" title="改相关"></a>改相关</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lset</span> key index newValue # 设置列表指定索引|值为newValue，O(n)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/列表-改相关.jpg" alt="列表-改相关"></p><h4 id="命令演示"><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> &gt; rpush mylist a b c</span><br><span class="line">(integer)<span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> &gt; <span class="keyword">lrange</span> mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>)<span class="string">"a"</span></span><br><span class="line"><span class="number">2</span>)<span class="string">"b"</span></span><br><span class="line"><span class="number">3</span>)<span class="string">"c"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> &gt; lpush mylist <span class="number">0</span></span><br><span class="line">(integer)<span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> &gt; <span class="keyword">lrange</span> mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>)<span class="string">"0"</span></span><br><span class="line"><span class="number">2</span>)<span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>)<span class="string">"b"</span></span><br><span class="line"><span class="number">4</span>)<span class="string">"c"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> &gt; rpop mylist</span><br><span class="line"><span class="string">"c"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> &gt; <span class="keyword">lrange</span> mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>)<span class="string">"0"</span></span><br><span class="line"><span class="number">2</span>)<span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>)<span class="string">"b"</span></span><br></pre></td></tr></table></figure><h3 id="实战-TimeLine"><a href="#实战-TimeLine" class="headerlink" title="实战-TimeLine"></a>实战-TimeLine</h3><p>实际上就是微博的时间轴功能，会将你关注的用户最新的微博按照从新到旧的顺序来排列，这和我们的列表是非常类似的，可以使用类似lpush、rpush、lpop、rpop这样的功能，还可以按照每10页做一个分页。<br>比如微博列表顺序，就是以关注用户的微博ID作为key，而用户的如微博内容、点赞数等等信息则可以另外存储到一个比如哈希结构里，通过微博ID就可以进行一个关联。<br>假设你关注的人更新了微博，就可以使用<code>lpush</code>命令去更新list数据，使用<code>lrange</code>命令获取最新的10条微博，然后通过<code>hmget</code>命令去哈希中取出微博的具体内容。</p><h3 id="查缺补漏-1"><a href="#查缺补漏-1" class="headerlink" title="查缺补漏"></a>查缺补漏</h3><p>执行这两个命令会有一个阻塞的过程，如果设置了非0的timeout，那么当列表为空时，命令不会立即返回结果，而是阻塞等待直到超时，或者当有新的值被插入时就会进行获取并返回。在实现类似消息队列功能时会非常有帮助。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blpop key <span class="built_in">timeout</span></span><br><span class="line"># lpop阻塞版本，<span class="built_in">timeout</span>是阻塞超时时间，<span class="built_in">timeout</span>=<span class="number">0</span>表示阻塞时间是无限的</span><br><span class="line">brpop key <span class="built_in">timeout</span></span><br><span class="line"># rpop阻塞版本，<span class="built_in">timeout</span>是阻塞超时时间，<span class="built_in">timeout</span>=<span class="number">0</span>表示阻塞时间是无限的</span><br></pre></td></tr></table></figure><h3 id="小的TIPS"><a href="#小的TIPS" class="headerlink" title="小的TIPS"></a>小的TIPS</h3><ol><li>LRUSH + LPOP = Stack(栈)</li><li>LPUSH + RPOP = Queue(队列)</li><li>LPUSH + LTRIM = Capped Collection(固定数量的列表)</li><li>LPUSH + BRPOP = Message Queue(消息队列)</li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合结构"><a href="#集合结构" class="headerlink" title="集合结构"></a>集合结构</h3><p>key仍然是一个字符串，value就是一个集合，它可以将若干个字符串进行一个组合。集合的特点是无序，无重复元素，同时支持集合间操作，比如求并集、交集和差集。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/集合结构.jpg" alt="集合结构"></p><h3 id="集合内API"><a href="#集合内API" class="headerlink" title="集合内API"></a>集合内API</h3><h4 id="添加和删除"><a href="#添加和删除" class="headerlink" title="添加和删除"></a>添加和删除</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd <span class="type">key</span> element... O(<span class="number">1</span>~n) # 向集合<span class="type">key</span>添加一个或多个element(如果element已经存在，添加失败)</span><br><span class="line">srem <span class="type">key</span> element... O(<span class="number">1</span>~n) # 将集合<span class="type">key</span>中的一个或多个element移除掉</span><br></pre></td></tr></table></figure><h4 id="其他命令-1"><a href="#其他命令-1" class="headerlink" title="其他命令"></a>其他命令</h4><p>注意<code>smembers</code>命令，它返回的结果是无序的，由于它会返回集合中所有的元素，需要小心使用。如果集合内元素过多，可以使用<code>sscan</code>命令进行扫描。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scard <span class="keyword">user</span>:<span class="number">1</span>:follow = <span class="number">4</span> <span class="comment"># 计算集合大小</span></span><br><span class="line">sismember <span class="keyword">user</span>:<span class="number">1</span>:follow it = <span class="number">1</span>(存在) <span class="comment">#判断it是否在集合中</span></span><br><span class="line">srandmember <span class="keyword">user</span>:<span class="number">1</span>:follow count = his <span class="comment">#从集合中随机挑count个元素</span></span><br><span class="line">spop <span class="keyword">user</span>:<span class="number">1</span>:follow = sports <span class="comment"># 从集合中随机弹出一个元素</span></span><br><span class="line">smembers <span class="keyword">user</span>:<span class="number">1</span>:follow = music his sports it <span class="comment"># 获取集合所有元素</span></span><br></pre></td></tr></table></figure><h4 id="命令演示-1"><a href="#命令演示-1" class="headerlink" title="命令演示"></a>命令演示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">sadd</span> <span class="selector-tag">uesr</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:follow</span> <span class="selector-tag">it</span> <span class="selector-tag">news</span> <span class="selector-tag">his</span> <span class="selector-tag">sports</span></span><br><span class="line">(<span class="selector-tag">integer</span>)4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">smembers</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:follow</span></span><br><span class="line">1)"<span class="selector-tag">news</span>"</span><br><span class="line">2)"<span class="selector-tag">his</span>"</span><br><span class="line">3)"<span class="selector-tag">it</span>"</span><br><span class="line">4)"<span class="selector-tag">sports</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">spop</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:follow</span></span><br><span class="line">"<span class="selector-tag">news</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">smembers</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:follow</span></span><br><span class="line">1)"<span class="selector-tag">his</span>"</span><br><span class="line">2)"<span class="selector-tag">it</span>"</span><br><span class="line">3)"<span class="selector-tag">sports</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">scard</span> <span class="selector-tag">uesr</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:follow</span></span><br><span class="line">(<span class="selector-tag">integer</span>)3</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">sismember</span> <span class="selector-tag">uesr</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:follow</span> <span class="selector-tag">entertainment</span></span><br><span class="line">(<span class="selector-tag">integer</span>)0</span><br></pre></td></tr></table></figure><h3 id="简单实战-2"><a href="#简单实战-2" class="headerlink" title="简单实战"></a>简单实战</h3><h4 id="抽奖系统"><a href="#抽奖系统" class="headerlink" title="抽奖系统"></a>抽奖系统</h4><p>可以将所有满足条件的用户存入到集合中，只需要存入一个用户唯一标识即可。然后使用<code>spop</code>命令或者<code>srandmember</code>进行随机元素弹出，弹出的用户就作为中奖用户。当活动结束后将集合进行删除。</p><h4 id="Like、赞、踩"><a href="#Like、赞、踩" class="headerlink" title="Like、赞、踩"></a>Like、赞、踩</h4><p>如果用户进行了Like、赞、踩，我们就可以将该用户放入到这个微博或者新闻的赞、踩集合当中。需要展示赞、踩的用户列表时就可以进行取出，当然这个也可以使用其他数据类型来实现。</p><h4 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签(tag)"></a>标签(tag)</h4><p>我们可以给用户添加标签，也可以给标签添加用户，看看关心这个标签的都有哪 些用户。实际上这两个操作应该是同事务下的，可以使用事务来结合使用，关于事务后续章节会介绍。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/集合标签.jpg" alt="集合标签"></p><h3 id="集合间API"><a href="#集合间API" class="headerlink" title="集合间API"></a>集合间API</h3><p>其实就是计算集合间的差集(sdiff)、交集(sinter)和并集(sunion)，也可以把计算结果保存在指定key中。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/集合间API.jpg" alt="集合间API"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sdiff <span class="symbol">user:</span><span class="number">1</span><span class="symbol">:follow</span> <span class="symbol">user:</span><span class="number">2</span><span class="symbol">:follow</span> = music his <span class="comment"># 差集</span></span><br><span class="line">sinter <span class="symbol">user:</span><span class="number">1</span><span class="symbol">:follow</span> <span class="symbol">user:</span><span class="number">2</span><span class="symbol">:follow</span> = it sports <span class="comment"># 交集</span></span><br><span class="line">sunios <span class="symbol">user:</span><span class="number">1</span><span class="symbol">:follow</span> <span class="symbol">user:</span><span class="number">2</span><span class="symbol">:follow</span> = it sports music his news ent<span class="comment"># 并集</span></span><br><span class="line">sdiff<span class="params">|sinter|</span>sunion + store destkey ...<span class="comment">#将差集、交集、并集结果保存在destkey中</span></span><br></pre></td></tr></table></figure><h4 id="集合间实战"><a href="#集合间实战" class="headerlink" title="集合间实战"></a>集合间实战</h4><p>这个在微博或者其他一些社交网站是用的比较多的，比如展示用户间共同关注的好友，共同关注的兴趣等等都可以使用集合间API来进行实现。</p><h3 id="小的TIPS-1"><a href="#小的TIPS-1" class="headerlink" title="小的TIPS"></a>小的TIPS</h3><ul><li>SADD = Tagging</li><li>SPOP/SRANDMEMBER = Random item</li><li>SADD + SINTER = Social Graph</li></ul><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><h3 id="有序集合结构"><a href="#有序集合结构" class="headerlink" title="有序集合结构"></a>有序集合结构</h3><p>key仍然是一个字符串，value就是一个集合，在有序集合中一个元素又包含了score和value，score用于排序可重复，而value不可以重复。</p><p><img src="/assets/blogImg/understanding-and-use-of-redis-api/有序集合结构.jpg" alt="有序集合结构"></p><h4 id="集合-vs-有序集合"><a href="#集合-vs-有序集合" class="headerlink" title="集合 vs 有序集合"></a>集合 vs 有序集合</h4><p>有序集合每个元素都带有分数，分数可以重复，以分数作为排序规则，有序集合中的成员在集合中的位置是有序的<br>有序集合可以实现很多集合实现不了的功能，同时它的API相对于集合来说时间复杂度是普遍偏高的，因为它需要体现一个有序的概念，所以并不是说集合就毫无用处了。</p><table><thead><tr><th style="text-align:center">集合</th><th style="text-align:center">有序集合</th></tr></thead><tbody><tr><td style="text-align:center">无重复元素</td><td style="text-align:center">无重复元素</td></tr><tr><td style="text-align:center">无序</td><td style="text-align:center">有序</td></tr><tr><td style="text-align:center">element</td><td style="text-align:center">element+score</td></tr></tbody></table><h4 id="列表-vs-有序集合"><a href="#列表-vs-有序集合" class="headerlink" title="列表 vs 有序集合"></a>列表 vs 有序集合</h4><table><thead><tr><th style="text-align:center">集合</th><th style="text-align:center">有序集合</th></tr></thead><tbody><tr><td style="text-align:center">可以有重复元素</td><td style="text-align:center">无重复元素</td></tr><tr><td style="text-align:center">有序</td><td style="text-align:center">有序</td></tr><tr><td style="text-align:center">element</td><td style="text-align:center">element+score</td></tr></tbody></table><h3 id="有序集合重要API"><a href="#有序集合重要API" class="headerlink" title="有序集合重要API"></a>有序集合重要API</h3><h6 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h6><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zadd <span class="built_in">key</span> score element(可以是多对)   <span class="meta">#添加score和element，O(M*log(N))(如果元素存在，则改变它的分数)</span></span><br><span class="line">zrem <span class="built_in">key</span> element(可以是多个) <span class="meta"># 删除元素，O(M*log(N))</span></span><br><span class="line">zscore <span class="built_in">key</span> element <span class="meta"># 返回元素的分数，O(1)</span></span><br><span class="line">zrank <span class="built_in">key</span> element <span class="meta"># 获取元素的排名(从0开始)，O(log(N))</span></span><br><span class="line">zincrby <span class="built_in">key</span> increScore element <span class="meta"># 增加或减少元素的分数，O(log(N))</span></span><br><span class="line">zcard <span class="built_in">key</span> <span class="meta"># 返回元素的总个数,O(1)</span></span><br><span class="line"><span class="meta"># M作为操作元素的个数，N是指集合元素的个数</span></span><br></pre></td></tr></table></figure><h6 id="基础命令演示"><a href="#基础命令演示" class="headerlink" title="基础命令演示"></a>基础命令演示</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zadd</span> <span class="selector-tag">player</span><span class="selector-pseudo">:rank</span> 1000 <span class="selector-tag">ronaldo</span> 900 <span class="selector-tag">messi</span> 800 <span class="selector-tag">c-ronaldo</span> 600 <span class="selector-tag">kaka</span></span><br><span class="line">(<span class="selector-tag">integer</span>)4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zscore</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> <span class="selector-tag">kaka</span></span><br><span class="line">"600"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zcard</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span></span><br><span class="line">(<span class="selector-tag">integer</span>)4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrank</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> <span class="selector-tag">ronaldo</span></span><br><span class="line">(<span class="selector-tag">integer</span>)3</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrem</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> <span class="selector-tag">messi</span> <span class="selector-tag">ronaldo</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zincrby</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> 100 <span class="selector-tag">kaka</span></span><br><span class="line">(<span class="selector-tag">integer</span>)1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrange</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span></span><br><span class="line">1)"<span class="selector-tag">kaka</span>"</span><br><span class="line">2)"700"</span><br><span class="line">3)"<span class="selector-tag">c-ronaldo</span>"</span><br><span class="line">4)"800"</span><br></pre></td></tr></table></figure><h6 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zrange key <span class="keyword">start</span> <span class="keyword">end</span> [withscores] <span class="comment"># 返回指定索引范围内的升序元素[分值]，O(log(N)+M)</span></span><br><span class="line">zrangebyscore <span class="keyword">key</span> minScore maxScore [withscores] <span class="comment"># 返回指定分数范围内的升序元素[分值],O(log(N)+M)</span></span><br><span class="line">zcount <span class="keyword">key</span> minScore maxScore <span class="comment"># 返回有序集合内在指定分数范围(闭区间)内的个数，O(log(N))</span></span><br><span class="line">zremrangebyrank <span class="keyword">key</span> <span class="keyword">start</span> <span class="keyword">end</span> <span class="comment"># 删除指定排名内的升序元素，O(log(N)+M)</span></span><br><span class="line">zremrangebyscorek <span class="keyword">key</span> minScore maxScore <span class="comment"># 删除指定分数内的升序元素，O(log(N)+M)</span></span><br></pre></td></tr></table></figure><h6 id="高级命令演示"><a href="#高级命令演示" class="headerlink" title="高级命令演示"></a>高级命令演示</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zadd</span> <span class="selector-tag">player</span><span class="selector-pseudo">:rank</span> 1000 <span class="selector-tag">ronaldo</span> 900 <span class="selector-tag">messi</span> 800 <span class="selector-tag">ronaldo</span> 600 <span class="selector-tag">kaka</span></span><br><span class="line">(<span class="selector-tag">integer</span>)4</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrange</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1)"<span class="selector-tag">kaka</span>"</span><br><span class="line">2)"<span class="selector-tag">c-ronaldo</span>"</span><br><span class="line">3)"<span class="selector-tag">messi</span>"</span><br><span class="line">4)"<span class="selector-tag">ronaldo</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zcount</span> <span class="selector-tag">player</span><span class="selector-pseudo">:rank</span> 700 901</span><br><span class="line">(<span class="selector-tag">integer</span>)2</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrangebyscore</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> 700 901</span><br><span class="line">1)"<span class="selector-tag">c-ronaldo</span>"</span><br><span class="line">2)"<span class="selector-tag">messi</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zremrangebyrank</span> <span class="selector-tag">player</span><span class="selector-pseudo">:rank</span> 0 1</span><br><span class="line">(<span class="selector-tag">integer</span>)2</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrange</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1)"<span class="selector-tag">messi</span>"</span><br><span class="line">2)"<span class="selector-tag">ronaldo</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span> &gt; <span class="selector-tag">zrange</span> <span class="selector-tag">play</span><span class="selector-pseudo">:rank</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span></span><br><span class="line">1)"<span class="selector-tag">messi</span>"</span><br><span class="line">2)"900"</span><br><span class="line">3)"<span class="selector-tag">ronaldo</span>"</span><br><span class="line">4)"1000"</span><br></pre></td></tr></table></figure><h3 id="实战-排行榜"><a href="#实战-排行榜" class="headerlink" title="实战-排行榜"></a>实战-排行榜</h3><p>排行榜功能在很多应用都是普遍存在的，例如音乐排行榜、电影排行榜、文章排行榜、热门视频等等。类似这种场景就可以使用有序集合来实现。<br>可以使用<code>zadd</code>去添加元素和初始分数，然后使用<code>zincrby</code>实现分数的更新，使用<code>zrem</code>将一些元素删除榜外，使用<code>zrangebyscore</code>获取一定范围分数的榜单等等。<br>那么这里最核心的就是分数具体代表什么，例如最新榜单可以使用timeStamp作为分数，销售量可以使用saleCount，关注量使用followCount。然后使用相关的API进行业务操作，也可以对多个集合进行汇总根据一定的规则作为类似综合排序的结果。</p><h3 id="查缺补漏-2"><a href="#查缺补漏-2" class="headerlink" title="查缺补漏"></a>查缺补漏</h3><p>对于一些不太常用的命令或者不太典型的命令进行查缺补漏。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zrevrank <span class="built_in">key</span> element <span class="meta"># 获取元素的排名(元素是按从大到小排列),O(log(N))</span></span><br><span class="line">zrevrange <span class="built_in">key</span> start <span class="keyword">end</span> [withscores] <span class="meta"># 返回指定索引范围内的降序元素[分值],O(log(N)+M)</span></span><br><span class="line">zrevrangebyscore <span class="built_in">key</span> minScore maxScore [withscores] <span class="meta"># 返回指定分数范围内的降序元素[分值],O(log(N)+M)</span></span><br><span class="line">zinterstore <span class="meta"># 求多个有序集的交集，并存储到指定key</span></span><br><span class="line">zunionstore <span class="meta"># 求多个有序集的并集，并存储到指定key</span></span><br></pre></td></tr></table></figure><h3 id="有序集合总结"><a href="#有序集合总结" class="headerlink" title="有序集合总结"></a>有序集合总结</h3><table><thead><tr><th style="text-align:center">操作类型</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">基本操作</td><td style="text-align:center">zadd zrem zcard zincrby zscore</td></tr><tr><td style="text-align:center">范围操作</td><td style="text-align:center">zrange zrangebyscore zcount zremrangebyrank</td></tr><tr><td style="text-align:center">集合操作</td><td style="text-align:center">zunionstore zinterstore</td></tr></tbody></table><h2 id="go-redis的使用"><a href="#go-redis的使用" class="headerlink" title="go-redis的使用"></a>go-redis的使用</h2><p>golang中比较好用的第三方开源redisclient有:</p><ul><li>go-redis<ul><li>源码地址：<a href="https://github.com/go-redis/redis" target="_blank" rel="noopener">https://github.com/go-redis/redis</a></li><li>文档地址：<a href="http://godoc.org/github.com/go-redis/redis" target="_blank" rel="noopener">http://godoc.org/github.com/go-redis/redis</a></li></ul></li><li>redigo<ul><li>源码地址：<a href="https://github.com/gomodule/redigo" target="_blank" rel="noopener">https://github.com/gomodule/redigo</a></li><li>文档地址：<a href="http://godoc.org/github.com/gomodule/redigo/redis" target="_blank" rel="noopener">http://godoc.org/github.com/gomodule/redigo/redis</a></li></ul></li></ul><blockquote><p>两个都是非常优秀的redisclient库，也是redis官网上推荐，我选择是的是go-redis，因为go-redis封装了redis的大部分命令，不用关心redis的命令的细节，直接调用相应接口就行；redigo是基于命令的，发送一个命令，然后在解析reply；所以相对而言，我觉得go-redis接口更友好。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">PoolSize: <span class="number">10</span>, <span class="comment">// 资源池设置链接数大小</span></span><br><span class="line">MinIdleConns: <span class="number">3</span>, <span class="comment">//闲置时资源池链接数大小</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">defer</span> client.Close()</span><br><span class="line">pong, err := client.Ping().Result()</span><br><span class="line">fmt.Println(pong, err)</span><br><span class="line"><span class="comment">// Output: PONG &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.string</span></span><br><span class="line"><span class="comment">//输出结果: world</span></span><br><span class="line">client.Set(<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> result,err:=client.Get(<span class="string">"hello"</span>).Result();err==<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果:1</span></span><br><span class="line"><span class="keyword">if</span> result,err:=client.Incr(<span class="string">"counter"</span>).Result();err==<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.hash</span></span><br><span class="line">client.HSet(<span class="string">"myhash"</span>, <span class="string">"f1"</span>, <span class="string">"v1"</span>)</span><br><span class="line">client.HSet(<span class="string">"myhash"</span>, <span class="string">"f2"</span>, <span class="string">"v2"</span>)</span><br><span class="line"><span class="comment">//输出结果 : map[f1:v1 f2:v2]</span></span><br><span class="line"><span class="keyword">if</span> result,err:=client.HGetAll(<span class="string">"myhash"</span>).Result();err==<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.list</span></span><br><span class="line">client.RPush(<span class="string">"mylist"</span>, <span class="string">"1"</span>)</span><br><span class="line">client.RPush(<span class="string">"mylist"</span>, <span class="string">"2"</span>)</span><br><span class="line">client.RPush(<span class="string">"mylist"</span>, <span class="string">"3"</span>)</span><br><span class="line"><span class="comment">//输出结果 : [1, 2, 3]</span></span><br><span class="line"><span class="keyword">if</span> result,err:=client.LRange(<span class="string">"mylist"</span>, <span class="number">0</span>, <span class="number">-1</span>).Result();err==<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.set</span></span><br><span class="line">client.SAdd(<span class="string">"myset"</span>, <span class="string">"a"</span>);</span><br><span class="line">client.SAdd(<span class="string">"myset"</span>, <span class="string">"b"</span>);</span><br><span class="line">client.SAdd(<span class="string">"myset"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="comment">//输出结果 : [b, a]</span></span><br><span class="line"><span class="keyword">if</span> result,err:=client.SMembers(<span class="string">"myset"</span>).Result();err==<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.zset</span></span><br><span class="line">client.ZAdd(<span class="string">"myzset"</span>, redis.Z&#123;<span class="number">99</span>,<span class="string">"tom"</span>&#125;)</span><br><span class="line">client.ZAdd(<span class="string">"myzset"</span>, redis.Z&#123;<span class="number">66</span>,<span class="string">"peter"</span>&#125;)</span><br><span class="line">client.ZAdd(<span class="string">"myzset"</span>, redis.Z&#123;<span class="number">33</span>,<span class="string">"james"</span>&#125;)</span><br><span class="line"><span class="comment">//输出结果 : [&#123;33,"james"&#125; &#123;66,"peter"&#125; &#123;99,"tom"&#125;]</span></span><br><span class="line"><span class="keyword">if</span> result,err:=client.ZRangeWithScores(<span class="string">"myzset"</span>, <span class="number">0</span>, <span class="number">-1</span>).Result();err==<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适合的PoolSize"><a href="#适合的PoolSize" class="headerlink" title="适合的PoolSize"></a>适合的PoolSize</h3><p>其实这个参数是比较难确定的，举个例子：</p><ul><li>命令平均执行时间0.1ms = 0.001s</li><li>业务需要50000 QPS</li><li>PoolSize理论值 = 0.001 * 50000 = 50个。实际值要偏大一些</li></ul><p>对于适合的PoolSize而言，我们需要考虑</p><ul><li>业务希望Redis并发量</li><li>客户端执行命令时间</li><li>Redis资源：例如 nodes(例如应用个数) * PoolSize 是不能超过redis的最大连接数(config get maxclients)(默认是10000个)</li><li>资源开销：例如虽然希望控制空闲连接，但是不希望因为连接池的频繁释放创建连接造成不必靠开销</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通用命令&quot;&gt;&lt;a href=&quot;#通用命令&quot; class=&quot;headerlink&quot; title=&quot;通用命令&quot;&gt;&lt;/a&gt;通用命令&lt;/h2&gt;&lt;h3 id=&quot;keys&quot;&gt;&lt;a href=&quot;#keys&quot; class=&quot;headerlink&quot; title=&quot;keys&quot;&gt;&lt;/a&gt;keys&lt;/h3&gt;&lt;p&gt;&lt;code&gt;keys *&lt;/code&gt; #遍历所有的key&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379 &amp;gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379 &amp;gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; php good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379 &amp;gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; java best&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379 &amp;gt; keys *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) &lt;span class=&quot;string&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) &lt;span class=&quot;string&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379 &amp;gt; dbsize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;)3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.guaosi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis初识</title>
    <link href="https://www.guaosi.com/2020/02/03/first-acquaintance-with-redis/"/>
    <id>https://www.guaosi.com/2020/02/03/first-acquaintance-with-redis/</id>
    <published>2020-02-03T10:20:47.000Z</published>
    <updated>2021-12-05T08:13:24.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Redis是什么"><a href="#Redis是什么" class="headerlink" title="Redis是什么"></a>Redis是什么</h3><ul><li>Redis - <code>REmote DIctionary Server</code></li><li>Redis是一个使用<code>ANSI C</code>语言编写的开源数据库</li><li>高性能的<code>key-value</code>数据库</li><li>内存数据库，支持数据持久化</li><li>提供了多种编程语言的客户端</li><li>从2010年3月15日起，Redis的开发工作由<code>VMware</code>主持</li><li>从2013年5月开始，Redis的开发由<code>Pivotal</code>赞助</li></ul><p>官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a><br>中文官网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><a id="more"></a><h3 id="Redis的前世今生"><a href="#Redis的前世今生" class="headerlink" title="Redis的前世今生"></a>Redis的前世今生</h3><p>redis的作者，叫<code>Salvatore Sanfilippo</code>，来自意大利的西西里岛，2008年这个作者在做一个网站实时统计系统LLOOGG，就是用来统计用户访问网站的记录，最开始采用的是MySQL来实现，可能是由于MySQL的特性不太适用于这个场景，或者是当时机器不太好，导致他未能实现这个功能，所以他就开发了redis第一个版本来实现这个功能。</p><p>Redis的作者并不满足只将redis用于这一款产品，而是希望有更多的人来使用它，于是同一年将Redis开源发布，短短几年时间Redis就在国内外拥有了庞大的用户群体。直到今天，Redis仍然是一个非常优秀的存储服务系统。</p><h3 id="谁在使用Redis"><a href="#谁在使用Redis" class="headerlink" title="谁在使用Redis"></a>谁在使用Redis</h3><p>假如说我们现在问Redis作者一个问题，有哪些公司在使用Redis，我想他可能会开玩笑的说，Who is not using Redis？言下之意难道还有公司不在使用Redis吗。当然这也只是一句玩笑，但是从侧面证明Redis的使用确实是非常广泛的。</p><ul><li>GitHub</li><li>Twitter</li><li>Stackoverflow</li><li>Alibaba</li><li>百度</li><li>微博</li><li>美团</li><li>搜狐</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>速度快</li><li>持久化</li><li>多种数据结构</li><li>简单</li><li>功能丰富</li><li>主从复制</li><li>支持多种编程语言</li><li>高可用、分布式</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>如图是Redis内部使用的一个<code>redisObject</code>对象的结构，redis使用<code>redisObject</code>表示所有的key和value。<br> Redis数据类型有：<code>string</code>(字符串)、<code>list</code>(链表)、<code>set</code>(无序集合)、<code>sorted set</code>(有序集合)、<code>hash</code>(散列类型)</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/数据结构.jpg" alt="数据结构"></p><h3 id="典型使用场景"><a href="#典型使用场景" class="headerlink" title="典型使用场景"></a>典型使用场景</h3><ul><li>缓存系统</li><li>计数器</li><li>消息队列系统</li><li>数据过期处理</li><li>应用排行榜</li><li>社交网络</li><li>实时系统</li><li>分布式集群架构中的Session分离</li></ul><h3 id="缓存系统"><a href="#缓存系统" class="headerlink" title="缓存系统"></a>缓存系统</h3><p>来看一个典型的场景，一个用户访问一个<code>App Server</code>，首先<code>App Server</code>会从<code>cache</code>中去获取，如果<code>cache</code>中有需要的数据，就直接返回给<code>App Server</code>，然后返回给用户。<br> 如果<code>cache</code>中没有会从数据源<code>Storage</code>中去获取真实数据，为了下次方便在<code>cache</code>中获取相同的数据，我们会将<code>Storage</code>中的数据存到<code>cache</code>中，然后最终将<code>Storage</code>中的数据返回给用户。<br>实际当中cache可以是很多种类型，例如本地缓存、memcache等，这里我们就使用Redis来表示。</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/缓存系统.jpg" alt="缓存系统"></p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>如图像微博的转发数和评论数，都是可以使用Redis来完成这样一个功能，redis有提供<code>incr</code>这样的命令可以在单线程下非常高效的进行计数，而且不会有计数错误的问题。所以像很多视频网站都会使用redis来对视频的播放数来进行一个记录，这些计数对产品决策以及上层的决策是非常有帮助的。</p><h3 id="消息队列系统"><a href="#消息队列系统" class="headerlink" title="消息队列系统"></a>消息队列系统</h3><p>消息队列系统在很多的公司已经成为项目中开发的一个标配，成熟的消息队列系统有很多，例如activemq、rabbitmq等。<br>而Redis也提供了像发布订阅、阻塞队列来实现类似的模型。在实现一些对消息队列功能不是很强要求的一些系统时，可以使用Redis来实现。</p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>Redis也可以实现类似排行榜的功能，Redis提供了一个有序集合对完成排行榜这样的功能是非常有帮助的。</p><h3 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h3><p>可以说Redis和社交网络是天然吻合的，很多媒体社交功能都可以使用redis实现，例如粉丝数、关注数、共同关注、时间轴列表等。</p><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><p>最典型的如布隆过滤器，可以使用Redis提供的位图功能来实现布隆过滤器这样的功能，在对于一些垃圾邮件过滤、实时系统的处理会非常有帮助。</p><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><h3 id="特性总览"><a href="#特性总览" class="headerlink" title="特性总览"></a>特性总览</h3><ul><li>速度快</li><li>持久化</li><li>多种数据结构</li><li>简单</li><li>功能丰富</li><li>主从复制</li><li>支持多种编程语言</li><li>高可用、分布式</li></ul><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><p>官方给出的数据是10w OPS，也就是每秒可以实现10万次读写，虽然官方给出的数据通常会偏高一些，但是从实际使用来看达到万级别的OPS是基本没有问题的，当然这也和使用的方法以及具体的数据是有关的，这里我们不做具体讨论。<br>Redis之所以这么快有这么几点原因，数据是存在内存中，源代码使用C语言编写，代码短小精悍，使用的是线程模型是单线程。<br>这里使用单线程主要是因为内存读写速度非常快，使用单线程能达到很高的性能，很多实际开发当中，多线程往往会成为我们并发的瓶颈。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据存在哪? =&gt; 内存</span><br><span class="line">什么语言写? =&gt; C语言(<span class="number">50000</span>行)</span><br><span class="line">线程模型? =&gt; 单线程</span><br></pre></td></tr></table></figure><p>其实速度块最主要的原因就是内存。无论代码写的多好，或者使用什么线程模型，如果数据是存在一个比较慢的介质当中，那性能也不会很高。<br>相信学过计算机专业的同学对下面这张图一定不陌生，该图展示了计算机存储的各个介质，从上到下包括寄存器、一级缓存、二级缓存、内存、本地硬盘、远程硬盘，从上到下它的速度是由快至慢，容量由小到大，价格由高到低。</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/速度快-内存.jpg" alt="速度快-内存"></p><p>内存与硬盘对比</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">每秒读写次数</th><th style="text-align:center">随机读写延迟</th><th style="text-align:center">访问带宽</th></tr></thead><tbody><tr><td style="text-align:center">内存</td><td style="text-align:center">千万级</td><td style="text-align:center">80ns</td><td style="text-align:center">5GB</td></tr><tr><td style="text-align:center">SSD盘</td><td style="text-align:center">35000</td><td style="text-align:center">0.1-0.2ms</td><td style="text-align:center">100~300MB</td></tr><tr><td style="text-align:center">机械盘</td><td style="text-align:center">100左右</td><td style="text-align:center">10ms</td><td style="text-align:center">100MB左右</td></tr></tbody></table><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>我们知道Redis是将数据保存在内存中，而内存的数据不具有持久化的特性，也就是说当机器发生断电时，是无法对内存的数据进行恢复的，为此Redis就提供了持久化的功能。<br> Redis所有数据保存在内存中，对数据的更新将异步的保存到磁盘上。<br> Redis提供了<code>RDB</code>和<code>AOF</code>两种方式对数据进行持久化。</p><h4 id="多种数据结构"><a href="#多种数据结构" class="headerlink" title="多种数据结构"></a>多种数据结构</h4><p>Redis提供了5种主要的数据结构：String、Hash、List、Set、Sorted Set<br> 除此之外，在Redis的后续版本以及迭代当中，也提供了一些其他的(衍生的)数据结构：<br> <code>BitMaps:</code> 位图(本质是字符串)<br> <code>HyperLogLog:</code> 超小内存唯一值计数(本质是字符串)<br> <code>GEO:</code> 地理信息定位(Redis3.2提供，本质是有序集合)</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/多种数据结构.jpg" alt="多种数据结构"></p><h4 id="支持多种客户端语言"><a href="#支持多种客户端语言" class="headerlink" title="支持多种客户端语言"></a>支持多种客户端语言</h4><p>由于Redis受到了很多公司的支持，以及Redis提供了一个非常简单的基于TCP的通信协议，所以说非常多的编程语言都主动去支持Redis服务器。包括但不限于以下所有语言，所以这也是Redis非常受欢迎的原因之一</p><ul><li>java</li><li>php</li><li>Lua</li><li>Python</li><li>Ruby</li><li>Node</li></ul><h4 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h4><p>Redis除了提供5种主要数据结构以外，还提供了很多其他的功能，像发布订阅可以实现很多消息的功能，同时还支持Lua脚本，这样可以实现一些自定义命令，同时还支持简单的事务功能、最后Redis也支持pipeline来提高客户端的并发效率。<br>总之如果将Redis使用好的话，它会像一把瑞士军刀一样无所不能。</p><h4 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h4><p>Redis的单机核心代码只有23000行，redis3.0提供了更丰富的集群分布式功能(代码大约4-5万行)，如果想真正吃透Redis这个项目，都可以去阅读它的源代码，甚至有些企业可以去修改它的源代码来实现自己业务的定制化。<br>Redis的简单还体现在它不依赖外部库(like libevent)，同时它是一个单线程模型，这意味着无论是服务端还是客户端的开发都会相对容易一些。</p><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>Redis提供了主从复制的功能，也就是说在Redis中有两种角色，主服务器和从服务器，主服务器的数据可以同步到从服务器中，这样可以为高可用以及分布式提供一个很好的基础。</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/主从复制.jpg" alt="主从复制"></p><h4 id="高可用、分布式"><a href="#高可用、分布式" class="headerlink" title="高可用、分布式"></a>高可用、分布式</h4><p>本身Redis的单点或者说Redis的主从复制模型对于实现一个高可用的数据库来说是比较困难的甚至是几乎不可能的。<br> 因此Redis在2.8版本当中提供了<code>Redis-Sentinel</code>这样的功能来支持高可用。<br> 其次对于一个数据库来说，分布式功能对于当下的企业也是非常重要的，所以Redis从3.0版本开始正式支持分布式，也就是<code>Redis-Cluster</code></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">高可用 =&gt; Redis-Sentinel(<span class="built_in">v2</span>.<span class="number">8</span>) 支持高可用</span><br><span class="line">分布式 =&gt; Redis-Cluster(<span class="built_in">v3</span>.<span class="number">0</span>) 支持分布式</span><br></pre></td></tr></table></figure><h2 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h5 id="Redis下载"><a href="#Redis下载" class="headerlink" title="Redis下载"></a>Redis下载</h5><p>官方下载地址：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a><br> 或者执行命令：<code>wget http://download.redis.io/releases/redis-3.0.7.tar.gz</code></p><blockquote><p>推荐3版本使用3.0.7 最稳定</p></blockquote><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install gcc</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf redis-3.0.7.tar.gz</span><br><span class="line"><span class="comment"># 可以创建一个软链接方便未来升级</span></span><br><span class="line">ln -s redis-3.0.7 redis</span><br><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line"><span class="comment"># 编译(可以忽略make test的提示)</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 安装redis</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>事实上redis的作者并未对windows平台进行很好的支持，也就是说Redis官方并未提供windows的版本。<br>Redis的windows版本是由微软的开源团队来维护的，地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a><br>从Releases或者Tags寻找对应的版本，下载zip包，然后解压缩。<br>使用命令行进入redis目录，执行<code>./redis-server.exe</code>启动redis</p><h3 id="Redis可执行文件说明"><a href="#Redis可执行文件说明" class="headerlink" title="Redis可执行文件说明"></a>Redis可执行文件说明</h3><p>在Redis解压缩目录的src目录下有一些可执行文件，对它们的说明如图</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/可执行文件说明.png" alt="可执行文件说明"></p><h3 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h3><h4 id="Redis三种启动方式"><a href="#Redis三种启动方式" class="headerlink" title="Redis三种启动方式"></a>Redis三种启动方式</h4><p>最简启动(使用默认配置启动)：<code>./redis-server</code><br> 动态参数启动(指定端口启动)：<code>./redis-server --port 6380</code><br> 配置文件启动：<code>./redis-server ../redis/redis.conf</code></p><h4 id="启动方式比较"><a href="#启动方式比较" class="headerlink" title="启动方式比较"></a>启动方式比较</h4><p>生产环境通常选择配置文件启动<br> 单机多实例配置文件可以用端口区分开</p><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><p>直接执行<code>redis-server</code>命令是在前端启动，前端启动好处是方便即时查看日志，缺点是当前终端无法继续其他操作。<br> 线上一般采用后台启动方式，这样可以让redis日志打印到指定文件中。<br> 后台启动建议修改redis.conf配置文件，将 <code>daemonize no</code> 修改为yes<br> 然后使用配置文件启动: <code>./redis-server ../redis/redis.conf</code></p><h3 id="Redis客户端连接"><a href="#Redis客户端连接" class="headerlink" title="Redis客户端连接"></a>Redis客户端连接</h3><p>执行命令：<code>redis-cli -h ${ip} -p ${port} -a ${password}</code><br>如果没有设置密码，则 <code>-a</code> 参数可以省略；<br>如果端口为6379则 <code>-p</code> 参数可以省略；<br>如果连接本机，则 <code>-h</code> 参数可以省略;</p><h3 id="Redis关闭"><a href="#Redis关闭" class="headerlink" title="Redis关闭"></a>Redis关闭</h3><p>执行命令：<code>redis-cli -h ${ip} -p ${port} -a ${password} shutdown</code><br>其实就是在客户端连接命令后加上shutdown即可。<br>不推荐使用 <code>kill -9 PID</code> 命令进行关闭，该命令不会自动触发持久化操作，容易造成缓存数据丢失。</p><h3 id="Redis客户端返回值"><a href="#Redis客户端返回值" class="headerlink" title="Redis客户端返回值"></a>Redis客户端返回值</h3><p>对Redis客户端返回值进行一个简单的说明，了解客户端的返回值对我们的后续开发以及日常运维也是非常有帮助的。</p><p><img src="/assets/blogImg/first-acquaintance-with-redis/客户端返回值.png" alt="客户端返回值"></p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p>Redis有非常多的配置项，这里只介绍一些最基础的配置，更多的配置会伴随着Redis的更深入的学习进行介绍。比如AOF和RDB的配置、慢查询日志配置、内存管理配置等等。</p><h3 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h3><p>是否是守护进程(no|yes)，默认为no，通常设置为yes，保证redis进程能在后台启动并进行正常的日志打印。<br>配置示例：<code>daemonize yes</code></p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>Redis对外端口号，默认端口是6379，对于单机多实例通常需要进行配置<br>配置示例：<code>port 6382</code></p><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p>Redis工作目录，默认<code>redis-server</code>启动时会在当前目录生成或读取<code>dump.rdb</code>，也就是说如果在根目录下执行<code>redis-server ${redis.conf}</code>的话，读取的是根目录下的<code>dump.rdb</code>，为了使<code>redis-server</code>可在任意目录下正常执行和读取数据，需要修改dir为绝对路径。<br>配置示例：<code>dir &quot;/usr/local/redis/data&quot;</code><br>需要先在redis目录下执行 <code>mkdir data</code></p><h3 id="logfile"><a href="#logfile" class="headerlink" title="logfile"></a>logfile</h3><p>Redis系统日志，默认没有配置，配置该项会将redis的日志打印到指定文件下<br>配置示例：<code>logfile &quot;redis-6382.log&quot;</code><br>当启动redis时会在redis目录下自动生成该文件</p><h3 id="requirepass"><a href="#requirepass" class="headerlink" title="requirepass"></a>requirepass</h3><p>密码配置，redis在生产环境中通常都会设置密码以保证一定的安全性，在配置文件中搜索<code>requirepass</code>，将 #requirepass foobared 打开注释，foobared修改为redis的密码即可<br>配置示例：<code>requirepass 123456</code></p><h3 id="slaveof"><a href="#slaveof" class="headerlink" title="slaveof"></a>slaveof</h3><p>主从配置项，用于从服务器配置对应主服务的IP和端口号。找到配置项<code>slaveof</code>，取消注释，将后面的 masterip 和 masterport 修改为主服务器的IP和端口号，当前这台服务器即作为从服务器使用。<br>配置示例：<code>slaveof 192.168.0.102 6379</code></p><h3 id="masterauth"><a href="#masterauth" class="headerlink" title="masterauth"></a>masterauth</h3><p>这里提一下如果配置了主从服务器，主服务器配置了密码，那么从服务器就必须配置该项，否则无法进行正常复制。<br>找到表示主服务器的密码配置项<code>#masterauth</code>，取消注释，将<master-password>修改为主服务器的密码即可。<br>配置示例：<code>masterauth 123456</code></master-password></p><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有配置(key - value各占一行)，redis客户端下执行</span></span><br><span class="line">config get *   </span><br><span class="line"><span class="comment"># 查看配置文件内容(去掉注释和空格)</span></span><br><span class="line">cat redis.conf | grep -v <span class="string">"#"</span> | grep -v <span class="string">"^$"</span></span><br></pre></td></tr></table></figure><h3 id="配置总结"><a href="#配置总结" class="headerlink" title="配置总结"></a>配置总结</h3><p><img src="/assets/blogImg/first-acquaintance-with-redis/配置总结.png" alt="配置总结"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;Redis是什么&quot;&gt;&lt;a href=&quot;#Redis是什么&quot; class=&quot;headerlink&quot; title=&quot;Redis是什么&quot;&gt;&lt;/a&gt;Redis是什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redis - &lt;code&gt;REmote DIctionary Server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Redis是一个使用&lt;code&gt;ANSI C&lt;/code&gt;语言编写的开源数据库&lt;/li&gt;
&lt;li&gt;高性能的&lt;code&gt;key-value&lt;/code&gt;数据库&lt;/li&gt;
&lt;li&gt;内存数据库，支持数据持久化&lt;/li&gt;
&lt;li&gt;提供了多种编程语言的客户端&lt;/li&gt;
&lt;li&gt;从2010年3月15日起，Redis的开发工作由&lt;code&gt;VMware&lt;/code&gt;主持&lt;/li&gt;
&lt;li&gt;从2013年5月开始，Redis的开发由&lt;code&gt;Pivotal&lt;/code&gt;赞助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://redis.io/&lt;/a&gt;&lt;br&gt;中文官网：&lt;a href=&quot;http://www.redis.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.redis.cn/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.guaosi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Rabbit集群架构模式</title>
    <link href="https://www.guaosi.com/2020/01/29/dive-into-the-advanced-features-of-rabbitmq-with-golang/"/>
    <id>https://www.guaosi.com/2020/01/29/dive-into-the-advanced-features-of-rabbitmq-with-golang/</id>
    <published>2020-01-29T09:50:45.000Z</published>
    <updated>2021-12-05T08:13:24.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="保障消息-100-投递成功方案"><a href="#保障消息-100-投递成功方案" class="headerlink" title="保障消息 100% 投递成功方案"></a>保障消息 100% 投递成功方案</h2><h3 id="什么是生产端的可靠性投递？"><a href="#什么是生产端的可靠性投递？" class="headerlink" title="什么是生产端的可靠性投递？"></a>什么是生产端的可靠性投递？</h3><ul><li>保障消息的成功发出</li><li>保障MQ节点的成功接收</li><li>发送端收到MQ节点(Broker) 确认应答</li><li>完善的消息补偿机制</li></ul><p>如果想保障消息百分百投递成功，只做到前三步不一定能够保障。有些时候或者说有些极端情况，比如生产端在投递消息时可能就失败了，或者说生产端投递了消息，MQ也收到了，MQ在返回确认应答时，由于网络闪断导致生产端没有收到应答，此时这条消息就不知道投递成功了还是失败了，所以针对这些情况我们需要做一些补偿机制。</p><a id="more"></a><h3 id="互联网大厂的解决方案"><a href="#互联网大厂的解决方案" class="headerlink" title="互联网大厂的解决方案"></a>互联网大厂的解决方案</h3><ol><li>消息落库，对消息状态进行打标</li><li>消息的延迟投递，做二次确认，回调检查</li></ol><p>具体使用哪种要根据业务场景和并发量、数据量大小来决定</p><h4 id="消息信息落库，对消息状态进行打标"><a href="#消息信息落库，对消息状态进行打标" class="headerlink" title="消息信息落库，对消息状态进行打标"></a>消息信息落库，对消息状态进行打标</h4><p><img src="/assets/blogImg/dive-into-the-advanced-features-of-rabbitmq/RabbitMQ-Advanced-Reliable-Delivery-Database.jpg" alt="RabbitMQ-Advanced-Reliable-Delivery-Database"></p><ol><li><p>进行数据的入库<br>比如我们要发送一条订单消息，首先把业务数据也就是订单信息进行入库，然后生成一条消息，把消息也进行入库，这条消息应该包含消息状态属性，并设置初始值比如为0，表示消息创建成功正在发送中，这种方式缺陷在于我们要对数据库进行持久化两次。</p></li><li><p>首先要保证第一步消息都存储成功了，没有出现任何异常情况，然后生产端再进行消息发送。如果失败了就进行快速失败机制。</p></li><li><p>MQ把消息收到的结果应答<code>(confirm)</code>给生产端</p></li><li><p>生产端有一个<code>Confirm Listener</code>，去异步的监听<code>Broker</code>回送的响应，从而判断消息是否投递成功，如果成功，去数据库查询该消息，并将消息状态更新为1，表示消息投递成功。</p></li></ol><p><strong>假设第二步OK了，在第三步回送响应时，网络突然出现了闪断，导致生产端的Listener就永远收不到这条消息的confirm应答了，也就是说这条消息的状态就一直为0了。</strong></p><ol start="5"><li>此时我们需要设置一个规则，比如说消息在入库时候设置一个临界值timeout，5分钟之后如果还是0的状态那就需要把消息抽取出来。这里我们使用的是分布式定时任务，去定时抓取DB中距离消息创建时间超过5分钟的且状态为0的消息。</li><li>把抓取出来的消息进行重新投递<code>(Retry Send)</code>，也就是从第二步开始继续往下走</li><li>当然有些消息可能就是由于一些实际的问题无法路由到Broker，比如routingKey设置不对，对应的队列被误删除了，那么这种消息即使重试多次也仍然无法投递成功，所以需要对重试次数做限制，比如限制3次，如果投递次数大于三次，那么就将消息状态更新为2，表示这个消息最终投递失败。</li></ol><p>针对这种情况如何去做补偿呢，可以有一个补偿系统去查询这些最终失败的消息，然后给出失败的原因，当然这些可能都需要人工去操作。</p><h4 id="第一种可靠性投递，在高并发的场景下是否适合？"><a href="#第一种可靠性投递，在高并发的场景下是否适合？" class="headerlink" title="第一种可靠性投递，在高并发的场景下是否适合？"></a>第一种可靠性投递，在高并发的场景下是否适合？</h4><p>对于第一种方案，我们需要做两次数据库的持久化操作，在高并发场景下显然数据库存在着性能瓶颈。其实在我们的核心链路中只需要对业务进行入库就可以了，消息就没必要先入库了，我们可以做消息的延迟投递，做二次确认，回调检查。</p><p>当然这种方案不一定能保障百分百投递成功，但是基本上可以保障大概99.9%的消息是OK的，有些特别极端的情况只能是人工去做补偿了，或者使用定时任务去做都可以。<br>使用第二种方式主要目的是为了减少数据库操作，提高并发量。</p><h4 id="消息的延迟投递，做二次确认，回调检查"><a href="#消息的延迟投递，做二次确认，回调检查" class="headerlink" title="消息的延迟投递，做二次确认，回调检查"></a>消息的延迟投递，做二次确认，回调检查</h4><p><img src="/assets/blogImg/dive-into-the-advanced-features-of-rabbitmq/RabbitMQ-Advanced-Reliable-Delivery-Delay.jpg" alt="RabbitMQ-Advanced-Reliable-Delivery-Delay"></p><p><code>Upstream Service</code>上游服务也就是生产端，<code>Downstream service</code>下游服务也就是消费端，<code>Callback service</code>就是回调服务。</p><ol><li>先将业务消息进行入库，然后生产端将消息发送出去，注意一定是等数据库操作完成以后再去发送消息。</li><li>在发送消息之后，紧接着生产端再次发送一条消息<code>(Second Send Delay Check)</code>，即延迟消息投递检查，这里需要设置一个延迟时间，比如5分钟之后进行投递。</li><li>消费端去监听指定队列，将收到的消息进行处理。</li><li>处理完成之后，发送一个<code>confirm</code>消息，也就是回送响应，但是这里响应不是正常的ACK，而是重新生成一条消息，投递到MQ中。</li><li>上面的<code>Callback service</code>是一个单独的服务，其实它扮演了第一种方案的存储消息的DB角色，它通过MQ去监听下游服务发送的<code>confirm</code>消息，如果<code>Callback service</code>收到<code>confirm</code>消息，那么就对消息做持久化存储，即将消息持久化到DB中。</li><li>5分钟之后延迟消息发送到MQ了，然后<code>Callback service</code>还是去监听延迟消息所对应的队列，收到Check消息后去检查DB中是否存在消息，如果存在，则不需要做任何处理，如果不存在或者消费失败了，那么<code>Callback service</code>就需要主动发起RPC通信给上游服务，告诉它延迟检查的这条消息我没有找到，你需要重新发送，生产端收到信息后就会重新查询业务消息然后将消息发送出去。</li></ol><p>这么做的目的是少做了一次DB的存储，在高并发场景下，最关心的不是消息100%投递成功，而是一定要保证性能，保证能抗得住这么大的并发量。所以能节省数据库的操作就尽量节省，可以异步的进行补偿。</p><p>其实在主流程里面是没有这个Callback service的，它属于一个补偿的服务，整个核心链路就是生产端入库业务消息，发送消息到MQ，消费端监听队列，消费消息。其他的步骤都是一个补偿机制。</p><p>第二种方案也是互联网大厂更为经典和主流的解决方案。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>一定是先入库，再发RabbitMQ消息</li><li>互联网大厂，不加任何事务，事务会造成严重的性能瓶颈。只最后做业务补偿。</li></ol><h2 id="幂等性的主流解决方案"><a href="#幂等性的主流解决方案" class="headerlink" title="幂等性的主流解决方案"></a>幂等性的主流解决方案</h2><h3 id="幂等性是什么？"><a href="#幂等性是什么？" class="headerlink" title="幂等性是什么？"></a>幂等性是什么？</h3><p>简单来说就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的。<br> 我们可以借鉴数据库的乐观锁机制来举个例子</p><ul><li>首先为表添加一个版本字段version</li><li>在执行更新操作前呢，会先去数据库查询这个version</li><li>然后执行更新语句，以version作为条件，例如：<br> UPDATE T_REPS SET COUNT = COUNT -1，VERSION = VERSION + 1  WHERE VERSION = 1</li><li>如果执行更新时有其他人先更新了这张表的数据，那么这个条件就不生效了，也就不会执行操作了，通过这种乐观锁的机制来保障幂等性。</li></ul><h3 id="消费端-幂等性保障"><a href="#消费端-幂等性保障" class="headerlink" title="消费端-幂等性保障"></a>消费端-幂等性保障</h3><h4 id="什么情况下会出现重复消费？"><a href="#什么情况下会出现重复消费？" class="headerlink" title="什么情况下会出现重复消费？"></a>什么情况下会出现重复消费？</h4><p>当消费者消费完消息时，在给生产端返回ack时由于网络中断，导致生产端未收到确认信息，该条消息会重新发送并被消费者消费，但实际上该消费者已成功消费了该条消息，这就是重复消费问题。</p><h4 id="如何避免消息的重复消费问题？"><a href="#如何避免消息的重复消费问题？" class="headerlink" title="如何避免消息的重复消费问题？"></a>如何避免消息的重复消费问题？</h4><p>消费端实现幂等性，就意味着，我们的消息永远不会消费多次，即使我们收到了多条一样的消息</p><p>业界主流的幂等性操作：</p><ul><li>唯一ID + 指纹码机制，利用数据库主键去重</li><li>利用Redis的原子性去实现</li></ul><h5 id="唯一ID-指纹码机制"><a href="#唯一ID-指纹码机制" class="headerlink" title="唯一ID+指纹码机制"></a>唯一ID+指纹码机制</h5><ul><li>唯一ID + 指纹码机制，利用数据库主键去重</li><li>SELECT COUNT(1) FROM T_ORDER WHERE ID = 唯一ID +指纹码</li><li>好处：实现简单</li><li>坏处：高并发下有数据库写入的性能瓶颈</li><li>解决方案：跟进ID进行分库分表进行算法路由</li></ul><p>整个思路就是首先我们需要根据消息生成一个全局唯一的ID，然后还需要加上一个指纹码。这个指纹码它并不一定是系统去生成的，而是一些外部的规则或者内部的业务规则去拼接，它的目的就是为了保障这次操作是绝对唯一的。</p><p>将ID + 指纹码拼接好的值作为数据库主键，就可以进行去重了。即在消费消息前呢，先去数据库查询这条消息的指纹码标识是否存在，没有就执行insert操作，如果有就代表已经被消费了，就不需要管了。</p><p>对于高并发下的数据库性能瓶颈，可以跟进ID进行分库分表策略，采用一些路由算法去进行分压分流。应该保证ID通过这种算法，消息即使投递多次都落到同一个数据库分片上，这样就由单台数据库幂等变成多库的幂等。</p><h5 id="利用Redis的原子性去实现"><a href="#利用Redis的原子性去实现" class="headerlink" title="利用Redis的原子性去实现"></a>利用Redis的原子性去实现</h5><p>我们都知道redis是单线程的，并且性能也非常好，提供了很多原子性的命令。比如可以使用 <code>setnx</code> 命令。</p><p>在接收到消息后将消息ID作为key执行 <code>setnx</code> 命令，如果执行成功就表示没有处理过这条消息，可以进行消费了，执行失败表示消息已经被消费了。</p><p>使用 redis 的原子性去实现主要需要考虑两个点</p><ul><li>第一：我们是否要进行数据落库，如果落库的话，关键解决的问题是数据库和缓存如何做到原子性？</li><li>第二：如果不进行落库，那么都存储到缓存中，如何设置定时同步的策略(同步到关系型数据库)？缓存又如何做到数据可靠性保障呢</li></ul><p>关于不落库，定时同步的策略，目前主流方案有两种，第一种为双缓存模式，异步写入到缓存中，也可以异步写到数据库，但是最终会有一个回调函数检查，这样能保障最终一致性，不能保证100%的实时性。第二种是定时同步，比如databus同步。</p><h2 id="确认消息Confirm详解"><a href="#确认消息Confirm详解" class="headerlink" title="确认消息Confirm详解"></a>确认消息Confirm详解</h2><h3 id="理解Confirm消息确认机制"><a href="#理解Confirm消息确认机制" class="headerlink" title="理解Confirm消息确认机制"></a>理解Confirm消息确认机制</h3><ul><li>消息的确认，是指生产者投递消息后，如果Broker收到消息，则会给我们生产者一个应答。</li><li>生产者进行接收应答，用来确定这条消息是否正常的发送到Broker，这种方式也是消息的可靠性投递的核心保障！</li></ul><h3 id="确认机制流程图"><a href="#确认机制流程图" class="headerlink" title="确认机制流程图"></a>确认机制流程图</h3><p>生产端发送消息到Broker，然后Broker接收到了消息后，进行回送响应，生产端有一个<code>Confirm Listener</code>，去监听应答，当然这个操作是异步进行的，生产端将消息发送出去就可以不用管了，让内部监听器去监听Broker给我们的响应。</p><p><img src="/assets/blogImg/dive-into-the-advanced-features-of-rabbitmq/RabbitMQ-Advanced-Producer-Confirm.jpg" alt="RabbitMQ-Advanced-Producer-Confirm"></p><h3 id="如何实现Confirm确认消息？"><a href="#如何实现Confirm确认消息？" class="headerlink" title="如何实现Confirm确认消息？"></a>如何实现Confirm确认消息？</h3><ul><li>第一步，在消息发送之前，channel上开启确认模式:<code>ch.NotifyPublish(make(chan amqp.Confirmation))</code></li><li>第二步，在消息发送至后，channel上添加监听：<code>&lt;-confirmChan</code>，监听成功和失败的返回结果，根据具体的结果对消息进行重新发送、或记录日志等后续处理！</li></ul><h4 id="生产端实现"><a href="#生产端实现" class="headerlink" title="生产端实现"></a>生产端实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 建立confirm监听</span></span><br><span class="line">ch.Confirm(<span class="literal">false</span>)</span><br><span class="line">confirmChan := ch.NotifyPublish(<span class="built_in">make</span>(<span class="keyword">chan</span> amqp.Confirmation))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明</span></span><br><span class="line">exchange := <span class="string">"test_confirm_exchange"</span></span><br><span class="line">routingKey := <span class="string">"confirm.save"</span></span><br><span class="line">body := <span class="string">"Hello RabbitMQ Send confirm message!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 发送消息</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 监听抵达Broker无误后的确认信息,设置5秒超时</span></span><br><span class="line">ticker := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> confirm := &lt;-confirmChan:</span><br><span class="line"><span class="keyword">if</span> confirm.Ack &#123;</span><br><span class="line">producer.logger.Println(<span class="string">"Push confirmed!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">producer.logger.Println(<span class="string">"Push failed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">fmt.Println(<span class="string">"out of limit time!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端实现"><a href="#消费端实现" class="headerlink" title="消费端实现"></a>消费端实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_confirm_exchange"</span></span><br><span class="line">routingKey := <span class="string">"confirm.#"</span></span><br><span class="line">queueName := <span class="string">"test_confirm_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. RMQ Server主动把消息推给消费者</span></span><br><span class="line"></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">" [x] %s"</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明"><a href="#运行说明" class="headerlink" title="运行说明"></a>运行说明</h4><p>先启动消费端，访问管控台：<a href="https://127.0.0.1:15672" target="_blank" rel="noopener">http://127.0.0.1:15672</a>，检查Exchange和Queue是否设置OK，然后启动生产端，消息被消费端消费，生产端也成功监听到了ACK响应。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 消费端打印</span></span><br><span class="line">Hello RabbitMQ Send confirm message!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产端打印</span></span><br><span class="line">Sent Hello RabbitMQ Send confirm message!</span><br><span class="line">Push confirmed!</span><br></pre></td></tr></table></figure><p>什么时候会 <code>confirm.Ack</code>为false呢，比如磁盘写满了，MQ出现了一些异常，或者Queue容量到达上限了等等</p><p>也有可能两个方法都不走，比如生产端发送消息就失败了，或者Broker端收到消息在返回ack时中途出现了网络闪断。<br>这种情况就需要定时任务去抓取中间状态的消息进行最大努力尝试次数的补偿重发，从而保障消息投递的可靠性。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>Golang里面采用 <a href="https://studygolang.com/articles/github.com/streadway/amqp" target="_blank" rel="noopener">AMQP</a> 来连接 <code>rabbitmq</code> , 使用之后发现这个库比较底层，只提供协议的封装。这个库用到生产环境不合适，包装了一层以提供更加稳定的功能， <a href="https://gist.github.com/OhBonsai/28868448ba84c38749a55ea63f22ca77" target="_blank" rel="noopener">代码地址</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Producer <span class="keyword">struct</span> &#123;</span><br><span class="line">name           <span class="keyword">string</span></span><br><span class="line">logger         *log.Logger</span><br><span class="line">connection     *amqp.Connection</span><br><span class="line">channel        *amqp.Channel</span><br><span class="line">done           <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">notifyClose    <span class="keyword">chan</span> *amqp.Error</span><br><span class="line">notifyConfirm  <span class="keyword">chan</span> amqp.Confirmation</span><br><span class="line">isConnected    <span class="keyword">bool</span></span><br><span class="line">isRunReconnect <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">reconnectDelay = <span class="number">5</span> * time.Second <span class="comment">// 连接断开后多久重连</span></span><br><span class="line">resendDelay    = <span class="number">5</span> * time.Second <span class="comment">// 消息发送失败后，多久重发</span></span><br><span class="line">resendTime     = <span class="number">3</span>               <span class="comment">// 消息重发次数</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">errNotConnected  = errors.New(<span class="string">"not connected to the producer"</span>)</span><br><span class="line">errAlreadyClosed = errors.New(<span class="string">"already closed: not connected to the producer"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProducer</span><span class="params">(name <span class="keyword">string</span>, addr <span class="keyword">string</span>)</span> *<span class="title">Producer</span></span> &#123;</span><br><span class="line">producer := Producer&#123;</span><br><span class="line">logger:         log.New(os.Stdout, <span class="string">""</span>, log.LstdFlags),</span><br><span class="line">name:           name,</span><br><span class="line">done:           <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>),</span><br><span class="line">isRunReconnect: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> producer.handleReconnect(addr)</span><br><span class="line">&lt;-producer.isRunReconnect</span><br><span class="line"><span class="keyword">return</span> &amp;producer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果连接失败会不断重连</span></span><br><span class="line"><span class="comment">// 如果连接断开会重新连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(producer *Producer)</span> <span class="title">handleReconnect</span><span class="params">(addr <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">firstRun := <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">producer.isConnected = <span class="literal">false</span></span><br><span class="line">log.Println(<span class="string">"Attempting to connect"</span>)</span><br><span class="line"><span class="keyword">for</span> !producer.connect(addr) &#123;</span><br><span class="line">log.Println(<span class="string">"Failed to connect. Retrying..."</span>)</span><br><span class="line">time.Sleep(reconnectDelay)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> firstRun &#123;</span><br><span class="line">producer.isRunReconnect &lt;- <span class="literal">true</span></span><br><span class="line">firstRun = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-producer.done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-producer.notifyClose:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接rabbitmq，以生产者的name定义一个队列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(producer *Producer)</span> <span class="title">connect</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">conn, err := amqp.Dial(addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">ch.Confirm(<span class="literal">false</span>)</span><br><span class="line">_, err = ch.QueueDeclare(</span><br><span class="line">producer.name,</span><br><span class="line"><span class="literal">true</span>,  <span class="comment">// Durable</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// Delete when unused</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// Exclusive</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// No-wait</span></span><br><span class="line"><span class="literal">nil</span>,   <span class="comment">// Arguments</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">producer.changeConnection(conn, ch)</span><br><span class="line">producer.isConnected = <span class="literal">true</span></span><br><span class="line">log.Println(<span class="string">"Connected!"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听Rabbit channel的状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(producer *Producer)</span> <span class="title">changeConnection</span><span class="params">(connection *amqp.Connection, channel *amqp.Channel)</span></span> &#123;</span><br><span class="line">producer.connection = connection</span><br><span class="line">producer.channel = channel</span><br><span class="line"><span class="comment">// channels没有必要主动关闭。如果没有协程使用它，它会被垃圾收集器收拾</span></span><br><span class="line">producer.notifyClose = <span class="built_in">make</span>(<span class="keyword">chan</span> *amqp.Error)</span><br><span class="line">producer.notifyConfirm = <span class="built_in">make</span>(<span class="keyword">chan</span> amqp.Confirmation)</span><br><span class="line">producer.channel.NotifyClose(producer.notifyClose)</span><br><span class="line">producer.channel.NotifyPublish(producer.notifyConfirm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三次重传的发消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(producer *Producer)</span> <span class="title">Push</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !producer.isConnected &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"failed to push push: not connected"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> currentTime = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">err := producer.UnsafePush(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">producer.logger.Println(<span class="string">"Push failed. Retrying..."</span>)</span><br><span class="line">currentTime += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> currentTime &lt; resendTime &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ticker := time.NewTicker(resendDelay)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> confirm := &lt;-producer.notifyConfirm:</span><br><span class="line"><span class="keyword">if</span> confirm.Ack &#123;</span><br><span class="line">producer.logger.Println(<span class="string">"Push confirmed!"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">&#125;</span><br><span class="line">producer.logger.Println(<span class="string">"Push didn't confirm. Retrying..."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送出去，不管是否接受的到</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(producer *Producer)</span> <span class="title">UnsafePush</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !producer.isConnected &#123;</span><br><span class="line"><span class="keyword">return</span> errNotConnected</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> producer.channel.Publish(</span><br><span class="line"><span class="string">""</span>,            <span class="comment">// Exchange</span></span><br><span class="line">producer.name, <span class="comment">// Routing key</span></span><br><span class="line"><span class="literal">false</span>,         <span class="comment">// Mandatory</span></span><br><span class="line"><span class="literal">false</span>,         <span class="comment">// Immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">DeliveryMode: <span class="number">2</span>,</span><br><span class="line">ContentType:  <span class="string">"application/json"</span>,</span><br><span class="line">Body:         data,</span><br><span class="line">Timestamp:    time.Now(),</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接/信道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(producer *Producer)</span> <span class="title">Close</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !producer.isConnected &#123;</span><br><span class="line"><span class="keyword">return</span> errAlreadyClosed</span><br><span class="line">&#125;</span><br><span class="line">err := producer.channel.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = producer.connection.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(producer.done)</span><br><span class="line">producer.isConnected = <span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">producer := NewProducer(<span class="string">"test001"</span>, <span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line"><span class="keyword">if</span> err := producer.Push([]<span class="keyword">byte</span>(<span class="string">"hello"</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Return消息机制"><a href="#Return消息机制" class="headerlink" title="Return消息机制"></a>Return消息机制</h2><p><code>Return Listener</code> 用于处理一些不可路由的消息！</p><p>我们的消息生产者，通过指定一个Exchange 和Routingkey，把消息送达到某一个队列中去， 然后我们的消费者监听队列，进行消费处理操作！</p><p>但是在某些情况下，如果我们在发送消息的时候，当前的exchange不存在或者指定的路由key路由不到，这个时候如果我们需要监听这种不可达的消息，就要使用<code>Return Listener</code></p><p><img src="/assets/blogImg/dive-into-the-advanced-features-of-rabbitmq/RabbitMQ-Advanced-Producer-Return.jpg" alt="RabbitMQ-Advanced-Producer-Return"></p><h3 id="Return机制实现"><a href="#Return机制实现" class="headerlink" title="Return机制实现"></a>Return机制实现</h3><ol><li>添加return监听：<code>ch.NotifyReturn(make(chan amqp.Return))</code>，生产端去监听这些不可达的消息，做一些后续处理，比如说，记录下消息日志，或者及时去跟踪记录，有可能重新设置一下就好了</li><li>发送消息时，设置<code>Mandatory</code>：如果为true，则监听器会接收到路由不可达的消息，然后进行后续处理，如果为false，那么broker端自动删除该消息！</li></ol><h3 id="Return机制演示"><a href="#Return机制演示" class="headerlink" title="Return机制演示"></a>Return机制演示</h3><h4 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 建立confirm监听</span></span><br><span class="line">ch.Confirm(<span class="literal">false</span>)</span><br><span class="line">confirmChan := ch.NotifyPublish(<span class="built_in">make</span>(<span class="keyword">chan</span> amqp.Confirmation))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 建立return监听</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch *amqp.Channel)</span></span> &#123;</span><br><span class="line"><span class="comment">// NotifyReturn 会导致整个程序最后无法完全退出，所以使用goroutine</span></span><br><span class="line">returnChan := ch.NotifyReturn(<span class="built_in">make</span>(<span class="keyword">chan</span> amqp.Return))</span><br><span class="line"><span class="keyword">for</span> re := <span class="keyword">range</span> returnChan &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------handle  return----------"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"replyCode: %d\n"</span>, re.ReplyCode)</span><br><span class="line">fmt.Println(<span class="string">"replyText: "</span> + re.ReplyText)</span><br><span class="line">fmt.Println(<span class="string">"exchange: "</span> + re.Exchange)</span><br><span class="line">fmt.Println(<span class="string">"routingKey: "</span> + re.RoutingKey)</span><br><span class="line"><span class="comment">//fmt.Printf("properties: %d\n", re.Priority)</span></span><br><span class="line">fmt.Println(<span class="string">"body: "</span> + <span class="keyword">string</span>(re.Body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明</span></span><br><span class="line">exchange := <span class="string">"test_return_exchange"</span></span><br><span class="line"><span class="comment">//routingKey := "return.save"</span></span><br><span class="line">routingKey := <span class="string">"abc.save"</span></span><br><span class="line">body := <span class="string">"Hello RabbitMQ Send Return message!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 发送消息</span></span><br><span class="line">  <span class="comment">// 注意：mandatory设置为true</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">true</span>,       <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"><span class="comment">// 7. 监听抵达Broker无误后的确认信息,设置5秒超时</span></span><br><span class="line">ticker := time.NewTicker(<span class="number">2</span> * time.Second)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> confirm := &lt;-confirmChan:</span><br><span class="line"><span class="keyword">if</span> confirm.Ack &#123;</span><br><span class="line">fmt.Println(<span class="string">"Push confirmed!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Push failed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">fmt.Println(<span class="string">"out of limit time!"</span>)</span><br><span class="line"><span class="comment">// 当同时开启 confirm 和 return 监听时，此时return失败，会导致confirm超时。</span></span><br><span class="line"><span class="comment">// 由此也可以在这里进行校验</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_return_exchange"</span></span><br><span class="line">routingKey := <span class="string">"return.#"</span></span><br><span class="line">queueName := <span class="string">"test_return_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. RMQ Server主动把消息推给消费者</span></span><br><span class="line"></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> d := &lt;-msgs:</span><br><span class="line">fmt.Println(<span class="string">"-----------consume message----------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"consumerTag: "</span> + d.ConsumerTag)</span><br><span class="line"><span class="comment">//envelope包含属性：deliveryTag(标签), redeliver, exchange, routingKey</span></span><br><span class="line"><span class="comment">//redeliver是一个标记，如果设为true，表示消息之前可能已经投递过了，现在是重新投递消息到监听队列的消费者</span></span><br><span class="line">fmt.Printf(<span class="string">"deliveryTag: %d\n"</span>, d.DeliveryTag)</span><br><span class="line">fmt.Printf(<span class="string">"redeliver: %v\n"</span>, d.Redelivered)</span><br><span class="line">fmt.Println(<span class="string">"exchange: "</span> + d.Exchange)</span><br><span class="line">fmt.Println(<span class="string">"routingKey: "</span> + d.RoutingKey)</span><br><span class="line">fmt.Printf(<span class="string">"properties: %d\n"</span>, d.Priority)</span><br><span class="line">fmt.Println(<span class="string">"body: "</span> + <span class="keyword">string</span>(d.Body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明-1"><a href="#运行说明-1" class="headerlink" title="运行说明"></a>运行说明</h4><p>先启动消费端，访问管控台：<a href="http://127.0.0.1:15672，检查Exchange和Queue是否设置OK，然后启动生产端。" target="_blank" rel="noopener">http://127.0.0.1:15672，检查Exchange和Queue是否设置OK，然后启动生产端。</a><br>由于生产端设置的是一个错误的路由key，所以消费端没有任何打印，而生产端打印了如下内容</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---------handle  return----------</span><br><span class="line"><span class="symbol">replyCode:</span> <span class="number">312</span></span><br><span class="line"><span class="symbol">replyText:</span> NO_ROUTE</span><br><span class="line"><span class="symbol">exchange:</span> test_return_exchange</span><br><span class="line"><span class="symbol">routingKey:</span> abc.save</span><br><span class="line"><span class="symbol">body:</span> Hello RabbitMQ Send Return message!</span><br><span class="line"><span class="keyword">Push</span> confirmed!</span><br></pre></td></tr></table></figure><p>如果我们将 <code>Mandatory</code> 属性设置为false，对于不可达的消息会被Broker直接删除，那么生产端就不会进行任何打印了。如果我们的路由key设置为正确的，那么消费端能够正确消费，生产端也不会进行任何打印。</p><h2 id="消费端的限流策略"><a href="#消费端的限流策略" class="headerlink" title="消费端的限流策略"></a>消费端的限流策略</h2><h3 id="为什么需要消费端的限流？"><a href="#为什么需要消费端的限流？" class="headerlink" title="为什么需要消费端的限流？"></a>为什么需要消费端的限流？</h3><ul><li>假设一个场景，我们Rabbitmq服务器有上万条未处理的消息，我们随便打开一个消费者客户端，会出现这种情况：巨量的消息瞬间全部推送过来，但是我们单个客户端无法同时处理这么多数据!此时很有可能导致服务器崩溃，严重的可能导致线上的故障。</li><li>除了这种场景，还有一些其他的场景，比如说单个生产者一分钟生产出了几百条数据，但是单个消费者一分钟可能只能处理60条数据，这个时候生产端和消费端肯定是不平衡的。通常生产端是没办法做限制的。所以消费端肯定需要做一些限流措施，否则如果超出最大负载，可能导致消费端性能下降，服务器卡顿甚至崩溃等一系列严重后果。</li></ul><h3 id="消费端限流机制"><a href="#消费端限流机制" class="headerlink" title="消费端限流机制"></a>消费端限流机制</h3><p>RabbitMQ提供了一种<code>qos</code> (服务质量保证)功能，即在非自动确认消息的前提下，如果一定数目的消息 (通过基于consume或者channel设置Qos的值) 未被确认前，不进行消费新的消息。<br> 需要注意：<br> 1.不能设置自动签收功能(autoAck = false)<br> 2.如果消息没被确认，就不会到达消费端，目的就是给消费端减压</p><h3 id="限流相关API"><a href="#限流相关API" class="headerlink" title="限流相关API"></a>限流相关API</h3><h4 id="限流设置"><a href="#限流设置" class="headerlink" title="限流设置"></a>限流设置</h4><p><code>func (ch *Channel) Qos(prefetchCount, prefetchSize int, global bool)</code></p><p><code>prefetchCount:</code> 一次最多能处理多少条消息，通常设置为1<br><code>prefetchSize:</code> 单条消息的大小限制，消费端通常设置为0，表示不做限制<br><code>global:</code> 是否将上面设置应用于channel，false代表consumer级别</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><code>prefetchSize</code>和<code>global</code>这两项，rabbitmq没有实现，暂且不研究</p><p> <code>prefetchCount</code>在 <code>autoAck=false</code> 的情况下生效，即在自动应答的情况下这个值是不生效的</p><h4 id="手工ACK"><a href="#手工ACK" class="headerlink" title="手工ACK"></a>手工ACK</h4><p><code>func (d Delivery) Ack(multiple bool) error</code><br>手工ACK，调用这个方法就会主动回送给Broker一个应答，表示这条消息我处理完了，你可以给我下一条了。参数<code>multiple</code>表示是否批量签收，由于我们是一次处理一条消息，所以设置为false</p><h3 id="限流演示"><a href="#限流演示" class="headerlink" title="限流演示"></a>限流演示</h3><h4 id="生产端-1"><a href="#生产端-1" class="headerlink" title="生产端"></a>生产端</h4><p>生产端就是正常的逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明</span></span><br><span class="line">exchange := <span class="string">"test_qos_exchange"</span></span><br><span class="line">routingKey := <span class="string">"qos.save"</span></span><br><span class="line">body := <span class="string">"Hello RabbitMQ Send QOS message!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 发送消息</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端-1"><a href="#消费端-1" class="headerlink" title="消费端"></a>消费端</h4><p>关闭autoACK，进行限流设置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_qos_exchange"</span></span><br><span class="line">routingKey := <span class="string">"qos.#"</span></span><br><span class="line">queueName := <span class="string">"test_qos_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 设置每次接收几条信息</span></span><br><span class="line">err = ch.Qos(</span><br><span class="line"><span class="number">1</span>,     <span class="comment">// prefetch count</span></span><br><span class="line"><span class="number">0</span>,     <span class="comment">// prefetch size</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// global</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to set QoS"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">// autoAck设置为false，手动进行ack确认</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> d := &lt;-msgs:</span><br><span class="line">fmt.Println(<span class="string">"body: "</span> + <span class="keyword">string</span>(d.Body))</span><br><span class="line">d.Ack(<span class="literal">false</span>) <span class="comment">//是否批量确认，因为接收是设置一次接收一条，所以这里用false，不批量确认</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明-2"><a href="#运行说明-2" class="headerlink" title="运行说明"></a>运行说明</h4><p>我们先注释掉手工ACK方法，然后启动消费端和生产端，此时消费端只打印了一条消息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>: Hello RabbitMQ Send QOS message!</span><br></pre></td></tr></table></figure><p>这是因为我们设置了手工签收，并且设置了一次只处理一条消息，当我们没有回送ack应答时，Broker端就认为消费端还没有处理完这条消息，基于这种限流机制就不会给消费端发送新的消息了，所以消费端只打印了一条消息。<br>通过管控台也可以看到队列总共收到了5条消息，有一条消息没有ack。</p><p><img src="/assets/blogImg/dive-into-the-advanced-features-of-rabbitmq/RabbitMQ-Advanced-Consumer-Ack.jpg" alt="RabbitMQ-Advanced-Consumer-Ack"></p><p>将手工签收代码取消注释，再次运行消费端，此时就会打印5条消息的内容。</p><h2 id="消费端ACK与重回队列机制"><a href="#消费端ACK与重回队列机制" class="headerlink" title="消费端ACK与重回队列机制"></a>消费端ACK与重回队列机制</h2><h3 id="消费端的手工ACK与NACK"><a href="#消费端的手工ACK与NACK" class="headerlink" title="消费端的手工ACK与NACK"></a>消费端的手工ACK与NACK</h3><p>当我们设置 <code>autoACK=false</code> 时，就可以使用手工ACK方式了，那么其实手工方式包括了手工ACK与NACK。<br>当我们手工 <code>ACK</code> 时，会发送给Broker一个应答，代表消息成功处理了，Broker就可以回送响应给生产端了。<code>NACK</code> 则表示消息处理失败了，如果设置重回队列，Broker端就会将没有成功处理的消息重新发送。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>消费端进行消费的时候，如果由于业务异常我们可以手工 <code>NACK</code> 并进行日志的记录，然后进行补偿！<br>方法：<code>func (d Delivery) Nack(multiple, requeue bool) error</code></p><p>如果由于服务器宕机等严重问题，那我们就需要手工进行 <code>ACK</code> 保障消费端消费成功！<br>方法：<code>func (d Delivery) Ack(multiple bool) error</code></p><h3 id="消费端的重回队列"><a href="#消费端的重回队列" class="headerlink" title="消费端的重回队列"></a>消费端的重回队列</h3><ul><li>消费端重回队列是为了对没有处理成功的消息，把消息重新会递给Broker！</li><li>重回队列，会把消费失败的消息重新添加到队列的首部(不是尾端)，供消费者继续消费。</li><li>一般我们在实际应用中，都会关闭重回队列，也就是设置为false</li></ul><h4 id="演示重回队列"><a href="#演示重回队列" class="headerlink" title="演示重回队列"></a>演示重回队列</h4><h5 id="生产端-2"><a href="#生产端-2" class="headerlink" title="生产端"></a>生产端</h5><p>对消息设置自定义属性以便进行区分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明</span></span><br><span class="line">exchange := <span class="string">"test_ack_exchange"</span></span><br><span class="line">routingKey := <span class="string">"ack.save"</span></span><br><span class="line">body := <span class="string">"Hello RabbitMQ Send ACK message!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 发送消息</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">headers := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"num"</span>: i,</span><br><span class="line">&#125;</span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">Headers:     headers,</span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s,num:%d"</span>, body, headers[<span class="string">"num"</span>])</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费端-2"><a href="#消费端-2" class="headerlink" title="消费端"></a>消费端</h5><p>关闭自动签收功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_ack_exchange"</span></span><br><span class="line">routingKey := <span class="string">"ack.#"</span></span><br><span class="line">queueName := <span class="string">"test_ack_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 设置每次接收几条信息</span></span><br><span class="line">err = ch.Qos(</span><br><span class="line"><span class="number">1</span>,     <span class="comment">// prefetch count</span></span><br><span class="line"><span class="number">0</span>,     <span class="comment">// prefetch size</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// global</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to set QoS"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">// autoAck设置为false，手动进行ack确认</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> d := &lt;-msgs:</span><br><span class="line">num := d.Headers[<span class="string">"num"</span>].(<span class="keyword">int32</span>)</span><br><span class="line">fmt.Printf(<span class="string">"num: %d\n"</span>, num)</span><br><span class="line">fmt.Println(<span class="string">"body: "</span> + <span class="keyword">string</span>(d.Body))</span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// 是否批量确认,因为接收是设置一次接收一条，所以这里用false，不批量确认</span></span><br><span class="line"><span class="comment">// 是否重回队列,false不返回队列，直接丢弃。true则返回队列首部(不是尾部)</span></span><br><span class="line">d.Nack(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">d.Ack(<span class="literal">false</span>) <span class="comment">// 是否批量确认，因为接收是设置一次接收一条，所以这里用false，不批量确认</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行说明-3"><a href="#运行说明-3" class="headerlink" title="运行说明"></a>运行说明</h5><p>先启动消费端，然后启动生产端，消费端打印如下，显然第一条消息由于我们调用了NACK，并且设置了重回队列，所以会导致该条消息一直重复发送，消费端就会一直循环消费。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">num:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">body:</span> Hello RabbitMQ Send ACK message!</span><br><span class="line"><span class="symbol">num:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">body:</span> Hello RabbitMQ Send ACK message!</span><br><span class="line"><span class="symbol">num:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">body:</span> Hello RabbitMQ Send ACK message!</span><br><span class="line"><span class="symbol">num:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">body:</span> Hello RabbitMQ Send ACK message!</span><br></pre></td></tr></table></figure><p>一般工作中不会设置重回队列这个属性，我们都是自己去做补偿或者投递到延迟队列里的，然后指定时间去处理即可。</p><h2 id="TTL消息详解"><a href="#TTL消息详解" class="headerlink" title="TTL消息详解"></a>TTL消息详解</h2><h3 id="TTL说明"><a href="#TTL说明" class="headerlink" title="TTL说明"></a>TTL说明</h3><ul><li>TTL是<code>Time To Live</code>的缩写，也就是生存时间</li><li>RabbitMQ支持消息的过期时间，在消息发送时可以进行指定</li><li>RabbitMQ支持为每个队列设置消息的超时时间，从消息入队列开始计算，只要超过了队列的超时时间配置，那么消息会自动的清除</li></ul><h3 id="TTL演示"><a href="#TTL演示" class="headerlink" title="TTL演示"></a>TTL演示</h3><h4 id="消息的过期时间设置"><a href="#消息的过期时间设置" class="headerlink" title="消息的过期时间设置"></a>消息的过期时间设置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">err = ch.Publish(</span><br><span class="line"><span class="string">""</span>,     <span class="comment">// exchange</span></span><br><span class="line">q.Name, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType:     <span class="string">"text/plain"</span>,</span><br><span class="line">Body:            []<span class="keyword">byte</span>(body),</span><br><span class="line">DeliveryMode:    <span class="number">2</span>, <span class="comment">//消息持久化</span></span><br><span class="line">ContentEncoding: <span class="string">"UTF-8"</span>,</span><br><span class="line">Expiration:      <span class="string">"5000"</span>, <span class="comment">//5s过期</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="队列的过期时间设置"><a href="#队列的过期时间设置" class="headerlink" title="队列的过期时间设置"></a>队列的过期时间设置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ttl := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">  <span class="string">"x-message-ttl"</span>: <span class="number">10000</span>, <span class="comment">//10s过期</span></span><br><span class="line">&#125;</span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">  queueName, <span class="comment">// name</span></span><br><span class="line">  <span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line">  <span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line">  <span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line">  <span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line">  ttl,       <span class="comment">// arguments 设置队列里的信息的超时时间</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>两者的区别是设置队列的过期时间是对该队列的所有消息生效的。</li><li>为消息设置TTL有一个问题：RabbitMQ只对处于队头的消息判断是否过期（即不会扫描队列），所以，很可能队列中已存在死消息，但是队列并不知情。这会影响队列统计数据的正确性，妨碍队列及时释放资源。</li></ol><h2 id="死信队列详解"><a href="#死信队列详解" class="headerlink" title="死信队列详解"></a>死信队列详解</h2><h3 id="死信队列介绍"><a href="#死信队列介绍" class="headerlink" title="死信队列介绍"></a>死信队列介绍</h3><ul><li>死信队列：DLX，<code>dead-letter-exchange</code></li><li>利用DLX，当消息在一个队列中变成死信 <code>(dead message)</code> 之后，它能被重新publish到另一个Exchange，这个Exchange就是DLX</li></ul><h3 id="消息变成死信有以下几种情况"><a href="#消息变成死信有以下几种情况" class="headerlink" title="消息变成死信有以下几种情况"></a>消息变成死信有以下几种情况</h3><ul><li>消息被拒绝(reject / nack)，并且requeue = false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><h3 id="死信处理过程"><a href="#死信处理过程" class="headerlink" title="死信处理过程"></a>死信处理过程</h3><ul><li>DLX也是一个正常的Exchange，和一般的Exchange没有区别，它能在任何的队列上被指定，实际上就是设置某个队列的属性。</li><li>当这个队列中有死信时，RabbitMQ就会自动的将这个消息重新发布到设置的Exchange上去，进而被路由到另一个队列。</li><li>可以监听这个队列中的消息做相应的处理。</li></ul><h3 id="死信队列设置"><a href="#死信队列设置" class="headerlink" title="死信队列设置"></a>死信队列设置</h3><ol><li>首先需要设置死信队列的exchange和queue，然后进行绑定：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exchange: dlx.exchange</span><br><span class="line">Queue: dlx.queue</span><br><span class="line">RoutingKey: <span class="comment">#</span></span><br><span class="line"><span class="comment">#表示只要有消息到达了Exchange，那么都会路由到这个queue上</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后需要有一个监听，去监听这个队列进行处理</li><li>然后我们进行正常声明交换机、队列、绑定，只不过我们需要在队列加上一个参数即可：<code>arguments[&quot;x-dead-letter-exchange&quot;]=&quot;dlx.exchange&quot;</code>，这样消息在过期、requeue、 队列在达到最大长度时，消息就可以直接路由到死信队列！</li></ol><h3 id="死信队列演示"><a href="#死信队列演示" class="headerlink" title="死信队列演示"></a>死信队列演示</h3><h4 id="生产端-3"><a href="#生产端-3" class="headerlink" title="生产端"></a>生产端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明</span></span><br><span class="line">exchange := <span class="string">"test_dlx_exchange"</span></span><br><span class="line">routingKey := <span class="string">"dlx.save"</span></span><br><span class="line">body := <span class="string">"Hello RabbitMQ Send DLX message!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 发送消息</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端-3"><a href="#消费端-3" class="headerlink" title="消费端"></a>消费端</h4><ul><li>声明正常处理消息的交换机、队列及绑定规则</li><li>在正常交换机上指定死信发送的Exchange</li><li>声明死信交换机、队列及绑定规则</li><li>监听死信队列，进行后续处理，这里省略</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name,dlx exchange,dlx routing key,dlx queue name</span></span><br><span class="line">exchange := <span class="string">"test_dlx_exchange"</span></span><br><span class="line">routingKey := <span class="string">"dlx.#"</span></span><br><span class="line">queueName := <span class="string">"test_dlx_queue"</span></span><br><span class="line"></span><br><span class="line">dlxExchange := <span class="string">"dlx.exchange"</span></span><br><span class="line">dlxRoutingKey := <span class="string">"#"</span></span><br><span class="line">dlxQueueName := <span class="string">"dlx.queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个普通交换机</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个死信交换机</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">dlxExchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,     <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,        <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,         <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an dlx exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 声明队列过期时间以及死信交换机</span></span><br><span class="line">arg := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"x-message-ttl"</span>:          <span class="number">10000</span>,</span><br><span class="line"><span class="string">"x-dead-letter-exchange"</span>: dlxExchange,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7. 声明（创建）一个普通队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line">arg,       <span class="comment">// arguments 设置队列里的信息的超时时间和指定死信交换机</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 声明（创建）一个死信队列</span></span><br><span class="line">qdlx, err := ch.QueueDeclare(</span><br><span class="line">dlxQueueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,         <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,          <span class="comment">// arguments 设置队列里的信息的超时时间和指定死信交换机</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a dlx queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 普通队列绑定</span></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"><span class="comment">// 10. 死信交换机与死信队列绑定</span></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">qdlx.Name,     <span class="comment">// queue name</span></span><br><span class="line">dlxRoutingKey, <span class="comment">// routing key</span></span><br><span class="line">dlxExchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a dlx queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. RMQ Server主动把消息推给消费者</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> d := &lt;-msgs:</span><br><span class="line">fmt.Println(<span class="string">"body: "</span> + <span class="keyword">string</span>(d.Body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明-4"><a href="#运行说明-4" class="headerlink" title="运行说明"></a>运行说明</h4><p>启动消费端，此时查看管控台，新增了两个Exchange，两个Queue。在<code>test_dlx_queue</code>上我们设置了DLX，也就代表死信消息会发送到指定的Exchange上，最终其实会路由到<code>dlx.queue</code>上。</p><p>此时关闭消费端，然后启动生产端，查看管控台队列的消息情况，<code>test_dlx_queue</code>的值为1，而<code>dlx_queue</code>的值为0。</p><p>10s后的队列结果如图，由于生产端发送消息时指定了消息的过期时间为10s，而此时没有消费端进行消费，消息便被路由到死信队列中。</p><p><img src="/assets/blogImg/dive-into-the-advanced-features-of-rabbitmq/RabbitMQ-Advanced-Consumer-Dlx.jpg" alt="RabbitMQ-Advanced-Consumer-Dlx"></p><p>实际环境我们还需要对死信队列进行一个监听和处理，当然具体的处理逻辑和业务相关，这里只是简单演示死信队列是否生效。</p><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>需要自己扩展安装延迟插件.</p><blockquote><p>注意，RabbitMQ是无法手动指定清除哪一个消息的。只能等它触发，通过业务逻辑排除。</p></blockquote><blockquote><p>注意，消息是先进入交换机，路由，然后暂时放在别的地方，并没有进入队列。等时间到了才进入延迟队列。</p></blockquote><h3 id="安装延迟插件"><a href="#安装延迟插件" class="headerlink" title="安装延迟插件"></a>安装延迟插件</h3><h4 id="非Docker"><a href="#非Docker" class="headerlink" title="非Docker"></a>非Docker</h4><ol><li><p>插件下载地址</p><p><a href="http://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">http://www.rabbitmq.com/community-plugins.html</a></p></li><li><p>下载延迟插件</p><p><a href="https://bintray.com/rabbitmq/community-plugins/rabbitmq_delayed_message_exchange/v3.6.x#files/" target="_blank" rel="noopener">https://bintray.com/rabbitmq/community-plugins/rabbitmq_delayed_message_exchange/v3.6.x#files/</a></p></li><li><p>将下载的插件放入RabbitMQ的扩展目录</p><p><code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/plugins</code></p></li><li><p>启用扩展</p><p> <code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></p></li></ol><blockquote><p>注意，官网下载的<code>rabbitmq_delayed_message_exchange-20171215-3.6.x.ez</code>有问题，无法使用。mq 3.6.5版本还是使用<code>rabbitmq_delayed_message_exchange-0.0.1.ez</code></p></blockquote><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>自己编写Dockerfile</p><ol><li>先下载插件延迟插件<code>rabbitmq_delayed_message_exchange-0.0.1.ez</code></li><li>编写Dockerfile</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> rabbitmq:<span class="number">3.6</span>.<span class="number">5</span>-management</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> rabbitmq_delayed_message_exchange-0.0.1.ez /plugins</span></span><br><span class="line"><span class="bash">RUN rabbitmq-plugins <span class="built_in">enable</span> --offline rabbitmq_delayed_message_exchange</span></span><br></pre></td></tr></table></figure><h3 id="延迟队列演示"><a href="#延迟队列演示" class="headerlink" title="延迟队列演示"></a>延迟队列演示</h3><h4 id="生产端-4"><a href="#生产端-4" class="headerlink" title="生产端"></a>生产端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明</span></span><br><span class="line">exchange := <span class="string">"delay.exchange"</span></span><br><span class="line">routingKey := <span class="string">"delay.msg"</span></span><br><span class="line">body := <span class="string">"Hello RabbitMQ Send Delay message!"</span></span><br><span class="line">header := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"x-delay"</span>: <span class="string">"15000"</span>, <span class="comment">//延迟多久放入延迟队列 单位：毫秒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 发送消息</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">Headers:     header,</span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端-4"><a href="#消费端-4" class="headerlink" title="消费端"></a>消费端</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明延迟的exchange,type,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"delay.exchange"</span></span><br><span class="line">routingKey := <span class="string">"delay.#"</span></span><br><span class="line">queueName := <span class="string">"delay.queue"</span></span><br><span class="line">delayType := <span class="string">"x-delayed-message"</span> <span class="comment">// 延迟交换机固定定义类型</span></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">// 延迟交换机固定定义</span></span><br><span class="line">exchangeArgs := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"x-delayed-type"</span>: <span class="string">"topic"</span>, <span class="comment">//这里指定类型为topic类型</span></span><br><span class="line">&#125;</span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange,     <span class="comment">// name</span></span><br><span class="line">delayType,    <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,         <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// no-wait</span></span><br><span class="line">exchangeArgs, <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. RMQ Server主动把消息推给消费者</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> d := &lt;-msgs:</span><br><span class="line">fmt.Println(<span class="string">"body: "</span> + <span class="keyword">string</span>(d.Body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明-5"><a href="#运行说明-5" class="headerlink" title="运行说明"></a>运行说明</h4><p>启动消费端，此时查看管控台，延迟交换机以及延迟队列。</p><p>此时关闭消费端，然后启动生产端，查看管控台队列的消息情况，<code>delay.queue</code>队列显示0条信息。等15s后，显示1条记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;保障消息-100-投递成功方案&quot;&gt;&lt;a href=&quot;#保障消息-100-投递成功方案&quot; class=&quot;headerlink&quot; title=&quot;保障消息 100% 投递成功方案&quot;&gt;&lt;/a&gt;保障消息 100% 投递成功方案&lt;/h2&gt;&lt;h3 id=&quot;什么是生产端的可靠性投递？&quot;&gt;&lt;a href=&quot;#什么是生产端的可靠性投递？&quot; class=&quot;headerlink&quot; title=&quot;什么是生产端的可靠性投递？&quot;&gt;&lt;/a&gt;什么是生产端的可靠性投递？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保障消息的成功发出&lt;/li&gt;
&lt;li&gt;保障MQ节点的成功接收&lt;/li&gt;
&lt;li&gt;发送端收到MQ节点(Broker) 确认应答&lt;/li&gt;
&lt;li&gt;完善的消息补偿机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想保障消息百分百投递成功，只做到前三步不一定能够保障。有些时候或者说有些极端情况，比如生产端在投递消息时可能就失败了，或者说生产端投递了消息，MQ也收到了，MQ在返回确认应答时，由于网络闪断导致生产端没有收到应答，此时这条消息就不知道投递成功了还是失败了，所以针对这些情况我们需要做一些补偿机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="消息队列" scheme="https://www.guaosi.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.guaosi.com/tags/RabbitMQ/"/>
    
      <category term="中间件" scheme="https://www.guaosi.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>入门RabbitMQ之交换机详解(Golang演示)</title>
    <link href="https://www.guaosi.com/2020/01/28/detailed-introduction-to-the-rabbitmq-switch-with-golang/"/>
    <id>https://www.guaosi.com/2020/01/28/detailed-introduction-to-the-rabbitmq-switch-with-golang/</id>
    <published>2020-01-28T09:32:55.000Z</published>
    <updated>2021-12-05T08:13:24.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交换机详解"><a href="#交换机详解" class="headerlink" title="交换机详解"></a>交换机详解</h2><p>Exchange：交换机，接收消息，并根据路由键转发消息到绑定的队列<br>如图为官网提供的模型，蓝色框表示<code>Send Message</code>，Client端把消息投递到Exchange上，通过RoutingKey路由关系将消息路由到指定的队列，绿色框代表<code>Receive Message</code>，Client端和队列建立监听，然后去接收消息。红色框代表<code>RabbitMQ Server</code>，黄色框表示<code>RoutingKey</code>，即Exchange和Queue需要建立绑定关系。</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-Exchange原理图.jpg" alt="RabbitMQ-Exchange原理图"></p><a id="more"></a><h3 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h3><p>一般有这四种：</p><ul><li>Direct：直连方式，相当于一种点对点的消息投递，如果路由键匹配，就直接投递到相应的队列</li><li>Fanout： 广播方式，投递到此类型交换机的消息将下发到所有绑定的队列</li><li>Topic：提供一种模式匹配的投递方式，我们可以根据主题来决定消息投递到哪个队列</li><li>Headers</li></ul><p><code>Headers Exchange</code>，很少使用，是通过消息头进行路由的，通常我们都使用前三种。</p><h3 id="交换机属性"><a href="#交换机属性" class="headerlink" title="交换机属性"></a>交换机属性</h3><p><code>Name:</code> 交换机名称</p><p><code>Type:</code> 交换机类型，direct、topic、 fanout、 headers</p><p><code>Durability:</code> 是否需要持久化</p><p><code>Auto Delete:</code> 当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange</p><p><code>Internal:</code> 当前Exchange是否用于RabbitMQ内部使用，默认为False</p><p><code>Arguments:</code> 扩展参数，用于扩展AMQP协议定制化使用</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>交换机跟队列一定是先创建声明出来的，否则投递的消息会丢失。交换机可以不声明，此时默认使用系统自带的<code>(AMQP default)</code>。在哪里声明创建都可以，可以在生产者，也可以在消费者。</p></li><li><p>交换机可以绑定多个routing key,以此来对应不同的队列。同时一个队列也可以被多个routing key绑定。（exchange-&gt;routing key-&gt;queue）</p></li><li><p>生产者只需要在意投递哪一个交换机的哪一个routing key即可。消费者只需要在意从哪个队列获取数据。</p></li><li><p>交换机以及队列的声明创建，只要曾经做过，就会一直存在(如果没有设置<code>autoDelete</code>或者<code>exclusive</code>为true)</p></li><li><p>交换机，routing和队列的绑定，只要曾经做过，绑定就会一直存在(如果没有设置队列的<code>autoDelete</code>或者<code>exclusive</code>为true)</p></li><li><p>一个交换机只能有一种交换机类型，就是最开始创建时设定的交换机类型。后期如果再次声明但是交换机类型不同，将会报错。</p></li><li><p>当有多个消费端时，当一个消费端拿出一个消息，另一个消费端是拿不到这个消息的。正常情况下可以保证不会被多消费。</p></li></ol><h3 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h3><p>直连方式，所有发送到 <code>Direct Exchange</code> 的消息被转发到RouteKey中指定的Queue<br>注意：Direct模式可以使用RabbitMQ自带的Exchange：default Exchange，所以不需要将Exchange进行任何绑定(binding)操作，消息传递时，<code>RouteKey必须完全匹配</code>才会被队列接收，否则该消息会被抛弃。</p><p>看一下 <code>Direct Exchange</code> 的图解，其实意思就是说指定了RoutingKey的消息会被投递到绑定关系与该key值相同的队列上。</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-DirectExchange.jpg" alt="RabbitMQ-DirectExchange"></p><h4 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h4><p>指定投递的Exchange和相应的RontingKey进行发送消息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key</span></span><br><span class="line">exchange := <span class="string">"test_direct_exchange"</span></span><br><span class="line">routingKey := <span class="string">"test.direct"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">//name:交换器的名称。</span></span><br><span class="line"><span class="comment">//kind:也叫作type，表示交换器的类型。有四种常用类型：direct、fanout、topic、headers。</span></span><br><span class="line"><span class="comment">//durable:是否持久化，true表示是。持久化表示会把交换器的配置存盘，当RMQ Server重启后，会自动加载交换器。</span></span><br><span class="line"><span class="comment">//autoDelete:是否自动删除，true表示是。至少有一条绑定才可以触发自动删除，当所有绑定都与交换器解绑后，会自动删除此交换器。</span></span><br><span class="line"><span class="comment">//internal:是否为内部，true表示是。客户端无法直接发送msg到内部交换器，只有交换器可以发送msg到内部交换器。</span></span><br><span class="line"><span class="comment">//noWait:是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args:直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，在生产者里声不声明(创建)交换机都可以。这里声明，是为了防止消费者没有启动或者这个交换机原先不存在，导致消息投递丢失。</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"direct"</span>, <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line">msg := <span class="string">"Hello World RabbitMQ Direct Exchange Message ... "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 发送消息</span></span><br><span class="line"><span class="comment">//exchange：要发送到的交换机名称，对应图中exchangeName。</span></span><br><span class="line"><span class="comment">//key：路由键，对应图中RoutingKey。</span></span><br><span class="line"><span class="comment">//mandatory：消息发布的时候设置消息的 mandatory 属性用于设置消息在发送到交换器之后无法路由到队列的情况对消息的处理方式， 设置为 true 表示将消息返回到生产者，否则直接丢弃消息。直接false，不建议使用。</span></span><br><span class="line"><span class="comment">//immediate ：参数告诉服务器至少将该消息路由到一个队列中，否则将消息返回给生产者。immediate参数告诉服务器，如果该消息关联的队列上有消费者，则立刻投递:如果所有匹配的队列上都没有消费者，则直接将消息返还给生产者，不用将消息存入队列而等待消费者了。直接false，不建议使用。RabbitMQ 3.0版本开始去掉了对immediate参数的支持。</span></span><br><span class="line"><span class="comment">//msg：要发送的消息，msg对应一个Publishing结构，Publishing结构里面有很多参数，这里只强调几个参数，其他参数暂时列出，但不解释。</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(msg),</span><br><span class="line">&#125;)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h4><ul><li>声明一个直连交换机</li><li>声明队列</li><li>建立交换机和队列的绑定关系</li><li>消费者监听队列，消费消息</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_direct_exchange"</span></span><br><span class="line">routingKey := <span class="string">"test.direct"</span></span><br><span class="line">queueName := <span class="string">"test_direct_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">//name:交换器的名称。</span></span><br><span class="line"><span class="comment">//kind:也叫作type，表示交换器的类型。有四种常用类型：direct、fanout、topic、headers。</span></span><br><span class="line"><span class="comment">//durable:是否持久化，true表示是。持久化表示会把交换器的配置存盘，当RMQ Server重启后，会自动加载交换器。</span></span><br><span class="line"><span class="comment">//autoDelete:是否自动删除，true表示是。至少有一条绑定才可以触发自动删除，当所有绑定都与交换器解绑后，会自动删除此交换器。</span></span><br><span class="line"><span class="comment">//internal:是否为内部，true表示是。客户端无法直接发送msg到内部交换器，只有交换器可以发送msg到内部交换器。</span></span><br><span class="line"><span class="comment">//noWait:是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args:直接写nil，没研究过，不解释。</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"direct"</span>, <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//key：BandingKey，表示要绑定的键。</span></span><br><span class="line"><span class="comment">//exchange：交换器名称</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">//queue:队列名称。</span></span><br><span class="line"><span class="comment">//consumer:消费者标签，用于区分不同的消费者。</span></span><br><span class="line"><span class="comment">//autoAck:是否自动回复ACK，true为是，回复ACK表示告诉服务器我收到消息了。建议为false，手动回复，这样可控性强。</span></span><br><span class="line"><span class="comment">//exclusive:设置是否排他，排他表示当前队列只能给一个消费者使用。</span></span><br><span class="line"><span class="comment">//noLocal:如果为true，表示生产者和消费者不能是同一个connect。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">" [x] %s"</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明"><a href="#运行说明" class="headerlink" title="运行说明"></a>运行说明</h4><p>先启动消费端，刷新管控台，在Exchange目录下可以看到我们声明的exchange以及type</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-direct-exchange.jpg" alt="RabbitMQ-direct-exchange"></p><p>点击该exchange可以看到和队列的绑定关系</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-direct-exchange-bindings.jpg" alt="RabbitMQ-direct-exchange-bindings"></p><p>然后启动生产端，此时消费端控制台进行了打印，共消费了两条消息，说明监听的两个队列都接收到了消息。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Hello</span></span> World RabbitMQ Direct Exchange Message ...</span><br></pre></td></tr></table></figure><p>如果修改值为：test.direct111，此时在启动生产端，消费端就收不到消息了，这就是直连的方式。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>一个交换机可以有多个routing key。一个队列也可以被多个rouing key所绑定，一个routing也可以绑定多个队列。例如，当一个routing key绑定2个队列时，此时如果有生产者投递一个消息到该交换机的该routing key，此时2个队列都会存入这个消息。</p><h4 id="一个队列多个routing-key"><a href="#一个队列多个routing-key" class="headerlink" title="一个队列多个routing key"></a>一个队列多个routing key</h4><p>路由的算法很简单 —— 交换机将会对<code>binding key</code>和<code>routing key</code>进行精确匹配，从而确定消息该分发到哪个队列。</p><p>下图能够很好的描述这个场景：</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-direct-exchange-queue-mutile-routingKey.png" alt="RabbitMQ-direct-exchange-queue-mutile-routingKey"></p><p>在这个场景中，我们可以看到<code>direct</code>交换机 X和两个队列进行了绑定。第一个队列使用<code>orange</code>作为binding key，第二个队列有两个绑定，一个使用<code>black</code>作为binding key，另外一个使用<code>green</code>。</p><p>这样以来，当消息发布到routing key为<code>orange</code>的交换机时，就会被路由到队列Q1。routing key为<code>black</code>或者<code>green</code>的消息就会路由到Q2。其他的所有消息都将会被丢弃。</p><h4 id="一个routing-key多个队列"><a href="#一个routing-key多个队列" class="headerlink" title="一个routing key多个队列"></a>一个routing key多个队列</h4><p>也称之为多个绑定（Multiple bindings）</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-direct-exchange-queue-mutile-bindings.png" alt="RabbitMQ-direct-exchange-queue-mutile-routingKey"></p><p>多个队列使用相同的binding key是合法的。这个例子中，我们可以添加一个X和Q1之间的绑定，使用<code>black</code>为binding key。这样一来，<code>direct</code>交换机就和<code>fanout</code>交换机的行为一样，会将消息广播到所有匹配的队列。带有routing key为<code>black</code>的消息会同时发送到Q1和Q2。</p><h3 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h3><p>所有发送到 <code>Topic Exchange</code> 的消息被转发到所有关心RouteKey中指定Topic的Queue上<br> Exchange将RouteKey和某Topic进行模糊匹配，此时队列需要绑定一个Topic</p><p><strong>注意：可以使用通配符进行模糊匹配</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">符号 <span class="string">"#"</span> 匹配一个或多个词</span><br><span class="line">符号 <span class="string">"*"</span> 匹配不多不少一个词</span><br><span class="line">例如: <span class="string">"log.#"</span> 能够匹配到 <span class="string">"log.info.aa"</span></span><br><span class="line">  <span class="string">"log.*"</span> 只会匹配到 <span class="string">"log.erro"</span></span><br></pre></td></tr></table></figure><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p>看一下 <code>Topic Exchange</code> 的图解，意思是说我们有4个队列，它们的绑定关系分别是<code>usa.#</code>、<code>#.news</code>、<code>#.weather</code>、<code>europe.#</code></p><p>对于第一个队列而言，它只关系以<code>usa.</code>开头的相关消息。比如发送的第一条消息是<code>usa.news</code>，那么这条消息会同时匹配上队列1和队列2，所以两个队列都能接收到，其他消息也是同样的规则，这里就不继续展开说了。</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-Topic-Exchange.jpg" alt="RabbitMQ-Topic-Exchange"></p><h4 id="生产端-1"><a href="#生产端-1" class="headerlink" title="生产端"></a>生产端</h4><p>指定投递的Exchange和相应的RontingKey进行发送消息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key</span></span><br><span class="line">exchange := <span class="string">"test_topic_exchange"</span></span><br><span class="line">routingKey1 := <span class="string">"user.save"</span></span><br><span class="line">routingKey2 := <span class="string">"user.update"</span></span><br><span class="line">routingKey3 := <span class="string">"user.delete.abc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">//name:交换器的名称。</span></span><br><span class="line"><span class="comment">//kind:也叫作type，表示交换器的类型。有四种常用类型：direct、fanout、topic、headers。</span></span><br><span class="line"><span class="comment">//durable:是否持久化，true表示是。持久化表示会把交换器的配置存盘，当RMQ Server重启后，会自动加载交换器。</span></span><br><span class="line"><span class="comment">//autoDelete:是否自动删除，true表示是。至少有一条绑定才可以触发自动删除，当所有绑定都与交换器解绑后，会自动删除此交换器。</span></span><br><span class="line"><span class="comment">//internal:是否为内部，true表示是。客户端无法直接发送msg到内部交换器，只有交换器可以发送msg到内部交换器。</span></span><br><span class="line"><span class="comment">//noWait:是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args:直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，在生产者里声不声明(创建)交换机都可以。这里声明，是为了防止消费者没有启动或者这个交换机原先不存在，导致消息投递丢失。</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line">msg := <span class="string">"Hello World RabbitMQ Topic Exchange Message ... "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 发送消息</span></span><br><span class="line"><span class="comment">//exchange：要发送到的交换机名称，对应图中exchangeName。</span></span><br><span class="line"><span class="comment">//key：路由键，对应图中RoutingKey。</span></span><br><span class="line"><span class="comment">//mandatory：消息发布的时候设置消息的 mandatory 属性用于设置消息在发送到交换器之后无法路由到队列的情况对消息的处理方式， 设置为 true 表示将消息返回到生产者，否则直接丢弃消息。直接false，不建议使用。</span></span><br><span class="line"><span class="comment">//immediate ：参数告诉服务器至少将该消息路由到一个队列中，否则将消息返回给生产者。immediate参数告诉服务器，如果该消息关联的队列上有消费者，则立刻投递:如果所有匹配的队列上都没有消费者，则直接将消息返还给生产者，不用将消息存入队列而等待消费者了。直接false，不建议使用。RabbitMQ 3.0版本开始去掉了对immediate参数的支持。</span></span><br><span class="line"><span class="comment">//msg：要发送的消息，msg对应一个Publishing结构，Publishing结构里面有很多参数，这里只强调几个参数，其他参数暂时列出，但不解释。</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,    <span class="comment">// exchange</span></span><br><span class="line">routingKey1, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(msg),</span><br><span class="line">&#125;)</span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,    <span class="comment">// exchange</span></span><br><span class="line">routingKey2, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(msg),</span><br><span class="line">&#125;)</span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,    <span class="comment">// exchange</span></span><br><span class="line">routingKey3, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(msg),</span><br><span class="line">&#125;)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端-1"><a href="#消费端-1" class="headerlink" title="消费端"></a>消费端</h4><p>声明一个<code>Topic Exchange</code>，声明队列，建立交换机和队列的绑定关系</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_topic_exchange"</span></span><br><span class="line">routingKey := <span class="string">"user.#"</span></span><br><span class="line"><span class="comment">//routingKey := "user.*"</span></span><br><span class="line">queueName := <span class="string">"test_topic_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">//name:交换器的名称。</span></span><br><span class="line"><span class="comment">//kind:也叫作type，表示交换器的类型。有四种常用类型：direct、fanout、topic、headers。</span></span><br><span class="line"><span class="comment">//durable:是否持久化，true表示是。持久化表示会把交换器的配置存盘，当RMQ Server重启后，会自动加载交换器。</span></span><br><span class="line"><span class="comment">//autoDelete:是否自动删除，true表示是。至少有一条绑定才可以触发自动删除，当所有绑定都与交换器解绑后，会自动删除此交换器。</span></span><br><span class="line"><span class="comment">//internal:是否为内部，true表示是。客户端无法直接发送msg到内部交换器，只有交换器可以发送msg到内部交换器。</span></span><br><span class="line"><span class="comment">//noWait:是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args:直接写nil，没研究过，不解释。</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"topic"</span>,  <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//key：BandingKey，表示要绑定的键。</span></span><br><span class="line"><span class="comment">//exchange：交换器名称</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">//queue:队列名称。</span></span><br><span class="line"><span class="comment">//consumer:消费者标签，用于区分不同的消费者。</span></span><br><span class="line"><span class="comment">//autoAck:是否自动回复ACK，true为是，回复ACK表示告诉服务器我收到消息了。建议为false，手动回复，这样可控性强。</span></span><br><span class="line"><span class="comment">//exclusive:设置是否排他，排他表示当前队列只能给一个消费者使用。</span></span><br><span class="line"><span class="comment">//noLocal:如果为true，表示生产者和消费者不能是同一个connect。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">" [x] %s"</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行说明-1"><a href="#运行说明-1" class="headerlink" title="运行说明"></a>运行说明</h4><p>先启动消费端，同样可以在管控台可以看到我们新声明的exchange以及它的绑定队列，这里不再细说。然后启动生产端，此时消费端控制台进行了打印，共消费了三条消息，说明三条消息都和队列指定的Topic匹配上了，因为使用的是 <code>#</code> 匹配</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Hello</span></span> World RabbitMQ Topic Exchange Message ... </span><br><span class="line"><span class="function"><span class="title">Hello</span></span> World RabbitMQ Topic Exchange Message ... </span><br><span class="line"><span class="function"><span class="title">Hello</span></span> World RabbitMQ Topic Exchange Message ...</span><br></pre></td></tr></table></figure><p>将消费端指定的RoutingKey进行修改：<code>routingKey = &quot;user.*&quot;;</code><br>然后重新启动消费端，注意此时该队列绑定了两个RoutingKey，那么生产者无论匹配到哪个都可以将消息投递到该队列中。我们在管控台将原来的路由规则进行解绑，如图所示，点击<code>Unbind</code>按钮。</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-Topic-Exchange-unbind.jpg" alt="RabbitMQ-Topic-Exchange-unbind"></p><p>再次启动生产端，此时消费端控制台打印了两条消息，说明最后一条消息：<code>user.delete.abc</code>没有匹配上，因为使用的是 <code>*</code> 匹配，这就是 <code>Topic Exchange</code> 的路由方式。</p><h3 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h3><ul><li>不处理路由键，只需要简单的将队列绑定到交换机上</li><li>发送到交换机的消息都会被转发到与该交换机绑定的所有队列上</li><li>Fanout交换机转发消息是最快的(性能最好)</li></ul><p>来看一下 <code>Fanout Exchange</code> 的图解，意思就是消息不走任何的路由规则，只有队列和交换机有绑定关系就能收到消息</p><p><img src="/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-Fanout-Exchange.jpg" alt="RabbitMQ-Fanout-Exchange"></p><h4 id="生产端-2"><a href="#生产端-2" class="headerlink" title="生产端"></a>生产端</h4><p>不设置路由键直接发送消息到<code>Fanout Exchange</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key</span></span><br><span class="line">exchange := <span class="string">"test_fanout_exchange"</span></span><br><span class="line">routingKey := <span class="string">"asdad"</span> <span class="comment">// 随便写的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">//name:交换器的名称。</span></span><br><span class="line"><span class="comment">//kind:也叫作type，表示交换器的类型。有四种常用类型：direct、fanout、topic、headers。</span></span><br><span class="line"><span class="comment">//durable:是否持久化，true表示是。持久化表示会把交换器的配置存盘，当RMQ Server重启后，会自动加载交换器。</span></span><br><span class="line"><span class="comment">//autoDelete:是否自动删除，true表示是。至少有一条绑定才可以触发自动删除，当所有绑定都与交换器解绑后，会自动删除此交换器。</span></span><br><span class="line"><span class="comment">//internal:是否为内部，true表示是。客户端无法直接发送msg到内部交换器，只有交换器可以发送msg到内部交换器。</span></span><br><span class="line"><span class="comment">//noWait:是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args:直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，在生产者里声不声明(创建)交换机都可以。这里声明，是为了防止消费者没有启动或者这个交换机原先不存在，导致消息投递丢失。</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"fanout"</span>, <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line">msg := <span class="string">"Hello World RabbitMQ Fanout Exchange Message ... "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 发送消息</span></span><br><span class="line"><span class="comment">//exchange：要发送到的交换机名称，对应图中exchangeName。</span></span><br><span class="line"><span class="comment">//key：路由键，对应图中RoutingKey。</span></span><br><span class="line"><span class="comment">//mandatory：消息发布的时候设置消息的 mandatory 属性用于设置消息在发送到交换器之后无法路由到队列的情况对消息的处理方式， 设置为 true 表示将消息返回到生产者，否则直接丢弃消息。直接false，不建议使用。</span></span><br><span class="line"><span class="comment">//immediate ：参数告诉服务器至少将该消息路由到一个队列中，否则将消息返回给生产者。immediate参数告诉服务器，如果该消息关联的队列上有消费者，则立刻投递:如果所有匹配的队列上都没有消费者，则直接将消息返还给生产者，不用将消息存入队列而等待消费者了。直接false，不建议使用。RabbitMQ 3.0版本开始去掉了对immediate参数的支持。</span></span><br><span class="line"><span class="comment">//msg：要发送的消息，msg对应一个Publishing结构，Publishing结构里面有很多参数，这里只强调几个参数，其他参数暂时列出，但不解释。</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,      <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(msg),</span><br><span class="line">&#125;)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费端-2"><a href="#消费端-2" class="headerlink" title="消费端"></a>消费端</h4><p>声明一个<code>Fanout Exchange</code>，声明队列，建立交换机和队列的绑定关系，绑定关系不使用RoutingKey</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明exchange,routing key,queue name</span></span><br><span class="line">exchange := <span class="string">"test_fanout_exchange"</span></span><br><span class="line">routingKey := <span class="string">""</span> <span class="comment">//不需要设置routing key</span></span><br><span class="line">queueName := <span class="string">"test_fanout_queue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 声明（创建）一个交换机</span></span><br><span class="line"><span class="comment">//name:交换器的名称。</span></span><br><span class="line"><span class="comment">//kind:也叫作type，表示交换器的类型。有四种常用类型：direct、fanout、topic、headers。</span></span><br><span class="line"><span class="comment">//durable:是否持久化，true表示是。持久化表示会把交换器的配置存盘，当RMQ Server重启后，会自动加载交换器。</span></span><br><span class="line"><span class="comment">//autoDelete:是否自动删除，true表示是。至少有一条绑定才可以触发自动删除，当所有绑定都与交换器解绑后，会自动删除此交换器。</span></span><br><span class="line"><span class="comment">//internal:是否为内部，true表示是。客户端无法直接发送msg到内部交换器，只有交换器可以发送msg到内部交换器。</span></span><br><span class="line"><span class="comment">//noWait:是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args:直接写nil，没研究过，不解释。</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">exchange, <span class="comment">// name</span></span><br><span class="line"><span class="string">"fanout"</span>, <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">queueName, <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when usused</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 队列绑定</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//key：BandingKey，表示要绑定的键。</span></span><br><span class="line"><span class="comment">//exchange：交换器名称</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name,     <span class="comment">// queue name</span></span><br><span class="line">routingKey, <span class="comment">// routing key</span></span><br><span class="line">exchange,   <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">//queue:队列名称。</span></span><br><span class="line"><span class="comment">//consumer:消费者标签，用于区分不同的消费者。</span></span><br><span class="line"><span class="comment">//autoAck:是否自动回复ACK，true为是，回复ACK表示告诉服务器我收到消息了。建议为false，手动回复，这样可控性强。</span></span><br><span class="line"><span class="comment">//exclusive:设置是否排他，排他表示当前队列只能给一个消费者使用。</span></span><br><span class="line"><span class="comment">//noLocal:如果为true，表示生产者和消费者不能是同一个connect。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">" [x] %s"</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动消费端，然后启动生产端，消息被成功消费，这种就是<code>Fanout Exchange</code>，它不走任何的路由规则，直接将消息路由到所有与它绑定的队列。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Hello</span></span> World RabbitMQ Fanout Exchange Message ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;交换机详解&quot;&gt;&lt;a href=&quot;#交换机详解&quot; class=&quot;headerlink&quot; title=&quot;交换机详解&quot;&gt;&lt;/a&gt;交换机详解&lt;/h2&gt;&lt;p&gt;Exchange：交换机，接收消息，并根据路由键转发消息到绑定的队列&lt;br&gt;如图为官网提供的模型，蓝色框表示&lt;code&gt;Send Message&lt;/code&gt;，Client端把消息投递到Exchange上，通过RoutingKey路由关系将消息路由到指定的队列，绿色框代表&lt;code&gt;Receive Message&lt;/code&gt;，Client端和队列建立监听，然后去接收消息。红色框代表&lt;code&gt;RabbitMQ Server&lt;/code&gt;，黄色框表示&lt;code&gt;RoutingKey&lt;/code&gt;，即Exchange和Queue需要建立绑定关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/detailed-introduction-to-the-rabbitmq-switch/RabbitMQ-Exchange原理图.jpg&quot; alt=&quot;RabbitMQ-Exchange原理图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="消息队列" scheme="https://www.guaosi.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.guaosi.com/tags/RabbitMQ/"/>
    
      <category term="中间件" scheme="https://www.guaosi.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>入门RabbitMQ之核心概念(Golang演示)</title>
    <link href="https://www.guaosi.com/2020/01/28/core-concepts-of-rabbitmq-with-golang/"/>
    <id>https://www.guaosi.com/2020/01/28/core-concepts-of-rabbitmq-with-golang/</id>
    <published>2020-01-28T09:31:55.000Z</published>
    <updated>2021-12-05T08:13:24.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP协议的。<br>官网：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><h3 id="哪些大厂在用，为什么？"><a href="#哪些大厂在用，为什么？" class="headerlink" title="哪些大厂在用，为什么？"></a>哪些大厂在用，为什么？</h3><p>国内主要有滴滴、美团、头条、去哪儿、艺龙等互联网大厂都在使用RabblitMQ，主要原因如下：</p><ul><li>开源、性能优秀，稳定性保障</li><li>提供可靠性消息投递模式(confirm)、返回模式(return)</li><li>与SpringAMQP完美的整合、API丰富</li><li>集群模式丰富，表达式配置，HA模式(高可用)，镜像队列模型</li><li>保证数据不丢失的前提做到高可靠性、可用性</li></ul><a id="more"></a><h3 id="RabbitMQ高性能的原因"><a href="#RabbitMQ高性能的原因" class="headerlink" title="RabbitMQ高性能的原因"></a>RabbitMQ高性能的原因</h3><p>最主要的原因就是因为RabbitMQ使用的开发语言是Erlang语言。Erlang语言最初在于交换机领域的架构模式，这样使得RabbitMQ在Broker之间进行数据交互的性能是非常优秀的。</p><p>RabbitMQ的作者在开发之前使用Erlang语言做了一个网络交换机的小程序，然后他发现Erlang语言有一个非常好的特点：<strong>Erlang有着和原生Socket一样的延迟。</strong></p><p>基于这个特点，我们就有充分选择RabbitMQ的理由，因为在选择MQ的时候，有一个非常重要的考量指标，就是消息发送到MQ的延迟以及响应速度如何。任何一个架构的选型者或者设计者都会考虑到这一点。就是说这个MQ延迟怎么样，吞吐量怎么样，性能如何。</p><h3 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h3><p>AMQP全称: <code>Advanced Message Queuing Protocol</code>，即高级消息队列协议。是具有现代特征的二进制协议。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><h4 id="AMQP协议模型"><a href="#AMQP协议模型" class="headerlink" title="AMQP协议模型"></a>AMQP协议模型</h4><p><code>Publisher application</code>就是生产者应用服务，它把生产的消息发送到<code>Server</code>端，这个Server可以认为是RabbitMQ节点，消息首先会经过指定的<code>Virtual host</code>(虚拟主机)，然后到达指定的<code>Exchange</code>(交换机)。</p><p><code>Exchange</code>和<code>Message Queue</code>(消息队列)是有一个绑定关系的，<code>Exchange</code>会根据一定的规则转发消息到绑定的队列上。</p><p><code>Consumer application</code>就是消费者应用服务，它只需要去监听<code>Message Queue</code>(消息队列)，有消息就取出来消费就好了。</p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/AMQP-协议模型.jpg" alt="AMQP协议模型"></p><h4 id="AMQP核心概念"><a href="#AMQP核心概念" class="headerlink" title="AMQP核心概念"></a>AMQP核心概念</h4><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><p>又称Broker，接受客户端的连接，实现AMQP实体服务</p><h5 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h5><p>连接，应用程序与Broker的网络连接</p><h5 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h5><p>网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务。</p><h5 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h5><p>消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body则就是消息体内容。</p><h5 id="Virtual-host"><a href="#Virtual-host" class="headerlink" title="Virtual host"></a>Virtual host</h5><p>虚拟主机(虚拟地址)，用于迸行逻辑隔离，最上层的消息路由。一个Virtual Host里面可以有若干个Exchange和Queue，同一个VirtualHost里面不能有相同名称的Exchange或Queue</p><h5 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h5><p>交换机，接收消息，根据路由键转发消息到绑定的队列</p><h5 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h5><p>Exchange和Queue之间的虚拟连接，binding中可以包含routing key</p><h5 id="Routing-key"><a href="#Routing-key" class="headerlink" title="Routing key"></a>Routing key</h5><p>一个路由规则，虚拟机可用它来确定如何路由一个特定消息</p><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h5><p>也称为Message Queue，消息队列，保存消息并将它们转发给消费者</p><h3 id="RabbitMQ整体架构"><a href="#RabbitMQ整体架构" class="headerlink" title="RabbitMQ整体架构"></a>RabbitMQ整体架构</h3><p>左边的P代表Producer，消息生产者，右边的C代表Consumer，消息消费者。中间就是我们的RabbitMQ节点。生产者将消息投递到了X即交换机上，然后交换机把消息传递到了红色部分即消息队列。</p><p>生产者只需要关注将消息传递到指定的Exchange即可，而消费者也只需要监听指定的队列就可以了。Exchange会通过路由规则将消息路由到指定的一个或多个队列上供消费者进行消费。</p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-整体架构图.jpg" alt="RabbitMQ整体架构图"></p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-消息流转.jpg" alt="RabbitMQ消息流转"></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="RPM安装"><a href="#RPM安装" class="headerlink" title="RPM安装"></a>RPM安装</h3><h4 id="下载必要的安装包"><a href="#下载必要的安装包" class="headerlink" title="下载必要的安装包"></a>下载必要的安装包</h4><p>官网地址：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a><br> github地址：<a href="https://github.com/rabbitmq/rabbitmq-server/releases" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-server/releases</a><br> 初学建议采用RPM包安装方式，需要下载三个安装包，这里直接给出下载地址<br> rabbitmq下载地址：<a href="http://www.rabbitmq.com/releases/rabbitmq-server/" target="_blank" rel="noopener">http://www.rabbitmq.com/releases/rabbitmq-server/</a><br> erlang下载地址：<a href="http://www.rabbitmq.com/releases/erlang/" target="_blank" rel="noopener">http://www.rabbitmq.com/releases/erlang/</a><br> socat下载地址：<a href="http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm" target="_blank" rel="noopener">http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux下直接执行命令下载</span></span><br><span class="line">wget www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class="line">wget http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line">wget www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装基础依赖</span></span><br><span class="line">yum -y install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz</span><br><span class="line"><span class="comment"># 安装rpm包，一定要按顺序安装</span></span><br><span class="line">rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class="line">rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line">rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</span><br></pre></td></tr></table></figure><p>这是rabbitmq的核心配置文件，在这里可以查看到rabbitmq默认监听的端口号是5672。找到<code>loopback_users</code>的配置项，去除<code>guest</code>的尖括号和双引号，然后保存退出。</p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-修改核心配置文件.png" alt="RabbitMQ修改核心配置文件"></p><h4 id="RabbitMQ命令"><a href="#RabbitMQ命令" class="headerlink" title="RabbitMQ命令"></a>RabbitMQ命令</h4><p>服务的启动：<code>rabbitmq-server start &amp;</code><br>服务的停止：<code>rabbitmqctl stop</code><br>查看进程：<code>lsof -i:5672</code><br>管理插件：<code>rabbitmq-plugins enable rabbitmq-management</code></p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-查询服务启动情况.png" alt="RabbitMQ查询服务启动情况"></p><h4 id="RabbitMQ管控台"><a href="#RabbitMQ管控台" class="headerlink" title="RabbitMQ管控台"></a>RabbitMQ管控台</h4><p>执行命令 <code>rabbitmq-plugins enable rabbitmq_management</code> 就可以启用管控台。<br>默认启用端口是15672，通过ip+端口进行访问如：<a href="http://127.0.0.1:15672/" target="_blank" rel="noopener">http://127.0.0.1:15672/</a></p><p>最好先关闭下iptables规则：<code>iptables -F &amp;&amp; iptables -t nat -F</code></p><p>访问成功后需要输入用户名和密码进行登录，统一输入<code>guest</code>即可。登录成功后界面如图所示</p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-服务管控台.png" alt="RabbitMQ服务管控台"></p><h3 id="Docker-compose安装"><a href="#Docker-compose安装" class="headerlink" title="Docker-compose安装"></a>Docker-compose安装</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment">#容器名称</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="comment">#镜像名称</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">rabbitmq:management-alpine</span></span><br><span class="line">    <span class="comment">#总是重启后启动</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">"no"</span></span><br><span class="line">    <span class="comment">#端口映射</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">    <span class="comment">#挂载</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./rabbit:/var/lib/rabbitmq</span></span><br><span class="line">    <span class="comment">#环境变量</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_USER=guest</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_PASS=guest</span></span><br></pre></td></tr></table></figure><h2 id="常用命令行指令"><a href="#常用命令行指令" class="headerlink" title="常用命令行指令"></a>常用命令行指令</h2><h3 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h3><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭应用</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点状态</span></span><br><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">rabbitmqctl add_user username password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有用户</span></span><br><span class="line">rabbitmqctl list_users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">rabbitmqctl delete_user username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除用户权限</span></span><br><span class="line">rabbitmqctl clear_permissions -p vhostpath username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出用户权限</span></span><br><span class="line">rabbitmqctl list_user_permissions username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">rabbitmqctl change_password username newpassword</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户权限</span></span><br><span class="line">rabbitmqctl set_permissions -p vhostpath username <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟主机</span></span><br><span class="line">rabbitmqctl add_vhost vhostpath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有虚拟主机</span></span><br><span class="line">rabbitmqctl list_vhosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出虚拟主机上所有权限</span></span><br><span class="line">rabbitmqctl list_permissions -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟主机</span></span><br><span class="line">rabbitmqctl delete_vhost vhostpath</span><br></pre></td></tr></table></figure><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有交换信息</span></span><br><span class="line">rabbitmqctl list_queues</span><br></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有队列信息</span></span><br><span class="line">rabbitmqctl list_queues</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空队列里的信息</span></span><br><span class="line">rabbitmqctl -p vhostpath purge_queue blue</span><br></pre></td></tr></table></figure><h3 id="高级指令"><a href="#高级指令" class="headerlink" title="高级指令"></a>高级指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除所有数据，要在rabbitmqctl stop_app之后使用</span></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组成集群命令</span></span><br><span class="line">rabbitmqctl join_cluster &lt;clusternode&gt; [--ram]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改集群节点的存储形式</span></span><br><span class="line">rabbitmqctl change_cluster_node_type disc|ram</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忘记节点(摘除节点)</span></span><br><span class="line">rabbitmqctl forget_cluster_node [--offline]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改节点名称</span></span><br><span class="line">rabbitmqctl rename_cluster_node oldnode1 newnode1 [oldnode2] [newnode2 ...]</span><br></pre></td></tr></table></figure><h2 id="急速入门"><a href="#急速入门" class="headerlink" title="急速入门"></a>急速入门</h2><p>我们来实现一个最简单的消息生产与消费案例，构建生产者和消费者模型。也就是说生产者发送消息，投递到RabbitMQ中，然后消费者去监听队列，获取数据进行消费。</p><h3 id="涉及的相关对象或者概念"><a href="#涉及的相关对象或者概念" class="headerlink" title="涉及的相关对象或者概念"></a>涉及的相关对象或者概念</h3><ul><li>Connection：一个连接</li><li>Channel：数据通信信道，可发送和接收消息</li><li>Queue：具体的消息存储队列</li><li>Producer &amp; Consumer：生产和消费者</li></ul><h3 id="生产者模型构建"><a href="#生产者模型构建" class="headerlink" title="生产者模型构建"></a>生产者模型构建</h3><ol><li>创建连接Connection</li><li>通过连接创建频道Channel</li><li>声明一个队列Queue</li><li>创建一个生产者Producer</li><li>获取消息</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，在生产者里声不声明(创建)队列都可以。这里声明，是为了防止消费者没有启动或者这个队列原先不存在，导致消息投递丢失。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">"test001"</span>, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line">body := <span class="string">"Hello World!"</span></span><br><span class="line"><span class="comment">// 4. 发送消息</span></span><br><span class="line"><span class="comment">//exchange：要发送到的交换机名称，对应图中exchangeName。</span></span><br><span class="line"><span class="comment">//key：路由键，对应图中RoutingKey。</span></span><br><span class="line"><span class="comment">//mandatory：消息发布的时候设置消息的 mandatory 属性用于设置消息在发送到交换器之后无法路由到队列的情况对消息的处理方式， 设置为 true 表示将消息返回到生产者，否则直接丢弃消息。直接false，不建议使用。</span></span><br><span class="line"><span class="comment">//immediate ：参数告诉服务器至少将该消息路由到一个队列中，否则将消息返回给生产者。immediate参数告诉服务器，如果该消息关联的队列上有消费者，则立刻投递:如果所有匹配的队列上都没有消费者，则直接将消息返还给生产者，不用将消息存入队列而等待消费者了。直接false，不建议使用。RabbitMQ 3.0版本开始去掉了对immediate参数的支持。</span></span><br><span class="line"><span class="comment">//msg：要发送的消息，msg对应一个Publishing结构，Publishing结构里面有很多参数，这里只强调几个参数，其他参数暂时列出，但不解释。</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line"><span class="string">""</span>,     <span class="comment">// exchange</span></span><br><span class="line">q.Name, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者模型构建"><a href="#消费者模型构建" class="headerlink" title="消费者模型构建"></a>消费者模型构建</h3><ol><li>创建连接Connection</li><li>通过连接创建频道Channel</li><li>声明一个队列Queue</li><li>创建一个消费者Consumer</li><li>获取消息</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">"test001"</span>, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">//queue:队列名称。</span></span><br><span class="line"><span class="comment">//consumer:消费者标签，用于区分不同的消费者。</span></span><br><span class="line"><span class="comment">//autoAck:是否自动回复ACK，true为是，回复ACK表示告诉服务器我收到消息了。建议为false，手动回复，这样可控性强。</span></span><br><span class="line"><span class="comment">//exclusive:设置是否排他，排他表示当前队列只能给一个消费者使用。</span></span><br><span class="line"><span class="comment">//noLocal:如果为true，表示生产者和消费者不能是同一个connect。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意下返回值：返回一个&lt;- chan Delivery类型，遍历返回值，有消息则往下走， 没有则阻塞。</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto-ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">"Received a message: %s"</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>需要先声明创建队列才能投放生产消息以及消费消息（否则消息会丢失）。此时队列已经创建好了，就可以先启动生产者再启动消费者，同样可以完成消费。</p><h3 id="Default-Exchange"><a href="#Default-Exchange" class="headerlink" title="Default Exchange"></a>Default Exchange</h3><p>这里有个问题就是在生产者投递消息时需要指定<code>exchange</code>，但是我们指定的是空，为什么消息可以被正确投递到队列<code>test001</code>中呢。<br>这是因为如果生产者在投递消息时不指定<code>exchange</code>，那么会使用rabbitmq默认的exchange，可以通过管控台看到第一个就是，其他的都是rabbitmq内部的交换机。</p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-默认Exchange.jpg" alt="RabbitMQ默认Exchange"></p><p>这个<code>AMPQ default</code>交换机的路由规则是按照指定的<code>routingKey</code>去MQ中查找是否有相同名称的队列，如果有就将消息路由到该队列中，如果没有消息就发送失败。</p><h2 id="绑定、队列、消息、虚拟主机"><a href="#绑定、队列、消息、虚拟主机" class="headerlink" title="绑定、队列、消息、虚拟主机"></a>绑定、队列、消息、虚拟主机</h2><h3 id="Binding-绑定"><a href="#Binding-绑定" class="headerlink" title="Binding - 绑定"></a>Binding - 绑定</h3><ul><li><p>Exchange和Exchange、Queue之间的连接关系</p><p>两个交换机之间也能建立连接关系，但是这么做的话调用节点就会长一点，比如消息发送到第一个Exchange，然后路由到第二个Exchange，然后通过第二个Exchange再发送到绑定的队列。</p></li><li><p>Binding中可以包含RoutingKey或者参数</p></li></ul><h3 id="Queue-消息队列"><a href="#Queue-消息队列" class="headerlink" title="Queue - 消息队列"></a>Queue - 消息队列</h3><ul><li>消息队列，实际存储消息数据</li><li>Durable属性：是否持久化，true：是，false：否</li><li>autoDelete属性：如true，代表当最后一个监听被移除之后，该Queue会自动被删除</li></ul><h3 id="Message-消息"><a href="#Message-消息" class="headerlink" title="Message - 消息"></a>Message - 消息</h3><ul><li>服务器和应用程序之间传送的数据</li><li>本质上就是一段数据，由<code>Publishing</code>中的(Headers,Properties,Body)结构体组成</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Publishing <span class="keyword">struct</span> &#123;</span><br><span class="line">        Headers Table <span class="comment">//自定义头部，是一个map[string]interface&#123;&#125;</span></span><br><span class="line">        <span class="comment">// Properties</span></span><br><span class="line">        ContentType     <span class="keyword">string</span> <span class="comment">//消息的类型，通常为“text/plain”</span></span><br><span class="line">        ContentEncoding <span class="keyword">string</span> <span class="comment">//消息的编码，一般默认不用写</span></span><br><span class="line">        DeliveryMode    <span class="keyword">uint8</span>  <span class="comment">//消息是否持久化，2表示持久化，0或1表示非持久化。</span></span><br><span class="line">        Body []<span class="keyword">byte</span> <span class="comment">//消息主体</span></span><br><span class="line">        Priority        <span class="keyword">uint8</span> <span class="comment">//消息的优先级 0 to 9</span></span><br><span class="line">        CorrelationId   <span class="keyword">string</span>    <span class="comment">// correlation identifier</span></span><br><span class="line">        ReplyTo         <span class="keyword">string</span>    <span class="comment">// address to to reply to (ex: RPC)</span></span><br><span class="line">        Expiration      <span class="keyword">string</span>    <span class="comment">// message expiration spec</span></span><br><span class="line">        MessageId       <span class="keyword">string</span>    <span class="comment">// message identifier</span></span><br><span class="line">        Timestamp       time.Time <span class="comment">// message timestamp</span></span><br><span class="line">        Type            <span class="keyword">string</span>    <span class="comment">// message type name</span></span><br><span class="line">        UserId          <span class="keyword">string</span>    <span class="comment">// creating user id - ex: "guest"</span></span><br><span class="line">        AppId           <span class="keyword">string</span>    <span class="comment">// creating application id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li><code>DeliveryMode:</code> 送达模式，可以设置为持久化或者非持久化</li><li><code>Headers:</code> 自定义属性，可以自定义一些属性设置到headers中</li><li><code>ContentType:</code> 消息内容格式</li><li><code>ContentEncoding:</code> 消息字符集</li><li><code>Priority:</code> 优先级，值0-9，值越大优先级越高</li><li><code>CorrelationId:</code> 通常作为消息唯一ID，在做一些ACK、消息路由、幂等会使用到它</li><li><code>ReplyTo:</code> 做重回队列时，可以指定消息失败了返回到哪个队列</li><li><code>Expiration:</code> 消息过期时间，超过该时间没有被消费消息就会消失</li><li><code>MessageId:</code> 消息ID</li><li>业务相关的属性：Timestamp(时间戳)、Type(类型)、UserId、AppId</li></ul><h4 id="Message演示"><a href="#Message演示" class="headerlink" title="Message演示"></a>Message演示</h4><h5 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h5><p>在发送消息时，设置一些消息的常用属性及自定义属性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 创建RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，在生产者里声不声明(创建)队列都可以。这里声明，是为了防止消费者没有启动或者这个队列原先不存在，导致消息投递丢失。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">"test001"</span>, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line">body := <span class="string">"Hello World!"</span></span><br><span class="line"><span class="comment">// 4. 发送消息</span></span><br><span class="line"><span class="comment">//exchange：要发送到的交换机名称，对应图中exchangeName。</span></span><br><span class="line"><span class="comment">//key：路由键，对应图中RoutingKey。</span></span><br><span class="line"><span class="comment">//mandatory：消息发布的时候设置消息的 mandatory 属性用于设置消息在发送到交换器之后无法路由到队列的情况对消息的处理方式， 设置为 true 表示将消息返回到生产者，否则直接丢弃消息。直接false，不建议使用。</span></span><br><span class="line"><span class="comment">//immediate ：参数告诉服务器至少将该消息路由到一个队列中，否则将消息返回给生产者。immediate参数告诉服务器，如果该消息关联的队列上有消费者，则立刻投递:如果所有匹配的队列上都没有消费者，则直接将消息返还给生产者，不用将消息存入队列而等待消费者了。直接false，不建议使用。RabbitMQ 3.0版本开始去掉了对immediate参数的支持。</span></span><br><span class="line"><span class="comment">//msg：要发送的消息，msg对应一个Publishing结构，Publishing结构里面有很多参数，这里只强调几个参数，其他参数暂时列出，但不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义headers属性</span></span><br><span class="line">headers := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"guaosi"</span>,</span><br><span class="line"><span class="string">"date"</span>: <span class="number">2020</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">err = ch.Publish(</span><br><span class="line"><span class="string">""</span>,     <span class="comment">// exchange</span></span><br><span class="line">q.Name, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType:     <span class="string">"text/plain"</span>,</span><br><span class="line">Body:            []<span class="keyword">byte</span>(body),</span><br><span class="line">Headers:         headers,</span><br><span class="line">DeliveryMode:    <span class="number">2</span>, <span class="comment">//消息持久化</span></span><br><span class="line">ContentEncoding: <span class="string">"UTF-8"</span>,</span><br><span class="line">Expiration:      <span class="string">"5000"</span>, <span class="comment">//5s过期</span></span><br><span class="line">&#125;)</span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h5><p>在消费端可以去获取到消息的自定义属性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在安装 rabbitmq 的服务器上操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 建立RabbitMQ连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明（创建）一个队列</span></span><br><span class="line"><span class="comment">//name：队列名称</span></span><br><span class="line"><span class="comment">//durable：是否持久化，true为是。持久化会把队列存盘，服务器重启后，不会丢失队列以及队列内的信息。（注：1、不丢失是相对的，如果宕机时有消息没来得及存盘，还是会丢失的。2、存盘影响性能。）</span></span><br><span class="line"><span class="comment">//autoDelete：是否自动删除，true为是。至少有一个消费者连接到队列时才可以触发。当所有消费者都断开时，队列会自动删除。</span></span><br><span class="line"><span class="comment">//exclusive：是否设置排他，true为是。如果设置为排他，则队列仅对首次声明他的连接可见，并在连接断开时自动删除。（注意，这里说的是连接不是信道，相同连接不同信道是可见的）。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">"test001"</span>, <span class="comment">// name</span></span><br><span class="line"><span class="literal">true</span>,      <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,     <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,       <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. RMQ Server主动把消息推给消费者</span></span><br><span class="line"><span class="comment">//queue:队列名称。</span></span><br><span class="line"><span class="comment">//consumer:消费者标签，用于区分不同的消费者。</span></span><br><span class="line"><span class="comment">//autoAck:是否自动回复ACK，true为是，回复ACK表示告诉服务器我收到消息了。建议为false，手动回复，这样可控性强。</span></span><br><span class="line"><span class="comment">//exclusive:设置是否排他，排他表示当前队列只能给一个消费者使用。</span></span><br><span class="line"><span class="comment">//noLocal:如果为true，表示生产者和消费者不能是同一个connect。</span></span><br><span class="line"><span class="comment">//nowait：是否非阻塞，true表示是。阻塞：表示创建交换器的请求发送后，阻塞等待RMQ Server返回信息。非阻塞：不会阻塞等待RMQ Server的返回信息，而RMQ Server也不会返回信息。（不推荐使用）</span></span><br><span class="line"><span class="comment">//args：直接写nil，没研究过，不解释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意下返回值：返回一个&lt;- chan Delivery类型，遍历返回值，有消息则往下走， 没有则阻塞。</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto-ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">"Consumer Received a message: %s"</span>, d.Body)</span><br><span class="line">log.Printf(<span class="string">"headers value: name:%s,date:%d"</span>, d.Headers[<span class="string">"name"</span>].(<span class="keyword">string</span>), d.Headers[<span class="string">"date"</span>].(<span class="keyword">int32</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行说明"><a href="#运行说明" class="headerlink" title="运行说明"></a>运行说明</h5><p>启动生产端，刷新管控台，查看队列<code>test001</code>已经有了5条消息，过10秒钟后再次刷新队列消息变成了0条，说明消息过期属性生效了。</p><p><img src="/assets/blogImg/core-concepts-of-rabbitmq/RabbitMQ-Expiration-Message.jpg" alt="RabbitMQ-Expiration-Message"></p><p>至于deliveryMode属性的验证，可以将消息的过期时间设置去掉，然后启动生产端，此时队列有了5条消息，关闭rabbitmq服务，重新启动查看管控台队列依然有5条消息，说明消息被成功持久化存储了。</p><p>此时启动消费端，5条消息被成功消费，并且打印了消息的自定义属性。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Consumer Received a <span class="string">message:</span> Hello World!</span><br><span class="line">headers <span class="string">value:</span> <span class="string">name:</span>guaosi,<span class="string">date:</span><span class="number">2020</span></span><br><span class="line"></span><br><span class="line">Consumer Received a <span class="string">message:</span> Hello World!</span><br><span class="line">headers <span class="string">value:</span> <span class="string">name:</span>guaosi,<span class="string">date:</span><span class="number">2020</span></span><br><span class="line"></span><br><span class="line">Consumer Received a <span class="string">message:</span> Hello World!</span><br><span class="line">headers <span class="string">value:</span> <span class="string">name:</span>guaosi,<span class="string">date:</span><span class="number">2020</span></span><br><span class="line"></span><br><span class="line">Consumer Received a <span class="string">message:</span> Hello World!</span><br><span class="line">headers <span class="string">value:</span> <span class="string">name:</span>guaosi,<span class="string">date:</span><span class="number">2020</span></span><br><span class="line"></span><br><span class="line">Consumer Received a <span class="string">message:</span> Hello World!</span><br><span class="line">headers <span class="string">value:</span> <span class="string">name:</span>guaosi,<span class="string">date:</span><span class="number">2020</span></span><br></pre></td></tr></table></figure><h3 id="Virtual-Host-虚拟主机"><a href="#Virtual-Host-虚拟主机" class="headerlink" title="Virtual Host - 虚拟主机"></a>Virtual Host - 虚拟主机</h3><ul><li>虚拟主机(虚拟地址)，用于迸行逻辑隔离，最上层的消息路由</li><li>一个<code>Virtual Host</code>里面可以有若干个Exchange和Queue</li><li>同一个<code>Virtual Host</code>里面不能有相同名称的Exchange或Queue</li></ul><p>Virtual host是一个逻辑的概念，主要用来划分具体的服务的，比如A服务可以把消息路由到 /a 的虚拟主机上，B服务可以把消息路由到 /b 虚拟主机上。<br>就类似于redis划分的16个DB，它也是一个逻辑的概念，比如给redis分配了16GB的内存，那对于DB0来说它可以将这些内存都占满，而不是说每个DB会被物理划分为1G内存。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP协议的。&lt;br&gt;官网：&lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.rabbitmq.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;哪些大厂在用，为什么？&quot;&gt;&lt;a href=&quot;#哪些大厂在用，为什么？&quot; class=&quot;headerlink&quot; title=&quot;哪些大厂在用，为什么？&quot;&gt;&lt;/a&gt;哪些大厂在用，为什么？&lt;/h3&gt;&lt;p&gt;国内主要有滴滴、美团、头条、去哪儿、艺龙等互联网大厂都在使用RabblitMQ，主要原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源、性能优秀，稳定性保障&lt;/li&gt;
&lt;li&gt;提供可靠性消息投递模式(confirm)、返回模式(return)&lt;/li&gt;
&lt;li&gt;与SpringAMQP完美的整合、API丰富&lt;/li&gt;
&lt;li&gt;集群模式丰富，表达式配置，HA模式(高可用)，镜像队列模型&lt;/li&gt;
&lt;li&gt;保证数据不丢失的前提做到高可靠性、可用性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="消息队列" scheme="https://www.guaosi.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.guaosi.com/tags/RabbitMQ/"/>
    
      <category term="中间件" scheme="https://www.guaosi.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>主流消息中间件介绍</title>
    <link href="https://www.guaosi.com/2020/01/28/introduction-to-mainstream-messaging-middleware/"/>
    <id>https://www.guaosi.com/2020/01/28/introduction-to-mainstream-messaging-middleware/</id>
    <published>2020-01-28T09:26:27.000Z</published>
    <updated>2021-12-05T08:13:24.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><p>ActiveMQ是Apache出品，最流行的，能力强劲的开源消息总线，并且它是一个完全支持JMS规范的消息中间件。其丰富的API、多种集群构建模式使得他成为业界老牌消息中间件，在中小型企业中应用广泛!</p><p>当然现在可能用的相对比较少了，因为ActiveMQ性能和其他的主流MQ相比是比较一般的，早期在传统行业为王的时代它是比较流行的，现如今对于一些高并发、大数据的应用场景随处可见，在MQ的选择上如果再使用ActiveMQ往往就比较力不从心了。</p><a id="more"></a><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>MQ衡量指标：服务性能、数据存储、集群架构<br> ActiveMQ它的性能不是特别的好，面对超大规模的并发时，就有可能出现各种各样的小问题，比如阻塞、消息堆积过多、产生一些延迟等等。</p><p>从数据存储来看ActiveMQ采用 <code>KahaDB</code> 这种存储方式作为默认的持久化方案。当然也可以选择使用高性能的Google的 <code>LevelDB</code> 这种基于内存的，或者说想要保证消息百分百可靠的话也可以选择一些关系型数据库如 <code>MySQL</code></p><p>ActiveMQ流行了这么多年，其API包括相关的组件以及集成都是非常的完善的。所以说如果不是特别大的并发场景下，ActiveMQ也是比较不错的选择。其集群架构模式也非常不错。</p><h3 id="集群架构模式"><a href="#集群架构模式" class="headerlink" title="集群架构模式"></a>集群架构模式</h3><p>ActiveMQ最简单的分为两种集群架构模式，一种是 <code>Master-Slave</code> 模式，即主备模式(左图)。它利用 <code>zookeeper</code> 进行两个节点之间的协调，也有可能是更多的节点，其中有一个是主节点，它是对外提供服务的，另外的节点启动但是不对外提供服务。当主节点挂掉时，利用 <code>zookeeper</code> 进行高可用的切换，把 <code>slave</code> 节点切换成主节点，继续对外提供服务。</p><p>还有一种集群模式是 <code>NetWork</code> 模式(右图)，它其实本质上就是两组主备模式的集成，然后中间用网关进行连接配置，就可以实现分布式的集群了。</p><p><img src="/assets/blogImg/introduction-to-mainstream-messaging-middleware/ActiveMQ-集群架构.jpg" alt="ActiveMQ集群架构"></p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka是LinkedIn开源的分布式发布订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制,不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。</p><h3 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h3><p>kafka最初设计时就是面向大数据方向的，主要用于日志收集，所以在使用kafka时，要注意业务是否允许出现消息重复、丢失、错误等问题，如果允许那使用kafka是性能最高的。它能够在廉价的服务器上也能支持单机每秒100k条数据以上的吞吐量。</p><p>kafka的高性能读写主要是借力于操作系统底层的提供的 <code>PageCache</code> 功能。而且kafka完全没有进行内存和磁盘的数据同步的烦恼，它仅仅使用内存的存储。只要你有足够的内存就能承载很大的数据。</p><h3 id="集群架构模式-1"><a href="#集群架构模式-1" class="headerlink" title="集群架构模式"></a>集群架构模式</h3><p>kafka的集群模式也依赖于 <code>zookeeper</code> ，让zookeeper进行节点的协调和管理。每个kafka节点之间可以进行 <code>replicate</code> (副本的复制)，对于某个节点的数据会依次同步到集群的其他节点上，这样只要部署方案合理，即使某个节点挂掉，其他节点的数据也依然存在。</p><p><img src="/assets/blogImg/introduction-to-mainstream-messaging-middleware/Kafka-集群架构.jpg" alt="Kafka集群架构"></p><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ是阿里开源的消息中间件，目前也已经孵化为Apache顶级项目，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。</p><h3 id="使用说明-2"><a href="#使用说明-2" class="headerlink" title="使用说明"></a>使用说明</h3><p>RocketMQ在早期2.X版本也是使用zookeeper做协调，在后续3.X版本中放弃了使用zookeeper，而是自行实现了一套 <code>Name Server</code> 去做集群之间的管理和协调工作。</p><p>RocketMQ的特点在于它能够保障消息的顺序性，提供了丰富的消息拉取和处理模式，支持订阅者进行水平扩展，实时消息订阅的机制，以及它能承载上亿级别的消息堆积能力。</p><p>它的集群架构也有很多种，比如 <code>Master-Slave</code> 模式，双Master模式、双主双从(2M2S)模式，多主多从模式。它的集群架构可选的方案是非常多的。而且RacketMQ刷盘策略也很多，比如说同步刷写、异步复制。它的存储方式借鉴了很多优秀的开源技术，比如zerocopy、linux的ext4文件系统等。</p><h3 id="集群模型"><a href="#集群模型" class="headerlink" title="集群模型"></a>集群模型</h3><p>左边和右边分别是生产者集群和消费者集群， <code>Name Server</code> 就是自行实现的用于替代zookeeper的程序。中间就是两主两从服务集群，可以实现主从的自动切换，数据之间也可以采用 <code>replicate</code> 机制。</p><p>当然这些优秀的机制在Apache RocketMQ项目里面其实是不提供的，比如还有解决分布式事务使用MQ进行解耦，为什么没有呢？因为阿里的RocketMQ商业版是收费的，需要购买相关的产品才可以使用到这些功能。所以这也是使用RocketMQ的一个痛点。</p><p><img src="/assets/blogImg/introduction-to-mainstream-messaging-middleware/RocketMQ-集群架构.jpg" alt="RocketMQ集群架构"></p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由(包括点对点和发布/订阅)、可靠性、安全。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p><h3 id="使用说明-3"><a href="#使用说明-3" class="headerlink" title="使用说明"></a>使用说明</h3><p>RabbitMQ它的性能虽然不及kafka，但是要比ActiveMQ高出很多，而且可以做一些性能优化。并其可靠性和安全性非常好，数据可以保证百分百不丢失。RabbitMQ集群可以构建很多组，实现异地双活架构。每一个节点存储方式可以采用内存(ram)或者磁盘(disk)，所以是非常灵活的。</p><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><p>图中显示的是三个RabbitMQ节点作为一组集群，当然也可以有很多组。节点之间呢采用 <code>Mirror Queue</code> (镜像队列)的方式，基于这种方式可以保证数据百分百不丢失。前端可以进行一个负载均衡，例如 <code>HA-proxy</code> 进行TCP级别的负载，配合 <code>keepAlived</code> 做一个高可用的配置。前端增加一个虚拟的VIP，通过访问VIP让请求路由到一个负载均衡组件，然后再往下路由到一个RabbitMQ节点。</p><p>这就是整个RabbitMQ的集群架构，它能够实现非常完善、非常高可用、并且性能也非常好，而且稳定性超强。它有各种各样的集群恢复的手段，比如节点挂点了、甚至是磁盘损坏了它也能去进行修复。这是RabbitMQ非常好的一个点。</p><p><img src="/assets/blogImg/introduction-to-mainstream-messaging-middleware/RabbitMQ-集群架构.jpg" alt="RabbitMQ集群架构"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ActiveMQ&quot;&gt;&lt;a href=&quot;#ActiveMQ&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ&quot;&gt;&lt;/a&gt;ActiveMQ&lt;/h2&gt;&lt;p&gt;ActiveMQ是Apache出品，最流行的，能力强劲的开源消息总线，并且它是一个完全支持JMS规范的消息中间件。其丰富的API、多种集群构建模式使得他成为业界老牌消息中间件，在中小型企业中应用广泛!&lt;/p&gt;
&lt;p&gt;当然现在可能用的相对比较少了，因为ActiveMQ性能和其他的主流MQ相比是比较一般的，早期在传统行业为王的时代它是比较流行的，现如今对于一些高并发、大数据的应用场景随处可见，在MQ的选择上如果再使用ActiveMQ往往就比较力不从心了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="消息队列" scheme="https://www.guaosi.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="中间件" scheme="https://www.guaosi.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="MQ" scheme="https://www.guaosi.com/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>KeepAlived原理与LVS案例</title>
    <link href="https://www.guaosi.com/2020/01/25/keepalived-principle-and-LVS-case/"/>
    <id>https://www.guaosi.com/2020/01/25/keepalived-principle-and-LVS-case/</id>
    <published>2020-01-25T14:19:58.000Z</published>
    <updated>2021-12-05T08:13:24.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VRRP原理"><a href="#VRRP原理" class="headerlink" title="VRRP原理"></a>VRRP原理</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>VRRP（Virtual Router Redundancy Protocol，虚拟路由器冗余协议）将可以承担网关功能的一组路由器加入到备份组中，形成一台虚拟路由器，这样主机的网关设置成虚拟网关，就能够实现冗余。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>VRRP将局域网内的一组路由器划分在一起，称为一个备份组。备份组由一个Master路由器和多个Backup路由器组成，功能上相当于一台虚拟路由器。</p><p>VRRP备份组具有以下特点：</p><ul><li><p>虚拟路由器具有IP地址，称为虚拟IP地址。局域网内的主机仅需要知道这个虚拟路由器的IP地址，并将其设置为缺省路由的下一跳地址。</p></li><li><p>网络内的主机通过这个虚拟路由器与外部网络进行通信。</p></li><li><p>备份组内的路由器根据优先级，选举出Master路由器，承担网关功能。其他路由器作为Backup路由器，当Master路由器发生故障时，取代Master继续履行网关职责，从而保证网络内的主机不间断地与外部网络进行通信。</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="/assets/blogImg/keepalived-principle-and-LVS-case/VRRP原理.jpg" alt="VRRP原理"></p><p>当PC想发送报文到外网时，需要先经过网关，若Master无法正常工作，此时VIP会主动漂浮到Backup。但是由于之前使用的是Master作为网关，此时各个客户端(PC)里arp缓存表里记录的是Master的Mac地址，此时依旧会将报文发往Master。</p><p>所以需要在客户端(PC)与网关之间引入一个软件，来使用VMAC。VMAC来自行进行选择真实可用的网关Mac。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>虚拟路由器 - 有一个Master和多个Backup组成</li><li>Master路由器 - 实际承载报文转发的节点，主节点</li><li>Backup路由器 - 主节点故障后转移节点，备用结点</li><li>虚拟IP地址 - 虚拟路由对外提供服务的IP地址</li><li>IP地址拥有者 - 真实提供服务的节点，通常为主节点</li><li>虚拟MAC地址 - 回应ARP请求时使用的虚拟MAC地址</li><li>优先级 - VRRP根据优先级确定主备节点角色</li></ul><h1 id="KeepAlived"><a href="#KeepAlived" class="headerlink" title="KeepAlived"></a>KeepAlived</h1><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><ul><li>服务器服务的故障转移</li><li>通常用于对负载均衡器做高可用</li></ul><blockquote><p>当Master故障时，会主动将VIP浮动到Backup上，此时Backup会发送广播包，通知所有客户端（gratuitous arp），更新此时VIP对应的Mac地址为Backup。</p></blockquote><blockquote><p>VIP作为子网卡漂浮在真实网卡上</p></blockquote><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/assets/blogImg/keepalived-principle-and-LVS-case/KeepAlived架构图.jpg" alt="KeepAlived架构图"></p><h2 id="核心概念-1"><a href="#核心概念-1" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>vrrp stack - vrrp协议的实现</li><li>ipvs wrapper - 为集群内的节点生成ipvs规则</li><li>checkers - 对集群内所有的RS做健康状态检测</li><li>控制组件 - 配置文件解析和加载</li></ul><blockquote><p>KeepAlived就是对VRRP协议的具体实现，并且最先开始是为了LVS的DS以及RS做的KeepAlived。KeepAlived放在DS上，它不仅仅可以检测DS集群上的健康状态，更可以直接检测该DS后的RS集群的健康状态，这样有故障的RS就不会被DS转发到。</p></blockquote><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><h3 id="高可用LVS"><a href="#高可用LVS" class="headerlink" title="高可用LVS"></a>高可用LVS</h3><ul><li>虚拟IP的转移</li><li>生成ipvs规则</li><li>RS健康状态检测</li></ul><h3 id="高可用其他服务"><a href="#高可用其他服务" class="headerlink" title="高可用其他服务"></a>高可用其他服务</h3><ul><li>虚拟IP的转移</li><li>编写脚本实现服务启动/停止</li><li>RS健康状态检测</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="集群配置前提-最佳实践"><a href="#集群配置前提-最佳实践" class="headerlink" title="集群配置前提(最佳实践)"></a>集群配置前提(最佳实践)</h3><ul><li>各节点时间同步</li><li>各主机可以基于/etc/hosts配置进行主机名解析后通信</li><li>各节点可以免密钥通信</li><li>确保iptables以及selinux关闭</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 永久关闭防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭SELinux</span></span><br><span class="line">setenforce <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看SELinux</span></span><br><span class="line">getenforce</span><br><span class="line"></span><br><span class="line"><span class="meta"># 安装KeepAlived</span></span><br><span class="line">yum install keepalived -y</span><br><span class="line"></span><br><span class="line"><span class="meta"># 编辑KeepAlived配置文件</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看KeepAlived日志</span></span><br><span class="line">tail -f /<span class="keyword">var</span>/log/messages</span><br><span class="line"></span><br><span class="line"><span class="meta"># 开启KeepAlived</span></span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure><h3 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived              </span><br><span class="line"></span><br><span class="line">global_defs &#123;                        <span class="comment">#全局定义部分</span></span><br><span class="line">   notification_email &#123;              <span class="comment">#设置警报邮箱</span></span><br><span class="line">     acassen@firewall.loc            <span class="comment">#邮箱</span></span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc      <span class="comment">#设置发件人地址</span></span><br><span class="line">   smtp_server 192.168.50.1        <span class="comment">#设置smtp server地址</span></span><br><span class="line">   smtp_connect_timeout<span class="number"> 30 </span>         <span class="comment">#设置smtp超时连接时间    以上参数可以不配置</span></span><br><span class="line">   router_id LVS_DEVEL               <span class="comment">#是Keepalived服务器的路由标识在一个局域网内，这个标识（router_id）是唯一的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;      <span class="comment">#VRRP实例定义区块名字是VI_1</span></span><br><span class="line">    state MASTER          <span class="comment">#表示当前实例VI_1的角色状态这个状态只能有MASTER和BACKUP两种状态，并且需要大写这些字符。MASTER为正式工作的状态，BACKUP为备用的状态</span></span><br><span class="line">    interface eth0       <span class="comment">#指定把VIP作为子网卡绑定到哪个真实网卡上</span></span><br><span class="line">    virtual_router_id<span class="number"> 51 </span><span class="comment">#虚拟路由ID标识,这个标识最好是一个数字,在一个keepalived.conf配置中是唯一的, MASTER和BACKUP配置中相同实例的virtual_router_id必须是一致的.</span></span><br><span class="line">    <span class="comment"># nopreempt # 是否开启恢复抢占，当写上这代码时开启抢占恢复模式，默认没有这代码</span></span><br><span class="line">    priority<span class="number"> 100 </span>               <span class="comment">#priority为优先级 越大越优先</span></span><br><span class="line">    advert_int<span class="number"> 1 </span>              <span class="comment">#为同步通知间隔。MASTER与BACKUP之间通信检查的时间间隔，单位为秒，默认为1.</span></span><br><span class="line">    authentication &#123;           <span class="comment">#authentication为权限认证配置不要改动,同一vrrp实例的MASTER与BACKUP使用相同的密码才能正常通信。</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;         <span class="comment">#设置虚拟IP地址</span></span><br><span class="line">        192.168.50.16         <span class="comment">#此格式ip a显示 ifconfig不显示</span></span><br><span class="line">        192.168.50.17/24 dev eth0 label eth0:1    <span class="comment">#绑定接口为eth0，别名为eth0：1</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">#至此为止以上为实现高可用配置,如只需使用高可用功能下边配置可删除</span></span><br><span class="line"><span class="comment">#以下为虚拟服务器定义部分</span></span><br><span class="line">virtual_server 192.168.50.16<span class="number"> 80 </span>&#123;      <span class="comment">#设置虚拟服务器,指定虚拟IP和端口</span></span><br><span class="line">    delay_loop<span class="number"> 6 </span>                          <span class="comment">#健康检查时间为6秒</span></span><br><span class="line">    lb_algo rr                               <span class="comment">#设置负载调度算法 rr算法</span></span><br><span class="line">    lb_kind NAT                            <span class="comment">#设置负载均衡机制 #有NAT,TUN和DR三种模式可选</span></span><br><span class="line">    nat_mask 255.255.255.0         <span class="comment">#非NAT模式注释掉此行  注释用!号</span></span><br><span class="line">    persistence_timeout<span class="number"> 50 </span>          <span class="comment">#连接保留时间,若50秒还有该用户的请求，则直接分配上一次分配的RS机器。50秒无响应则下一次该用户请求重新分配节点</span></span><br><span class="line">    protocol TCP                           <span class="comment">#指定转发协议为TCP </span></span><br><span class="line">    real_server 192.168.5.150<span class="number"> 80 </span>&#123;      <span class="comment">#RS节点1</span></span><br><span class="line">        weight<span class="number"> 1 </span>               <span class="comment">#权重</span></span><br><span class="line">        TCP_CHECK &#123;             <span class="comment">#节点健康检查</span></span><br><span class="line">        connect_timeout<span class="number"> 8 </span>      <span class="comment">#延迟超时时间</span></span><br><span class="line">        nb_get_retry<span class="number"> 3 </span>         <span class="comment">#重试次数</span></span><br><span class="line">        delay_before_retry<span class="number"> 3 </span>   <span class="comment">#延迟重试次数</span></span><br><span class="line">        connect_port<span class="number"> 80 </span>        <span class="comment">#利用80端口检查</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.50.149<span class="number"> 80 </span>&#123;      <span class="comment">#RS节点2</span></span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">        connect_timeout 8</span><br><span class="line">        nb_get_retry 3</span><br><span class="line">        delay_before_retry 3</span><br><span class="line">        connect_port<span class="number"> 80 </span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现虚拟IP转移"><a href="#实现虚拟IP转移" class="headerlink" title="实现虚拟IP转移"></a>实现虚拟IP转移</h3><h4 id="实验规划"><a href="#实验规划" class="headerlink" title="实验规划"></a>实验规划</h4><p>2台Linux，一主一备</p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">IP</th><th style="text-align:center">系统</th></tr></thead><tbody><tr><td style="text-align:center">node1(Master)</td><td style="text-align:center">192.168.184.30 vip:192.168.184.100</td><td style="text-align:center">CentOS 7</td></tr><tr><td style="text-align:center">node2(Backup)</td><td style="text-align:center">192.168.184.40 vip: 192.168.184.100</td><td style="text-align:center">CentOS 7</td></tr></tbody></table><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    guaosi@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from guaosi@vip.qq.com</span><br><span class="line">   smtp_server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id LVS_DEVEL            </span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;          </span><br><span class="line">    <span class="section">state</span> MASTER               </span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">55</span>      </span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    # nopreempt # 是否开启恢复抢占，当写上这代码时开启抢占恢复模式，默认没有这代码</span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">123456</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Backup"><a href="#Backup" class="headerlink" title="Backup"></a>Backup</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    guaosi@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from guaosi@vip.qq.com</span><br><span class="line">   smtp_server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id LVS_DEVEL            </span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VII_1 &#123;     # 与Master不相同         </span><br><span class="line">    <span class="section">state</span> BACKUP # 标志为备               </span><br><span class="line">    interface ens33 # 选择VIP浮动的真实网卡，与Master相同</span><br><span class="line">    virtual_router_id <span class="number">55</span>   # 与Master相同   </span><br><span class="line">    priority <span class="number">99</span> # 优先级，需比Master低         </span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">123456</span> # 与Master相同</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> # 与Master相同</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果先启动Backup上的KeepAlived时，此时Backup会先查找该局域网内是否有Master节点，如果没有，此时它会认为Master可能已经掉线。会将VIP漂浮在自己的真实网卡上作为子网卡，将自己提升为Master，并且通知局域网内所有客户端更新mac(gratuitous arp)。</p><p>当Master启动KeepAlived后，会通知Backup，此时Backup会自行将等级从Master下降为Backup，此时由Master作为Master节点，并且通知局域网内所有客户端更新mac(gratuitous arp)。如果不想Master上线后下降Backup从Master下降为Backup，在配置文件中添加<code>nopreempt</code>即可</p><h3 id="实现KeepAlived-LVS高可用"><a href="#实现KeepAlived-LVS高可用" class="headerlink" title="实现KeepAlived+LVS高可用"></a>实现KeepAlived+LVS高可用</h3><h4 id="实验规划-1"><a href="#实验规划-1" class="headerlink" title="实验规划"></a>实验规划</h4><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">IP</th><th style="text-align:center">系统</th></tr></thead><tbody><tr><td style="text-align:center">DS(Master)</td><td style="text-align:center">192.168.184.100(VIP)  192.168.184.30(DIP)</td><td style="text-align:center">CentOS 7</td></tr><tr><td style="text-align:center">DS(Backup)</td><td style="text-align:center">192.168.184.100(VIP)  192.168.184.40(DIP)</td><td style="text-align:center">CentOS 7</td></tr><tr><td style="text-align:center">RS1</td><td style="text-align:center">192.168.184.50(RIP)</td><td style="text-align:center">CentOS 7</td></tr><tr><td style="text-align:center">Rs2</td><td style="text-align:center">192.168.184.60(RIP)</td><td style="text-align:center">CentOS 7</td></tr></tbody></table><h4 id="架构图-1"><a href="#架构图-1" class="headerlink" title="架构图"></a>架构图</h4><p><img src="/assets/blogImg/keepalived-principle-and-LVS-case/KeepAlived+Lvs架构.jpg" alt="KeepAlived+Lvs架构"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h5><p>安装服务</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> ipvsadm keepalived</span><br></pre></td></tr></table></figure><p>Master配置</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    guaosi@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from guaosi@vip.qq.com</span><br><span class="line">   smtp_server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;          </span><br><span class="line">    <span class="section">state</span> MASTER               </span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">55</span>      </span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    # nopreempt # 是否开启恢复抢占，当写上这代码时开启抢占恢复模式，默认没有这代码</span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">123456</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> <span class="number">3306</span> &#123;      #设置虚拟VIP以及指定<span class="number">3306</span>端口</span><br><span class="line">    delay_loop <span class="number">6</span>                           #健康检查时间为<span class="number">6</span>秒</span><br><span class="line">    lb_algo rr                               #设置负载调度算法 rr算法</span><br><span class="line">    lb_kind DR                            #设置负载均衡机制为DR模式</span><br><span class="line">    protocol TCP                           #指定转发协议为TCP </span><br><span class="line">    real_server <span class="number">192.168</span><span class="number">.184</span><span class="number">.50</span> <span class="number">3306</span> &#123;      #RS节点<span class="number">1</span></span><br><span class="line">        weight <span class="number">1</span>                #权重</span><br><span class="line">        TCP_CHECK &#123;             #节点健康检查</span><br><span class="line">        connect_timeout <span class="number">2</span>       #延迟超时时间</span><br><span class="line">        connect_port <span class="number">3306</span>       #利用<span class="number">3306</span>端口检查</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server <span class="number">192.168</span><span class="number">.184</span><span class="number">.60</span> <span class="number">3306</span> &#123;      #RS节点<span class="number">2</span></span><br><span class="line">        weight <span class="number">1</span>                #权重</span><br><span class="line">        TCP_CHECK &#123;             #节点健康检查</span><br><span class="line">        connect_timeout <span class="number">2</span>       #延迟超时时间</span><br><span class="line">        connect_port <span class="number">3306</span>       #利用<span class="number">3306</span>端口检查</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Backup配置</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    guaosi@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from guaosi@vip.qq.com</span><br><span class="line">   smtp_server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VII_1 &#123;     # 与Master不相同         </span><br><span class="line">    <span class="section">state</span> BACKUP # 标志为备               </span><br><span class="line">    interface ens33 # 选择VIP浮动的真实网卡，与Master相同</span><br><span class="line">    virtual_router_id <span class="number">55</span>   # 与Master相同   </span><br><span class="line">    priority <span class="number">99</span> # 优先级，需比Master低         </span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">123456</span> # 与Master相同</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> # 与Master相同</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> <span class="number">3306</span> &#123;      #设置虚拟VIP以及指定<span class="number">3306</span>端口</span><br><span class="line">    delay_loop <span class="number">6</span>                           #健康检查时间为<span class="number">6</span>秒</span><br><span class="line">    lb_algo rr                               #设置负载调度算法 rr算法</span><br><span class="line">    lb_kind DR                            #设置负载均衡机制为DR模式</span><br><span class="line">    protocol TCP                           #指定转发协议为TCP </span><br><span class="line">    real_server <span class="number">192.168</span><span class="number">.184</span><span class="number">.50</span> <span class="number">3306</span> &#123;      #RS节点<span class="number">1</span></span><br><span class="line">        weight <span class="number">1</span>                #权重</span><br><span class="line">        TCP_CHECK &#123;             #节点健康检查</span><br><span class="line">        connect_timeout <span class="number">2</span>       #延迟超时时间</span><br><span class="line">        connect_port <span class="number">3306</span>       #利用<span class="number">3306</span>端口检查</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server <span class="number">192.168</span><span class="number">.184</span><span class="number">.60</span> <span class="number">3306</span> &#123;      #RS节点<span class="number">2</span></span><br><span class="line">        weight <span class="number">1</span>                #权重</span><br><span class="line">        TCP_CHECK &#123;             #节点健康检查</span><br><span class="line">        connect_timeout <span class="number">2</span>       #延迟超时时间</span><br><span class="line">        connect_port <span class="number">3306</span>       #利用<span class="number">3306</span>端口检查</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，KeepAlived本身就是为了LVS制作的，所以在KeepAlived的配置文件里配置了LVS规则，就不用再使用ipvsadm编写规则了。</p></blockquote><blockquote><p>无论是Master或者Backup启动KeepAlived时，都会马上给本机加上ipvsadm的规则，只是Backup的真实网卡上没有子网卡VIP罢了</p></blockquote><blockquote><p>当监听到其中一台RS没有相应时，KeepAlived会操作ipvsadm，将该节点移除出规则。当节点恢复后，KeepAlived又会操作ipvsadm将该节点添加回ipvsadm规则里。</p></blockquote><h5 id="RS"><a href="#RS" class="headerlink" title="RS"></a>RS</h5><p>与<code>lvs负载均衡-NAT与DR模型原理介绍</code>中的DR模式配置大体相同</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># arp_ignore</span></span><br><span class="line">echo <span class="number">1</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>all/arp_ignore</span><br><span class="line">echo <span class="number">1</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>ens33/arp_ignore</span><br><span class="line"></span><br><span class="line"><span class="meta"># arp_announce</span></span><br><span class="line">echo <span class="number">2</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>all/arp_announce</span><br><span class="line">echo <span class="number">2</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>ens33/arp_announce</span><br><span class="line"></span><br><span class="line"><span class="meta"># 子网卡添加VIP.只能自己在一个网段，自己和自己通信。从而不对任何其他的非本ip的arp包做出响应</span></span><br><span class="line">ifconfig lo:<span class="number">0</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span> broadcast <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> up</span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加路由，让访问192.168.184.100的报文指定从lo:0网卡发出去（可以忽略不写，系统自动添加）</span></span><br><span class="line">route add -host <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span> dev lo:<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VRRP原理&quot;&gt;&lt;a href=&quot;#VRRP原理&quot; class=&quot;headerlink&quot; title=&quot;VRRP原理&quot;&gt;&lt;/a&gt;VRRP原理&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;VRRP（Virtual Router Redundancy Protocol，虚拟路由器冗余协议）将可以承担网关功能的一组路由器加入到备份组中，形成一台虚拟路由器，这样主机的网关设置成虚拟网关，就能够实现冗余。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="高可用" scheme="https://www.guaosi.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>lvs负载均衡-NAT与DR模型原理介绍</title>
    <link href="https://www.guaosi.com/2020/01/22/lvs-introduction-to-the-principle-of-NAT-and-DR-model/"/>
    <id>https://www.guaosi.com/2020/01/22/lvs-introduction-to-the-principle-of-NAT-and-DR-model/</id>
    <published>2020-01-22T08:53:12.000Z</published>
    <updated>2021-12-05T08:13:24.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lvs负载均衡"><a href="#lvs负载均衡" class="headerlink" title="lvs负载均衡"></a>lvs负载均衡</h1><p>LVS是Linux Virtual Server的缩写，从字⾯意思上翻译，LVS应该译为”Linux虚拟服务器”。通过LVS实现负载均衡集群的⽅案属于”软件⽅案”。它是作用在 第四层-传输层 上，也就是只在意 IP+端口。</p><a id="more"></a><h2 id="lvs的组成"><a href="#lvs的组成" class="headerlink" title="lvs的组成"></a>lvs的组成</h2><p>Ipvs：工作在内核空间，实现集群服务的调度；借鉴了iptables的实现</p><p>Ipvsadm：工作在用户空间，负责为ipvs内核框架编写规则，定义谁是集群服务，谁是后端服务器。</p><blockquote><p>类比Ipvs就是netfilter，Ipvsadm就是iptables</p></blockquote><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-用户空间与内核空间.jpg" alt="用户空间与内核空间"></p><p>一般我们的应用，也就是放置在应用层的，都是用户空间。除了应用层，其他层都是在内核空间。</p><h2 id="lvs的原理"><a href="#lvs的原理" class="headerlink" title="lvs的原理"></a>lvs的原理</h2><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-LVS的原理图解.jpg" alt="Linux-LVS的原理图解"></p><blockquote><p>如果看不懂这张图,则表明不知道什么是iptables。建议可以<a href="https://www.guaosi.com/2020/01/22/the-brief-introduction-to-iptables/">点击</a>这里简单了解一下Iptables，服用效果更好哦~</p></blockquote><p>当客户端访问服务时，会访问VIP+端⼝，所以，客户端的请求报⽂会发往调度器，请求报⽂会先经过<code>PREROUTING</code>链，然后进⾏路由判断，由于此刻报⽂的⽬标IP为VIP，而VIP对于调度器来说，就是本身的IP，所以报⽂会经过<code>INPUT</code>链(②)。此刻，如果IPVS发现报⽂访问的VIP+端⼝与我们定义的LVS集群规则相符，ipvs则会根据定义好的规则与算法,将报⽂直接发往<code>POSTROUTING</code>链，然后报⽂则会发出，最后到达后端的Real Server中。</p><h2 id="lvs的相关术语"><a href="#lvs的相关术语" class="headerlink" title="lvs的相关术语"></a>lvs的相关术语</h2><table><thead><tr><th style="text-align:center">简称</th><th style="text-align:center">全称</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">DS</td><td style="text-align:center">Director Server</td><td style="text-align:center">目标服务器，即负载均衡器</td></tr><tr><td style="text-align:center">RS</td><td style="text-align:center">Real Server</td><td style="text-align:center">真实服务器，即后端服务器</td></tr><tr><td style="text-align:center">VIP</td><td style="text-align:center">Vrtual IP Address</td><td style="text-align:center">直接面向用户的IP地址，通常为公网IP</td></tr><tr><td style="text-align:center">DIP</td><td style="text-align:center">Director Server IP</td><td style="text-align:center">主要用于和内部主机通信的IP地址</td></tr><tr><td style="text-align:center">RIP</td><td style="text-align:center">Real Server IP</td><td style="text-align:center">后端真实服务器的IP地址</td></tr><tr><td style="text-align:center">CIP</td><td style="text-align:center">Client IP</td><td style="text-align:center">客户端IP</td></tr></tbody></table><h2 id="四七层负载均衡优缺点"><a href="#四七层负载均衡优缺点" class="headerlink" title="四七层负载均衡优缺点"></a>四七层负载均衡优缺点</h2><ul><li>四层比七层可以承载更大的并发量(因为不需要到用户空间，在内核空间就可以解决转发)，使用大型站点</li><li>七层可以实现更为复杂的负载均衡控制，比如基于URL、基于Session、动静分离等</li><li>七层会占用大量的CPU时间，承载的并发量小</li></ul><h2 id="lvs的类型"><a href="#lvs的类型" class="headerlink" title="lvs的类型"></a>lvs的类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">NAT</td><td style="text-align:center">修改目标IP地址为后端的Real Server的IP地址</td></tr><tr><td style="text-align:center">DR</td><td style="text-align:center">修改目标MAC地址为后端的Real Server的MAC地址</td></tr><tr><td style="text-align:center">TUNNEL</td><td style="text-align:center">较少使用，常用于异地容灾</td></tr></tbody></table><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>NAT：Network Address Teanslation 网络地址转换</p><p>LVS NAT：修改目标IP地址为挑选出新的RS的IP地址。即请求进入负载均衡器时做<code>DNAT</code>,响应出负载均衡器时做<code>SNAT</code></p><h4 id="NAT模型原理"><a href="#NAT模型原理" class="headerlink" title="NAT模型原理"></a>NAT模型原理</h4><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-NAT模型原理图解.jpg" alt="Linux-NAT模型原理图解"></p><p>Director Server会维护一个转换表，Dnat的时候记录VIP转为RIP(INPUT时)，Snat的时候直接读取记录将RIP转为VIP(PREROUTING)</p><h4 id="lvs-NAT的特性"><a href="#lvs-NAT的特性" class="headerlink" title="lvs NAT的特性"></a>lvs NAT的特性</h4><ul><li>RS必须使用私有地址，并且将网关指向DS的DIP</li><li>RIP和DIP必须为同一个网段内</li><li>支持端口映射</li><li>RS可以使用任意操作系统。例如Linux，UNIX，Windows等</li><li>请求和响应报文都要经过DS，高负载场景中，DS易成为瓶颈</li></ul><h4 id="ipvsadm用法简介"><a href="#ipvsadm用法简介" class="headerlink" title="ipvsadm用法简介"></a>ipvsadm用法简介</h4><p>顺序：先创建集群服务，再添加节点</p><blockquote><p>ipvs规则并不是永久有效的，重启后ipvs规则列表就会清空</p></blockquote><h5 id="管理相关"><a href="#管理相关" class="headerlink" title="管理相关"></a>管理相关</h5><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">-C</td><td style="text-align:center">清空集群服务</td></tr><tr><td style="text-align:center">-L</td><td style="text-align:center">查看IPVS规则</td></tr><tr><td style="text-align:center">-Z</td><td style="text-align:center">计数器清空</td></tr><tr><td style="text-align:center">-S</td><td style="text-align:center">使用ipvsadm -S 保存规则至磁盘</td></tr><tr><td style="text-align:center">-R</td><td style="text-align:center">使用ipvsadm -R 从磁盘载入规则</td></tr></tbody></table><h5 id="集群服务相关"><a href="#集群服务相关" class="headerlink" title="集群服务相关"></a>集群服务相关</h5><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">-A</td><td style="text-align:center">添加集群服务</td></tr><tr><td style="text-align:center">-E</td><td style="text-align:center">修改集群服务</td></tr><tr><td style="text-align:center">-D</td><td style="text-align:center">删除集群服务</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">指定调度算法，例如rr/wrr/lc/wlc等</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:center">指定协议为tcp</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">指定协议为udp</td></tr></tbody></table><h5 id="RS相关"><a href="#RS相关" class="headerlink" title="RS相关"></a>RS相关</h5><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">向指定的集群</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:center">向指定的集群服务添加RS(根据IP+端口区分集群)</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">指明RS的IP地址，包含IP:PORT(不写默认使用集群设置的端口)</td></tr><tr><td style="text-align:center">-g</td><td style="text-align:center">指明LVS类型DR</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">指明LVS类型TUN</td></tr><tr><td style="text-align:center">-m</td><td style="text-align:center">指明LVS类型为NAT</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">指明RS的权重</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:center">修改指定的RS属性</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">删除RS</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:center">指定协议为tcp</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">指定协议为udp</td></tr></tbody></table><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>创建集群并且添加节点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个集群，集群名(规则)是1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span>,使用<span class="selector-tag">tcp</span>协议，并且调度算法为轮询</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-A</span> <span class="selector-tag">-t</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-s</span> <span class="selector-tag">rr</span></span><br><span class="line"></span><br><span class="line"># 向集群1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span>添加节点，使用<span class="selector-tag">tcp</span>协议，节点的<span class="selector-tag">IP</span>为2<span class="selector-class">.2</span><span class="selector-class">.2</span><span class="selector-class">.2</span>(不写则默认为3306)，使用<span class="selector-tag">NAT</span>模式</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-r</span> 2<span class="selector-class">.2</span><span class="selector-class">.2</span><span class="selector-class">.2</span> <span class="selector-tag">-m</span></span><br><span class="line"></span><br><span class="line"># 向集群1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span>添加节点，使用<span class="selector-tag">tcp</span>协议，节点的<span class="selector-tag">IP</span>为3<span class="selector-class">.3</span><span class="selector-class">.3</span><span class="selector-class">.3</span><span class="selector-pseudo">:13306</span>，使用<span class="selector-tag">NAT</span>模式</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-r</span> 3<span class="selector-class">.3</span><span class="selector-class">.3</span><span class="selector-class">.3</span><span class="selector-pseudo">:13306</span> <span class="selector-tag">-m</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"></span><br><span class="line"># 创建一个集群，集群名(规则)是10<span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-pseudo">:80</span>,使用<span class="selector-tag">tcp</span>协议，并且调度算法为最少连接</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-A</span> <span class="selector-tag">-t</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-s</span> <span class="selector-tag">lc</span></span><br><span class="line"></span><br><span class="line"># 向集群10<span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-pseudo">:80</span>添加节点，使用<span class="selector-tag">tcp</span>协议，节点的<span class="selector-tag">IP</span>为111<span class="selector-class">.111</span><span class="selector-class">.111</span><span class="selector-class">.111</span>(不写则默认为80)，使用<span class="selector-tag">DR</span>模式</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 10<span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-r</span> 111<span class="selector-class">.111</span><span class="selector-class">.111</span><span class="selector-class">.111</span> <span class="selector-tag">-g</span></span><br><span class="line"></span><br><span class="line"># 向集群10<span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-pseudo">:80</span>添加节点，使用<span class="selector-tag">tcp</span>协议，节点的<span class="selector-tag">IP</span>为222<span class="selector-class">.222</span><span class="selector-class">.222</span><span class="selector-class">.222</span>(不写则默认为80)，使用<span class="selector-tag">DR</span>模式</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 10<span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-r</span> 222<span class="selector-class">.222</span><span class="selector-class">.222</span><span class="selector-class">.222</span> <span class="selector-tag">-g</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"></span><br><span class="line"># 修改权重,将权重改为3(默认都为1)</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-e</span> <span class="selector-tag">-t</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-r</span> 3<span class="selector-class">.3</span><span class="selector-class">.3</span><span class="selector-class">.3</span><span class="selector-pseudo">:13306</span> <span class="selector-tag">-w</span> 3 <span class="selector-tag">-m</span></span><br></pre></td></tr></table></figure><p>基本指令</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看ipvs规则列表</span></span><br><span class="line">ipvsadm -L -n</span><br><span class="line"></span><br><span class="line"><span class="meta"># 保存ipvs规则到本地磁盘</span></span><br><span class="line">ipvsadm -S &gt; /etc/sysconfig/ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="meta"># 清空已经设置的ipvsadm规则</span></span><br><span class="line">ipvsadm -C</span><br><span class="line"></span><br><span class="line"><span class="meta"># 从本地磁盘恢复ipvs规则</span></span><br><span class="line">ipvsadm -R &lt; /etc/sysconfig/ipvsadm</span><br></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><h5 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h5><ol><li>关闭防火墙以及SELinux</li></ol><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 永久关闭防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭SELinux</span></span><br><span class="line">setenforce <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看SELinux</span></span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><ol start="2"><li>安装nginx</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装扩展包</span></span><br><span class="line">yum -y <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新缓存 </span></span><br><span class="line">yum <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">yum -y <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>修改nginx默认主页文件内容，方便查看</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html<span class="regexp">/index.html</span></span><br></pre></td></tr></table></figure><h5 id="实验规划"><a href="#实验规划" class="headerlink" title="实验规划"></a>实验规划</h5><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-NAT实验规划.jpg" alt="Linux-NAT实验规划"></p><p>IP规划(皆为Centos7系统)</p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">IP</th><th style="text-align:center">网卡模式</th></tr></thead><tbody><tr><td style="text-align:center">DS</td><td style="text-align:center">192.168.147.100(VIP)  192.168.184.5(DIP)</td><td style="text-align:center">VIP为仅主机 ,DIP为NAT</td></tr><tr><td style="text-align:center">RS1</td><td style="text-align:center">192.168.184.10(RIP)</td><td style="text-align:center">NAT</td></tr><tr><td style="text-align:center">RS2</td><td style="text-align:center">192.168.184.20(RIP)</td><td style="text-align:center">NAT</td></tr><tr><td style="text-align:center">RS3</td><td style="text-align:center">192.168.184.30(RIP)</td><td style="text-align:center">NAT</td></tr></tbody></table><blockquote><p>都用nat模式，公用一个虚拟交换机</p></blockquote><h5 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h5><ol><li>DS开启转发功能(这样才能将DS里的报文进行转发)</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 开启转发报文功能，默认不开启，重启失效</span></span><br><span class="line">echo <span class="number">1</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4/ip_forward</span><br><span class="line"></span><br><span class="line"><span class="meta"># 永久开启转发报文功能</span></span><br><span class="line">vim <span class="meta-keyword">/etc/</span>sysctl.conf</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>net.ipv4.ip_forward = 1<br>​<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sysctl -p</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>RS需要将网关指向DS的DIP，这样RS发送出去的报文才会指定由DS发出。</p></li><li><p>在DS上curl测试 <code>vip:80</code> 能否正常负载均衡即可。</p></li><li><p>配置ipvsadm</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建集群</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-A</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.147</span><span class="selector-class">.100</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-s</span> <span class="selector-tag">wrr</span></span><br><span class="line"></span><br><span class="line"># 添加节点</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.147</span><span class="selector-class">.100</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-r</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-m</span></span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.147</span><span class="selector-class">.100</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-r</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.20</span> <span class="selector-tag">-m</span></span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.147</span><span class="selector-class">.100</span><span class="selector-pseudo">:80</span> <span class="selector-tag">-r</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.30</span> <span class="selector-tag">-m</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="DR"><a href="#DR" class="headerlink" title="DR"></a>DR</h3><h4 id="DR模型原理"><a href="#DR模型原理" class="headerlink" title="DR模型原理"></a>DR模型原理</h4><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-DR模型原理图解.jpg" alt="Linux-DR模型原理图解"></p><h4 id="DR数据流向图"><a href="#DR数据流向图" class="headerlink" title="DR数据流向图"></a>DR数据流向图</h4><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-DR数据流向图1.jpg" alt="Linux-DR数据流向图"></p><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-DR数据流向图2.jpg" alt="Linux-DR数据流向图"></p><blockquote><p>重点：Linux里，一台机子可以有多个网卡。lo本地回环网卡只对本机内部可见，对外部隐藏。但是Linux里，如果数据报文访问的IP在本机上，虽然本机网卡不是这个网段，但是可以检测本机上是否有符合该IP的网卡(包括lo网卡也会检测)。如果有，本机一样会进行接收该数据报文。真实网卡会接收报文。环回地址(lo)，子网卡(eth0:0)不会接收外部数据报文。 </p></blockquote><blockquote><p>注意：因为VIP，DS和所有的RS都有绑定。当报文请求VIP时，底层发送ARP寻找MAC地址，DS跟RS都会有响应。此时需要将RS上的ARP响应关闭，让VIP单独响应。这样报文的目标MAC才肯定是DS的MAC，报文才能一定访问DS。</p></blockquote><blockquote><p>注意：VIP并不要跟DIP和RIP在同一个网段，这里只是方便调试，所以设置在同一个网段。</p></blockquote><h4 id="DS上设置VIP为eth0别名，RS上设置VIP为lo别名"><a href="#DS上设置VIP为eth0别名，RS上设置VIP为lo别名" class="headerlink" title="DS上设置VIP为eth0别名，RS上设置VIP为lo别名"></a>DS上设置VIP为eth0别名，RS上设置VIP为lo别名</h4><p>原因是因为就算arp_ignore 设置为1，此时只是不去查询其他网卡的IP设置以及其他网卡上的子网卡。但是流入的当前网卡以及当前网卡的子网卡如果符合，还是会进行响应的。所以RS要把VIP设置在lo环回网卡的别名上(lo是127.0.0.1不好修改)。</p><h4 id="ARP设置"><a href="#ARP设置" class="headerlink" title="ARP设置"></a>ARP设置</h4><h5 id="ARP内核参数"><a href="#ARP内核参数" class="headerlink" title="ARP内核参数"></a>ARP内核参数</h5><p>arp_ignore: 控制系统在接收到外部的arp请求时，是否要返回arp响应。</p><p>arp_announce: 控制系统在对外发送arp请求时，如何选择arp请求数据包的源IP地址。</p><h5 id="arp-ignore"><a href="#arp-ignore" class="headerlink" title="arp_ignore"></a>arp_ignore</h5><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">响应任意网卡上接收到的对本机IP地址的ARP请求</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">只响应目的IP地址为接收网卡所配置IP地址的ARP请求</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">只响应目的IP地址为接收网卡所配置IP地址的ARP请求，并且ARP请求的源IP必须和接收网卡同网段</td></tr></tbody></table><blockquote><p>Arp_ignore 设置为1，只会检测真实网卡上，以及该真实网卡上的别名网卡配置的IP地址是否符合，不会再去查询本机的其他网卡以及其他网卡上的子网卡否符合。</p></blockquote><h5 id="arp-announce"><a href="#arp-announce" class="headerlink" title="arp_announce"></a>arp_announce</h5><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">允许使用任意网卡上的IP地址作为ARP请求的源IP</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">尽量避免使用不属于该发送网卡子网的本地地址作为发送ARP请求的源IP</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">忽略IP数据包的源IP地址，选择该发送网卡上最合适的本地地址作为arp请求的源IP地址</td></tr></tbody></table><h4 id="lvs-DR的特性"><a href="#lvs-DR的特性" class="headerlink" title="lvs DR的特性"></a>lvs DR的特性</h4><ul><li>Director和RS的所有节点必须位于同一物理网络中</li><li>RS不能将网关指向Director的IP</li><li>不支持端口映射</li><li>RS在lo接口上配置VIP</li><li>请求报文经由DS转发，但相应必须不能经过DS</li></ul><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><h5 id="软件准备-1"><a href="#软件准备-1" class="headerlink" title="软件准备"></a>软件准备</h5><ol><li>关闭防火墙以及SELinux</li></ol><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 永久关闭防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭SELinux</span></span><br><span class="line">setenforce <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看SELinux</span></span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><ol start="2"><li>安装MySQL</li></ol><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 下载MySQL rpm包</span></span><br><span class="line">wget https:<span class="comment">//dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 进行repo的安装</span></span><br><span class="line">rpm -ivh mysql57-community-release-el7<span class="number">-9.</span>noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta"># 进入指定命令执行</span></span><br><span class="line">cd /etc/yum.repos.d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 安装</span></span><br><span class="line">yum install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动msyql</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取安装时的临时密码</span></span><br><span class="line">grep <span class="string">'temporary password'</span> /<span class="keyword">var</span>/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="meta"># 自行修改密码以及对应登录权限</span></span><br></pre></td></tr></table></figure><h5 id="实验规划-1"><a href="#实验规划-1" class="headerlink" title="实验规划"></a>实验规划</h5><p><img src="/assets/blogImg/lvs-introduction-to-the-principle-of-NAT-and-DR-model/Linux-DR-MySQL集群负载均衡实验规划.jpg" alt="Linux-DR-MySQL集群负载均衡实验规划"></p><p>IP规划(皆为Centos7系统)</p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">IP</th><th style="text-align:center">网卡模式</th></tr></thead><tbody><tr><td style="text-align:center">DS</td><td style="text-align:center">192.168.184.10(VIP)  192.168.184.40(DIP)</td><td style="text-align:center">NAT</td></tr><tr><td style="text-align:center">RS1</td><td style="text-align:center">192.168.184.10(VIP)  192.168.184.50(DIP)</td><td style="text-align:center">NAT</td></tr><tr><td style="text-align:center">RS2</td><td style="text-align:center">192.168.184.10(VIP)  192.168.184.60(DIP)</td><td style="text-align:center">NAT</td></tr></tbody></table><h5 id="配置要点"><a href="#配置要点" class="headerlink" title="配置要点"></a>配置要点</h5><ul><li>LVS不能和iptables，SELinux共用，首先关闭iptables和SELinux</li><li>在DS的ens33接口上配置VIP，并添加路由</li><li>在RS上配置ARP请求响应报文，并在环回地址接口lo上配置VIP，并添加路由</li></ul><h5 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h5><ol><li><p>DS添加VIP以及强制路由</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子网卡添加VIP</span></span><br><span class="line">ifconfig ens33:0 192.168.184.10/24 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加路由，当访问VIP时，从子网卡转出（可以忽略不写，系统自动添加）</span></span><br><span class="line">route <span class="builtin-name">add</span> -host 192.168.184.10 dev ens33:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置好的路由</span></span><br><span class="line">route -n</span><br></pre></td></tr></table></figure></li><li><p>配置ipvsadm</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建集群</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-A</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-s</span> <span class="selector-tag">wrr</span></span><br><span class="line"></span><br><span class="line"># 添加节点</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-r</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.50</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-g</span></span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-a</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-r</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.60</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-g</span></span><br><span class="line"></span><br><span class="line"># 查看配置</span><br><span class="line"><span class="selector-tag">ipvsadm</span> <span class="selector-tag">-L</span> <span class="selector-tag">-n</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>RS添加VIP</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 子网卡添加<span class="selector-tag">VIP</span>.只能自己在一个网段，自己和自己通信。从而不对任何其他的非本<span class="selector-tag">ip</span>的<span class="selector-tag">arp</span>包做出响应</span><br><span class="line"><span class="selector-tag">ifconfig</span> <span class="selector-tag">lo</span><span class="selector-pseudo">:0</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span> <span class="selector-tag">netmask</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.255</span> <span class="selector-tag">broadcast</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span> <span class="selector-tag">up</span></span><br><span class="line"></span><br><span class="line"># 添加路由，让访问192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span>的报文指定从<span class="selector-tag">lo</span><span class="selector-pseudo">:0</span>网卡发出去（可以忽略不写，系统自动添加）</span><br><span class="line"><span class="selector-tag">route</span> <span class="selector-tag">add</span> <span class="selector-tag">-host</span> 192<span class="selector-class">.168</span><span class="selector-class">.184</span><span class="selector-class">.10</span> <span class="selector-tag">dev</span> <span class="selector-tag">lo</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>RS对ARP进行限制</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># arp_ignore</span></span><br><span class="line">echo <span class="number">1</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>all/arp_ignore</span><br><span class="line">echo <span class="number">1</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>ens33/arp_ignore</span><br><span class="line"></span><br><span class="line"><span class="meta"># arp_announce</span></span><br><span class="line">echo <span class="number">2</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>all/arp_announce</span><br><span class="line">echo <span class="number">2</span> &gt; <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>ipv4<span class="meta-keyword">/conf/</span>ens33/arp_announce</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意，测试的时候不要在DS上用mysql客户端进行测试，并没有在内部进行3306转发</p></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>RS不能将路由指向DS的DIP</li><li>RS上关闭ARP响应功能(arp_ignore)</li><li>RS响应数据包时必须使用lo上配置的VIP(arp_announce+强制路由)</li><li>VIP在DS上配置到实体网卡别名上;在RS上则配置到lo别名上</li></ul><h4 id="答疑解惑"><a href="#答疑解惑" class="headerlink" title="答疑解惑"></a>答疑解惑</h4><ol><li><p>为什么DS上的VIP绑定在ens33这个真实网卡上而不是lo本地环回网卡？</p><p>因为DS的VIP需要接收客户端发来的请求报文，本地环回网卡不会接收外部请求的数据包，所以绑定在真实网卡上作为子网卡。</p></li><li><p>为什么RS上的VIP绑定在lo本地环回网卡而不是ens33这个真实网卡上？</p><p>因为当lvs负载均衡选择后，原先客户端发来的数据包里的目的mac已经被修改成指定RS的mac了(其实是真实网卡ens33的的mac)，此时数据包可以直接从RS的真实网卡ens33流入。绑定在lo网卡上，就是为了防止RS响应原先应该DS接收客户端发来的请求报文。</p></li><li><p>为什么RS要设置arp_announce以及添加路由？</p><p>arp_announce设置为2和添加vip出口网卡为lo:0实际上都是为了做同一件事。设置为2，数据包传入RS时，会先查询路由规则，得知根据查询后的结果，流入或响应时应该使用lo网卡，流入时ens33将数据包交给lo网卡流入，响应时lo网卡将数据包交给ens33响应。此时源IP为VIP(不设置arp_announce为2，此时源IP则为RIP )。</p></li></ol><h4 id="DR-一键部署脚本"><a href="#DR-一键部署脚本" class="headerlink" title="DR 一键部署脚本"></a>DR 一键部署脚本</h4><h5 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/</span></span><br><span class="line"><span class="attribute">VIP</span>=<span class="string">"192.168.184.10"</span></span><br><span class="line"><span class="attribute">NM</span>=<span class="string">"255.255.255.0"</span></span><br><span class="line"><span class="attribute">PORT</span>=<span class="string">"3306"</span></span><br><span class="line"><span class="attribute">RS1</span>=<span class="string">"192.168.184.50"</span></span><br><span class="line"><span class="attribute">RS2</span>=<span class="string">"192.168.184.60"</span></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">/usr/sbin/ifconfig ens33:0 <span class="variable">$VIP</span> netmask <span class="variable">$NM</span> up</span><br><span class="line">/usr/sbin<span class="built_in">/route </span><span class="builtin-name">add</span> -host <span class="variable">$VIP</span> dev ens33:0</span><br><span class="line">ipvsadm -A -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -s wrr</span><br><span class="line">ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -r <span class="variable">$RS1</span>:<span class="variable">$PORT</span> -g -w 1</span><br><span class="line">ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$PORT</span> -r <span class="variable">$RS2</span>:<span class="variable">$PORT</span> -g -w 1</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">                /usr/sbin/ifconfig ens33:0 down</span><br><span class="line">                /usr/sbin<span class="built_in">/route </span>del <span class="variable">$VIP</span></span><br><span class="line">ipvsadm -C</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo <span class="string">"Usage: sh <span class="variable">$0</span> &#123;start|stop&#125;"</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h5 id="RS"><a href="#RS" class="headerlink" title="RS"></a>RS</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/</span></span><br><span class="line"><span class="attribute">VIP</span>=<span class="string">"192.168.184.10"</span></span><br><span class="line"><span class="attribute">NM</span>=<span class="string">"255.255.255.255"</span></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/conf/ens33/arp_ignore</span><br><span class="line">echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">echo 2 &gt; /proc/sys/net/ipv4/conf/ens33/arp_announce</span><br><span class="line"></span><br><span class="line">/sbin/ifconfig lo:0 <span class="variable">$VIP</span> netmask <span class="variable">$NM</span> broadcast <span class="variable">$VIP</span> up</span><br><span class="line">/sbin<span class="built_in">/route </span><span class="builtin-name">add</span> -host <span class="variable">$VIP</span> dev lo:0</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">                echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">                echo 0 &gt; /proc/sys/net/ipv4/conf/ens33/arp_ignore</span><br><span class="line">                echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">                echo 0 &gt; /proc/sys/net/ipv4/conf/ens33/arp_announce</span><br><span class="line">/sbin/ifconfig lo:0 down</span><br><span class="line">                /sbin<span class="built_in">/route </span>del <span class="variable">$VIP</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo <span class="string">"Usage: sh <span class="variable">$0</span> &#123;start|stop&#125;"</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h4 id="NAT与DR模型优缺点分析"><a href="#NAT与DR模型优缺点分析" class="headerlink" title="NAT与DR模型优缺点分析"></a>NAT与DR模型优缺点分析</h4><h5 id="NAT-1"><a href="#NAT-1" class="headerlink" title="NAT"></a>NAT</h5><ul><li>NAT模型支持任意操作系统，配置简单</li><li>NAT模型使用小规模集群环境，后端RS通常在5-20个</li><li>扩展性有限，并发大场景下，DS易成为性能瓶颈</li></ul><h5 id="DR-1"><a href="#DR-1" class="headerlink" title="DR"></a>DR</h5><ul><li>配置复杂</li><li>客户端请求必须路由至DS，在路由器上配置静态地址绑定时，未必有权限</li><li>由于只有请求包经过DS，因此性能很高，生产环境广泛应用</li><li>只支持部分操作系统</li><li>DS和RS必须在同一物理网段内，不能有路由器隔离</li><li>适用于大并发量业务环节，此模型多为互联网公司生产首选</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lvs负载均衡&quot;&gt;&lt;a href=&quot;#lvs负载均衡&quot; class=&quot;headerlink&quot; title=&quot;lvs负载均衡&quot;&gt;&lt;/a&gt;lvs负载均衡&lt;/h1&gt;&lt;p&gt;LVS是Linux Virtual Server的缩写，从字⾯意思上翻译，LVS应该译为”Linux虚拟服务器”。通过LVS实现负载均衡集群的⽅案属于”软件⽅案”。它是作用在 第四层-传输层 上，也就是只在意 IP+端口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="高可用" scheme="https://www.guaosi.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Iptables简单介绍</title>
    <link href="https://www.guaosi.com/2020/01/22/the-brief-introduction-to-iptables/"/>
    <id>https://www.guaosi.com/2020/01/22/the-brief-introduction-to-iptables/</id>
    <published>2020-01-22T08:52:12.000Z</published>
    <updated>2021-12-05T08:13:24.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h1><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>防⽕墙可以⼤体分为主机防⽕墙和⽹络防⽕墙。</p><p> 主机防⽕墙：针对于单个主机进⾏防护。 </p><p>⽹络防⽕墙：往往处于⽹络⼊⼝或边缘，针对于⽹络⼊⼝进⾏防护，服务于防⽕墙背后的本地局域⽹。 </p><p>⽹络防⽕墙和主机防⽕墙并不冲突，可以理解为，⽹络防⽕墙主外（集体）， 主机防⽕墙主内（个⼈）。</p><p>从物理上讲，防⽕墙可以分为硬件防⽕墙和软件防⽕墙。 </p><p>硬件防⽕墙：在硬件级别实现部分防⽕墙功能，另⼀部分功能基于软件实现，性能⾼，成本⾼。 </p><p>软件防⽕墙：应⽤软件处理逻辑运⾏于通⽤硬件平台之上的防⽕墙，性能低，成本低。</p><a id="more"></a><h2 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h2><p><img src="/assets/blogImg/the-brief-introduction-to-iptables/Linux-用户空间与内核空间.jpg" alt="用户空间与内核空间"></p><p>一般我们的应用，也就是放置在应用层的，都是用户空间。除了应用层，其他层都是在内核空间</p><h2 id="iptables与netfilter"><a href="#iptables与netfilter" class="headerlink" title="iptables与netfilter"></a>iptables与netfilter</h2><p>iptables其实不是真正的防⽕墙，我们可以把它理解成⼀个客户端代理，⽤户通过iptables这个代理，将⽤户的安全设定执⾏到对应的”安全框架”中，这个”安全框架”才是真正的防⽕墙，这个框架的名字叫netfilter</p><p>netfilter才是防⽕墙真正的安全框架（framework），netfilter位于内核空间。 </p><p>iptables其实是⼀个命令⾏⼯具，位于⽤户空间，我们⽤这个⼯具操作真正的框架。</p><p>包过滤机制是netfilter,管理工具是iptables。netfilter作用在网络层，netfilter是iptables底层实现的原理，iptables只是一个cli调用工具。</p><h2 id="数据包流向"><a href="#数据包流向" class="headerlink" title="数据包流向"></a>数据包流向</h2><p><img src="/assets/blogImg/the-brief-introduction-to-iptables/Linux防火墙—包数据流向.jpg" alt="Linux防火墙—包数据流向"></p><h2 id="四表五链"><a href="#四表五链" class="headerlink" title="四表五链"></a>四表五链</h2><h3 id="五链"><a href="#五链" class="headerlink" title="五链"></a>五链</h3><p>INPUT：处理入站数据包</p><p>OUTPUT：处理出站数据包</p><p>FORWARD：处理转发数据包</p><p>PREROUTING：选择路由前处理数据包</p><p>POSTROUTING：选择路由后处理数据包</p><p>到本机某进程的报⽂：PREROUTING –&gt; INPUT </p><p>由本机转发的报⽂：PREROUTING –&gt; FORWARD –&gt; POSTROUTING </p><p>由本机的某进程发出报⽂（通常为响应报⽂）：OUTPUT –&gt; POSTROUTING</p><h3 id="四表"><a href="#四表" class="headerlink" title="四表"></a>四表</h3><p>我们把具有相同功能的规则的集合叫做”表”，所以说，不同功能的规则，我们可以放置在不同的表中进⾏管理，⽽iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围，所以，学习iptables之前，我们必须先搞明⽩每种表的作⽤。</p><p> iptables为我们提供了如下规则的分类，或者说，iptables为我们提供了如下”表”</p><p>filter表：负责过滤功能，防⽕墙；内核模块：iptables_filter </p><p>nat表：network address translation，⽹络地址转换功能；内核模块：iptable_nat </p><p>mangle表：拆解报⽂，做出修改，并重新封装 的功能；iptable_mangle </p><p>raw表：关闭nat表上启⽤的连接追踪机制；iptable_raw</p><p>也就是说，我们⾃定义的所有规则，都是这四种分类中的规则，或者说，所有规则都存在于这4张”表”中。</p><p>但是我们需要注意的是，某些”链”中注定不会包含”某类规则”</p><h3 id="链-gt-表"><a href="#链-gt-表" class="headerlink" title="链-&gt;表"></a>链-&gt;表</h3><p>PREROUTING    的规则可以存在于：raw表，mangle表，nat表。</p><p>INPUT      的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p><p>FORWARD     的规则可以存在于：mangle表，filter表。</p><p>OUTPUT     的规则可以存在于：raw表mangle表，nat表，filter表。</p><p>POSTROUTING    的规则可以存在于：mangle表，nat表。</p><h3 id="表-gt-链"><a href="#表-gt-链" class="headerlink" title="表-&gt;链"></a>表-&gt;链</h3><p>raw   表中的规则可以被哪些链使⽤：PREROUTING，OUTPUT </p><p>mangle  表中的规则可以被哪些链使⽤：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING </p><p>nat   表中的规则可以被哪些链使⽤：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p><p> filter  表中的规则可以被哪些链使⽤：INPUT，FORWARD，OUTPUT</p><h2 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h2><p>处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。 </p><p>此处列出⼀些常⽤的动作：</p><p>ACCEPT：允许数据包通过。 </p><p>DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉⾃⼰的请求泥⽜⼊海了，过了超时时间才会有反应。</p><p>REJECT：拒绝数据包通过，必要时会给数据发送端⼀个响应的信息，客户端刚请求就会收到拒绝的信息。 </p><p>SNAT：源地址转换，解决内⽹⽤户⽤同⼀个公⽹地址上⽹的问题。 </p><p>MASQUERADE：是SNAT的⼀种特殊形式，适⽤于动态的、临时会变的ip上。 </p><p>DNAT：⽬标地址转换。 </p><p>REDIRECT：在本机做端⼝映射。</p><h2 id="命令演示"><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本机防火墙配置信息</span></span><br><span class="line">iptables -L -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向filter表中增加INPUT链，当192.168.184.20进入时，协议为tcp，端口为22，此时动作是丢弃该数据包</span></span><br><span class="line">iptables -t<span class="built_in"> filter </span>-A INPUT -s 192.168.184.20 -p tcp --dport 22 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本机开放端口</span></span><br><span class="line">netstat —tnlp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向filter表中增加INPUT链，当192.168.184.1进入时，协议为tcp，端口为，此时动作是丢弃该数据包</span></span><br><span class="line">iptables -t<span class="built_in"> filter </span>-A INPUT -s 192.168.184.1 -p tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本常识&quot;&gt;&lt;a href=&quot;#基本常识&quot; class=&quot;headerlink&quot; title=&quot;基本常识&quot;&gt;&lt;/a&gt;基本常识&lt;/h1&gt;&lt;h2 id=&quot;防火墙&quot;&gt;&lt;a href=&quot;#防火墙&quot; class=&quot;headerlink&quot; title=&quot;防火墙&quot;&gt;&lt;/a&gt;防火墙&lt;/h2&gt;&lt;p&gt;防⽕墙可以⼤体分为主机防⽕墙和⽹络防⽕墙。&lt;/p&gt;
&lt;p&gt; 主机防⽕墙：针对于单个主机进⾏防护。 &lt;/p&gt;
&lt;p&gt;⽹络防⽕墙：往往处于⽹络⼊⼝或边缘，针对于⽹络⼊⼝进⾏防护，服务于防⽕墙背后的本地局域⽹。 &lt;/p&gt;
&lt;p&gt;⽹络防⽕墙和主机防⽕墙并不冲突，可以理解为，⽹络防⽕墙主外（集体）， 主机防⽕墙主内（个⼈）。&lt;/p&gt;
&lt;p&gt;从物理上讲，防⽕墙可以分为硬件防⽕墙和软件防⽕墙。 &lt;/p&gt;
&lt;p&gt;硬件防⽕墙：在硬件级别实现部分防⽕墙功能，另⼀部分功能基于软件实现，性能⾼，成本⾼。 &lt;/p&gt;
&lt;p&gt;软件防⽕墙：应⽤软件处理逻辑运⾏于通⽤硬件平台之上的防⽕墙，性能低，成本低。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vmware和Docker的网络模式讲解</title>
    <link href="https://www.guaosi.com/2020/01/22/network-of-vmware-and-docker/"/>
    <id>https://www.guaosi.com/2020/01/22/network-of-vmware-and-docker/</id>
    <published>2020-01-22T08:51:12.000Z</published>
    <updated>2021-12-05T08:13:24.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vmware"><a href="#vmware" class="headerlink" title="vmware"></a>vmware</h1><p>VMware中常用三种网络连接模式,分别是<code>桥接模式</code>,<code>主机模式</code>,<code>NAT模式</code></p><a id="more"></a><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接模式就是把宿主机的网卡与虚拟机的虚拟网卡通过虚拟网桥连接起来，将宿主机比作一个交换机，那么虚拟机还有宿主机全部连接在这一个交换机上，且他们属于同一网段，互相可以通信并不影响。(此时虚拟机拥有跟宿主机局域网内相同网段的IP)</p><p>当局域网内不仅有宿主机，还有主机A，主机B。虚拟机不仅仅可以在虚拟机内互通，也可以虚拟机与宿主机，更可以直接访问到主机A，主机B互通。支持访问外网资源。(可以把虚拟机想象成与宿主机对等的真实机器)</p><p>真正设置的时候，最好是使用<code>虚拟网络编辑器</code>里桥接模式指定要<code>桥接的网卡</code>， 来指定宿主机用的是哪个网卡上网，从而达到相同模拟，获取dhcp的能力.</p><p><img src="/assets/blogImg/network-of-vmware-and-docker/1.桥接网络.png" alt="桥接网络"></p><h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><p>相当于在虚拟机网卡和宿主机虚拟网卡之间，加了一个交换机。</p><ol><li>此时虚拟机和虚拟机互通，只需要通过交换机转发报文即可。</li><li>此时虚拟机与宿主机互通，虚拟机通过这个交换机发送报文到宿主机上的虚拟网卡上。</li><li>此时虚拟机想访问外部网络或局域网其他主机时，此时可以先将报文通过虚拟机发送到宿主机上的虚拟网卡上，然后宿主机内部再将报文通过真实的物理网卡转发出去。</li></ol><p><img src="/assets/blogImg/network-of-vmware-and-docker/2.nat网络.png" alt="nat网络"></p><h2 id="主机模式"><a href="#主机模式" class="headerlink" title="主机模式"></a>主机模式</h2><p>相当于无物理网卡的NAT模式，只有宿主机内部和虚拟机互相通讯，保证安全。</p><h2 id="桥接模式和NAT模式的区别"><a href="#桥接模式和NAT模式的区别" class="headerlink" title="桥接模式和NAT模式的区别"></a>桥接模式和NAT模式的区别</h2><ol><li>桥接模式中的真实网络，比如路由器，需要同意机器可以自动获取DHCP,能够自动为网络内的主机分配IP地址。（因为桥接模式的虚拟机相当于一个真实的机器，只有拿到了IP，才能跟宿主机在同一个局域网内，才能通讯）。NAT则不需要，NAT中的虚拟机跟宿主机通过一个虚拟的交换机，进而做到2个虚拟网卡可以互相通讯。</li><li>桥接模式中的虚拟机可以被局域网内的其他主机访问到(因为都在同一个局域网内)。而NAT模式则无法直接被局域网内其他机器访问到(不知道真实的虚拟机IP，因为发出去的报文的source IP是nat转换后到了宿主机的真实物理网卡上，即为宿主机的IP地址)</li></ol><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>docker使用的是Linux Container，是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。</p><p>就是使用namespance技术，来隔离网络，进程等资源。</p><blockquote><p>如果namespace不同，就已经被隔离，没有讨论的意义。所以以下是在同一个namespace下</p></blockquote><h2 id="Bridge-桥接模式"><a href="#Bridge-桥接模式" class="headerlink" title="Bridge 桥接模式"></a>Bridge 桥接模式</h2><p>docker默认的网络模式。原理跟<code>vmware</code>的NAT模式相同。安装docker时，会给宿主机创建一个<code>docker0</code>网卡,该网卡会与一个虚拟交换机相连，当容器以Bridge模式创建启动时，会给容器创建一个虚拟网卡，该网卡分配的IP与宿主机的<code>docker0</code>所在同一个局域网内(一般是172.16.0.0)。然后过程就和<code>vmware</code>的NAT模式完全相同。</p><h2 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h2><p>直接使用宿主机的当前网络，容器暴露的端口可以直接在宿主机中查到，可以当成就是在宿主机真实执行的程序。</p><h2 id="Container-网络模式"><a href="#Container-网络模式" class="headerlink" title="Container 网络模式"></a>Container 网络模式</h2><p>与指定的容器公用一个网络，所以这2个容器不能有一样的端口暴露。</p><h2 id="None-网络模式"><a href="#None-网络模式" class="headerlink" title="None 网络模式"></a>None 网络模式</h2><p>不会给容器创建网卡，此时容器无法与外部通讯。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>MAC系统下，安装docker后不会创建<code>docker0</code>网卡，同时host模式也不会生效。原因是</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Docker <span class="keyword">For</span> <span class="keyword">Mac</span>的实现和标准Docker规范有区别，Docker <span class="keyword">For</span> <span class="keyword">Mac</span>的Docker Daemon`是运行于虚拟机(xhyve)中的, 而不是像Linux上那样作为进程运行于宿主机.</span><br><span class="line"></span><br><span class="line">因此`Docker <span class="keyword">For</span> <span class="keyword">Mac</span>`没有`docker0`网桥，不能实现host网络模式，host模式会使Container复用Daemon的网络栈(在xhyve虚拟机中)，而不是与Host主机网络栈.</span><br><span class="line"></span><br><span class="line">这样虽然其它容器仍然可通过xhyve网络栈进行交互，但却不是用的Host上的端口(在Host上无法访问)。</span><br><span class="line"></span><br><span class="line">bridge网络模式 -p 参数不受此影响，它能正常打开Host上的端口并映射到Container的对应Port。文档在这一点上并没有充分说明，容易踩坑。</span><br></pre></td></tr></table></figure></li><li><p>Windows下安装docker,实际上是使用了<code>Hyper-V</code>虚拟机来安装了Linux系统,然后再在其中安装了docker。所以host模式也是无效，不会暴露当前windows系统中，而是暴露到了虚拟机Linux中。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vmware&quot;&gt;&lt;a href=&quot;#vmware&quot; class=&quot;headerlink&quot; title=&quot;vmware&quot;&gt;&lt;/a&gt;vmware&lt;/h1&gt;&lt;p&gt;VMware中常用三种网络连接模式,分别是&lt;code&gt;桥接模式&lt;/code&gt;,&lt;code&gt;主机模式&lt;/code&gt;,&lt;code&gt;NAT模式&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="网络" scheme="https://www.guaosi.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://www.guaosi.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>压力测试简单介绍</title>
    <link href="https://www.guaosi.com/2020/01/22/brief-introduction-of-pressure-test/"/>
    <id>https://www.guaosi.com/2020/01/22/brief-introduction-of-pressure-test/</id>
    <published>2020-01-22T08:50:12.000Z</published>
    <updated>2021-12-05T08:13:24.093Z</updated>
    
    <content type="html"><![CDATA[<p>压力测试（Stress Test），也称为强度测试、负载测试。</p><p>压力测试时模拟实际应用的软硬件环境以及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。</p><h2 id="压力测试的目的"><a href="#压力测试的目的" class="headerlink" title="压力测试的目的"></a>压力测试的目的</h2><p>以Web为例，关注项</p><ul><li>并发量</li><li>响应速度</li><li>容错能力</li></ul><a id="more"></a><h2 id="常见Web压力测试工具"><a href="#常见Web压力测试工具" class="headerlink" title="常见Web压力测试工具"></a>常见Web压力测试工具</h2><ul><li>http_load</li><li>JMeter</li><li>ab</li><li>LoadRunner</li><li>Web bench</li></ul><h2 id="ab用法详解"><a href="#ab用法详解" class="headerlink" title="ab用法详解"></a>ab用法详解</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td style="text-align:center">请求总数</td></tr><tr><td style="text-align:center">-c</td><td style="text-align:center">并发请求个数</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:center">测试所进行的最大秒数</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">显示详细信息</td></tr><tr><td style="text-align:center">-k</td><td style="text-align:center">启用Keeplived功能。一个HTTP会话中执行多个请求</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">post-file 包含了POST数据的文件</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">执行HEAD请求，只获取头信息</td></tr><tr><td style="text-align:center">-h</td><td style="text-align:center">显示帮助信息</td></tr></tbody></table><blockquote><p>-c跟-n的不同：如果-n的值是20000，代表一共会发送20000个请求，-c是5，则表示这20000个请求分4000次顺序发送，每次并发发送5个请求。</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一共1000个请求，分10次顺序发送，每次并发发100个</span></span><br><span class="line">ab -n<span class="number"> 1000 </span>-c<span class="number"> 100 </span>localhost/index.php</span><br><span class="line"></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision:<span class="number"> 655654 </span>$&gt;</span><br><span class="line">Copyright<span class="number"> 1996 </span>Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed<span class="number"> 100 </span>requests</span><br><span class="line">Completed<span class="number"> 200 </span>requests</span><br><span class="line">Completed<span class="number"> 300 </span>requests</span><br><span class="line">Completed<span class="number"> 400 </span>requests</span><br><span class="line">Completed<span class="number"> 500 </span>requests</span><br><span class="line">Completed<span class="number"> 600 </span>requests</span><br><span class="line">Completed<span class="number"> 700 </span>requests</span><br><span class="line">Completed<span class="number"> 800 </span>requests</span><br><span class="line">Completed<span class="number"> 900 </span>requests</span><br><span class="line">Completed<span class="number"> 1000 </span>requests</span><br><span class="line">Finished<span class="number"> 1000 </span>requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache/2.2.25 (服务器软件名称及版本信息)</span><br><span class="line">Server Hostname:        localhost (服务器主机名)</span><br><span class="line">Server Port:           <span class="number"> 80 </span>(服务器端口)</span><br><span class="line">Document Path:          /index.php (供测试的URL路径)</span><br><span class="line">Document Length:       <span class="number"> 10 </span>bytes (供测试的URL返回的文档大小)</span><br><span class="line">Concurrency Level:     <span class="number"> 100 </span>(并发数)</span><br><span class="line">Time taken for tests:   0.247 seconds (压力测试消耗的总时间)</span><br><span class="line">Complete requests:     <span class="number"> 1000 </span>(压力测试的总次数)</span><br><span class="line">Failed requests:       <span class="number"> 0 </span>(失败的请求数（当有失败时，证明此时存在瓶颈问题）)</span><br><span class="line">Write errors:          <span class="number"> 0 </span>(网络连接写入错误数)</span><br><span class="line">Total transferred:     <span class="number"> 198000 </span>bytes (传输的总数据量)</span><br><span class="line">HTML transferred:      <span class="number"> 10000 </span>bytes (HTML文档的总数据量)</span><br><span class="line">Requests per second:    4048.34 [<span class="comment">#/sec] (mean) (平均每秒的请求数)</span></span><br><span class="line">Time per request:       2.47 [ms] (mean) (一次并发请求一次的平均时间(247ms/100))</span><br><span class="line">Time per request:       0.247 [ms] (mean, across all concurrent requests) (单个用户请求一次的平均时间(247ms/1000))</span><br><span class="line">Transfer rate:          782.78 [Kbytes/sec] received (传输速率，单位：KB/s)</span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       <span class="number"> 0 </span>  <span class="number"> 0 </span>  0.3     <span class="number"> 0 </span>      1</span><br><span class="line">Processing:    <span class="number"> 6 </span> <span class="number"> 23 </span>  4.2    <span class="number"> 24 </span>     30</span><br><span class="line">Waiting:       <span class="number"> 5 </span> <span class="number"> 20 </span>  5.3    <span class="number"> 21 </span>     29</span><br><span class="line">Total:         <span class="number"> 6 </span> <span class="number"> 23 </span>  4.2    <span class="number"> 24 </span>     30</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     24</span><br><span class="line">  66%     25</span><br><span class="line">  75%     26</span><br><span class="line">  80%     26å</span><br><span class="line">  90%     27</span><br><span class="line">  95%     27</span><br><span class="line">  98%     28</span><br><span class="line">  99%     29</span><br><span class="line"> 100%    <span class="number"> 30 </span>(longest request)</span><br></pre></td></tr></table></figure><blockquote><p>Linux每个进程，当需要访问外部时，都会打开一个套接字进行信息交互，默认是一个进程可以同时打开1024个套接字。当c过大，导致当前连接总数量超过套接字数量时，就会报错(socket:Too many open files)。可以通过查询 ulimit -n 查询默认套接字数量以及ulimit -n 65534 更改套接字限制大小。</p></blockquote><blockquote><p>当同一台机器访问本服务器瞬间请求过多时，Linux内核会自动开启保护机制，拒绝访问。此时设置为0关闭该保护机制。echo 0 &gt; /proc/sys/net/ipv4/tcp_syncookies</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;压力测试（Stress Test），也称为强度测试、负载测试。&lt;/p&gt;
&lt;p&gt;压力测试时模拟实际应用的软硬件环境以及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。&lt;/p&gt;
&lt;h2 id=&quot;压力测试的目的&quot;&gt;&lt;a href=&quot;#压力测试的目的&quot; class=&quot;headerlink&quot; title=&quot;压力测试的目的&quot;&gt;&lt;/a&gt;压力测试的目的&lt;/h2&gt;&lt;p&gt;以Web为例，关注项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发量&lt;/li&gt;
&lt;li&gt;响应速度&lt;/li&gt;
&lt;li&gt;容错能力&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="测试" scheme="https://www.guaosi.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web" scheme="https://www.guaosi.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS原理</title>
    <link href="https://www.guaosi.com/2020/01/22/simple-principle-of-https/"/>
    <id>https://www.guaosi.com/2020/01/22/simple-principle-of-https/</id>
    <published>2020-01-22T08:49:35.000Z</published>
    <updated>2021-12-05T08:13:24.112Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS是在HTTP上建立SSL加密层，并对传输数据进行加密，是HTTP协议的安全版。</p><ul><li>数据安全和数据完整</li><li>对传输层数据进行加密后传输</li></ul><p><img src="/assets/blogImg/simple-principle-of-https/https-ssl位置图示.png" alt="https-ssl位置图示"></p><a id="more"></a><p>HTTPS主要作用是：</p><p>（1）对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;</p><p>（2）对网站服务器进行真实身份认证。</p><p>我们经常会在Web的登录页面和购物结算界面等使用HTTPS通信。使用HTTPS通信时，不再用<code>http://</code>，而是改用<code>https://</code>。另外，当浏览器访问HTTPS通信有效的Web网站时，浏览器的地址栏内会出现一个带锁的标记。对HTTPS的显示方式会因浏览器的不同而有所改变。</p><p>讲解之前，我们需要对<code>加密</code>以及<code>数字证书</code>有一个大体的认识。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>对称一般分为对称加密与非对称加密</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>当使用相同的秘钥不仅可以进行加密，也可以进行解密时，我们可以称之为对称加密。</p><p><img src="/assets/blogImg/simple-principle-of-https/https-对称加密.png" alt="https-对称加密"></p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>当使用两个不同的秘钥(例如A，B)分别可以进行加密解密时，我们可以称之为非对称加密。这两个密钥，也可以认为是一种加密模型。</p><p>A、B是拥有一定数学关系的一组秘钥。<code>私钥</code>自己使用，不对外公开。<code>公钥</code>给大家使用，对外公开。<code>公钥</code>进行加密，<code>私钥</code>对<code>公钥</code>加密的内容进行解密</p><p><img src="/assets/blogImg/simple-principle-of-https/https-非对称加密.png" alt="https-非对称加密"></p><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>数字证书是可信任组织颁发给特定对象的认证。为我们提供HTTPS证书制作的厂商，我们都可以认为他们是可信任组织。当域名申请https通过后，他们就会颁发HTTPS证书，供下载认证使用，该证书全球同步认证。</p><blockquote><p>注意，如果是个人自己制作的HTTPS证书(比如用Linux直接内部生成)，是不会全球同步认证的，所以浏览器访问个人制作的HTTPS站点，会有警告提示。</p></blockquote><p>数字证书里一般包括如下几个内容：</p><ul><li>证书格式、版本号</li><li>证书序列号</li><li>签名算法</li><li>有限期</li><li>对象名称</li><li><code>对象公开密钥</code></li></ul><p><code>对象公开密钥</code>也就是公钥，这个很重要，圈起来要考的！</p><h2 id="HTTPS链接构建过程"><a href="#HTTPS链接构建过程" class="headerlink" title="HTTPS链接构建过程"></a>HTTPS链接构建过程</h2><p><img src="/assets/blogImg/simple-principle-of-https/https连接构建全过程.png" alt="https连接构建全过程"></p><p>图上我们可以得知：HTTPS除了端口使用443，多了一个<code>SSL安全参数握手</code>的过程，其他过程与HTTP并没有什么区别。</p><h3 id="SSL安全参数握手"><a href="#SSL安全参数握手" class="headerlink" title="SSL安全参数握手"></a>SSL安全参数握手</h3><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p><img src="/assets/blogImg/simple-principle-of-https/https-ssl安全握手全过程.png" alt="https-ssl安全握手全过程"></p><p>我们按照图上三个流程进行分解讲解：</p><p>流程1：</p><p>客户端浏览器A，随机生成一个随机数1，浏览器支持的协议版本以及加密算法，发送到服务器B。此时客户端浏览器A和服务器B都有相同的随机数1。</p><p>流程2：</p><p>服务器B接收到请求后，随机生成一个随机数2，返回原先申请HTTPS颁发的数字证书以及确定下来的加密算法。返回给客户端浏览器A。此时客户端浏览器A和服务器B都有相同的随机数1，2。</p><p>流程3：</p><p>客户端浏览器A将服务器B返回的证书进行确认是否有效(如果是个人制作的，浏览器查询出来就是无效)，然后生成随机数3，然后使用<code>流程2的数字证书里的对象公开密钥(公钥)</code>进行加密随机数3，将加密后的随机数3再发给服务器B。</p><p>流程4：</p><p>图上只有三个流程，不过流程3结束之后服务器B进行的处理，才是最重要的步骤。</p><p>此时服务器B使用HTTPS颁发的私钥，将客户端浏览器A发来的加密随机数3进行解密。此时客户端浏览器A和服务器B都有相同的随机数1，2，3。现在双方都<code>根据随机数1，2，3通过流程1,2上确认的加密算法，生成对称密钥</code>，此时生成的对称密钥客户端浏览器A和服务器B肯定相同。所以他们最后就使用这个对称密钥进行加密解密，来加密接下来的通信过程。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我们可以看出，整合SSL安全参数握手不仅仅使用了非对称加密，也是用了对称加密。并且双方是自行生成最后的对称加密密钥，并没有使用在数据报文中传输这个密钥，保证密钥的安全性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS是在HTTP上建立SSL加密层，并对传输数据进行加密，是HTTP协议的安全版。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据安全和数据完整&lt;/li&gt;
&lt;li&gt;对传输层数据进行加密后传输&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/simple-principle-of-https/https-ssl位置图示.png&quot; alt=&quot;https-ssl位置图示&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Web" scheme="https://www.guaosi.com/tags/Web/"/>
    
      <category term="HTTP" scheme="https://www.guaosi.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：走迷宫-广度优先算法</title>
    <link href="https://www.guaosi.com/2019/03/22/golang-maze-breadth-first-search/"/>
    <id>https://www.guaosi.com/2019/03/22/golang-maze-breadth-first-search/</id>
    <published>2019-03-22T01:51:46.000Z</published>
    <updated>2021-12-05T08:13:24.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>走迷宫是一个比较经典的算法问题，它既可以使用广度优先算法，也可以使用深度优先算法，这2种算法的本质是不一样的。</p><p>广度优先算法:周围每个点都走一下，周围的点走往后，前往下一个点继续周围的点走一下，以此类推。都是点到为止，不多走，这样可以保证达到终点时，路径一定是最短的。不需要使用到递归。</p><p>深度优先算法:从一个点，一直走到底，走到不能走。需使用递归实现。</p><p>本文使用广度优先算法实现查找迷宫最短路径。</p><a id="more"></a><h1 id="2-需求"><a href="#2-需求" class="headerlink" title="2. 需求"></a>2. 需求</h1><p>使用文件内规定好的迷宫，0是通路，1是阻碍，迷宫从起点走到终点。并且在走完后，可以告知能否到达终点以及具体路径。</p><p>迷宫</p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_init.png" alt="maze_init"></p><h1 id="3-思路分析"><a href="#3-思路分析" class="headerlink" title="3. 思路分析"></a>3. 思路分析</h1><p>1.首先，需要先定义探索的方向顺序，我们将其排序为先上后左再下最后右。</p><p>2.一开始，从一个点开始，那么，我的周围将会有4个点等着我去探索。我们先从上开始走一步，<code>走完后需要先退回来再走左边而不是继续顺着再往下探索</code>，否则就变成了深度优先算法了。第一轮后，周围四个点将会被我们探索一遍。</p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_first.png" alt="maze_first"></p><p>3.周围四个点技术后，我们再前进一个点，继续按照2的步骤进行探索，以此类推。</p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_second.png" alt="maze_second"></p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_third.png" alt="maze_third"></p><p>4.这样，当我们碰到终点时，路径一定会是最短的。</p><h1 id="4-算法分析"><a href="#4-算法分析" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h1><p>1.首先，我们需要做一个队列，可以使用切片来模拟。这个队列用来存放可以探测的点，然后每次都从这个队列将点取出，进行4个方向的探测，每一个可以探测的点，都再存放到这个队列里。</p><p>2.我们将地图坐标认为与数组下标是一致的。从起点开始，周围探测一圈，发现只有<code>(1,0)</code>可以探测，将<code>(1,0)</code>放入队列</p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_queue.png" alt="maze_queue"></p><p>3.从队列中取出<code>(1,0)</code>，根据上左下右的顺序，我们发现<code>(2,0)</code>,<code>(1,1)</code>可以探测，于是我们按照顺序，依次存入队列。</p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_queue1.png" alt="maze_queue1"></p><p>4.以此类推，当我们走到<code>(1,2)</code>时，根据上左下右的顺序，我们发现<code>(0,2)</code>,<code>(1,1)</code>,<code>(2,2)</code>可以探测，<code>(1,1)</code>已经走过了，废弃掉。所以我们将<code>(0,2)</code>,<code>(2,2)</code>按照顺序，依次存入队列。</p><p><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_queue2.png" alt="maze_queue2"></p><p>5.最后，当探测的点等于终点时，证明迷宫可以走出。所以，我们还需要另一张地图，专门用来记录走的路径以及第几步。</p><h1 id="5-最终结果"><a href="#5-最终结果" class="headerlink" title="5. 最终结果"></a>5. 最终结果</h1><p>以上面的地图为例，最终我们会获得这样一个二维数组。<br><img src="/assets/blogImg/data-structures-and-algorithms/maze-breadth-first-search/maze_end.png" alt="maze_end"></p><p>那应该如何找到走过的路径？从终点开始，往回走，比如此时终点是13，那么就找12的点在哪。然后把终点替换为12，再去找11在哪里，以此类推，最终找到0，就找到了整个迷宫所走的路径。</p><h1 id="6-代码实现"><a href="#6-代码实现" class="headerlink" title="6. 代码实现"></a>6. 代码实现</h1><p>迷宫获取文件 <code>maze.ini</code></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>maze.go</p><p>为了防止数组越界报错以及方便使用，我们将坐标点做成一个结构体<code>point</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//从配置文件中读取行，列，以及地图规则</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMap</span><span class="params">(row, col *<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">file, err := os.Open(<span class="string">"./maze.ini"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fscanf(file, <span class="string">"%d %d"</span>, row, col)</span><br><span class="line">maze := <span class="built_in">make</span>([][]<span class="keyword">int</span>, *row)</span><br><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> maze &#123;</span><br><span class="line">maze[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, *col)</span><br><span class="line"><span class="keyword">for</span> j, _ := <span class="keyword">range</span> maze[i] &#123;</span><br><span class="line">fmt.Fscanf(file, <span class="string">"%d"</span>, &amp;maze[i][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maze</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建二维切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTwoSlice</span><span class="params">(row, col <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">two_slice := <span class="built_in">make</span>([][]<span class="keyword">int</span>, row)</span><br><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> two_slice &#123;</span><br><span class="line">two_slice[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, col)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> two_slice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义坐标类型，不过坐标类型需要依照二维数组下标的规则</span></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span> &#123;</span><br><span class="line">i, j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上 左 下 右 四个方向</span></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">4</span>]point&#123;</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算点计算后的结果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this point)</span> <span class="title">addPoint</span><span class="params">(dir point)</span> <span class="title">point</span></span> &#123;</span><br><span class="line"><span class="comment">//故意不设置为引用传递，这样不需要重新创建一个point返回</span></span><br><span class="line">this.i += dir.i</span><br><span class="line">this.j += dir.j</span><br><span class="line"><span class="keyword">return</span> this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断该点是否越界以及返回该点的值为多少</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *point)</span> <span class="title">normalGetValue</span><span class="params">(myMap [][]<span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//先比行</span></span><br><span class="line"><span class="keyword">if</span> this.i &lt; <span class="number">0</span> || this.i &gt;= <span class="built_in">len</span>(myMap) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再比列</span></span><br><span class="line"><span class="keyword">if</span> this.j &lt; <span class="number">0</span> || this.j &gt;= <span class="built_in">len</span>(myMap[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回具体的值</span></span><br><span class="line"><span class="keyword">return</span> myMap[this.i][this.j], <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印地图</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMap</span><span class="params">(myMap [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"开始打印地图:"</span>)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myMap &#123;</span><br><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> value &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\t"</span>, val)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断地图是否找到终点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findEndPointAndPath</span><span class="params">(myMap [][]<span class="keyword">int</span>, end point)</span> <span class="params">([]point, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> queue []point</span><br><span class="line">end_value := myMap[end.i][end.j]</span><br><span class="line"><span class="keyword">if</span> end_value == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//证明没有到达重点</span></span><br><span class="line"><span class="keyword">return</span> queue, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果找到了,先将终点存入切片</span></span><br><span class="line">queue = <span class="built_in">append</span>(queue, end)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> end_value &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//如果比0小，证明已经全找完了。</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时end_value的值是我们想要找的值</span></span><br><span class="line">end_value--</span><br><span class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> directions &#123;</span><br><span class="line"><span class="comment">//继续寻找周围符合的点</span></span><br><span class="line">next := end.addPoint(dir)</span><br><span class="line"><span class="comment">//再判断该点是否会越界</span></span><br><span class="line">data, ok := next.normalGetValue(myMap)</span><br><span class="line"><span class="keyword">if</span> !ok || data != end_value &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过证明是我们要找的点，存到切片中</span></span><br><span class="line">queue = <span class="built_in">append</span>(queue, next)</span><br><span class="line"><span class="comment">//更换end点</span></span><br><span class="line">end = next</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> queue, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始执行，传入地图以及当前步数地图。开始位置以及终点位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">walk</span><span class="params">(maze, steps [][]<span class="keyword">int</span>, start, end point)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//1. 先将起点放入队列</span></span><br><span class="line">queue := []point&#123;start&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(queue) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//如果队列取完了，证明已经结束了，退出程序</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有走完，就取出队列第一个数，进行判断。</span></span><br><span class="line">first := queue[<span class="number">0</span>]</span><br><span class="line">queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> directions &#123;</span><br><span class="line"><span class="comment">//运算后，计算出下个点的坐标</span></span><br><span class="line">next := first.addPoint(dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> next == end &#123;</span><br><span class="line"><span class="comment">//证明这个运算后的点就是重点了</span></span><br><span class="line"><span class="comment">//此时在步数地图进行记录，然后退出</span></span><br><span class="line">steps[next.i][next.j] = steps[first.i][first.j] + <span class="number">1</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断该点是否符合要求</span></span><br><span class="line"><span class="comment">//前提，都需要该点没有越界</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.判断在maze地图中是否为1，1是墙就跳过</span></span><br><span class="line">res, ok := next.normalGetValue(maze)</span><br><span class="line"><span class="keyword">if</span> !ok || res == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断在steps地图中是否已经走过了，已经走过证明不通或者别的点会走，直接跳过</span></span><br><span class="line">res, ok = next.normalGetValue(steps)</span><br><span class="line"><span class="keyword">if</span> !ok || res != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.判断是不是起点，如果是起点就跳过</span></span><br><span class="line"><span class="keyword">if</span> next == start &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果全部通过，证明可以走</span></span><br><span class="line"><span class="comment">//把这个点加入队列，可以继续探测</span></span><br><span class="line"><span class="comment">//并且将步数进行记录</span></span><br><span class="line">queue = <span class="built_in">append</span>(queue, next)</span><br><span class="line">steps[next.i][next.j] = steps[first.i][first.j] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将步数地图返回</span></span><br><span class="line"><span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> row, col <span class="keyword">int</span></span><br><span class="line">maze := getMap(&amp;row, &amp;col)</span><br><span class="line">printMap(maze)</span><br><span class="line">steps := getTwoSlice(row, col)</span><br><span class="line">start := point&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">end := point&#123;<span class="number">5</span>, <span class="number">4</span>&#125;</span><br><span class="line">res := walk(maze, steps, start, end)</span><br><span class="line">printMap(res)</span><br><span class="line"></span><br><span class="line">path, ok := findEndPointAndPath(steps, end)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"最短路径坐标:"</span>)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="built_in">len</span>(path) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v "</span>, path[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"对不起，没有找到通往终点的路径"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="7-运行结果"><a href="#7-运行结果" class="headerlink" title="7. 运行结果"></a>7. 运行结果</h1><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">开始打印地图:</span></span><br><span class="line"><span class="xml">01000</span></span><br><span class="line"><span class="xml">00010</span></span><br><span class="line"><span class="xml">01010</span></span><br><span class="line"><span class="xml">11100</span></span><br><span class="line"><span class="xml">01001</span></span><br><span class="line"><span class="xml">01000</span></span><br><span class="line"><span class="xml">开始打印地图:</span></span><br><span class="line"><span class="xml">00456</span></span><br><span class="line"><span class="xml">12307</span></span><br><span class="line"><span class="xml">20408</span></span><br><span class="line"><span class="xml">000109</span></span><br><span class="line"><span class="xml">0012110</span></span><br><span class="line"><span class="xml">00131213</span></span><br><span class="line"><span class="xml">最短路径坐标:</span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;0 0&#125;</span><span class="xml"> </span><span class="template-variable">&#123;1 0&#125;</span><span class="xml"> </span><span class="template-variable">&#123;1 1&#125;</span><span class="xml"> </span><span class="template-variable">&#123;1 2&#125;</span><span class="xml"> </span><span class="template-variable">&#123;0 2&#125;</span><span class="xml"> </span><span class="template-variable">&#123;0 3&#125;</span><span class="xml"> </span><span class="template-variable">&#123;0 4&#125;</span><span class="xml"> </span><span class="template-variable">&#123;1 4&#125;</span><span class="xml"> </span><span class="template-variable">&#123;2 4&#125;</span><span class="xml"> </span><span class="template-variable">&#123;3 4&#125;</span><span class="xml"> </span><span class="template-variable">&#123;3 3&#125;</span><span class="xml"> </span><span class="template-variable">&#123;4 3&#125;</span><span class="xml"> </span><span class="template-variable">&#123;5 3&#125;</span><span class="xml"> </span><span class="template-variable">&#123;5 4&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;走迷宫是一个比较经典的算法问题，它既可以使用广度优先算法，也可以使用深度优先算法，这2种算法的本质是不一样的。&lt;/p&gt;
&lt;p&gt;广度优先算法:周围每个点都走一下，周围的点走往后，前往下一个点继续周围的点走一下，以此类推。都是点到为止，不多走，这样可以保证达到终点时，路径一定是最短的。不需要使用到递归。&lt;/p&gt;
&lt;p&gt;深度优先算法:从一个点，一直走到底，走到不能走。需使用递归实现。&lt;/p&gt;
&lt;p&gt;本文使用广度优先算法实现查找迷宫最短路径。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Golang易错点:值传递和引用传递</title>
    <link href="https://www.guaosi.com/2019/03/20/golang-value-passing-and-reference-passing/"/>
    <id>https://www.guaosi.com/2019/03/20/golang-value-passing-and-reference-passing/</id>
    <published>2019-03-20T00:54:45.000Z</published>
    <updated>2021-12-05T08:13:24.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>我们知道golang有值传递与引用传递两种传递方式。</p><p>值类型: 基本数据类型int系列，float系列，bool，string，数组和结构体struct</p><p>引用类型: 指针，slice切片，map，管道chan，interface等</p><p>这两者的区别是，值传递相当于是复制了一份。而引用传递，是复制了相同的指针地址。如下图所示:</p><p><img src="/assets/blogImg/golang-value-passing-and-reference-passing/value-passing-and-reference-passing.png" alt="value-passing-and-reference-passing"></p><a id="more"></a><h1 id="2-基础类型"><a href="#2-基础类型" class="headerlink" title="2. 基础类型"></a>2. 基础类型</h1><p>基础类型的比较简单易懂</p><h2 id="2-1-改变指针指向内容"><a href="#2-1-改变指针指向内容" class="headerlink" title="2.1. 改变指针指向内容"></a>2.1. 改变指针指向内容</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func test(<span class="selector-tag">a</span> *int) &#123;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="number">20</span></span><br><span class="line">*<span class="selector-tag">a</span> = b</span><br><span class="line">fmt.Println(a) <span class="comment">//0xc00001c098</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">10</span></span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//0xc00001c098</span></span><br><span class="line">test(&amp;a)</span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//0xc00001c098</span></span><br><span class="line">fmt.Println(a)  <span class="comment">//20</span></span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，当<code>*a = b</code>时，此时是改变了指针<code>a</code>所指向地址的内容，所以，<code>main</code>函数的<code>a</code>的值从<code>10</code>变成了<code>20</code>.同时，我们发现<code>test</code>函数中<code>a</code>的指向地址与<code>main</code>函数的a相同，没有发生改变。</p><h2 id="2-2-改变指针指向地址"><a href="#2-2-改变指针指向地址" class="headerlink" title="2.2. 改变指针指向地址"></a>2.2. 改变指针指向地址</h2><p>如果我们将<code>b</code>的地址替换掉<code>a</code>指向的地址，又会发生什么事情呢?<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func test(<span class="selector-tag">a</span> *int) &#123;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="number">20</span></span><br><span class="line">*<span class="selector-tag">a</span> = b</span><br><span class="line">fmt.Println(a) <span class="comment">//0xc00001c098</span></span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//0xc00001c0a0</span></span><br><span class="line"><span class="selector-tag">a</span> = &amp;b</span><br><span class="line">fmt.Println(a) <span class="comment">//0xc00001c0b0</span></span><br><span class="line">*<span class="selector-tag">a</span> = <span class="number">30</span></span><br><span class="line">fmt.Println(*a) <span class="comment">//30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">10</span></span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//0xc00001c098</span></span><br><span class="line">test(&amp;a)</span><br><span class="line">fmt.Println(&amp;a) <span class="comment">//0xc00001c098</span></span><br><span class="line">fmt.Println(a)  <span class="comment">//20</span></span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到，<code>test</code>函数中将<code>a</code>的指向地址改成了<code>b</code>的地址，此时对<code>a</code>进行的任何操作，对<code>main</code>函数的<code>a</code>不会产生任何影响，这是因为<code>test</code>中<code>a</code>指向的地址与<code>main</code>函数中a的地址已经不一样了。</p><p><img src="/assets/blogImg/golang-value-passing-and-reference-passing/指向分析.png" alt="指向分析"></p><h2 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3. 小结"></a>2.3. 小结</h2><p>改变指针所指向地址的内容，会对所有指向该地址的指针产生影响。但是，如果将指针所指向的地址发生改变，那就不同了。这对golang的其他数据类型同样适用。</p><h1 id="3-结构体"><a href="#3-结构体" class="headerlink" title="3. 结构体"></a>3. 结构体</h1><p>结构体可以由我们自己觉得它的方法是值传递还是引用传递，如果是引用传递，对结构体内部成员的修改才会生效。但是，如果我们想直接将当前结构体的一个实例在方法里替换成另一个实例要怎么做呢？</p><h2 id="3-1-错误演示"><a href="#3-1-错误演示" class="headerlink" title="3.1. 错误演示"></a>3.1. 错误演示</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStruct1)</span> <span class="title">test</span><span class="params">(there MyStruct1)</span></span> &#123;</span><br><span class="line"><span class="comment">//目前this是指针类型</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, this) <span class="comment">//0xc00000a060</span></span><br><span class="line">this = &amp;there</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str1 = &amp;MyStruct1&#123;<span class="string">"张三"</span>, <span class="number">18</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, str1) <span class="comment">//0xc00000a060</span></span><br><span class="line"><span class="keyword">var</span> str2 = MyStruct1&#123;<span class="string">"李四"</span>, <span class="number">20</span>&#125;</span><br><span class="line">fmt.Println(str1) <span class="comment">//&amp;&#123;张三 18&#125;</span></span><br><span class="line">str1.test(str2)</span><br><span class="line">fmt.Println(str1) <span class="comment">//&amp;&#123;张三 18&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>this</code>跟<code>str1</code>都是指针类型，指向同一个地址。而我们是将指针指向的地址进行了更换，所以跟上面<code>基础类型</code>的情况一样，对外部是不造成影响的。</p><h2 id="3-2-正确演示"><a href="#3-2-正确演示" class="headerlink" title="3.2. 正确演示"></a>3.2. 正确演示</h2><p>与基础类型的一样，我们只要将指向地址的值进行修改替换，就可以达到目的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStruct1)</span> <span class="title">test</span><span class="params">(there MyStruct1)</span></span> &#123;</span><br><span class="line"><span class="comment">//目前this是指针类型</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, this) <span class="comment">//0xc00000a060</span></span><br><span class="line">*this = there</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str1 = &amp;MyStruct1&#123;<span class="string">"张三"</span>, <span class="number">18</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, str1) <span class="comment">//0xc00000a060</span></span><br><span class="line"><span class="keyword">var</span> str2 = MyStruct1&#123;<span class="string">"李四"</span>, <span class="number">20</span>&#125;</span><br><span class="line">fmt.Println(str1) <span class="comment">//&amp;&#123;张三 18&#125;</span></span><br><span class="line">str1.test(str2)</span><br><span class="line">fmt.Println(str1) <span class="comment">//&amp;&#123;李四 20&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们将<code>this</code>指向地址的内容更改为了<code>there</code>,此时外部就会收到了影响。</p><h1 id="4-切片"><a href="#4-切片" class="headerlink" title="4. 切片"></a>4. 切片</h1><p>切片的比较复杂一点，原因是我们知道切片的数据结构其实是有指针的，切片通过这个指针的指向，来获得地址中对应的数值。当然，把切片认为是一个结构体，然后结构体里有一个指针，这样会更好理解。</p><p><img src="/assets/blogImg/golang-value-passing-and-reference-passing/slice数据结构.png" alt="slice数据结构"></p><h2 id="4-1-错误改变切片"><a href="#4-1-错误改变切片" class="headerlink" title="4.1. 错误改变切片"></a>4.1. 错误改变切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, a)  <span class="comment">// 0xc0000161a0</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;a) <span class="comment">// 0xc000088080</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, a)  <span class="comment">// 0xc000014090</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;a) <span class="comment">// 0xc000088080</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(a) <span class="comment">// [2 3 4]</span></span><br><span class="line">    fmt.Printf(<span class="string">"%p\n"</span>, a) <span class="comment">// 0xc0000161a0</span></span><br><span class="line">    fmt.Printf(<span class="string">"%p\n"</span>, &amp;a) <span class="comment">//0xc000094020</span></span><br><span class="line">test(a)</span><br><span class="line">fmt.Println(a) <span class="comment">// [10 3 4]</span></span><br><span class="line">    fmt.Printf(<span class="string">"%p\n"</span>, a) <span class="comment">// 0xc0000161a0</span></span><br><span class="line">    fmt.Printf(<span class="string">"%p\n"</span>, &amp;a) <span class="comment">//0xc000094020</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要先了解，<code>fmt.Printf(&quot;%p\n&quot;, a)</code>与<code>fmt.Printf(&quot;%p\n&quot;, &amp;a)</code>到底打印的是谁的地址。其实，<code>fmt.Printf(&quot;%p\n&quot;, a)</code>打印的是切片<code>a</code>中的<code>指针地址</code>，而<code>fmt.Printf(&quot;%p\n&quot;, &amp;a)</code>打印的是<code>a</code>自己本身的地址。</p><p>在<code>test</code>函数中将<code>a[0]</code>改变能对外部生效的原因是<code>test</code>函数中的<code>a</code>虽然与外部的<code>a</code>不是同一个地址，但是切片内部的指针指向地址与外部是相同的。所以修改对外部有效。</p><p><code>append</code>函数不同，虽然<code>append</code>改变的是切片内部指针指向的地址，但是因为<code>test</code>中的a本身地址与<code>main</code>函数中<code>a</code>本身地址已经不同了，所以修改切片的内部指针对外部是无效的。</p><h2 id="4-2-正确方式"><a href="#4-2-正确方式" class="headerlink" title="4.2. 正确方式"></a>4.2. 正确方式</h2><p>我们使用引用传递，将a本身地址传入，就可以解决这个问题。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, *a) <span class="comment">//0xc0000161a0</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, a)  <span class="comment">//0xc00000a060</span></span><br><span class="line">*a = <span class="built_in">append</span>(*a, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, *a) <span class="comment">//0xc000014090</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, a)  <span class="comment">//0xc00000a060</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, a)  <span class="comment">//0xc0000161a0</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;a) <span class="comment">//0xc00000a060</span></span><br><span class="line">test(&amp;a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, a)  <span class="comment">//0xc000014090</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;a) <span class="comment">//0xc00000a060</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>test</code> 函数中，因为<code>a</code>是指针传递过来的，所以<code>fmt.Printf(&quot;%p\n&quot;, a)</code>表示原地址(与<code>main</code>中的<code>a</code>的地址相同).而<code>fmt.Printf(&quot;%p\n&quot;, *a)</code>则表示切片中的指针指向地址。</p><p>所以我们此时再使用<code>append</code>函数，改变了切片中的指针指向地址。但是因为<code>test</code>函数中<code>a</code>的值与<code>main</code>函数中的<code>a</code>的地址是相同的，所以外部也会随之改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;我们知道golang有值传递与引用传递两种传递方式。&lt;/p&gt;
&lt;p&gt;值类型: 基本数据类型int系列，float系列，bool，string，数组和结构体struct&lt;/p&gt;
&lt;p&gt;引用类型: 指针，slice切片，map，管道chan，interface等&lt;/p&gt;
&lt;p&gt;这两者的区别是，值传递相当于是复制了一份。而引用传递，是复制了相同的指针地址。如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/golang-value-passing-and-reference-passing/value-passing-and-reference-passing.png&quot; alt=&quot;value-passing-and-reference-passing&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Laravel关联查询限制条数和分组查询显示为零的结果</title>
    <link href="https://www.guaosi.com/2019/03/19/laravel-with-limit-and-group-show-zero/"/>
    <id>https://www.guaosi.com/2019/03/19/laravel-with-limit-and-group-show-zero/</id>
    <published>2019-03-19T00:44:40.000Z</published>
    <updated>2021-12-05T08:13:24.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h1><p>目前有这样两个需求:</p><p>1) 查询用户，显示用户的信息以及他写过的书籍。如果用户有书籍，则显示，最多显示2本。如果没有，则不显示书籍。</p><p>2) 显示用户的id号以及对应的书籍件数(只用SQL实现，不使用业务逻辑)。</p><a id="more"></a><h1 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h1><p>&#160; &#160; &#160; &#160; 本文中用到的<code>user</code>模型，数据，控制器，路由之类的都已经在另一篇文章 <a href="https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/">手摸手教你让Laravel开发Api更得心应手</a> 创建好了。</p><p><code>users</code>表中的数据</p><p><img src="/assets/blogImg/laravel-limit-paginate/users-data.png" alt="users-data"></p><p><code>books</code>表中的数据</p><p><img src="/assets/blogImg/laravel-with-limit-and-group-show-zero/books-data.png" alt="books-data"></p><h1 id="3-关联查询限制条数"><a href="#3-关联查询限制条数" class="headerlink" title="3. 关联查询限制条数"></a>3. 关联查询限制条数</h1><p>这个比较容易，只要在关联函数限制条数即可。</p><h2 id="3-1-创建Book模型"><a href="#3-1-创建Book模型" class="headerlink" title="3.1. 创建Book模型"></a>3.1. 创建Book模型</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:<span class="keyword">model</span> <span class="keyword">Models</span>/Book</span><br></pre></td></tr></table></figure><h2 id="3-2-添加关联函数并且限制条数"><a href="#3-2-添加关联函数并且限制条数" class="headerlink" title="3.2. 添加关联函数并且限制条数"></a>3.2. 添加关联函数并且限制条数</h2><p>编辑 <code>app/Models/User.php</code>,添加关联函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">books</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Book::class,<span class="string">'user_id'</span>,<span class="string">'id'</span>)-&gt;limit(<span class="number">2</span>); <span class="comment">//一对多，最多关联2条</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3. 测试"></a>3.3. 测试</h2><p>在<code>app/Http/Controllers/Api/UserController.php</code>里，随意添加一个测试函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关联查询限制条数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $users= User::with(<span class="string">'books'</span>)-&gt;get();</span><br><span class="line">        <span class="keyword">return</span> $users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果，符合要求，id为1的用户原来是3本书籍，现在只被取出2本。</p><p><img src="/assets/blogImg/laravel-with-limit-and-group-show-zero/with-limit.png" alt="with-limit"></p><h1 id="4-分组查询显示为零的结果"><a href="#4-分组查询显示为零的结果" class="headerlink" title="4. 分组查询显示为零的结果"></a>4. 分组查询显示为零的结果</h1><h2 id="4-1-SQL语句"><a href="#4-1-SQL语句" class="headerlink" title="4.1. SQL语句"></a>4.1. SQL语句</h2><p>一开始，我们会这样写<code>SQL</code>语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="symbol">`u`</span>.<span class="symbol">`id`</span>,<span class="symbol">`u`</span>.<span class="symbol">`name`</span>,<span class="symbol">`u`</span>.<span class="symbol">`num`</span> <span class="keyword">from</span> <span class="symbol">`users`</span> <span class="keyword">as</span> <span class="symbol">`u`</span> <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="symbol">`user_id`</span>,<span class="built_in">count</span>(*) <span class="keyword">as</span> <span class="symbol">`num`</span> <span class="keyword">from</span> books <span class="keyword">group</span> <span class="keyword">by</span> <span class="symbol">`user_id`</span>) <span class="keyword">as</span> <span class="symbol">`b`</span> <span class="keyword">on</span> <span class="symbol">`u`</span>.id = <span class="symbol">`b`</span>.user_id</span><br></pre></td></tr></table></figure><p>最后显示如下，并不会将没有的显示为0</p><p><img src="/assets/blogImg/laravel-with-limit-and-group-show-zero/books-sql-origin-result.png" alt="books-sql-origin-result"></p><p>所以我们稍加修改，用上<code>MySQL</code>的内置函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="symbol">`u`</span>.<span class="symbol">`id`</span>,<span class="symbol">`u`</span>.<span class="symbol">`name`</span>,<span class="built_in">IFNULL</span>( <span class="symbol">`b`</span>.<span class="symbol">`num`</span>, <span class="number">0</span> ) <span class="keyword">AS</span> num <span class="keyword">from</span> <span class="symbol">`users`</span> <span class="keyword">as</span> <span class="symbol">`u`</span> <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="symbol">`user_id`</span>,<span class="built_in">count</span>(*) <span class="keyword">as</span> <span class="symbol">`num`</span> <span class="keyword">from</span> books <span class="keyword">group</span> <span class="keyword">by</span> <span class="symbol">`user_id`</span>) <span class="keyword">as</span> <span class="symbol">`b`</span> <span class="keyword">on</span> <span class="symbol">`u`</span>.id = <span class="symbol">`b`</span>.user_id</span><br></pre></td></tr></table></figure><p>符合我们的需求。</p><p><img src="/assets/blogImg/laravel-with-limit-and-group-show-zero/books-sql-result.png" alt="books-sql-result"></p><h2 id="4-2-Laravel框架中使用"><a href="#4-2-Laravel框架中使用" class="headerlink" title="4.2. Laravel框架中使用"></a>4.2. Laravel框架中使用</h2><p>写SQL很容易，那我们应该如何在框架中使用呢(不允许查完再用业务逻辑后获得答案)?同时我们再附加一个条件，只要id为<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>,<code>5</code>的用户。</p><h3 id="4-2-1-直接编写"><a href="#4-2-1-直接编写" class="headerlink" title="4.2.1. 直接编写"></a>4.2.1. 直接编写</h3><p>查询<a href="https://learnku.com/docs/laravel/5.8/queries/3926#joins" target="_blank" rel="noopener">Laravel手册</a>，参考<code>查询构造器</code>的<code>高级join语句</code>，我们会立刻想到下面这样编写<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//统计出所有内部员工的user_id</span></span><br><span class="line">    $user_ids = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    $users = User::selectRaw(<span class="string">'u.id,IFNULL( b.number, 0 ) AS number'</span>)</span><br><span class="line">        -&gt;from(<span class="string">'users as u'</span>)</span><br><span class="line">        -&gt;distinct()</span><br><span class="line">        -&gt;whereIn(<span class="string">'id'</span>, $user_ids)</span><br><span class="line">        -&gt;leftJoin(<span class="string">'books as b'</span>,<span class="function"><span class="keyword">function</span> <span class="params">($join)</span> <span class="title">use</span><span class="params">($user_ids)</span></span>&#123;</span><br><span class="line">               $join-&gt;selectRaw(<span class="string">'user_id,count(*) as number'</span>)-&gt;whereIn(<span class="string">'user_id'</span>, $user_ids)-&gt;groupBy(<span class="string">'user_id'</span>)-&gt;on(<span class="string">'u.id'</span>, <span class="string">'='</span>, <span class="string">'b.user_id'</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        -&gt;get();</span><br><span class="line">    <span class="keyword">return</span> $users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试的时候我们发现报了错<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unknown column 'b.number' in 'field list' (SQL: <span class="keyword">select</span> <span class="keyword">distinct</span> u.id,<span class="built_in">IFNULL</span>( b.<span class="keyword">number</span>, <span class="number">0</span> ) <span class="keyword">AS</span> <span class="keyword">number</span> <span class="keyword">from</span> <span class="symbol">`users`</span> <span class="keyword">as</span> <span class="symbol">`u`</span> <span class="keyword">left</span> <span class="keyword">join</span> <span class="symbol">`books`</span> <span class="keyword">as</span> <span class="symbol">`b`</span> <span class="keyword">on</span> <span class="symbol">`user_id`</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="keyword">and</span> <span class="symbol">`u`</span>.<span class="symbol">`id`</span> = <span class="symbol">`b`</span>.<span class="symbol">`user_id`</span> <span class="keyword">where</span> <span class="symbol">`id`</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></p><p>最后的SQL语句跟我们想象中的不太一样。</p><h3 id="4-2-2-问题分析"><a href="#4-2-2-问题分析" class="headerlink" title="4.2.2. 问题分析"></a>4.2.2. 问题分析</h3><p>错误的原因是，我们其实是使用<code>left join</code>连接了子查询，但是<code>Laravel</code>的联表查询，例如<code>join</code>，<code>lefeJoin</code>，<code>rightJoin</code>等，经过个人的测试，这些闭包并不能实现子查询的。所以最后获得的SQL语句是错误的。</p><p><a href="https://learnku.com/docs/laravel/5.8/queries/3926#c378f6" target="_blank" rel="noopener">Laravel官方文档的子查询</a>并没有这方面详细的介绍，所以我们一起来了解一下其他地方查来的资料</p><h3 id="4-2-3-Query-Builder"><a href="#4-2-3-Query-Builder" class="headerlink" title="4.2.3. Query Builder"></a>4.2.3. Query Builder</h3><h4 id="4-2-3-1-toSql"><a href="#4-2-3-1-toSql" class="headerlink" title="4.2.3.1. toSql()"></a>4.2.3.1. toSql()</h4><p><code>toSql()</code>方法的作用是为了获取不带有<code>binding</code>参数的<code>SQL</code></p><p>例如:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="symbol">`users`</span> <span class="keyword">where</span> <span class="symbol">`users`</span>.<span class="symbol">`id`</span> = ?</span><br></pre></td></tr></table></figure><h4 id="4-2-3-2-getQuery"><a href="#4-2-3-2-getQuery" class="headerlink" title="4.2.3.2. getQuery()"></a>4.2.3.2. getQuery()</h4><p><code>getQuery()</code>方法的作用是为了获取<code>binding</code>参数并代替<code>toSql()</code>获得<code>SQL</code>的问号，从而得到完整的<code>SQL</code><br>例如:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="symbol">`users`</span> <span class="keyword">where</span> <span class="symbol">`users`</span>.<span class="symbol">`id`</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-2-4-修复问题"><a href="#4-2-4-修复问题" class="headerlink" title="4.2.4. 修复问题"></a>4.2.4. 修复问题</h3><p>现在我们使用<code>Query Builder</code>来修复一下之前的问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计出所有内部员工的user_id</span></span><br><span class="line"></span><br><span class="line">    $user_ids = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    $bookQuery = Book::selectRaw(<span class="string">'user_id,count(*) as number'</span>)-&gt;whereIn(<span class="string">'user_id'</span>, $user_ids)-&gt;groupBy(<span class="string">'user_id'</span>); <span class="comment">//制作一个query builder</span></span><br><span class="line"></span><br><span class="line">    $users = User::selectRaw(<span class="string">'u.id,IFNULL( b.number, 0 ) AS number'</span>)</span><br><span class="line">        -&gt;from(<span class="string">'users as u'</span>)</span><br><span class="line">        -&gt;distinct()</span><br><span class="line">        -&gt;whereIn(<span class="string">'id'</span>, $user_ids)</span><br><span class="line">        -&gt;leftJoin(\DB::raw(<span class="string">"(&#123;$bookQuery-&gt;toSql()&#125;) as b"</span>),<span class="function"><span class="keyword">function</span> <span class="params">($join)</span> <span class="title">use</span><span class="params">($bookQuery)</span></span>&#123;</span><br><span class="line">            <span class="comment">//toSql()返回的是等待绑定参数的SQL语句</span></span><br><span class="line">            $join-&gt;mergeBindings($bookQuery-&gt;getQuery())-&gt;on(<span class="string">'u.id'</span>,<span class="string">'='</span>,<span class="string">'b.user_id'</span>);</span><br><span class="line">            <span class="comment">//mergeBindings是将SQl的参数进行绑定</span></span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-5-测试"><a href="#4-2-5-测试" class="headerlink" title="4.2.5. 测试"></a>4.2.5. 测试</h3><p>最后的结果符合我们的需求<br><img src="/assets/blogImg/laravel-with-limit-and-group-show-zero/books-query-builder.png" alt="books-query-builder"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-需求&quot;&gt;&lt;a href=&quot;#1-需求&quot; class=&quot;headerlink&quot; title=&quot;1. 需求&quot;&gt;&lt;/a&gt;1. 需求&lt;/h1&gt;&lt;p&gt;目前有这样两个需求:&lt;/p&gt;
&lt;p&gt;1) 查询用户，显示用户的信息以及他写过的书籍。如果用户有书籍，则显示，最多显示2本。如果没有，则不显示书籍。&lt;/p&gt;
&lt;p&gt;2) 显示用户的id号以及对应的书籍件数(只用SQL实现，不使用业务逻辑)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="https://www.guaosi.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：散列表(hashtable)</title>
    <link href="https://www.guaosi.com/2019/03/17/golang-hash-table/"/>
    <id>https://www.guaosi.com/2019/03/17/golang-hash-table/</id>
    <published>2019-03-17T05:04:28.000Z</published>
    <updated>2021-12-05T08:13:24.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>&#160; &#160; &#160; &#160;散列表(Hash table，也叫哈希表)，是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><a id="more"></a><h1 id="2-雇员的管理系统-增删改查"><a href="#2-雇员的管理系统-增删改查" class="headerlink" title="2. 雇员的管理系统[增删改查]"></a>2. 雇员的管理系统[增删改查]</h1><p>google 公司的一个上机题:<br>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工 的 id 时,要求查找到该员工的所有信息.</p><p><img src="/assets/blogImg/data-structures-and-algorithms/hashtable/hashtable.png" alt="hashtable"></p><p>要求:<br>1) 不使用数据库,尽量节省内存,速度越快越好=&gt;哈希表(散列)<br>2) 添加时，保证按照雇员的 id 从低到高插入</p><h2 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1. 思路"></a>2.1. 思路</h2><p>1) 使用链表来实现哈希表, 该链表不带表头[即: 链表的第一个结点就存放雇员信息] </p><p>2) 思路分析并画出示意图</p><p><img src="/assets/blogImg/data-structures-and-algorithms/hashtable/hashtable-emp.png" alt="hashtable-emp"></p><h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Emp <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">int</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Next *Emp <span class="comment">//链表连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emp)</span> <span class="title">ShowMe</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"id:%d,姓名:%s\n"</span>, this.Id, this.Name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emp)</span> <span class="title">UpdateMe</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">this.Name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Emplink <span class="keyword">struct</span> &#123;</span><br><span class="line">Head *Emp <span class="comment">//头指针，指向链表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法2 -- 单一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">Insert</span><span class="params">(emp *Emp)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//证明目前暂时没有节点，直接添加即可</span></span><br><span class="line">this.Head = emp</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//此时证明有成员，需要进行插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要根据大小插入</span></span><br><span class="line"></span><br><span class="line">tail := this.Head <span class="comment">//第一个雇员节点</span></span><br><span class="line">head := tail.Next <span class="comment">//下一个雇员节点</span></span><br><span class="line"><span class="keyword">if</span> tail.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//第一个雇员节点都比他大，证明他是最小的，放在第一位</span></span><br><span class="line">this.Head = emp</span><br><span class="line">emp.Next = tail</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//此时到了链表最后或者找到了插入位置</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tail = head</span><br><span class="line">head = head.Next</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tail.Next = emp</span><br><span class="line">emp.Next = head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单一显示</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">Show</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//链表为空</span></span><br><span class="line">fmt.Printf(<span class="string">"链表 %d 为空"</span>, i)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head := this.Head</span><br><span class="line">fmt.Printf(<span class="string">"链表 %d 信息: "</span>, i)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"编号:%d , 姓名:%s --&gt;"</span>, head.Id, head.Name)</span><br><span class="line">head = head.Next</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> *<span class="title">Emp</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head := this.Head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.Id == id &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = head.Next</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">DeleteById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//没有成员，无法删除</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//给2个指针，开始查找</span></span><br><span class="line">head := this.Head</span><br><span class="line">tail := head</span><br><span class="line"><span class="keyword">if</span> head.Id == id &#123;</span><br><span class="line"><span class="comment">//如果第一个就是，直接处理</span></span><br><span class="line">this.Head = head.Next</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//没有找到，直接退出</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head.Next.Id == id &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">head = head.Next</span><br><span class="line">tail = head</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走到这里说明找到了</span></span><br><span class="line">tail.Next = head.Next.Next</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Hashtable <span class="keyword">struct</span> &#123;</span><br><span class="line">LinkArr [<span class="number">7</span>]Emplink <span class="comment">//结构体数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">Insert1</span><span class="params">(emp *Emp)</span></span> &#123;</span><br><span class="line"><span class="comment">//根据哈希算法，找到数组下标</span></span><br><span class="line">linkNo := this.HashFun(emp.Id)</span><br><span class="line"></span><br><span class="line">emplink := this.LinkArr[linkNo]</span><br><span class="line"><span class="keyword">if</span> emplink.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//证明目前暂时没有节点，直接添加即可</span></span><br><span class="line">emplink.Head = emp</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//此时证明有成员，需要进行插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要根据大小插入</span></span><br><span class="line"></span><br><span class="line">tail := emplink.Head <span class="comment">//第一个雇员节点</span></span><br><span class="line">head := tail.Next    <span class="comment">//下一个雇员节点</span></span><br><span class="line"><span class="keyword">if</span> tail.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//第一个雇员节点都比他大，证明他是最小的，放在第一位</span></span><br><span class="line">emplink.Head = emp</span><br><span class="line">emp.Next = tail</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//此时到了链表最后或者找到了插入位置</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tail = head</span><br><span class="line">head = head.Next</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tail.Next = emp</span><br><span class="line">emp.Next = head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为结构体数组本质还是结构体，结构体是值传递，上面修改不会影响当前值，所以要重新赋值一次。</span></span><br><span class="line">this.LinkArr[linkNo] = emplink</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法2 -- 所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">Insert2</span><span class="params">(emp *Emp)</span></span> &#123;</span><br><span class="line"><span class="comment">//根据哈希算法，找到数组下标</span></span><br><span class="line">linkNo := this.HashFun(emp.Id)</span><br><span class="line"></span><br><span class="line">this.LinkArr[linkNo].Insert(emp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">ShowAll</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(this.LinkArr); i++ &#123;</span><br><span class="line">this.LinkArr[i].Show(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">HashFun</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> id % <span class="built_in">len</span>(this.LinkArr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> *<span class="title">Emp</span></span> &#123;</span><br><span class="line">linkNo := this.HashFun(id)</span><br><span class="line"><span class="keyword">return</span> this.LinkArr[linkNo].FindById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">DeleteById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">linkNo := this.HashFun(id)</span><br><span class="line"><span class="keyword">return</span> this.LinkArr[linkNo].DeleteById(id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">key := <span class="string">""</span></span><br><span class="line">id := <span class="number">0</span></span><br><span class="line">name := <span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> hashtable Hashtable</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"===============雇员系统菜单============"</span>)</span><br><span class="line">fmt.Println(<span class="string">"input 表示添加雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"show 表示显示雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"find 表示查找雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"edit 表示修改雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"del 表示删除雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"exit 表示退出系统"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请输入你的选择"</span>)</span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"input"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">fmt.Println(<span class="string">"输入雇员 name"</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">emp := &amp;Emp&#123;</span><br><span class="line">Id:   id,</span><br><span class="line">Name: name&#125;</span><br><span class="line">hashtable.Insert2(emp)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">hashtable.ShowAll()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"find"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">emp := hashtable.FindById(id)</span><br><span class="line"><span class="keyword">if</span> emp == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"对不起，没有找到id为 %d 的雇员\n"</span>, id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emp.ShowMe()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"edit"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入要修改的雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">fmt.Println(<span class="string">"输入要修改雇员name的值"</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">emp := hashtable.FindById(id)</span><br><span class="line"><span class="keyword">if</span> emp == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"对不起，没有找到id为 %d 的雇员\n"</span>, id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emp.UpdateMe(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"del"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入要删除的雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">ok := hashtable.DeleteById(id)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"对不起，没有找到id为 %d 的雇员\n"</span>, id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"删除id为 %d 的雇员 成功\n"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;散列表(Hash table，也叫哈希表)，是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：栈(stack)</title>
    <link href="https://www.guaosi.com/2019/03/15/golang-stack/"/>
    <id>https://www.guaosi.com/2019/03/15/golang-stack/</id>
    <published>2019-03-15T15:38:29.000Z</published>
    <updated>2021-12-05T08:13:24.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>有些程序员也把栈称为堆栈, 即栈和堆栈是同一个概念<br>1) 栈的英文为(stack)<br>2) 栈是一个先入后出(FILO-First In Last Out)的有序列表。<br>3) 栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。<br>4) 根据堆栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p><a id="more"></a><h2 id="1-1-示意图"><a href="#1-1-示意图" class="headerlink" title="1.1. 示意图"></a>1.1. 示意图</h2><p>入栈</p><p><img src="/assets/blogImg/data-structures-and-algorithms/stack/push-stack.png" alt="push-stack"></p><p>出栈</p><p><img src="/assets/blogImg/data-structures-and-algorithms/stack/pop-stack.png" alt="pop-stack"></p><h2 id="1-2-场景"><a href="#1-2-场景" class="headerlink" title="1.2. 场景"></a>1.2. 场景</h2><p>1) 子程序的调用:在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再 将地址取出，以回到原来的程序中。<br>2) 处理递归调用:和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变 量等数据存入堆栈中。<br>3) 表达式的转换与求值。<br>4) 二叉树的遍历。<br>5) 图形的深度优先(depth 一 first)搜索法。</p><h2 id="1-3-案例"><a href="#1-3-案例" class="headerlink" title="1.3. 案例"></a>1.3. 案例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Stack struct &#123;</span><br><span class="line">maxNum int    <span class="comment">//规定栈最多放几个元素</span></span><br><span class="line">top    int    <span class="comment">//目前栈顶的下标</span></span><br><span class="line">arr    [<span class="number">5</span>]int <span class="comment">//模拟栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *Stack) Push(<span class="keyword">val</span> int) (err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.isFull() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack full"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack full"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始入栈操作</span></span><br><span class="line"><span class="comment">//先向上走一步</span></span><br><span class="line"><span class="keyword">this</span>.top++</span><br><span class="line"><span class="comment">//再赋值</span></span><br><span class="line"><span class="keyword">this</span>.arr[<span class="keyword">this</span>.top] = <span class="keyword">val</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Stack) Pop() (<span class="keyword">val</span> int, err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> = <span class="keyword">this</span>.arr[<span class="keyword">this</span>.top]</span><br><span class="line"><span class="keyword">this</span>.top--</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Stack) List() (err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">this</span>.top; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">fmt.Printf(<span class="string">"arr[%d]=%d\n"</span>, i, <span class="keyword">this</span>.arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *Stack) isFull() bool &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.top+<span class="number">1</span> &gt;= <span class="keyword">this</span>.maxNum</span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Stack) isEmpty() bool &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.top == -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="keyword">var</span> stack = &amp;Stack&#123;</span><br><span class="line">maxNum: <span class="number">5</span>,</span><br><span class="line">top:    -<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">stack.Push(<span class="number">1</span>)</span><br><span class="line">stack.Push(<span class="number">2</span>)</span><br><span class="line">stack.Push(<span class="number">3</span>)</span><br><span class="line">stack.Push(<span class="number">4</span>)</span><br><span class="line">stack.Push(<span class="number">5</span>)</span><br><span class="line">stack.List()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span>, _ := stack.Pop()</span><br><span class="line">fmt.Println(<span class="string">"弹出 "</span>, <span class="keyword">val</span>)</span><br><span class="line">stack.List()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-栈的计算表达式"><a href="#1-4-栈的计算表达式" class="headerlink" title="1.4. 栈的计算表达式"></a>1.4. 栈的计算表达式</h2><h3 id="1-4-1-分析"><a href="#1-4-1-分析" class="headerlink" title="1.4.1. 分析"></a>1.4.1. 分析</h3><p><img src="/assets/blogImg/data-structures-and-algorithms/stack/exp分析.png" alt="exp分析"></p><h3 id="1-4-2-实现"><a href="#1-4-2-实现" class="headerlink" title="1.4.2. 实现"></a>1.4.2. 实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stack <span class="keyword">struct</span> &#123;</span><br><span class="line">maxNum <span class="keyword">int</span>     <span class="comment">//规定栈最多放几个元素</span></span><br><span class="line">top    <span class="keyword">int</span>     <span class="comment">//目前栈顶的下标</span></span><br><span class="line">arr    [<span class="number">20</span>]<span class="keyword">int</span> <span class="comment">//模拟栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">Push</span><span class="params">(val <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.isFull() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack full"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack full"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始入栈操作</span></span><br><span class="line"><span class="comment">//先向上走一步</span></span><br><span class="line">this.top++</span><br><span class="line"><span class="comment">//再赋值</span></span><br><span class="line">this.arr[this.top] = val</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="params">(val <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">val = this.arr[this.top]</span><br><span class="line">this.top--</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">List</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := this.top; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">fmt.Printf(<span class="string">"arr[%d]=%d\n"</span>, i, this.arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">isFull</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.top+<span class="number">1</span> &gt;= this.maxNum</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.top == <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是不是运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">isOper</span><span class="params">(oper <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> oper == <span class="number">42</span> || oper == <span class="number">43</span> || oper == <span class="number">45</span> || oper == <span class="number">47</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">cal</span><span class="params">(num1, num2, oper <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//因为栈是先进后出，所以num2应该是第一个数，num1是第二个数</span></span><br><span class="line"><span class="keyword">switch</span> oper &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line"><span class="keyword">return</span> num2 * num1</span><br><span class="line"><span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line"><span class="keyword">return</span> num2 + num1</span><br><span class="line"><span class="keyword">case</span> <span class="number">45</span>:</span><br><span class="line"><span class="keyword">return</span> num2 - num1</span><br><span class="line"><span class="keyword">case</span> <span class="number">47</span>:</span><br><span class="line"><span class="keyword">return</span> num2 / num1</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"运算符错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回优先级</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">Priority</span><span class="params">(oper <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> oper == <span class="number">42</span> || oper == <span class="number">47</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> oper == <span class="number">43</span> || oper == <span class="number">45</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numStack := &amp;Stack&#123; <span class="comment">//数栈</span></span><br><span class="line">maxNum: <span class="number">20</span>,</span><br><span class="line">top:    <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line">operStack := &amp;Stack&#123; <span class="comment">//运算符栈</span></span><br><span class="line">maxNum: <span class="number">20</span>,</span><br><span class="line">top:    <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line">exp := <span class="string">"300+600*2-18*5"</span></span><br><span class="line">exp_len := <span class="built_in">len</span>(exp)</span><br><span class="line">num1 := <span class="number">0</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">oper := <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> num_str <span class="keyword">string</span></span><br><span class="line"><span class="comment">//将表达式入栈并且进行计算</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; exp_len; i++ &#123;</span><br><span class="line">ch := <span class="keyword">int</span>(exp[i]) <span class="comment">//返回的是asiic码值</span></span><br><span class="line"><span class="keyword">if</span> operStack.isOper(ch) &#123;</span><br><span class="line"><span class="comment">//如果放进去的是运算符</span></span><br><span class="line"><span class="comment">//需要先考虑是不是第一个元素</span></span><br><span class="line"><span class="keyword">if</span> operStack.isEmpty() &#123;</span><br><span class="line"><span class="comment">//如果是空，代表第一个元素，直接入栈</span></span><br><span class="line">operStack.Push(ch)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果不是第一个元素，则需要考虑，此时栈顶元素的优先级是否大于等于当前想要入栈的值</span></span><br><span class="line"><span class="keyword">if</span> operStack.Priority(operStack.arr[operStack.top]) &gt;= operStack.Priority(ch) &#123;</span><br><span class="line"><span class="comment">//无需担心数量是否不匹配，只要表达式正确，数量一定没问题</span></span><br><span class="line"><span class="comment">//从数栈中弹出2个</span></span><br><span class="line">num1, _ = numStack.Pop()</span><br><span class="line">num2, _ = numStack.Pop()</span><br><span class="line"><span class="comment">//运算符栈弹出一个</span></span><br><span class="line">oper, _ = operStack.Pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算结果入数栈（这里num1,num2顺序不能错乱，因为是先进后出）</span></span><br><span class="line">numStack.Push(numStack.cal(num1, num2, oper))</span><br><span class="line"><span class="comment">//运算符入运算符栈</span></span><br><span class="line">operStack.Push(ch)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不成立的话，证明运算符级别相同，直接入栈</span></span><br><span class="line">operStack.Push(ch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果放进去的是数字</span></span><br><span class="line"><span class="comment">//此时需要考虑，数字有几位数</span></span><br><span class="line"><span class="comment">//数字是否是最后一位</span></span><br><span class="line">temp := i</span><br><span class="line">num_str = <span class="keyword">string</span>(ch) <span class="comment">//将asiic用string强转，返回的是对应的字符</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> temp+<span class="number">1</span> != exp_len &amp;&amp; !operStack.isOper(<span class="keyword">int</span>(exp[temp+<span class="number">1</span>])) &#123;</span><br><span class="line"><span class="comment">//如果下一位既不是字符串最后一个或者不是运算符</span></span><br><span class="line"><span class="comment">//那么就加入到num_str,累计字符串</span></span><br><span class="line">num_str += <span class="keyword">string</span>(exp[temp+<span class="number">1</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//否则就是不符合，直接退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">temp++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将拼接后的字符串转为数字</span></span><br><span class="line">num, _ := strconv.Atoi(num_str)</span><br><span class="line"><span class="comment">//是数字就不需要考虑，直接入栈</span></span><br><span class="line">numStack.Push(num)</span><br><span class="line"><span class="comment">//同时，让for循环走到temp的位置</span></span><br><span class="line">i = temp</span><br><span class="line"><span class="comment">//清空内容</span></span><br><span class="line">num_str = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将栈内剩余的表达式再进行运算</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> operStack.isEmpty() &#123;</span><br><span class="line"><span class="comment">//如果运算符为空，证明全部计算完成，直接退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则进行计算</span></span><br><span class="line"></span><br><span class="line">num1, _ = numStack.Pop()</span><br><span class="line">num2, _ = numStack.Pop()</span><br><span class="line"><span class="comment">//运算符栈弹出一个</span></span><br><span class="line">oper, _ = operStack.Pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算结果入数栈（这里num1,num2顺序不能错乱，因为是先进后出）</span></span><br><span class="line">numStack.Push(numStack.cal(num1, num2, oper))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全部计算完成，弹出numStack就是结果</span></span><br><span class="line">result, _ := numStack.Pop()</span><br><span class="line">fmt.Printf(<span class="string">"%s = %v \n"</span>, exp, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;有些程序员也把栈称为堆栈, 即栈和堆栈是同一个概念&lt;br&gt;1) 栈的英文为(stack)&lt;br&gt;2) 栈是一个先入后出(FILO-First In Last Out)的有序列表。&lt;br&gt;3) 栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。&lt;br&gt;4) 根据堆栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：排序(sort)</title>
    <link href="https://www.guaosi.com/2019/03/15/golang-sort/"/>
    <id>https://www.guaosi.com/2019/03/15/golang-sort/</id>
    <published>2019-03-15T06:02:31.000Z</published>
    <updated>2021-12-05T08:13:24.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>排序是将一组数据，依指定的顺序进行排列的过程, 常见的排序:<br>1)冒泡排序<br>2)选择排序<br>3)插入排序<br>4)快速排序</p><a id="more"></a><h1 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2. 冒泡排序"></a>2. 冒泡排序</h1><h2 id="2-1-思想"><a href="#2-1-思想" class="headerlink" title="2.1. 思想"></a>2.1. 思想</h2><p>通过对待排序序列从后向前(从下标较大的元素开始) ,依次比较相邻元素的排序码，若发现逆序则交换，使排序码较小的元素逐渐从后部移向前部(从下标较大的单元移向下标较小的单元)，就象水底下的气泡一样逐渐向上冒。</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。 从而减少不必要的比较。</p><h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr *[6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr)-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">bubbleSort(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3. 选择排序"></a>3. 选择排序</h1><p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，经过和其他元素重整，再依原则交换位置后达到排序的目的。</p><h2 id="3-1-思想"><a href="#3-1-思想" class="headerlink" title="3.1. 思想"></a>3.1. 思想</h2><p>选择排序(select sorting)也是一种简单的排序方法。</p><p>它的基本思想是:第一次从 R[0]~R[n-1]中选 取最小值，与R[0]交换，第二次从 R[1]~R[n-1]中选取最小值，与R[1]交换，第三次从 R[2]~R[n-1]中选取最小值，与R[2]交换，…，第 i 次从 R[i-1]~R[n-1]中选取最小值，与 R[i-1]交换，…, 第 n-1 次从 R[n-2]~R[n-1]中选取最小值，与 R[n-2]交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p><h2 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2. 分析"></a>3.2. 分析</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/sort/selectsort.png" alt="selectsort"></p><h2 id="3-3-实现"><a href="#3-3-实现" class="headerlink" title="3.3. 实现"></a>3.3. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectSort</span><span class="params">(arr *[6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">maxIndex := i + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(arr); j++ &#123;</span><br><span class="line"><span class="comment">//找到最大的下标</span></span><br><span class="line"><span class="keyword">if</span> arr[maxIndex] &lt; arr[j] &#123;</span><br><span class="line">maxIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> arr[i] &lt; arr[maxIndex] &#123;</span><br><span class="line">arr[i], arr[maxIndex] = arr[maxIndex], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">selectSort(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-插入排序"><a href="#4-插入排序" class="headerlink" title="4. 插入排序"></a>4. 插入排序</h1><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p><h2 id="4-1-思想"><a href="#4-1-思想" class="headerlink" title="4.1. 思想"></a>4.1. 思想</h2><p>插入排序(Insertion Sorting)的基本思想是:把 n 个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，排序过程中每次从无序表中取出第一个 元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p><h2 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2. 分析"></a>4.2. 分析</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/sort/insertsort.png" alt="insertsort"></p><h2 id="4-3-实现"><a href="#4-3-实现" class="headerlink" title="4.3. 实现"></a>4.3. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSort</span><span class="params">(arr *[6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">index := i - <span class="number">1</span>  <span class="comment">//指向当前元素的前一个元素下标</span></span><br><span class="line">value := arr[i] <span class="comment">//当前元素的值</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; arr[index] &lt; value &#123;</span><br><span class="line"><span class="comment">//证明还没有找到，需要继续往下找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把值往后复制</span></span><br><span class="line">arr[index+<span class="number">1</span>] = arr[index]</span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标往前挪动</span></span><br><span class="line">index--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//index &lt; 0 是用来判断是不是已经找完了数组的全部。</span></span><br><span class="line"><span class="comment">//如果找完了，证明就是最大</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有可能原地不动，此时就不要交换了</span></span><br><span class="line"><span class="keyword">if</span> index+<span class="number">1</span> != i &#123;</span><br><span class="line">arr[index+<span class="number">1</span>] = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">insertSort(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h1><p>快速排序(Quicksort)是对冒泡排序的一种改进。</p><h2 id="5-1-思想"><a href="#5-1-思想" class="headerlink" title="5.1. 思想"></a>5.1. 思想</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><h2 id="5-2-分析"><a href="#5-2-分析" class="headerlink" title="5.2. 分析"></a>5.2. 分析</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/sort/quicksort.png" alt="quicksort"></p><h2 id="5-3-实现"><a href="#5-3-实现" class="headerlink" title="5.3. 实现"></a>5.3. 实现</h2><p>以中点作为判断标准(与上面分析图找的判断标准不同，上面分析图找的是最右边)<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1. left 表示 数组左边的下标</span></span><br><span class="line"><span class="comment">//2. right 表示数组右边的下标</span></span><br><span class="line"><span class="comment">//3 array 表示要排序的数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">left</span> int, <span class="keyword">right</span> int, array *[<span class="number">11</span>]int)</span></span> &#123;</span><br><span class="line">l := <span class="keyword">left</span></span><br><span class="line">r := <span class="keyword">right</span></span><br><span class="line"><span class="comment">// pivot 是中轴， 支点</span></span><br><span class="line">pivot := array[(<span class="keyword">left</span>+<span class="keyword">right</span>)/<span class="number">2</span>]</span><br><span class="line"><span class="comment">//for 循环的目标是将比 pivot 小的数放到 左边 // 比 pivot 大的数放到 右边</span></span><br><span class="line"><span class="comment">//for 循环结束后无论pivot，在哪里。它的左边永远会比他小，它的右边永远比他大。</span></span><br><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line"><span class="comment">//从 pivot 的左边找到大于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> array[l] &lt; pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从 pivot 的右边边找到小于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> array[r] &gt; pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当l==r时，证明这一轮已经全部找完了，退出循环，进行递归</span></span><br><span class="line"><span class="keyword">if</span> l == r &#123;</span><br><span class="line">l++</span><br><span class="line">r--</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换有可能是2个大小的值在两边进行交换，也有可能是我们的中间值会被交换。</span></span><br><span class="line"><span class="comment">//不过结果都会是中间件的左边都是会比它小的数，右边都是比它大的数</span></span><br><span class="line">array[l], array[r] = array[r], array[l]</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面两步是因为l或者r其中有一个指向了中间值，进行了交换。</span></span><br><span class="line"><span class="comment">//交换位置后，另一个值刚刚跟中间值已经比较过一次了，所以直接跳过</span></span><br><span class="line"><span class="keyword">if</span> array[l] == pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> array[r] == pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向左递归</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">left</span> &lt; r &#123;</span><br><span class="line"><span class="type">QuickSort</span>(<span class="keyword">left</span>, r, array)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向右递归</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">right</span> &gt; l &#123;</span><br><span class="line"><span class="type">QuickSort</span>(l, <span class="keyword">right</span>, array)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [<span class="number">11</span>]int&#123;-<span class="number">9</span>, <span class="number">78</span>, <span class="number">0</span>, -<span class="number">900</span>, <span class="number">23</span>, -<span class="number">567</span>, <span class="number">70</span>, <span class="number">123</span>, <span class="number">90</span>, -<span class="number">23</span>, -<span class="number">1200</span>&#125;</span><br><span class="line">fmt.<span class="type">Println</span>(<span class="string">"初始"</span>, arr)</span><br><span class="line"><span class="comment">//调用快速排序</span></span><br><span class="line"><span class="type">QuickSort</span>(<span class="number">0</span>, len(arr)-<span class="number">1</span>, &amp;arr)</span><br><span class="line">fmt.<span class="type">Println</span>(<span class="string">"main.."</span>)</span><br><span class="line">fmt.<span class="type">Println</span>(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-4-提示"><a href="#5-4-提示" class="headerlink" title="5.4. 提示"></a>5.4. 提示</h2><p>可以先把递归代码注释，专门理解下面代码。这段代码的执行完毕后，设置的数，比它小的肯定都在它左边，比它大的都在它右边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line"><span class="comment">//从 pivot 的左边找到大于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">array</span>[l] &lt; pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从 pivot 的右边边找到小于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">array</span>[r] &gt; pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当l==r时，证明这一轮已经全部找完了，退出循环，进行递归</span></span><br><span class="line"><span class="keyword">if</span> l == r &#123;</span><br><span class="line">l++</span><br><span class="line">r--</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换有可能是2个大小的值在两边进行交换，也有可能是我们的中间值会被交换。</span></span><br><span class="line"><span class="comment">//不过结果都会是中间件的左边都是会比它小的数，右边都是比它大的数</span></span><br><span class="line"><span class="built_in">array</span>[l], <span class="built_in">array</span>[r] = <span class="built_in">array</span>[r], <span class="built_in">array</span>[l]</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面两步是因为l或者r其中有一个指向了中间值，进行了交换。</span></span><br><span class="line"><span class="comment">//交换位置后，另一个值刚刚跟中间值已经比较过一次了，所以直接跳过</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">array</span>[l] == pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">array</span>[r] == pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-时间对比"><a href="#6-时间对比" class="headerlink" title="6. 时间对比"></a>6. 时间对比</h1><h2 id="6-1-实现"><a href="#6-1-实现" class="headerlink" title="6.1. 实现"></a>6.1. 实现</h2><p>考虑到快排的速度，所以同一用毫秒作为单位。随机从90万中取8万个数据，进行排序，比较时间差<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">80000</span>]<span class="built_in">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">arr[i] = rand.Intn(<span class="number">900000</span>)</span><br><span class="line">&#125;</span><br><span class="line">start := <span class="built_in">time</span>.<span class="built_in">Now</span>().UnixNano()</span><br><span class="line">quickSort(<span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>, &amp;arr)</span><br><span class="line"><span class="keyword">end</span> := <span class="built_in">time</span>.<span class="built_in">Now</span>().UnixNano()</span><br><span class="line">fmt.Printf(<span class="string">"快速排序:%d 毫秒\n"</span>, (<span class="keyword">end</span>-start)/<span class="number">1000</span>/<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><h2 id="6-2-时间结果"><a href="#6-2-时间结果" class="headerlink" title="6.2. 时间结果"></a>6.2. 时间结果</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序<span class="selector-pseudo">:9086</span> 毫秒</span><br><span class="line">选择排序<span class="selector-pseudo">:5848</span> 毫秒</span><br><span class="line">插入排序<span class="selector-pseudo">:1254</span> 毫秒</span><br><span class="line">快速排序<span class="selector-pseudo">:7</span> 毫秒</span><br></pre></td></tr></table></figure><p>可以看出，快排是真的很快。以上四种都是单线程排序，快排碾压的原因是其一直在递归，每次排序都是排2个(因为2个指针调换元素)，所以会有这么惊人的速度。但是因为一直在使用递归函数，需要一直开辟新的空间，会耗费很大的cpu与内存。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;排序是将一组数据，依指定的顺序进行排列的过程, 常见的排序:&lt;br&gt;1)冒泡排序&lt;br&gt;2)选择排序&lt;br&gt;3)插入排序&lt;br&gt;4)快速排序&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：链表(linkedlist)</title>
    <link href="https://www.guaosi.com/2019/03/14/golang-linkedlist/"/>
    <id>https://www.guaosi.com/2019/03/14/golang-linkedlist/</id>
    <published>2019-03-14T00:42:44.000Z</published>
    <updated>2021-12-05T08:13:24.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>链表是有序的列表，但是它在内存中是存储如下:</p><p><img src="/assets/blogImg/data-structures-and-algorithms/linkedlist/linkedlist单链表示意图1.png" height="330" width="600"></p><a id="more"></a><h1 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2. 单链表"></a>2. 单链表</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1. 介绍"></a>2.1. 介绍</h2><p>单链表的示意图</p><p><img src="/assets/blogImg/data-structures-and-algorithms/linkedlist/linkedlist单链表示意图2.png" alt="linkedlist单链表示意图2"></p><p>说明:一般来说，为了比较好的对单链表进行增删改查的操作，我们都会给他设置一个头结点, 头结点的作用主要是用来标识链表头，本身这个结点不存放数据。</p><h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">type heroNode struct &#123;</span><br><span class="line">no       int</span><br><span class="line">name     string</span><br><span class="line">nickname string</span><br><span class="line">next     *heroNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新结点(直接最后添加)</span></span><br><span class="line">func insertHeroNode(head *heroNode, newNode *heroNode) &#123;</span><br><span class="line"><span class="comment">//这里传进来的一定要是个指针，否则结构体是值传递，每次都是重新复制一份，就丢失了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找最后一个结点</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//当下一个结点是空的时候，证明找到了最后的节点。</span></span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line">head<span class="selector-class">.next</span> = newNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有序插入新节点</span></span><br><span class="line">func insertHeroNode2(head *heroNode, newNode *heroNode) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。head = head.next不对让对外面的生效，因为是地址(引用)赋值。</span></span><br><span class="line"></span><br><span class="line">flag := true</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//如果下一个节点是空节点，则直接进行添加</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> head<span class="selector-class">.next</span><span class="selector-class">.no</span> &gt; newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line"><span class="comment">//因为链表一直都在排序，所以直接找到下一个链表进行符合条件的对比即可</span></span><br><span class="line"><span class="comment">// &gt; 表示从小到大排序  &lt; 表示从大到小排序</span></span><br><span class="line"><span class="comment">//如果想有相同值也能插入，在这里变成&gt;=或者&lt;=即可</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> head<span class="selector-class">.next</span><span class="selector-class">.no</span> == newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !flag &#123;</span><br><span class="line">fmt.Println(<span class="string">"插入失败，已经有相同编号了，no:"</span>, newNode.no)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode<span class="selector-class">.next</span> = head.next</span><br><span class="line">head<span class="selector-class">.next</span> = newNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表删除</span></span><br><span class="line">func deleteHeroNode(head *heroNode, id int) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。head = head.next不对让对外面的生效，因为是地址(引用)赋值。</span></span><br><span class="line"></span><br><span class="line">flag := false</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> head<span class="selector-class">.next</span><span class="selector-class">.no</span> == id &#123;</span><br><span class="line">flag = true</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//找到了，确实有这个节点</span></span><br><span class="line"><span class="comment">//这里2个next不会报错</span></span><br><span class="line"><span class="comment">//因为tempHead.next.next有可能是nil</span></span><br><span class="line">head<span class="selector-class">.next</span> = head<span class="selector-class">.next</span><span class="selector-class">.next</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有则提示</span></span><br><span class="line">fmt.Println(<span class="string">"没有找到对应节点，删除失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表显示</span></span><br><span class="line">func listHeroNode(head *heroNode) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。head = head.next不对让对外面的生效，因为是地址(引用)赋值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[%d %s %s]==&gt; "</span>, head<span class="selector-class">.next</span><span class="selector-class">.no</span>, head<span class="selector-class">.next</span><span class="selector-class">.name</span>, head<span class="selector-class">.next</span><span class="selector-class">.nickname</span>)</span><br><span class="line">head = head.next</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="comment">//1.先创建一个头结点，里面不包含内容</span></span><br><span class="line">head := &amp;heroNode&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.再创建一个数据结点</span></span><br><span class="line">hero1 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">1</span>,</span><br><span class="line">name:     <span class="string">"宋江"</span>,</span><br><span class="line">nickname: <span class="string">"及时雨"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero2 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">2</span>,</span><br><span class="line">name:     <span class="string">"卢俊义"</span>,</span><br><span class="line">nickname: <span class="string">"玉麒麟"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero3 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">3</span>,</span><br><span class="line">name:     <span class="string">"吴用"</span>,</span><br><span class="line">nickname: <span class="string">"智多星"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero4 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">4</span>,</span><br><span class="line">name:     <span class="string">"林冲"</span>,</span><br><span class="line">nickname: <span class="string">"豹子头"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero1)</span></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero2)</span></span><br><span class="line">insertHeroNode2(head, hero2)</span><br><span class="line">insertHeroNode2(head, hero3)</span><br><span class="line">insertHeroNode2(head, hero1)</span><br><span class="line">insertHeroNode2(head, hero4)</span><br><span class="line">listHeroNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">deleteHeroNode(head, <span class="number">4</span>)</span><br><span class="line">listHeroNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3. 缺点"></a>2.3. 缺点</h2><p>1)单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</p><p>2)单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们单链表删除时节点，总是找到temp的下一个节点来删除的</p><h1 id="3-双向链表"><a href="#3-双向链表" class="headerlink" title="3. 双向链表"></a>3. 双向链表</h1><h2 id="3-1-实现"><a href="#3-1-实现" class="headerlink" title="3.1. 实现"></a>3.1. 实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">type HeroNode struct &#123;</span><br><span class="line">no       int</span><br><span class="line">name     string</span><br><span class="line">nickname string</span><br><span class="line">pre      *HeroNode</span><br><span class="line">next     *HeroNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新结点(直接最后添加)</span></span><br><span class="line">func insertHeroNode(head *HeroNode, newNode *HeroNode) &#123;</span><br><span class="line"><span class="comment">//这里传进来的一定要是个指针，否则结构体是值传递，每次都是重新复制一份，就丢失了。</span></span><br><span class="line"></span><br><span class="line">tempHead := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line">&#125;</span><br><span class="line">tempHead<span class="selector-class">.next</span> = newNode</span><br><span class="line">newNode<span class="selector-class">.pre</span> = tempHead</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有序插入新节点</span></span><br><span class="line">func insertHeroNode2(head *HeroNode, newNode *HeroNode) &#123;</span><br><span class="line">tempHead := head</span><br><span class="line">flag := true</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//如果下一个节点是空节点，则直接进行添加</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.no</span> &gt; newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line"><span class="comment">//因为链表一直都在排序，所以直接找到下一个链表进行符合条件的对比即可</span></span><br><span class="line"><span class="comment">// &gt; 表示从小到大排序  &lt; 表示从大到小排序</span></span><br><span class="line"><span class="comment">//如果想有相同值也能插入，在这里变成&gt;=或者&lt;=即可</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.no</span> == newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !flag &#123;</span><br><span class="line">fmt.Println(<span class="string">"插入失败，已经有相同编号了，no:"</span>, newNode.no)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode<span class="selector-class">.next</span> = tempHead.next</span><br><span class="line">newNode<span class="selector-class">.pre</span> = tempHead</span><br><span class="line">tempHead<span class="selector-class">.next</span> = newNode</span><br><span class="line"><span class="keyword">if</span> newNode<span class="selector-class">.next</span> != nil &#123;</span><br><span class="line">newNode<span class="selector-class">.next</span><span class="selector-class">.pre</span> = newNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表删除</span></span><br><span class="line">func deleteHeroNode(head *HeroNode, id int) &#123;</span><br><span class="line">tempHead := head</span><br><span class="line">flag := true</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.no</span> == id &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//没有则提示</span></span><br><span class="line">fmt.Println(<span class="string">"没有找到对应节点，删除失败"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.next</span> != nil &#123;</span><br><span class="line">tempHead<span class="selector-class">.next</span><span class="selector-class">.next</span><span class="selector-class">.pre</span> = tempHead</span><br><span class="line">&#125;</span><br><span class="line">tempHead<span class="selector-class">.next</span> = tempHead<span class="selector-class">.next</span><span class="selector-class">.next</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表显示(正向)</span></span><br><span class="line">func listHeroNode(head *HeroNode) &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempNode := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[%d %s %s]==&gt; "</span>, tempNode<span class="selector-class">.next</span><span class="selector-class">.no</span>, tempNode<span class="selector-class">.next</span><span class="selector-class">.name</span>, tempNode<span class="selector-class">.next</span><span class="selector-class">.nickname</span>)</span><br><span class="line">tempNode = tempNode.next</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表显示(反向)</span></span><br><span class="line">func listHeroNode2(head *HeroNode) &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempHead := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时到了最后一个</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[%d %s %s]==&gt; "</span>, tempHead<span class="selector-class">.no</span>, tempHead<span class="selector-class">.name</span>, tempHead.nickname)</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.pre</span> != nil &amp;&amp; tempHead<span class="selector-class">.pre</span><span class="selector-class">.no</span> != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//去掉头结点</span></span><br><span class="line">tempHead = tempHead.pre</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="comment">//1.先创建一个头结点，里面不包含内容</span></span><br><span class="line">head := &amp;HeroNode&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.再创建一个数据结点</span></span><br><span class="line">hero1 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">1</span>,</span><br><span class="line">name:     <span class="string">"宋江"</span>,</span><br><span class="line">nickname: <span class="string">"及时雨"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero2 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">2</span>,</span><br><span class="line">name:     <span class="string">"卢俊义"</span>,</span><br><span class="line">nickname: <span class="string">"玉麒麟"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero3 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">3</span>,</span><br><span class="line">name:     <span class="string">"吴用"</span>,</span><br><span class="line">nickname: <span class="string">"智多星"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero4 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">4</span>,</span><br><span class="line">name:     <span class="string">"林冲"</span>,</span><br><span class="line">nickname: <span class="string">"豹子头"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero1)</span></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero2)</span></span><br><span class="line">insertHeroNode2(head, hero2)</span><br><span class="line">insertHeroNode2(head, hero3)</span><br><span class="line">insertHeroNode2(head, hero1)</span><br><span class="line">insertHeroNode2(head, hero4)</span><br><span class="line">listHeroNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">deleteHeroNode(head, <span class="number">2</span>)</span><br><span class="line">listHeroNode2(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-环形链表"><a href="#4-环形链表" class="headerlink" title="4. 环形链表"></a>4. 环形链表</h1><h2 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1. 介绍"></a>4.1. 介绍</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/linkedlist/circle_linked.png" alt="circle_linked"></p><h2 id="4-2-实现"><a href="#4-2-实现" class="headerlink" title="4.2. 实现"></a>4.2. 实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">type CatNode struct &#123;</span><br><span class="line">no   int</span><br><span class="line">name string</span><br><span class="line">next *CatNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func insertCatNode(head *CatNode, newNode *CatNode) &#123;</span><br><span class="line"><span class="comment">//环形链表需要把头节点也作为一部分</span></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//如果头结点的next为空，证明此时只有一个头结点</span></span><br><span class="line"><span class="comment">//需要给头结点填充数据</span></span><br><span class="line">head<span class="selector-class">.no</span> = newNode.no</span><br><span class="line">head<span class="selector-class">.name</span> = newNode.name</span><br><span class="line">head<span class="selector-class">.next</span> = head <span class="comment">//让下一个节点先指向自己。自己指向自己，也算是环形链表</span></span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempNode := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == head &#123;</span><br><span class="line"><span class="comment">//证明此时是最后一个节点了。在这里插入</span></span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempNode = tempNode.next</span><br><span class="line">&#125;</span><br><span class="line">tempNode<span class="selector-class">.next</span> = newNode</span><br><span class="line">newNode<span class="selector-class">.next</span> = head</span><br><span class="line">&#125;</span><br><span class="line">func circleListCatNode(head *CatNode) &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"环形链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempNode := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(tempNode)</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == head &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempNode = tempNode.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func delelteCatNode(head *CatNode, id int) *CatNode &#123;</span><br><span class="line"><span class="comment">//需要将头结点返回，因为这里面有可能让头结点head换了个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.先判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.再判断链表是否只有一个头结点</span></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == head &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.no</span> == id &#123;</span><br><span class="line">head<span class="selector-class">.next</span> = nil <span class="comment">//因为我们设置认为，当头结点的下一个元素为nil时，则表示这个链表为空</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"对不起，没有找到，删除失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.制作两个辅助指针，一个指向头，一个指向尾</span></span><br><span class="line">tempNode := head</span><br><span class="line">helper := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//指到尾</span></span><br><span class="line"><span class="keyword">if</span> helper<span class="selector-class">.next</span> == head &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.next</span><br><span class="line">&#125;</span><br><span class="line">flag := true</span><br><span class="line"><span class="comment">//4.开始判断</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == head &#123;</span><br><span class="line"><span class="comment">//证明已经到了最后一个元素，但是最后一个元素还没有进行比较</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempNode<span class="selector-class">.no</span> == id &#123;</span><br><span class="line"><span class="comment">//找到了节点，进行删除。</span></span><br><span class="line"><span class="keyword">if</span> tempNode == head &#123;</span><br><span class="line"><span class="comment">//证明是才刚刚开始，还在头结点时找到了。</span></span><br><span class="line"><span class="comment">//则让头指针先指向下一个</span></span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将这个节点跳过删除</span></span><br><span class="line">helper<span class="selector-class">.next</span> = tempNode.next</span><br><span class="line">fmt.Printf(<span class="string">"找到了，进行删除\n"</span>)</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正常往下走</span></span><br><span class="line"><span class="comment">//没有找到正常往下走</span></span><br><span class="line">tempNode = tempNode.next</span><br><span class="line">helper = helper.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//证明在上面没有找到删除</span></span><br><span class="line"><span class="comment">//此时是因为走到了最后一个元素，但是没有进行比较</span></span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.no</span> == id &#123;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line">helper<span class="selector-class">.next</span> = tempNode.next</span><br><span class="line">fmt.Printf(<span class="string">"找到了，进行删除\n"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"对不起，没有找到，删除失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="selector-tag">var</span> head *CatNode = &amp;CatNode&#123;&#125;</span><br><span class="line">cat1 := &amp;CatNode&#123;</span><br><span class="line">no:   <span class="number">1</span>,</span><br><span class="line">name: <span class="string">"小黄猫"</span>,</span><br><span class="line">&#125;</span><br><span class="line">cat2 := &amp;CatNode&#123;</span><br><span class="line">no:   <span class="number">2</span>,</span><br><span class="line">name: <span class="string">"小红猫"</span>,</span><br><span class="line">&#125;</span><br><span class="line">cat3 := &amp;CatNode&#123;</span><br><span class="line">no:   <span class="number">3</span>,</span><br><span class="line">name: <span class="string">"小花猫"</span>,</span><br><span class="line">&#125;</span><br><span class="line">insertCatNode(head, cat1)</span><br><span class="line">insertCatNode(head, cat2)</span><br><span class="line">insertCatNode(head, cat3)</span><br><span class="line">circleListCatNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">head = delelteCatNode(head, <span class="number">1</span>)</span><br><span class="line">circleListCatNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-约瑟夫-Josephu"><a href="#5-约瑟夫-Josephu" class="headerlink" title="5. 约瑟夫(Josephu)"></a>5. 约瑟夫(Josephu)</h1><h2 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1. 问题"></a>5.1. 问题</h2><p>设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k(1&lt;=k&lt;=n)的人从 1开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推， 直到所有人出列为止，由此产生一个出队编号的序列。</p><h2 id="5-2-提示"><a href="#5-2-提示" class="headerlink" title="5.2. 提示"></a>5.2. 提示</h2><p>用一个不带头结点的循环链表来处理 Josephu 问题:先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又 从 1 开始计数，直到最后一个结点从链表中删除算法结束。</p><h2 id="5-3-实现"><a href="#5-3-实现" class="headerlink" title="5.3. 实现"></a>5.3. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Boy <span class="keyword">struct</span> &#123;</span><br><span class="line">no   <span class="keyword">int</span></span><br><span class="line">next *Boy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddBoy</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="params">(head *Boy)</span></span> &#123;</span><br><span class="line"><span class="comment">//返回一个头指针</span></span><br><span class="line"></span><br><span class="line">helper := &amp;Boy&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"无法构建，退出"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= num; i++ &#123;</span><br><span class="line">boy := &amp;Boy&#123;</span><br><span class="line">no: i,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先看看是不是第一个元素，是一个元素需要特别处理</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">head = boy</span><br><span class="line"><span class="comment">//辅助指针跟着移动</span></span><br><span class="line">helper = boy</span><br><span class="line"><span class="comment">//因为是第一个元素，让其自己指向自己</span></span><br><span class="line">head.next = head</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">helper.next = boy</span><br><span class="line">helper = boy</span><br><span class="line"><span class="comment">//指向头指针，完成环形</span></span><br><span class="line">helper.next = head</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示环形链表内容，同时返回链表个数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowBoy</span><span class="params">(head *Boy)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.next == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">helper := head</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Printf(<span class="string">"编号:%d\n"</span>, helper.no)</span><br><span class="line"><span class="keyword">if</span> helper.next == head &#123;</span><br><span class="line"><span class="comment">//证明是最后一个元素了，退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">helper = helper.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正式开始约瑟夫环问题</span></span><br><span class="line"><span class="comment">//head表示头指针，startNo表示从第几个人开始，countNum表示数几下淘汰一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PlayGame</span><span class="params">(head *Boy, startNo <span class="keyword">int</span>, countNum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.next == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ShowBoy(head) &lt; startNo &#123;</span><br><span class="line">fmt.Println(<span class="string">"开始数量不匹配总量，请重新输入"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指向链表尾</span></span><br><span class="line">tail := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tail.next == head &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tail = tail.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始约瑟夫环问题"</span>)</span><br><span class="line"><span class="comment">//1.开始移动</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; startNo<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="comment">//因为从第几个人开始，本身head就指向第一个人。比如从第二个人开始，那么只要移动一次即可</span></span><br><span class="line">head = head.next</span><br><span class="line">tail = tail.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//2.开始计数淘汰</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; countNum<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="comment">//与上面减1同理，自己要数一次</span></span><br><span class="line">head = head.next</span><br><span class="line">tail = tail.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时head指向的编号就是要淘汰的编号</span></span><br><span class="line">fmt.Printf(<span class="string">"淘汰编号:%d\n"</span>, head.no)</span><br><span class="line"></span><br><span class="line"><span class="comment">//head走向下一个，让tail的next连接上</span></span><br><span class="line">head = head.next</span><br><span class="line">tail.next = head</span><br><span class="line"></span><br><span class="line"><span class="comment">//head == tail 证明只剩下最后一个了</span></span><br><span class="line"><span class="comment">//因为当最后两个时，head的next是tail，tail的next是head</span></span><br><span class="line"><span class="keyword">if</span> head == tail &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"淘汰编号:%d\n"</span>, head.no)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := AddBoy(<span class="number">500</span>)</span><br><span class="line">PlayGame(head, <span class="number">31</span>, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;链表是有序的列表，但是它在内存中是存储如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/data-structures-and-algorithms/linkedlist/linkedlist单链表示意图1.png&quot; height=&quot;330&quot; width=&quot;600&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Laravel的限制条数再分页</title>
    <link href="https://www.guaosi.com/2019/03/13/laravel-limit-paginate/"/>
    <id>https://www.guaosi.com/2019/03/13/laravel-limit-paginate/</id>
    <published>2019-03-13T05:00:27.000Z</published>
    <updated>2021-12-05T08:13:24.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h1><p>&#160; &#160; &#160; &#160; 有这么一个需求，我想取出一个表(比如<code>user</code>表)中，按照某一排序规则(比如按照时间倒叙)，取出前<code>100</code>条，进行分页，每页<code>10</code>条。应该如何实现？自然而然可能会这样写下:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::orderBy<span class="function"><span class="params">(<span class="string">'id'</span>,<span class="string">'desc'</span>)</span>-&gt;</span>limit<span class="function"><span class="params">(<span class="number">100</span>)</span>-&gt;</span>paginate(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>最后打印结果可以发现，<code>limit</code>并未生效，依旧是将所有结果进行分页。</p><a id="more"></a><h1 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h1><p>&#160; &#160; &#160; &#160; 本文中用到的<code>user</code>模型，数据，控制器，路由之类的都已经在另一篇文章 <a href="https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/">手摸手教你让Laravel开发Api更得心应手</a> 创建好了。</p><p><code>users</code>表中的数据</p><p><img src="/assets/blogImg/laravel-limit-paginate/users-data.png" alt="users-data"></p><h1 id="3-限制条数再分页"><a href="#3-限制条数再分页" class="headerlink" title="3. 限制条数再分页"></a>3. 限制条数再分页</h1><p>继续通过<code>paginate</code>方法来分页以及行不通了。确幸<code>Laravel</code>框架给我们提供了自定义分页类，我们通过使用自定义分页类来达到我们限制条数再分页的需求。</p><p>下面我们分别讲解<code>数组手动分页</code>以及<code>模型对象手动分页</code></p><h2 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1. 需求"></a>3.1. 需求</h2><p>通过<code>id</code>来倒叙排序，并且取出前6条来分页，每页2条数据</p><h2 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2. 数组"></a>3.2. 数组</h2><h3 id="3-2-1-代码"><a href="#3-2-1-代码" class="headerlink" title="3.2.1. 代码"></a>3.2.1. 代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index1</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    <span class="comment">//将对象结果集转为数组结果集</span></span><br><span class="line">    $data = User::orderBy(<span class="string">'id'</span>,<span class="string">'desc'</span>)-&gt;limit(<span class="number">6</span>)-&gt;get()-&gt;toArray();</span><br><span class="line">    <span class="comment">//传入页数，默认值为1</span></span><br><span class="line">    $page = $request-&gt;page ?? <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页的条数</span></span><br><span class="line">    $perPage = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//计算每页分页的初始位置</span></span><br><span class="line">    $offset = ($page * $perPage) - $perPage;</span><br><span class="line">    <span class="comment">//实例化LengthAwarePaginator类，并传入对应的参数</span></span><br><span class="line">    $data = <span class="keyword">new</span> LengthAwarePaginator(array_slice($data, $offset, $perPage, <span class="keyword">true</span>), count($data), $perPage,$page, [<span class="string">'path'</span> =&gt; $request-&gt;url(), <span class="string">'query'</span> =&gt; $request-&gt;query()]);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-测试"><a href="#3-2-2-测试" class="headerlink" title="3.2.2. 测试"></a>3.2.2. 测试</h3><p>符合我们的需求</p><p><img src="/assets/blogImg/laravel-limit-paginate/array_paginate.png" alt="array_paginate"></p><h3 id="3-2-3-适用"><a href="#3-2-3-适用" class="headerlink" title="3.2.3. 适用"></a>3.2.3. 适用</h3><p>比较适用于自建的数组想进行分页。</p><p>因为一开始就被转换为数组了，所以想要用模型中的方法是不可能了。</p><h3 id="3-2-4-缺点"><a href="#3-2-4-缺点" class="headerlink" title="3.2.4. 缺点"></a>3.2.4. 缺点</h3><p>1.无法使用对应模型里的方法。</p><p>2.内置的Api资源无法正常使用。</p><p>当我们的<code>UserResource.php</code>里的内容为这样时:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">            <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">            <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">            <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在控制器中使用Api资源来返回结果<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> UserResource::collection(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure></p><p>报错，提示<code>Trying to get property &#39;id&#39; of non-object</code>。这是由于我们传入到内置分页类中的是数组而不是一开始的对象形式，所以提示找不到这个属性。我们只需要进行一些稍微的修改。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;resource[<span class="string">'id'</span>],</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;resource[<span class="string">'name'</span>],</span><br><span class="line">        <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;resource[<span class="string">'status'</span>]),</span><br><span class="line">        <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;resource[<span class="string">'created_at'</span>],</span><br><span class="line">        <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;resource[<span class="string">'updated_at'</span>]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时返回结果正常，但是不会报错。但是还是有很多问题，比如，无法使用<code>数据包裹</code>,<code>条件关联</code>等等。因为传入的分页是数组而不是对象导致的。</p><p>所以说，数组来进行分页，只适用于自己构建的数据数组。</p><h2 id="3-3-对象"><a href="#3-3-对象" class="headerlink" title="3.3. 对象"></a>3.3. 对象</h2><p>接着解决上面的痛点，一开始我们就将对象结果集转为了数组结果集（百度上千篇一律都是转成了数组结果集），所以让导致模型方法以及Api资源都不能很好地使用。</p><p>现在我们不转换为数组，直接用对象结果集来进行自定义分页。</p><p>先来看一个函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">array_slice</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>这是上面数组能进行分页的关键，可以指定从第几个元素开始，显示几个元素。</p><p>那对象结果集是否有类似的方法可以调用？这样我们就可以做出对象结果集的分页了。答案是有的。<a href="https://learnku.com/docs/laravel/5.7/collections/2279#941767" target="_blank" rel="noopener">文档中</a>的集合方法<code>slice()</code>拥有一样的功能。</p><h3 id="3-3-1-代码"><a href="#3-3-1-代码" class="headerlink" title="3.3.1. 代码"></a>3.3.1. 代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $data = User::orderBy(<span class="string">'id'</span>,<span class="string">'desc'</span>)-&gt;limit(<span class="number">6</span>)-&gt;get();</span><br><span class="line">    <span class="comment">//传入页数，默认值为1</span></span><br><span class="line">    $page = $request-&gt;page ?? <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页的条数</span></span><br><span class="line">    $perPage = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//计算每页分页的初始位置</span></span><br><span class="line">    $offset = ($page * $perPage) - $perPage;</span><br><span class="line">    <span class="comment">//实例化LengthAwarePaginator类，并传入对应的参数</span></span><br><span class="line">    $data = <span class="keyword">new</span> LengthAwarePaginator($data-&gt;slice($offset,$perPage), count($data), $perPage,$page, [<span class="string">'path'</span> =&gt; $request-&gt;url(), <span class="string">'query'</span> =&gt; $request-&gt;query()]);</span><br><span class="line">    <span class="keyword">return</span> UserResource::collection($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>UserResource.php</code>文件中的内容为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">            <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">            <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">            <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-2-测试"><a href="#3-3-2-测试" class="headerlink" title="3.3.2. 测试"></a>3.3.2. 测试</h3><p>没有任何错误，符合我们的要求</p><p><img src="/assets/blogImg/laravel-limit-paginate/object_paginate.png" alt="object_paginate"></p><h3 id="3-3-3-适用"><a href="#3-3-3-适用" class="headerlink" title="3.3.3. 适用"></a>3.3.3. 适用</h3><p>非自建数组，想使用模型的方法或者使用Api资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-需求&quot;&gt;&lt;a href=&quot;#1-需求&quot; class=&quot;headerlink&quot; title=&quot;1. 需求&quot;&gt;&lt;/a&gt;1. 需求&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 有这么一个需求，我想取出一个表(比如&lt;code&gt;user&lt;/code&gt;表)中，按照某一排序规则(比如按照时间倒叙)，取出前&lt;code&gt;100&lt;/code&gt;条，进行分页，每页&lt;code&gt;10&lt;/code&gt;条。应该如何实现？自然而然可能会这样写下:&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$users = User::orderBy&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;desc&#39;&lt;/span&gt;)&lt;/span&gt;-&amp;gt;&lt;/span&gt;limit&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;-&amp;gt;&lt;/span&gt;paginate(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后打印结果可以发现，&lt;code&gt;limit&lt;/code&gt;并未生效，依旧是将所有结果进行分页。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="https://www.guaosi.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：队列(queue)</title>
    <link href="https://www.guaosi.com/2019/03/12/golang-queue/"/>
    <id>https://www.guaosi.com/2019/03/12/golang-queue/</id>
    <published>2019-03-12T08:46:28.000Z</published>
    <updated>2021-12-05T08:13:24.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h1><ul><li><p>队列是一个有序列表，可以用数组或是链表来实现。</p></li><li><p>遵循先入先出的原则。即:先存入队列的数据，要先取出。后存入的要后取出</p></li></ul><a id="more"></a><h1 id="2-数组模拟队列"><a href="#2-数组模拟队列" class="headerlink" title="2. 数组模拟队列"></a>2. 数组模拟队列</h1><ul><li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下 其中maxSize是该队列的最大容量。</p></li><li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个交量front及rear分别记录队列前后端的下标，front 会随着数据输出而改变，而rear则是随着数据输入而改变。如图所示:<br><img src="/assets/blogImg/data-structures-and-algorithms/queue/queue原理图.png" alt="queue原理图"></p></li></ul><h2 id="2-1-非环形队列-数组实现"><a href="#2-1-非环形队列-数组实现" class="headerlink" title="2.1. 非环形队列(数组实现)"></a>2.1. 非环形队列(数组实现)</h2><p>当我们将数据存入队列时称为” addqueue”, addqueue的处理需要有两个步骤:<br>1)将尾指针往后移: rear+1，front== rear [空]</p><p>2)若尾指针rear小于等于队列的最大下标MaxSize-1,则将数据存入rear所指的数组元素中，否则无法存入数据。rear == MaxSize-1[队列满]</p><h3 id="2-1-1-思路分析"><a href="#2-1-1-思路分析" class="headerlink" title="2.1.1. 思路分析"></a>2.1.1. 思路分析</h3><p>1.创建一个数组arrary, 作为队列的一个字段</p><ol start="2"><li>front,表示队列头部,初始化为-1</li><li>rear,表示队列尾部,初始化为-1<br>4.完成队列的基本查找</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddQueue <span class="comment">//加入数据到队列</span></span><br><span class="line">GetQueue <span class="comment">//从队列取出数据</span></span><br><span class="line">ShowQueue <span class="comment">//显示队列</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-实现"><a href="#2-1-2-实现" class="headerlink" title="2.1.2. 实现"></a>2.1.2. 实现</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体来管理</span></span><br><span class="line">type Queue struct &#123;</span><br><span class="line">maxSize <span class="keyword">int</span>    <span class="comment">//队列最大长度</span></span><br><span class="line">array   [<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">//数组模拟队列</span></span><br><span class="line">front   <span class="keyword">int</span>    <span class="comment">//指向队首(不包括第一个元素)</span></span><br><span class="line">rear    <span class="keyword">int</span>    <span class="comment">// 指向队尾(包括最后一个元素)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *Queue) addQueue(num <span class="keyword">int</span>) (err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.rear == <span class="keyword">this</span>.maxSize-<span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">//证明已经是队尾元素了，不能再加了</span></span><br><span class="line"><span class="keyword">return</span> errors.<span class="keyword">New</span>(<span class="string">"queue full"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.rear++</span><br><span class="line"><span class="keyword">this</span>.array[<span class="keyword">this</span>.rear] = num</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Queue) getQueue() (num <span class="keyword">int</span>, err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.front == <span class="keyword">this</span>.rear &#123;</span><br><span class="line"><span class="comment">//证明头尾指针已经到了一起，队列元素为空</span></span><br><span class="line">err = errors.<span class="keyword">New</span>(<span class="string">"queue empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.front++</span><br><span class="line">num = <span class="keyword">this</span>.array[<span class="keyword">this</span>.front]</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Queue) showQueue() &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"当前队列:"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">this</span>.front + <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.rear; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"array[%d]=%d\n"</span>, i, <span class="keyword">this</span>.array[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var key string</span><br><span class="line">var queue = &amp;Queue&#123;</span><br><span class="line">maxSize: <span class="number">5</span>,</span><br><span class="line">rear:    -<span class="number">1</span>,</span><br><span class="line">front:   -<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">var num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"show 查看队列:"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"add 添加数据到队列"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"get 从队列获取元素"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"exit 退出"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入操作名称:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%s\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">queue.showQueue()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入数据:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%d\n"</span>, &amp;num)</span><br><span class="line">err := queue.addQueue(num)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"get"</span>:</span><br><span class="line">num, err := queue.getQueue()</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"输入有误，请重新输入"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-环形队列实现-数组实现"><a href="#2-2-环形队列实现-数组实现" class="headerlink" title="2.2. 环形队列实现(数组实现)"></a>2.2. 环形队列实现(数组实现)</h2><p>对前面的数组模拟队列的优化，充分利用数组，因此将数组看做是一个环形的。(通过取模的方式来实现)</p><p>提醒:</p><p>1) 尾索引的下一个尾头索引是表示队列满，即将队列容量空出一个作为约定，这个在判断队列满的时候需要注意<code>(tail+1)%maxSize == head</code> [满]</p><p>2) tail == head [空]</p><h3 id="2-2-1-思路分析"><a href="#2-2-1-思路分析" class="headerlink" title="2.2.1. 思路分析"></a>2.2.1. 思路分析</h3><p>1) 什么时候表示队列满 <code>(tail + 1) % maxSize = hedd</code><br>2) <code>tail == head</code> 表示空<br>3) 初始化时， <code>tail=0，head=0</code><br>4) 怎么统计该队列有多少个元素 <code>(tail + maxSize - head ) % maxSize</code></p><h3 id="2-2-2-实现"><a href="#2-2-2-实现" class="headerlink" title="2.2.2. 实现"></a>2.2.2. 实现</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type circleQueue struct &#123;</span><br><span class="line">maxSize <span class="keyword">int</span></span><br><span class="line">array   [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">head    <span class="keyword">int</span> <span class="comment">//指向队首，包含队首元素。先弹出，指针再向下移动</span></span><br><span class="line">tail    <span class="keyword">int</span> <span class="comment">//指向队尾，不包含队尾元素。先推入，指针再向下移动</span></span><br><span class="line"><span class="comment">//这里的包含不包含的意思是，当直接取 this.array[head] 或者 this.array[tail]时，是否有值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) <span class="keyword">Push</span>(num <span class="keyword">int</span>) (err error) &#123;</span><br><span class="line"><span class="comment">//判断队列是否已满</span></span><br><span class="line"><span class="comment">//因为是+1来判断是否到达了头指针，如果回到头指针，证明队列就满了</span></span><br><span class="line"><span class="comment">//故意将数组留了一个位置，来判断是否到达头指针。因为tail是不包含队尾的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.tail+<span class="number">1</span>)%<span class="keyword">this</span>.maxSize == <span class="keyword">this</span>.head &#123;</span><br><span class="line">err = errors.<span class="keyword">New</span>(<span class="string">"queue full"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.array[<span class="keyword">this</span>.tail] = num</span><br><span class="line"><span class="keyword">this</span>.tail = (<span class="keyword">this</span>.tail + <span class="number">1</span>) % <span class="keyword">this</span>.maxSize</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) <span class="keyword">Pop</span>() (num <span class="keyword">int</span>, err error) &#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.head == <span class="keyword">this</span>.tail &#123;</span><br><span class="line">err = errors.<span class="keyword">New</span>(<span class="string">"queue empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">num = <span class="keyword">this</span>.array[<span class="keyword">this</span>.head]</span><br><span class="line"><span class="keyword">this</span>.head = (<span class="keyword">this</span>.head + <span class="number">1</span>) % <span class="keyword">this</span>.maxSize</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) <span class="keyword">Size</span>() (num <span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="comment">//因为tail有可能回到0开始，所以需要加上长度</span></span><br><span class="line"><span class="comment">//取模是因为这是一个万能公式，可以通用</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.tail + <span class="keyword">this</span>.maxSize - <span class="keyword">this</span>.head) % <span class="keyword">this</span>.maxSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) List() &#123;</span><br><span class="line"><span class="keyword">size</span> := <span class="keyword">this</span>.<span class="keyword">Size</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">size</span> == <span class="number">0</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tempHead := <span class="keyword">this</span>.head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">size</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"array[%d]=%d "</span>, tempHead, <span class="keyword">this</span>.array[tempHead])</span><br><span class="line">tempHead = (tempHead + <span class="number">1</span>) % <span class="keyword">this</span>.maxSize</span><br><span class="line">&#125;</span><br><span class="line">fmt.<span class="keyword">Println</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var key string</span><br><span class="line">var queue = &amp;circleQueue&#123;</span><br><span class="line">maxSize: <span class="number">5</span>,</span><br><span class="line">head:    <span class="number">0</span>,</span><br><span class="line">tail:    <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">var num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"show 查看队列:"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"add 添加数据到队列"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"get 从队列获取元素"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"exit 退出"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入操作名称:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%s\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">queue.List()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入数据:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%d\n"</span>, &amp;num)</span><br><span class="line">err := queue.<span class="keyword">Push</span>(num)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"get"</span>:</span><br><span class="line">num, err := queue.<span class="keyword">Pop</span>()</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"输入有误，请重新输入"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;队列是一个有序列表，可以用数组或是链表来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遵循先入先出的原则。即:先存入队列的数据，要先取出。后存入的要后取出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>记一次Golang网络编程开发聊天室有感</title>
    <link href="https://www.guaosi.com/2019/03/11/golang-tcp-socket/"/>
    <id>https://www.guaosi.com/2019/03/11/golang-tcp-socket/</id>
    <published>2019-03-11T06:47:08.000Z</published>
    <updated>2021-12-05T08:13:24.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;一直都是使用PHP的<code>B/S</code>开发(不知道swoole的socket算不算)，很想尝试一下<code>C/S</code>开发是什么感觉。于是乎，就做了一个聊天室，这是一个网络编程几乎必做的项目。</p><a id="more"></a><h1 id="2-有感"><a href="#2-有感" class="headerlink" title="2. 有感"></a>2. 有感</h1><p>果然，<code>C/S</code>开发就是比<code>B/S</code>麻烦的多，因为<code>B/S</code>的协议都是已经定义好的，照着这个逻辑写就行。<code>C/S</code>需要自己来制定协议，比如发送数据包之前，应该先制作一个数据包，专门记录将要发送数据包的长度。先行发送这个记录长度的数据包，然后再发送真正的数据包。</p><p>服务端也一样，先接收长度数据包后再接收真正的数据包，验证长度是否有误，是否有丢包。</p><p>当然，这些在<code>B/S</code>里是完全不会让我们写的，因为这些底层已经全都封装好了，都不需要考虑丢包问题。</p><p>这或许是一件好事，不会让人操心这个，因为这东西确实很繁琐。但是也可能是一件坏事，因为我们会少了一些底层知识认知。</p><p>下面放一段用于读取数据与发送数据的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"go_code/chatroom1/common/message"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Transfer struct &#123;</span><br><span class="line">Conn net.Conn</span><br><span class="line">buf  [<span class="number">8096</span>]byte</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送传入的message.Message</span></span><br><span class="line">func (<span class="keyword">this</span> *Transfer) WritePkg(mess *message.Message) (err error) &#123;</span><br><span class="line"><span class="comment">//1.先计算传入的长度,并且发送长度包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1 json化</span></span><br><span class="line">messByte, err := json.Marshal(*mess)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal fail error ="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.2 计算长度,转化为byte</span></span><br><span class="line"><span class="comment">//因为是Uint32，表示4个字节。4个字节需要4个byte，一个字节8位，4个就是2的32次方</span></span><br><span class="line"><span class="comment">//最大可以表示4G的数据长度</span></span><br><span class="line">binary.BigEndian.PutUint32(<span class="keyword">this</span>.buf[:<span class="number">4</span>], uint32(len(messByte)))</span><br><span class="line"><span class="comment">//1.4 发送长度</span></span><br><span class="line">_, err = <span class="keyword">this</span>.Conn.Write(<span class="keyword">this</span>.buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"发送数据长度失败,error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.再发送真正的内容</span></span><br><span class="line">_, err = <span class="keyword">this</span>.Conn.Write(messByte)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"发送内容失败,error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于将接收包进行反json化</span></span><br><span class="line">func (<span class="keyword">this</span> *Transfer) ReadPkg() (mess message.Message, err error) &#123;</span><br><span class="line">n, err := <span class="keyword">this</span>.Conn.Read(<span class="keyword">this</span>.buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != nil || n != <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端异常退出，关闭连接,error = "</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取数据错误,error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将接收到的byte再转回数字</span></span><br><span class="line">pkg_len := binary.BigEndian.Uint32(<span class="keyword">this</span>.buf[:<span class="number">4</span>])</span><br><span class="line">n, err = <span class="keyword">this</span>.Conn.Read(<span class="keyword">this</span>.buf[:pkg_len])</span><br><span class="line"><span class="keyword">if</span> err != nil || n != int(pkg_len) &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端异常退出，关闭连接,error = "</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取数据错误,error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = json.Unmarshal(<span class="keyword">this</span>.buf[:pkg_len], &amp;mess)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Unmarshal error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-项目"><a href="#3-项目" class="headerlink" title="3. 项目"></a>3. 项目</h1><p>专门详解项目里每个文件的具体作用，篇幅又是很长，还是直接体验结果吧(README.md 有相关功能介绍)。</p><p>项目地址: </p><p><a href="https://github.com/guaosi/golang_tcp_chatroom" target="_blank" rel="noopener">https://github.com/guaosi/golang_tcp_chatroom</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;一直都是使用PHP的&lt;code&gt;B/S&lt;/code&gt;开发(不知道swoole的socket算不算)，很想尝试一下&lt;code&gt;C/S&lt;/code&gt;开发是什么感觉。于是乎，就做了一个聊天室，这是一个网络编程几乎必做的项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="tcp" scheme="https://www.guaosi.com/tags/tcp/"/>
    
      <category term="网络编程" scheme="https://www.guaosi.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Golang算法与数据结构：稀疏数组(sparsearray)</title>
    <link href="https://www.guaosi.com/2019/03/11/golang-sparsearray/"/>
    <id>https://www.guaosi.com/2019/03/11/golang-sparsearray/</id>
    <published>2019-03-11T05:45:11.000Z</published>
    <updated>2021-12-05T08:13:24.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h1><p>&#160; &#160; &#160; &#160;当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><h1 id="2-处理方法"><a href="#2-处理方法" class="headerlink" title="2. 处理方法"></a>2. 处理方法</h1><p>1) 记录数组一共有几行几列，有多少个不同的值<br>2) 思想:把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p><a id="more"></a><h1 id="3-举例说明"><a href="#3-举例说明" class="headerlink" title="3. 举例说明"></a>3. 举例说明</h1><p><img src="/assets/blogImg/data-structures-and-algorithms/sparsearray/sparsearray原理图.png" alt="sparsearray原理图"></p><h1 id="4-实践"><a href="#4-实践" class="headerlink" title="4. 实践"></a>4. 实践</h1><h2 id="4-1-原始数组转稀疏数组"><a href="#4-1-原始数组转稀疏数组" class="headerlink" title="4.1. 原始数组转稀疏数组"></a>4.1. 原始数组转稀疏数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> valNode <span class="keyword">struct</span> &#123;</span><br><span class="line">row <span class="keyword">int</span></span><br><span class="line">col <span class="keyword">int</span></span><br><span class="line">val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//初始化原始数组</span></span><br><span class="line"><span class="keyword">var</span> chapmap [<span class="number">11</span>][<span class="number">11</span>]<span class="keyword">int</span></span><br><span class="line">chapmap[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span> <span class="comment">//黑子</span></span><br><span class="line">chapmap[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span> <span class="comment">//白字</span></span><br><span class="line"><span class="comment">//输出原始数组</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> value &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\t"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体切片</span></span><br><span class="line"><span class="keyword">var</span> val_node []valNode</span><br><span class="line"><span class="comment">//初始化，先记录一下稀疏数组的行列以及默认值</span></span><br><span class="line"><span class="keyword">var</span> node = valNode&#123;</span><br><span class="line">row: <span class="number">11</span>,</span><br><span class="line">col: <span class="number">11</span>,</span><br><span class="line">val: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">val_node = <span class="built_in">append</span>(val_node, node)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将原始数组转稀疏组数</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> j, v := <span class="keyword">range</span> value &#123;</span><br><span class="line"><span class="keyword">if</span> v != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = valNode&#123;</span><br><span class="line">row: i,</span><br><span class="line">col: j,</span><br><span class="line">val: v,</span><br><span class="line">&#125;</span><br><span class="line">val_node = <span class="built_in">append</span>(val_node, node)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path <span class="keyword">string</span> = <span class="string">"./save.data"</span></span><br><span class="line"><span class="comment">//通过只写方式，如果不存在则创建方式打开一个文件，权限为666</span></span><br><span class="line">file, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"file create error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//使用带缓冲区的方式写入</span></span><br><span class="line"><span class="keyword">var</span> write *bufio.Writer = bufio.NewWriter(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出稀疏数组,同时写入文件</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> val_node &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d:%d %d %d\n"</span>, i, value.row, value.col, value.val)</span><br><span class="line">info := fmt.Sprintf(<span class="string">"%d %d %d\r\n"</span>, value.row, value.col, value.val)</span><br><span class="line"><span class="comment">//将内容全部写到缓存区</span></span><br><span class="line">write.WriteString(info)</span><br><span class="line">&#125;</span><br><span class="line">write.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-稀疏数组转原始数组"><a href="#4-2-稀疏数组转原始数组" class="headerlink" title="4.2. 稀疏数组转原始数组"></a>4.2. 稀疏数组转原始数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> valNode <span class="keyword">struct</span> &#123;</span><br><span class="line">row <span class="keyword">int</span></span><br><span class="line">col <span class="keyword">int</span></span><br><span class="line">val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> val_node []valNode</span><br><span class="line"><span class="keyword">var</span> path <span class="keyword">string</span> = <span class="string">"../save.data"</span></span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"file open error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">var</span> node = valNode&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, bu_err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">//指定每次读取到换行就结束</span></span><br><span class="line"><span class="keyword">if</span> bu_err == io.EOF &#123;</span><br><span class="line"><span class="comment">//如果读到最后，则会报io.EOF错误</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件中保存的内容重新变成稀疏数组</span></span><br><span class="line">arr := strings.Split(line, <span class="string">" "</span>)</span><br><span class="line">row, err := strconv.Atoi(arr[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转换错误 error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">col, err := strconv.Atoi(arr[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转换错误 error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">val, err := strconv.Atoi(strings.TrimRight(arr[<span class="number">2</span>], <span class="string">"\r\n"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转换错误 error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.row = row</span><br><span class="line">node.col = col</span><br><span class="line">node.val = val</span><br><span class="line">val_node = <span class="built_in">append</span>(val_node, node)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建动态二维数组</span></span><br><span class="line"><span class="keyword">var</span> chapmap [][]<span class="keyword">int</span> = <span class="built_in">make</span>([][]<span class="keyword">int</span>, val_node[<span class="number">0</span>].row) <span class="comment">//有多少行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; val_node[<span class="number">0</span>].row; i++ &#123;</span><br><span class="line">chapmap[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, val_node[<span class="number">0</span>].col)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将动态二维数组先设置成默认值</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> j, _ := <span class="keyword">range</span> value &#123;</span><br><span class="line">chapmap[i][j] = val_node[<span class="number">0</span>].val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再将稀疏数组转回原始数组</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> val_node &#123;</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">chapmap[value.row][value.col] = value.val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出最后的原始数组</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> value &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\t"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。&lt;/p&gt;
&lt;h1 id=&quot;2-处理方法&quot;&gt;&lt;a href=&quot;#2-处理方法&quot; class=&quot;headerlink&quot; title=&quot;2. 处理方法&quot;&gt;&lt;/a&gt;2. 处理方法&lt;/h1&gt;&lt;p&gt;1) 记录数组一共有几行几列，有多少个不同的值&lt;br&gt;2) 思想:把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.guaosi.com/tags/Golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你破解移动光猫吉比特--H2-3</title>
    <link href="https://www.guaosi.com/2019/03/09/crack-china-mobile-optical-modem-h2-3/"/>
    <id>https://www.guaosi.com/2019/03/09/crack-china-mobile-optical-modem-h2-3/</id>
    <published>2019-03-09T10:20:33.000Z</published>
    <updated>2021-12-05T08:13:24.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;过年期间家里装了2年免费的移动光纤(真香)，可是移动装机默认光猫都是<code>路由模式</code>，装机师傅以及移动人工客服都是拒绝给超级账户的。所以只能自己想办法解决。</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h1><p>1.工信部投诉，百试百灵<br>2.淘宝或者闲鱼花钱让别人破解(我查了貌似没有这个型号)<br>3.手摸手自己折腾自己搞</p><a id="more"></a><h1 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h1><p>破解后的好处:<br>1.可以将光猫变成<code>桥接模式</code>，然后用自己的路由器拨号，更稳定。<br>2.对光猫<code>h2-3</code>有完全控制能力，可以使用全部功能。<br>破解后的界面图如下:<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/success-web-ui.png" alt="success-web-ui"></p><h1 id="4-准备"><a href="#4-准备" class="headerlink" title="4. 准备"></a>4. 准备</h1><p>1.一台确认已经开启<code>telnet</code>的电脑</p><p>2.一台正常可用的主人公<code>h2-3光猫</code></p><p>3.知道光猫的普通账户的账号密码(在光猫后面贴着)</p><p>4.确认电脑与光猫在同一局域网内</p><p>5.<code>Firefox</code>浏览器或者<code>Chrome</code>浏览器</p><p>注意:如果想把光猫转成桥接模式，路由器来拨号的话，需要知道<code>宽带密码</code>是多少。如果不知道，建议先打<code>10086</code>人工客服下发重置密码的短信。</p><h1 id="5-破解过程"><a href="#5-破解过程" class="headerlink" title="5. 破解过程"></a>5. 破解过程</h1><h2 id="5-1-打开光猫telnet"><a href="#5-1-打开光猫telnet" class="headerlink" title="5.1. 打开光猫telnet"></a>5.1. 打开光猫telnet</h2><p>1.首先打开浏览器，在扩展中安装<code>HTTP Header Live</code>插件(不知道怎么安装自行百度)。</p><p>2.浏览器打开<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.1.1</span></span><br></pre></td></tr></table></figure></p><p>看到光猫的登陆界面，使用普通账户进行登陆<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/login-web-ui.png" alt="login-web-ui"></p><p>3.打开<code>HTTP Header Live</code>插件，在页面上随便点击一个页面，再次查看<code>HTTP Header Live</code>插件，捕捉到了<code>post</code>信息<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/http-header-live1.jpg" alt="http-header-live1"><br>我们需要使用它的header头来发送我们的消息，以此来修改光猫<code>telnet</code>的账号密码</p><p>4.点击打开一个post<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/http-header-live2.jpg" alt="http-header-live2"></p><p>修改链接为<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="regexp">/boaform/</span>set_telenet_enabled.cgi</span><br></pre></td></tr></table></figure></p><p>内容为：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode_name=set_telenet_enabled<span class="variable">&amp;nonedata</span>=<span class="number">0.3535281170047305</span><span class="variable">&amp;user_name</span>=root<span class="variable">&amp;user_password</span>=admin<span class="variable">&amp;telenet_enabled</span>=<span class="number">1</span><span class="variable">&amp;default_flag</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/http-header-live3.jpg" alt="http-header-live3"><br>意思是将光猫的telnet账号密码分别设置为<code>root</code>与<code>admin</code></p><p>5.然后点击右下角的<code>send</code>确认，会返回一个成功的页面，代表已经成功打开光猫的<code>telnet</code><br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/success-info.jpg" alt="success-info"></p><h2 id="5-2-登陆光猫telnet"><a href="#5-2-登陆光猫telnet" class="headerlink" title="5.2. 登陆光猫telnet"></a>5.2. 登陆光猫telnet</h2><ol><li>打开<code>命令行</code>工具，输入</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">telnet</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure><p>连接上后，在<code>OpenWrt login</code>提示时输入账号<code>root</code>，在<code>Password</code>提示时输入密码<code>admin</code>，然后回车。即可成功登陆进光猫的<code>telnet</code></p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/telnet-login-success.png" alt="telnet-login-success"></p><p>2.切换到配置文件目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/config/worka</span></span><br></pre></td></tr></table></figure></p><p>然后我们查看一下文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure></p><p>如果使用的是<code>windows</code>的<code>cmd</code>，那么可以使用<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure></p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/telnet-dir-file.png" alt="telnet-dir-file"></p><p>其中，<code>backup_lastgood.xml</code>与<code>lastgood.xml</code>是我们后面需要修改的文件</p><h2 id="5-3-修改配置文件"><a href="#5-3-修改配置文件" class="headerlink" title="5.3. 修改配置文件"></a>5.3. 修改配置文件</h2><p>1.我们查看一下<code>backup_lastgood.xml</code>里面的内容<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">backup_lastgood</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure></p><p>然后搜索<code>TeleAccountName</code>,就可以看到存放的账号以及密码<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/telnet-modify.png" alt="telnet-modify"></p><p>其中，<code>TeleAccountName</code>和<code>TeleAccountPassword</code>分别代表超级账户的账号密码。<code>UserAccountName</code>和<code>UserAccountPassword</code>分别代表普通账户的账号密码。</p><p>2.现在我们来分析一下,<code>UserAccountName</code>的Value是<code>user</code>，跟我们普通账户的账号相同。那密码<code>UserAccountPassword</code>又是什么含义。比如，此时我的<code>UserAccountPassword</code>的值为<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">61</span>,<span class="number">62</span>,<span class="number">64</span>,<span class="number">66</span>,<span class="number">6</span>e,<span class="number">68</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,......</span><br></pre></td></tr></table></figure></p><p>我光猫背面的密码是<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abdfnh</span></span><br></pre></td></tr></table></figure></p><p>此时不难发现,密码字母所对应的<code>ASCII</code>数字，<code>十六进制</code>转换后与<code>UserAccountPassword</code>的值是相同的。</p><p>3.知道这个原理后，我们就可以将密码修改成我们喜欢的密码了。大家自行在查找字符所对应的<code>ASCII</code>数字的<code>十六进制</code>是多少即可，将其替换。</p><p>4.为了方便，我们将普通密码与超级密码设置成相同的，即把<code>TeleAccountPassword</code>所对应的内容替换为<code>UserAccountPassword</code>的内容。</p><p>5.<code>lastgood.xml</code>与<code>backup_lastgood.xml</code>内容基本是相同的，一样替换<code>TeleAccountPassword</code>的内容即可。</p><h2 id="5-4-生效"><a href="#5-4-生效" class="headerlink" title="5.4. 生效"></a>5.4. 生效</h2><p>输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">reboot</span></span><br></pre></td></tr></table></figure></p><p>重启光猫，2分钟后登陆<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></p><p>输入超级账号<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CMCCAdmin</span></span><br></pre></td></tr></table></figure></p><p>自己自定义的密码(比如我刚刚是与普通用户密码设置相同)<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abdfnh</span></span><br></pre></td></tr></table></figure></p><p>登陆成功，代表破解成功。</p><h2 id="5-5-桥接模式"><a href="#5-5-桥接模式" class="headerlink" title="5.5. 桥接模式"></a>5.5. 桥接模式</h2><p><code>网络</code>-<code>宽带设置</code>，然后点击<code>2_INTERNET_R_VID_400</code>,将连接模式从<code>Route</code>改成<code>Brige</code>,保存即可。</p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/web-ui-modify-brige.png" alt="web-ui-modify-brige"></p><h1 id="6-注意"><a href="#6-注意" class="headerlink" title="6. 注意"></a>6. 注意</h1><p>1.有可能修改成自己自定义密码后，自定义密码不会生效，此时有可能是光猫恢复成了万能密码，也就是<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aD<span class="name">m8</span>H<span class="meta">%</span>MdA</span><br></pre></td></tr></table></figure></p><p>可以登录尝试看看。</p><p>2.如果你忘记了自己的宽带密码，拨打人工重置下发的话，光猫也会被移动远程重置信息。此时按照本教程重新再破解一次即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;过年期间家里装了2年免费的移动光纤(真香)，可是移动装机默认光猫都是&lt;code&gt;路由模式&lt;/code&gt;，装机师傅以及移动人工客服都是拒绝给超级账户的。所以只能自己想办法解决。&lt;/p&gt;
&lt;h1 id=&quot;2-解决办法&quot;&gt;&lt;a href=&quot;#2-解决办法&quot; class=&quot;headerlink&quot; title=&quot;2. 解决办法&quot;&gt;&lt;/a&gt;2. 解决办法&lt;/h1&gt;&lt;p&gt;1.工信部投诉，百试百灵&lt;br&gt;2.淘宝或者闲鱼花钱让别人破解(我查了貌似没有这个型号)&lt;br&gt;3.手摸手自己折腾自己搞&lt;/p&gt;
    
    </summary>
    
    
      <category term="crack" scheme="https://www.guaosi.com/tags/crack/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你让Laravel开发Api更得心应手</title>
    <link href="https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/"/>
    <id>https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/</id>
    <published>2019-02-26T02:47:04.000Z</published>
    <updated>2021-12-05T08:13:24.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;随着前后端完全分离，<code>PHP</code>也基本告别了<code>view</code>模板嵌套开发，转而专门写资源接口。<code>Laravel</code>是PHP框架中最优雅的框架，国内也越来越多人告别<code>ThinkPHP</code>选择了<code>Laravel</code>。<code>Laravel</code>框架本身对<code>API</code>有支持，但是感觉再工作中还是需要再做一些处理。<code>Lumen</code>用起来不顺手，有些包不能很好地支持。所以，将<code>Laravel</code>框架进行一些配置处理，让其在开发<code>API</code>时更得心应手。</p><blockquote><p>内容划水过长，请谨慎打开</p></blockquote><a id="more"></a><p>&#160; &#160; &#160; &#160;当然，你也可以点击<a href="#6-%E6%88%90%E5%93%81">这里</a>,直接跳到成果~</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><h2 id="2-1-环境"><a href="#2-1-环境" class="headerlink" title="2.1. 环境"></a>2.1. 环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">PHP</span> &gt; 7<span class="selector-class">.1</span></span><br><span class="line"><span class="selector-tag">MySQL</span> &gt; 5<span class="selector-class">.5</span></span><br><span class="line"><span class="selector-tag">Redis</span> &gt; 2<span class="selector-class">.8</span></span><br></pre></td></tr></table></figure><h2 id="2-2-工具"><a href="#2-2-工具" class="headerlink" title="2.2. 工具"></a>2.2. 工具</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">postman</span></span><br><span class="line"><span class="attribute">composer</span></span><br></pre></td></tr></table></figure><h2 id="2-3-使用postman"><a href="#2-3-使用postman" class="headerlink" title="2.3. 使用postman"></a>2.3. 使用postman</h2><p>为了模拟AJAX请求，请将 <code>header头</code> 设置<code>X-Requested-With</code> 为 <code>XMLHttpRequest</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/postman_set_ajax.png" alt="postman_set_ajax"></p><h2 id="2-4-安装Laravel"><a href="#2-4-安装Laravel" class="headerlink" title="2.4. 安装Laravel"></a>2.4. 安装Laravel</h2><p><code>Laravel</code>只要<code>&gt;=5.5</code>皆可，这里采用文章编写时最新的<code>5.7</code>版本<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">composer </span><span class="built_in">create-project</span> <span class="string">laravel/</span><span class="string">laravel </span><span class="string">Laravel </span><span class="built_in">--prefer-dist</span> <span class="string">"5.7.*"</span></span><br></pre></td></tr></table></figure></p><h2 id="2-5-创建数据库"><a href="#2-5-创建数据库" class="headerlink" title="2.5. 创建数据库"></a>2.5. 创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> auto_increment <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span> ( <span class="number">12</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">VARCHAR</span> ( <span class="number">80</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`last_token`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'登陆时的token'</span>,</span><br><span class="line"><span class="string">`status`</span> TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态 -1代表已删除 0代表正常 1代表冻结'</span>,</span><br><span class="line"><span class="string">`created_at`</span> <span class="built_in">TIMESTAMP</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line"><span class="string">`updated_at`</span> <span class="built_in">TIMESTAMP</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span> </span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h1 id="3-初始化数据"><a href="#3-初始化数据" class="headerlink" title="3. 初始化数据"></a>3. 初始化数据</h1><h2 id="3-1-Model移动"><a href="#3-1-Model移动" class="headerlink" title="3.1. Model移动"></a>3.1. Model移动</h2><p>在项目的<code>app</code>目录下可以看到，有一个<code>User.php</code>的模型文件。因为<code>Laravel</code>默认把模型文件放在<code>app</code>目录下，如果数据表多的话，这里模型文件就会很多，不便于管理，所以我们先要将模型文件移动到其他文件夹内。</p><p>1) 在<code>app</code>目录下新建<code>Models</code>文件夹，然后将<code>User.php</code>文件移动进来。<br>2) 修改<code>User.php</code>的内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>; <span class="comment">//这里从App改成了App\Models</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $table = <span class="string">'users'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="comment">//去掉我创建的数据表没有的字段</span></span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $fillable = [</span></span><br><span class="line"><span class="php">        <span class="string">'name'</span>, <span class="string">'password'</span></span></span><br><span class="line"><span class="php">    ];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="comment">//去掉我创建的数据表没有的字段</span></span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $hidden = [</span></span><br><span class="line"><span class="php">        <span class="string">'password'</span></span></span><br><span class="line"><span class="php">    ];</span></span><br><span class="line"><span class="php">    <span class="comment">//将密码进行加密</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttribute</span><span class="params">($value)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;attributes[<span class="string">'password'</span>] = bcrypt($value);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>3) 因为有关于User的命名空间发生了改变，所以我们全局搜索<code>App\User</code>,将其替换为<code>App\Models\User</code>.我一共搜索到3个文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app/Http/Controllers/Auth 目录下的 RegisterController.php</span><br><span class="line">config 目录下的 services.php</span><br><span class="line">config 目录下的 auth.php</span><br><span class="line">database/factories 目录下的 UserFactory.php</span><br></pre></td></tr></table></figure></p><h2 id="3-2-控制器"><a href="#3-2-控制器" class="headerlink" title="3.2. 控制器"></a>3.2. 控制器</h2><p>因为是专门做API的，所以我们要把是API的控制器都放到<code>app\Http\Controllers\Api</code>目录下。</p><p>使用命令行创建控制器<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:controller Api/UserController</span><br></pre></td></tr></table></figure></p><p>编写<code>app/Http/Controllers/Api</code>目录下的<code>UserController.php</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'guaosi'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这里写了index函数，用来下面建立路由后的测试，查看是否可以正常访问。</p><h2 id="3-3-路由"><a href="#3-3-路由" class="headerlink" title="3.3. 路由"></a>3.3. 路由</h2><p>在<code>routes</code>目录下的<code>api.php</code>是专门用来写Api接口的路由，所以我们打开它，填写以下内容，做一个测试.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">Route::namespace(<span class="string">'Api'</span>)-&gt;prefix(<span class="string">'v1'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)-&gt;name(<span class="string">'users.index'</span>);</span></span><br><span class="line"><span class="php">&#125;);</span></span><br></pre></td></tr></table></figure></p><blockquote><p>因为我们Api控制器的命名空间是<code>App\Http\Controllers\Api</code>,而<code>Laravel</code>默认只会在命名空间<code>App\Http\Controllers</code>下查找控制器，所以需要我们给出<code>namespace</code>。</p></blockquote><blockquote><p>同时，添加一个<code>prefix</code>是为了版本号，方便后期接口升级区分。</p></blockquote><p>打开<code>postman</code>,用<code>get</code>方式请求<code>你的域名/api/v1/users</code>,最后返回结果是<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">guaosi</span></span><br></pre></td></tr></table></figure></p><p>则成功</p><h2 id="3-4-创建验证器"><a href="#3-4-创建验证器" class="headerlink" title="3.4. 创建验证器"></a>3.4. 创建验证器</h2><p>在创建用户之前，我们先创建验证器，来让我们服务器接收到的数据更安全.当然，我们也要把关于Api验证的放在一个专门的文件夹内。<br>先创建一个<code>Request</code>的基类<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:request Api/FormRequest</span><br></pre></td></tr></table></figure></p><p>因为验证器默认的权限验证是<code>false</code>，导致返回都是<code>403</code>的权限不通过错误。这里我们没有用到权限认证，为了方便处理，我们默认将权限都是通过的状态。所以，每个文件都需要我们将<code>false</code>改成<code>true</code>。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//false代表权限验证不通过，返回403错误</span></span><br><span class="line">    <span class="comment">//true代表权限认证通过</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们修改<code>app/Http/Requests/Api</code> 目录下的 <code>FormRequest.php</code> 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span> <span class="title">as</span> <span class="title">BaseFormRequest</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">FormRequest</span> <span class="keyword">extends</span> <span class="title">BaseFormRequest</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//false代表权限验证不通过，返回403错误</span></span></span><br><span class="line"><span class="php">        <span class="comment">//true代表权限认证通过</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这样这个命名空间下的验证器都会默认通过权限验证。当然，如果你需要权限验证，可以通过直接覆盖方法。</p><p>接着我们开始创建关于<code>UserController</code>的专属验证器<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:request Api/UserRequest</span><br></pre></td></tr></table></figure></p><p>编辑<code>app/Http/Requests/Api</code> 目录下的 <code>UserRequest.php</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;method()) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'GET'</span>:</span></span><br><span class="line"><span class="php">                &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">                        <span class="string">'id'</span> =&gt; [<span class="string">'required,exists:shop_user,id'</span>]</span></span><br><span class="line"><span class="php">                    ];</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span></span><br><span class="line"><span class="php">                &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">                        <span class="string">'name'</span> =&gt; [<span class="string">'required'</span>, <span class="string">'max:12'</span>, <span class="string">'unique:users,name'</span>],</span></span><br><span class="line"><span class="php">                        <span class="string">'password'</span> =&gt; [<span class="string">'required'</span>, <span class="string">'max:16'</span>, <span class="string">'min:6'</span>]</span></span><br><span class="line"><span class="php">                    ];</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="php">                &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">                    ];</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">            <span class="string">'id.required'</span>=&gt;<span class="string">'用户ID必须填写'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'id.exists'</span>=&gt;<span class="string">'用户不存在'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'name.unique'</span> =&gt; <span class="string">'用户名已经存在'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'name.required'</span> =&gt; <span class="string">'用户名不能为空'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'name.max'</span> =&gt; <span class="string">'用户名最大长度为12个字符'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'password.required'</span> =&gt; <span class="string">'密码不能为空'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'password.max'</span> =&gt; <span class="string">'密码长度不能超过16个字符'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'password.min'</span> =&gt; <span class="string">'密码长度不能小于6个字符'</span></span></span><br><span class="line"><span class="php">        ];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-5-创建用户"><a href="#3-5-创建用户" class="headerlink" title="3.5. 创建用户"></a>3.5. 创建用户</h2><p>现在我们来编写创建用户接口，制作一些虚拟数据。(就不使用seeder来填充了)<br>打开<code>UserController.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span><br><span class="line">    User::create($request-&gt;all());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'用户注册成功。。。'</span>;</span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $res=Auth::guard(<span class="string">'web'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>($res)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'用户登录成功...'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'用户登录失败'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>然后我们创建路由，编辑<code>api.php</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::post<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)</span>-&gt;</span>name(<span class="string">'users.store'</span>);</span><br><span class="line">Route::post<span class="function"><span class="params">(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)</span>-&gt;</span>name(<span class="string">'users.login'</span>);</span><br></pre></td></tr></table></figure></p><p>打开<code>postman</code>,用<code>post</code>方式请求<code>你的域名/api/v1/users</code>,在<code>form-data</code>记得填写要创建的用户名和密码。</p><p>最后返回结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户创建成功。。。</span><br></pre></td></tr></table></figure></p><p>则成功。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/create_user.png" alt="create_user"></p><p>如果返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"The given data was invalid."</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: [</span><br><span class="line">            <span class="string">"用户名不能为空"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"password"</span>: [</span><br><span class="line">            <span class="string">"密码不能为空"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>则证明验证失败。</p><p>然后验证是否可以正常登录。因为我们认证的字段是<code>name</code>跟<code>password</code>,而<code>Laravel</code>默认认证的是<code>email</code>跟<code>password</code>。所以我们还要打开<code>app/Http/Controllers/auth</code> 目录下的 <code>LoginController.php</code>,加入如下代码<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">username</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'name'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开<code>postman</code>,用<code>post</code>方式请求<code>你的域名/api/v1/login</code><br>最后返回结果是<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户登录成功...</span><br></pre></td></tr></table></figure></p><p>则成功<br><img src="/assets/blogImg/laravel-api-initialization-preparation/login_user.png" alt="login_user"></p><h2 id="3-6-创建10个用户"><a href="#3-6-创建10个用户" class="headerlink" title="3.6. 创建10个用户"></a>3.6. 创建10个用户</h2><p>为了测试使用，请自行通过接口创建10个用户。</p><h2 id="3-7-编写相关资源接口"><a href="#3-7-编写相关资源接口" class="headerlink" title="3.7. 编写相关资源接口"></a>3.7. 编写相关资源接口</h2><p>给出整体控制器信息<code>UserController.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//返回用户列表</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//3个用户为一页</span></span></span><br><span class="line"><span class="php">        $users = User::paginate(<span class="number">3</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $users;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回单一用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $user;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        User::create($request-&gt;all());</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'用户注册成功。。。'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $res=Auth::guard(<span class="string">'web'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($res)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="string">'用户登录成功...'</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'用户登录失败'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-8-编写路由"><a href="#3-8-编写路由" class="headerlink" title="3.8. 编写路由"></a>3.8. 编写路由</h2><p>给出整体路由信息<code>api.php</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use Illuminate<span class="string">\Http\Request;</span></span><br><span class="line"></span><br><span class="line">Route::namespace<span class="function"><span class="params">(<span class="string">'Api'</span>)</span>-&gt;</span>prefix<span class="function"><span class="params">(<span class="string">'v1'</span>)</span>-&gt;</span>group(<span class="keyword">function</span> () &#123;</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)</span>-&gt;</span>name(<span class="string">'users.index'</span>);</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users/&#123;user&#125;'</span>,<span class="string">'UserController@show'</span>)</span>-&gt;</span>name(<span class="string">'users.show'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)</span>-&gt;</span>name(<span class="string">'users.store'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)</span>-&gt;</span>name(<span class="string">'users.login'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="4-存在问题"><a href="#4-存在问题" class="headerlink" title="4. 存在问题"></a>4. 存在问题</h1><p>以上所有返回的结果，无论正确或者错误，都没有一个统一格式规范，对开发<code>Api</code>不太友好的，需要我们进行一些修改，让Laravel框架可以更加友好地编写Api。</p><h1 id="5-构造"><a href="#5-构造" class="headerlink" title="5. 构造"></a>5. 构造</h1><h2 id="5-1-跨域问题"><a href="#5-1-跨域问题" class="headerlink" title="5.1. 跨域问题"></a>5.1. 跨域问题</h2><p>所有问题，跨域先行。跨域问题没有解决，一切处理都是纸老虎。这里我们使用medz做的<a href="https://learnku.com/laravel/t/8816/the-new-wheel-php-cors-cross-origin-resource-sharing-solves-the-cross-domain-requirements-of-the-php-project-program" target="_blank" rel="noopener">cors扩展包</a></p><h3 id="5-1-1-安装medz-cors"><a href="#5-1-1-安装medz-cors" class="headerlink" title="5.1.1. 安装medz/cors"></a>5.1.1. 安装medz/cors</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> medz/cors</span><br></pre></td></tr></table></figure><h3 id="5-1-2-发布配置文件"><a href="#5-1-2-发布配置文件" class="headerlink" title="5.1.2. 发布配置文件"></a>5.1.2. 发布配置文件</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Medz<span class="symbol">\C</span>ors<span class="symbol">\L</span>aravel<span class="symbol">\P</span>roviders<span class="symbol">\L</span>aravelServiceProvider" --force</span><br></pre></td></tr></table></figure><h3 id="5-1-3-修改配置文件"><a href="#5-1-3-修改配置文件" class="headerlink" title="5.1.3. 修改配置文件"></a>5.1.3. 修改配置文件</h3><p>打开<code>config/cors.php</code>,在<code>expose-headers</code>添加值<code>Authorization</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'expose-headers'</span>     =&gt; [<span class="string">'Authorization'</span>],</span><br><span class="line">    ......</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><blockquote><p>这样跨域请求时，才能返回<code>header</code>头为<code>Authorization</code>的内容，否则在刷新用户<code>token</code>时不会返回刷新后的<code>token</code></p></blockquote><h3 id="5-1-4-增加中间件别名"><a href="#5-1-4-增加中间件别名" class="headerlink" title="5.1.4. 增加中间件别名"></a>5.1.4. 增加中间件别名</h3><p>打开<code>app/Http/Kernel.php</code>,增加一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">        ...... <span class="comment">//前面的中间件</span></span><br><span class="line">        <span class="string">'cors'</span>=&gt; \Medz\Cors\Laravel\Middleware\ShouldGroup::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-1-5-修改路由"><a href="#5-1-5-修改路由" class="headerlink" title="5.1.5. 修改路由"></a>5.1.5. 修改路由</h3><p>打开<code>routes/api.php</code>,在路由组中增加使用中间件<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route::namespace<span class="function"><span class="params">(<span class="string">'Api'</span>)</span>-&gt;</span>prefix<span class="function"><span class="params">(<span class="string">'v1'</span>)</span>-&gt;</span>middleware<span class="function"><span class="params">(<span class="string">'cors'</span>)</span>-&gt;</span>group(<span class="keyword">function</span> () &#123;</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)</span>-&gt;</span>name(<span class="string">'users.index'</span>);</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users/&#123;user&#125;'</span>,<span class="string">'UserController@show'</span>)</span>-&gt;</span>name(<span class="string">'users.show'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)</span>-&gt;</span>name(<span class="string">'users.store'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)</span>-&gt;</span>name(<span class="string">'users.login'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="5-2-统一Response响应处理"><a href="#5-2-统一Response响应处理" class="headerlink" title="5.2. 统一Response响应处理"></a>5.2. 统一Response响应处理</h2><p>接口主流返回<code>json</code>格式，其中包含<code>http状态码</code>，<code>status请求状态</code>，<code>data请求资源结果</code>等等。需要我们有一个API接口全局都能有统一的格式和对应的数据处理。参考于<a href="https://learnku.com/articles/6035/laravel55-developing-api-combat" target="_blank" rel="noopener">这里</a>。</p><h3 id="5-2-1-封装返回的统一消息"><a href="#5-2-1-封装返回的统一消息" class="headerlink" title="5.2.1. 封装返回的统一消息"></a>5.2.1. 封装返回的统一消息</h3><p>在 <code>app/Api/Helpers</code> 目录(不存在目录自己新建)下新建 <code>ApiResponse.php</code><br>填入如下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span> <span class="title">as</span> <span class="title">FoundationResponse</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Response</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">trait</span> ApiResponse</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $statusCode = FoundationResponse::HTTP_OK;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusCode</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;statusCode;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $statusCode</span><br><span class="line">     * @return $this</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setStatusCode</span><span class="params">($statusCode,$httpCode=null)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $httpCode = $httpCode ?? $statusCode;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;statusCode = $statusCode;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $data</span><br><span class="line">     * @param array $header</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">respond</span><span class="params">($data, $header = [])</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> Response::json($data,<span class="keyword">$this</span>-&gt;getStatusCode(),$header);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $status</span><br><span class="line">     * @param array $data</span><br><span class="line">     * @param null $code</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">status</span><span class="params">($status, array $data, $code = null)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($code)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;setStatusCode($code);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        $status = [</span></span><br><span class="line"><span class="php">            <span class="string">'status'</span> =&gt; $status,</span></span><br><span class="line"><span class="php">            <span class="string">'code'</span> =&gt; <span class="keyword">$this</span>-&gt;statusCode</span></span><br><span class="line"><span class="php">        ];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $data = array_merge($status,$data);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respond($data);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $message</span><br><span class="line">     * @param int $code</span><br><span class="line">     * @param string $status</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line">    /*</span><br><span class="line">     * 格式</span><br><span class="line">     * data:</span><br><span class="line">     *  code:422</span><br><span class="line">     *  message:xxx</span><br><span class="line">     *  status:'error'</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">failed</span><span class="params">($message, $code = FoundationResponse::HTTP_BAD_REQUEST,$status = <span class="string">'error'</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode($code)-&gt;message($message,$status);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $message</span><br><span class="line">     * @param string $status</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">($message, $status = <span class="string">"success"</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;status($status,[</span></span><br><span class="line"><span class="php">            <span class="string">'message'</span> =&gt; $message</span></span><br><span class="line"><span class="php">        ]);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $message</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">internalError</span><span class="params">($message = <span class="string">"Internal Error!"</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($message,FoundationResponse::HTTP_INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $message</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">created</span><span class="params">($message = <span class="string">"created"</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(FoundationResponse::HTTP_CREATED)</span></span><br><span class="line"><span class="php">            -&gt;message($message);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $data</span><br><span class="line">     * @param string $status</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">success</span><span class="params">($data, $status = <span class="string">"success"</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;status($status,compact(<span class="string">'data'</span>));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $message</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notFond</span><span class="params">($message = <span class="string">'Not Fond!'</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($message,Foundationresponse::HTTP_NOT_FOUND);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-2-2-新建Api控制器基类"><a href="#5-2-2-新建Api控制器基类" class="headerlink" title="5.2.2. 新建Api控制器基类"></a>5.2.2. 新建Api控制器基类</h3><p>在 <code>app/Http/Controller/Api</code> 目录下新建一个<code>Controller.php</code>作为<code>Api</code>专门的<code>基类</code>.<br>填入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>\<span class="title">ApiResponse</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span> <span class="title">as</span> <span class="title">BaseController</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span></span><br><span class="line"><span class="php">    <span class="comment">// 其他通用的Api帮助函数</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-2-3-继承Api控制器基类"><a href="#5-2-3-继承Api控制器基类" class="headerlink" title="5.2.3. 继承Api控制器基类"></a>5.2.3. 继承Api控制器基类</h3><p>让Api的控制器继承这个基类即可。<br>打开<code>UserController.php</code>文件，去掉命名空间<code>use App\Http\Controllers\Controller</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-2-4-如何使用"><a href="#5-2-4-如何使用" class="headerlink" title="5.2.4. 如何使用"></a>5.2.4. 如何使用</h3><p>得益于前面统一消息的封装，使用起来非常容易。<br>1.返回正确信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;success(<span class="string">'用户登录成功...'</span>);</span><br></pre></td></tr></table></figure></p><p>2.返回正确资源信息<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;success(<span class="variable">$user</span>);</span><br></pre></td></tr></table></figure></p><p>3.返回自定义http状态码的正确信息<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;setStatusCode<span class="function"><span class="params">(<span class="number">201</span>)</span>-&gt;</span>success(<span class="string">'用户登录成功...'</span>);</span><br></pre></td></tr></table></figure></p><p>4.返回错误信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;failed(<span class="string">'用户注册失败'</span>);</span><br></pre></td></tr></table></figure></p><p>5.返回自定义http状态码的错误信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;failed(<span class="string">'用户登录失败'</span>,<span class="number">401</span>);</span><br></pre></td></tr></table></figure></p><p>6.返回自定义http状态码的错误信息,同时也想返回自己内部定义的错误码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;failed(<span class="string">'用户登录失败'</span>,<span class="number">401</span>,<span class="number">10001</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>默认success返回的状态码是200，failed返回的状态码是400</p></blockquote><h3 id="5-2-5-修改用户控制器"><a href="#5-2-5-修改用户控制器" class="headerlink" title="5.2.5. 修改用户控制器"></a>5.2.5. 修改用户控制器</h3><p>我们将统一消息封装运用到<code>UserController</code>中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//返回用户列表</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//3个用户为一页</span></span></span><br><span class="line"><span class="php">        $users = User::paginate(<span class="number">3</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success($users);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回单一用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success($user);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        User::create($request-&gt;all());</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">'用户注册成功'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $res=Auth::guard(<span class="string">'web'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($res)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">'用户登录成功...'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'用户登录失败'</span>,<span class="number">401</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-2-6-测试"><a href="#5-2-6-测试" class="headerlink" title="5.2.6. 测试"></a>5.2.6. 测试</h3><ol><li>返回用户列表<br>请求<code>http://你的域名/api/v1/users</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_user_list_message.png" alt="success_user_list_message"></li><li>返回单一用户<br>请求<code>http://你的域名/api/v1/users/1</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_simple_user_message.png" alt="success_simple_user_message"></li><li>登陆正确<br>请求<code>http://你的域名/api/v1/login</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_login_user_message.png" alt="success_login_user_message"></li><li>登陆错误<br>请求<code>http://你的域名/api/v1/login</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/fail_login_user_message.png" alt="fail_login_user_message"><h2 id="5-3-Api-Resource资源"><a href="#5-3-Api-Resource资源" class="headerlink" title="5.3. Api-Resource资源"></a>5.3. Api-Resource资源</h2></li></ol><p>在上面请求返回用户列表和返回单一用户时，返回的字段都是数据库里所有的字段，当然，不包含我们在<code>User</code>模型中去除的<code>password</code>字段。</p><h3 id="5-3-1-需求"><a href="#5-3-1-需求" class="headerlink" title="5.3.1. 需求"></a>5.3.1. 需求</h3><p>此时，我们如果想控制返回的字段有哪些，可以使用<code>select</code>或者使用<code>User</code>模型中的<code>hidden</code>数组来限制字段。</p><p>这2种办法虽然可以，但是扩展性太差。并且我想对<code>status</code>返回的形式进行修改，比如0的时候显示正常，1显示冻结，此时就需要遍历数据进行修改了。此时，Laravel提供的<code>API 资源</code>就可以很好地解决我们的问题。</p><blockquote><p>当构建 API 时，你往往需要一个转换层来联结你的 Eloquent 模型和实际返回给用户的 JSON 响应。Laravel 的资源类能够让你以更直观简便的方式将模型和模型集合转化成 JSON。</p></blockquote><blockquote><p>也就是在C层输出V层时，中间再来一层来专门处理字段问题，我们可以称之为<code>ViewModel</code>层。</p></blockquote><p>详细可以查看<a href="https://learnku.com/docs/laravel/5.7/eloquent-resources/2298" target="_blank" rel="noopener">手册</a>如何使用。</p><h3 id="5-3-2-创建单一用户资源和列表用户资源"><a href="#5-3-2-创建单一用户资源和列表用户资源" class="headerlink" title="5.3.2. 创建单一用户资源和列表用户资源"></a>5.3.2. 创建单一用户资源和列表用户资源</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:resource Api/UserResource</span><br></pre></td></tr></table></figure><p>修改<code>app/Http/Resources/Api</code> 目录下的 <code>UserResource.php</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Json</span>\<span class="title">JsonResource</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Transform the resource into an array.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request  $request</span><br><span class="line">     * @return array</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;status)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">-1</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;status = <span class="string">'已删除'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;status = <span class="string">'正常'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;status = <span class="string">'冻结'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">            <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span></span><br><span class="line"><span class="php">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span></span><br><span class="line"><span class="php">            <span class="string">'status'</span> =&gt; <span class="keyword">$this</span>-&gt;status,</span></span><br><span class="line"><span class="php">            <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;created_at,</span></span><br><span class="line"><span class="php">            <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span></span><br><span class="line"><span class="php">        ];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-3-3-如何使用"><a href="#5-3-3-如何使用" class="headerlink" title="5.3.3. 如何使用"></a>5.3.3. 如何使用</h3><p>返回单一用户(单一的资源)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br></pre></td></tr></table></figure></p><p>返回用户列表(资源列表)<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> UserResource::collection(<span class="variable">$users</span>);</span><br><span class="line">/<span class="regexp">/这里不能用$this-&gt;success(UserResource::collection($users))</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/否则不能返回分页标签信息</span></span><br></pre></td></tr></table></figure></p><h3 id="5-3-4-修改用户控制器"><a href="#5-3-4-修改用户控制器" class="headerlink" title="5.3.4. 修改用户控制器"></a>5.3.4. 修改用户控制器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回用户列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//3个用户为一页</span></span><br><span class="line">    $users = User::paginate(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> UserResource::collection($users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回单一用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-5-测试"><a href="#5-3-5-测试" class="headerlink" title="5.3.5. 测试"></a>5.3.5. 测试</h3><p>返回单一用户(单一的资源)<br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_simple_user_resource.png" alt="success_simple_user_resource"><br>返回用户列表(资源列表)<br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_user_list_resource.png" alt="success_user_list_resource"></p><h2 id="5-4-Enum枚举"><a href="#5-4-Enum枚举" class="headerlink" title="5.4. Enum枚举"></a>5.4. Enum枚举</h2><p>我们常常会使用数字来代表状态，比如用户表，我们使用 <code>-1</code> 代表已删除 <code>0</code> 代表正常 <code>1</code> 代表冻结。</p><h3 id="5-4-1-两个问题"><a href="#5-4-1-两个问题" class="headerlink" title="5.4.1. 两个问题"></a>5.4.1. 两个问题</h3><ol><li>当我们判断一个用户，如果是删除或者冻结状态就不让其登陆了。判断代码这样写<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有可能状态有很多，所以这边就直接用 或 来判断不取反了。</span></span><br><span class="line"><span class="keyword">if</span>($user-&gt;status==<span class="number">-1</span>||$user-&gt;status==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 不允许用户登录逻辑</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户正常登录逻辑</span></span><br></pre></td></tr></table></figure></li></ol><p>上面逻辑和编写没有什么问题。因为是现在看，可以很明白的知道<code>-1</code> 代表已删除，<code>1</code> 代表冻结。但是如果一个月后再来看这行代码，早已经忘记了 <code>-1</code> 跟 <code>1</code> 具体表示的含义。</p><ol start="2"><li>参考上面<code>UserResource.php</code>编写时，判断<code>status</code>具体状态函数，我们是使用<code>switch</code>语句。这样太不美观，而且地方用多了还容易冗余，每次编写都需要去查看每个数字代表的具体意思。</li></ol><h3 id="5-4-2-解决思路"><a href="#5-4-2-解决思路" class="headerlink" title="5.4.2. 解决思路"></a>5.4.2. 解决思路</h3><ol><li>第一个问题：为什么一段时间后再看就不知道<code>-1</code> 跟 <code>1</code> 具体表示的含义？</li></ol><p>&#160; &#160; &#160; &#160;这是因为单纯的数字没有解释说明的作用，变量以及函数这些具有解释说明的作用，可以让我们立刻知道具体含义。</p><ol start="2"><li>第二个问题：如何给一个数字就能直接知道它代表的含义？</li></ol><p>&#160; &#160; &#160; &#160;提供一个函数，返回这个数字代表的具体含义。</p><p>而这些，都可以使用<code>Enum枚举</code>可以解决。</p><h3 id="5-4-3-注意"><a href="#5-4-3-注意" class="headerlink" title="5.4.3. 注意"></a>5.4.3. 注意</h3><p><code>PHP</code>和<code>Laravel</code>框架本身是不支持<code>Enum枚举</code>的，不过我们可以模拟枚举的功能</p><h3 id="5-4-4-创建枚举"><a href="#5-4-4-创建枚举" class="headerlink" title="5.4.4. 创建枚举"></a>5.4.4. 创建枚举</h3><p>在 <code>app/Models</code> 下新建目录 <code>Enum</code> ,并在目录<code>Enum</code>下新建 <code>UserEnum.php</code> 文件，填写以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Enum</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserEnum</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// 状态类别</span></span></span><br><span class="line"><span class="php">    <span class="keyword">const</span> INVALID = <span class="number">-1</span>; <span class="comment">//已删除</span></span></span><br><span class="line"><span class="php">    <span class="keyword">const</span> NORMAL = <span class="number">0</span>; <span class="comment">//正常</span></span></span><br><span class="line"><span class="php">    <span class="keyword">const</span> FREEZE = <span class="number">1</span>; <span class="comment">//冻结</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusName</span><span class="params">($status)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> ($status)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="keyword">self</span>::INVALID:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'已删除'</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="keyword">self</span>::NORMAL:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'正常'</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="keyword">self</span>::FREEZE:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'冻结'</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'正常'</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-4-5-使用"><a href="#5-4-5-使用" class="headerlink" title="5.4.5. 使用"></a>5.4.5. 使用</h3><p>1.表示具体含义<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有可能状态有很多，所以这边就直接用 或 来判断不取反了。</span></span><br><span class="line"><span class="keyword">if</span>($user-&gt;status==UserEnum::INVALID||$user-&gt;status==UserEnum::FREEZE)&#123;</span><br><span class="line">    <span class="comment">// 不允许用户登录逻辑</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户正常登录逻辑</span></span><br></pre></td></tr></table></figure></p><p>2.修改<code>UserResource.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">        <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">        <span class="string">'created_at'</span>=&gt;(string<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">        <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再请求单一用户和用户列表接口，返回结果和之前一样。</p><h2 id="5-5-异常自定义处理"><a href="#5-5-异常自定义处理" class="headerlink" title="5.5. 异常自定义处理"></a>5.5. 异常自定义处理</h2><h3 id="5-5-1-再发现一个问题"><a href="#5-5-1-再发现一个问题" class="headerlink" title="5.5.1. 再发现一个问题"></a>5.5.1. 再发现一个问题</h3><p>我们在<code>UserController.php</code>文件中修改<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回单一用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span><br><span class="line">    <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>故意报个错，请求看看结果<br><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_true_error_ajax.png" alt="debug_true_error_ajax"><br>我们再把设置成<code>ajax</code>的<code>header</code>头去掉<br><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_true_error.png" alt="debug_true_error"></p><p>报错非常详细，并且把我们隐私设置都暴露出来了，这是由于我们<code>.env</code>的<code>APP_DEBUG</code>是<code>true</code>状态。我们不希望这些信息被其他访问者看到。我们改为<code>false</code>，再请求看看结果。</p><p><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_false_error.png" alt="debug_false_error"></p><blockquote><p>嗯。很好，不仅别人看不到了，连我们自己都看不到了</p></blockquote><h3 id="5-5-2-需求"><a href="#5-5-2-需求" class="headerlink" title="5.5.2. 需求"></a>5.5.2. 需求</h3><ol><li>所有的异常信息都以统一<code>json</code>格式输出</li><li>因为我们是开发者，并且<code>.env</code>文件默认是不加入<code>git</code>上传线上的，我们希望可以当<code>APP_DEBUG</code>为<code>true</code>(本地)的时候可以继续显示详细的错误信息，<code>false</code>(线上)的时候就显示简要<code>json</code>信息，比如500。</li></ol><h3 id="5-5-3-创建自定义异常处理"><a href="#5-5-3-创建自定义异常处理" class="headerlink" title="5.5.3. 创建自定义异常处理"></a>5.5.3. 创建自定义异常处理</h3><p>在 <code>app/Api/Helpers</code> 目录下新建 <code>ExceptionReport.php</code> 文件，填入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Exception</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">AuthorizationException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">AuthenticationException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">ModelNotFoundException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">ValidationException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">MethodNotAllowedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">NotFoundHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionReport</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @var Exception</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $exception;</span></span><br><span class="line">    /**</span><br><span class="line">     * @var Request</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $request;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @var</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $report;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * ExceptionReport constructor.</span><br><span class="line">     * @param Request $request</span><br><span class="line">     * @param Exception $exception</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Request $request, Exception $exception)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;request = $request;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;exception = $exception;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @var array</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="comment">//当抛出这些异常时，可以使用我们定义的错误信息与HTTP状态码</span></span></span><br><span class="line"><span class="php">    <span class="comment">//可以把常见异常放在这里</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $doReport = [</span></span><br><span class="line"><span class="php">        AuthenticationException::class =&gt; [<span class="string">'未授权'</span>,<span class="number">401</span>],</span></span><br><span class="line"><span class="php">        ModelNotFoundException::class =&gt; [<span class="string">'该模型未找到'</span>,<span class="number">404</span>],</span></span><br><span class="line"><span class="php">        AuthorizationException::class =&gt; [<span class="string">'没有此权限'</span>,<span class="number">403</span>],</span></span><br><span class="line"><span class="php">        ValidationException::class =&gt; [],</span></span><br><span class="line"><span class="php">        UnauthorizedHttpException::class=&gt;[<span class="string">'未登录或登录状态失效'</span>,<span class="number">422</span>],</span></span><br><span class="line"><span class="php">        TokenInvalidException::class=&gt;[<span class="string">'token不正确'</span>,<span class="number">400</span>],</span></span><br><span class="line"><span class="php">        NotFoundHttpException::class=&gt;[<span class="string">'没有找到该页面'</span>,<span class="number">404</span>],</span></span><br><span class="line"><span class="php">        MethodNotAllowedHttpException::class=&gt;[<span class="string">'访问方式不正确'</span>,<span class="number">405</span>],</span></span><br><span class="line"><span class="php">        QueryException::class=&gt;[<span class="string">'参数错误'</span>,<span class="number">401</span>],</span></span><br><span class="line"><span class="php">    ];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($className,callable $callback)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;doReport[$className] = $callback;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return bool</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shouldReturn</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//只有请求包含是json或者ajax请求时才有效</span></span></span><br><span class="line"><span class="php"><span class="comment">//        if (! ($this-&gt;request-&gt;wantsJson() || $this-&gt;request-&gt;ajax()))&#123;</span></span></span><br><span class="line"><span class="php"><span class="comment">//</span></span></span><br><span class="line"><span class="php"><span class="comment">//            return false;</span></span></span><br><span class="line"><span class="php"><span class="comment">//        &#125;</span></span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> (array_keys(<span class="keyword">$this</span>-&gt;doReport) <span class="keyword">as</span> $report)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exception <span class="keyword">instanceof</span> $report)&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;report = $report;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param Exception $e</span><br><span class="line">     * @return static</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(Exception $e)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>(\request(),$e);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">report</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exception <span class="keyword">instanceof</span> ValidationException)&#123;</span></span><br><span class="line"><span class="php">            $error = array_first(<span class="keyword">$this</span>-&gt;exception-&gt;errors());</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(array_first($error),<span class="keyword">$this</span>-&gt;exception-&gt;status);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        $message = <span class="keyword">$this</span>-&gt;doReport[<span class="keyword">$this</span>-&gt;report];</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($message[<span class="number">0</span>],$message[<span class="number">1</span>]);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prodReport</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'服务器错误'</span>,<span class="string">'500'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-5-4-捕捉异常"><a href="#5-5-4-捕捉异常" class="headerlink" title="5.5.4. 捕捉异常"></a>5.5.4. 捕捉异常</h3><p>修改 <code>app/Exceptions</code> 目录下的 <code>Handler.php</code> 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exceptions</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>\<span class="title">ExceptionReport</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Exception</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Exceptions</span>\<span class="title">Handler</span> <span class="title">as</span> <span class="title">ExceptionHandler</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">ExceptionHandler</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($request, Exception $exception)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//ajax请求我们才捕捉异常</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($request-&gt;ajax())&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 将方法拦截到自己的ExceptionReport</span></span></span><br><span class="line"><span class="php">            $reporter = ExceptionReport::make($exception);</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($reporter-&gt;shouldReturn())&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $reporter-&gt;report();</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>(env(<span class="string">'APP_DEBUG'</span>))&#123;</span></span><br><span class="line"><span class="php">                <span class="comment">//开发环境，则显示详细错误信息</span></span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="keyword">parent</span>::render($request, $exception);</span></span><br><span class="line"><span class="php">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">                <span class="comment">//线上环境,未知错误，则显示500</span></span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $reporter-&gt;prodReport();</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">parent</span>::render($request, $exception);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-5-5-测试"><a href="#5-5-5-测试" class="headerlink" title="5.5.5. 测试"></a>5.5.5. 测试</h3><p>继续打开设置<code>AJAX</code>的<code>header</code>头</p><p>1.关闭<code>APP_DEBUG</code>，请求刚刚故意错误的接口。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/exception_debug_false_error.png" alt="exception_debug_false_error"><br>2.开启<code>APP_DEBUG</code>，请求刚刚故意错误的接口。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_true_error_ajax.png" alt="debug_true_error_ajax"><br>3.请求一个不存在的路由，查看返回结果。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/exception_debug_false_not_found.png" alt="exception_debug_false_not_found"></p><blockquote><p>其他的异常显示，自行测试啦~</p></blockquote><h2 id="5-6-jwt-auth"><a href="#5-6-jwt-auth" class="headerlink" title="5.6. jwt-auth"></a>5.6. jwt-auth</h2><p>在传统web中，我们一般是使用<code>session</code>来判定一个用户的登陆状态。而在<code>API</code>开发中，我们使用的是<code>token</code>。<code>jwt-token</code>是<code>Laravel</code>开发<code>API</code>用的比较多的。</p><blockquote><p>JWT 全称 JSON Web Tokens ，是一种规范化的 token。可以理解为对 token 这一技术提出一套规范，是在 RFC 7519 中提出的。</p></blockquote><p><code>jwt-auth</code>的详细介绍分析可以看<a href="https://learnku.com/articles/17883" target="_blank" rel="noopener">JWT超详细分析</a>这篇文章，具体使用可以看<a href="https://learnku.com/articles/10885/full-use-of-jwt" target="_blank" rel="noopener">JWT完整使用详解</a> 这篇文章。</p><h3 id="5-6-1-安装"><a href="#5-6-1-安装" class="headerlink" title="5.6.1. 安装"></a>5.6.1. 安装</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require tymon/jwt-auth <span class="number">1.0</span><span class="number">.0</span>-rc<span class="number">.3</span></span><br></pre></td></tr></table></figure><p>如果是<code>Laravel5.5</code>版本，则安装<code>rc.1</code>。如果是<code>Laravel5.6</code>版本，则安装<code>rc.2</code></p><h3 id="5-6-2-配置"><a href="#5-6-2-配置" class="headerlink" title="5.6.2. 配置"></a>5.6.2. 配置</h3><p>配置参考来自<a href="https://learnku.com/articles/7264/using-jwt-auth-to-implement-api-user-authentication-and-painless-refresh-access-token" target="_blank" rel="noopener">使用 Jwt-Auth 实现 API 用户认证以及无痛刷新访问令牌</a></p><p>1.添加服务提供商<br>打开 <code>config</code> 目录下的 app.php文件，添加下面代码<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Tymon\JWTAuth\Providers\LaravelServiceProvider::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>2.发布配置文件<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Tymon<span class="symbol">\J</span>WTAuth<span class="symbol">\P</span>roviders<span class="symbol">\L</span>aravelServiceProvider"</span><br></pre></td></tr></table></figure></p><p>此命令会在 <code>config</code> 目录下生成一个 <code>jwt.php</code> 配置文件，你可以在此进行自定义配置。</p><p>3.生成密钥<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">jwt</span><span class="selector-pseudo">:secret</span></span><br></pre></td></tr></table></figure></p><p>此命令会在你的 <code>.env</code> 文件中新增一行 <code>JWT_SECRET=secret</code>。以此来作为加密时使用的秘钥。</p><p>4.配置 Auth guard<br>打开 <code>config</code> 目录下的 auth.php文件，修改为下面代码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">    <span class="string">'web'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">       <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">       <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>这样，我们就能让api的用户认证变成使用<code>jwt</code>。</p><p>5.更改 Model</p><p>如果需要使用 <code>jwt-auth</code> 作为用户认证，我们需要对我们的 <code>User</code> 模型进行一点小小的改变，实现一个接口，变更后的 <code>User</code> 模型如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> [];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    ......</span></span><br></pre></td></tr></table></figure></p><p>6.配置项详解<br><code>config</code>目录下的<code>jwt.php</code>文件配置详解<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT Authentication Secret</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 用于加密生成 token 的 secret</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'secret' =&gt; env('JWT_SECRET'),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT Authentication Keys</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 如果你在 .env 文件中定义了 JWT_SECRET 的随机字符串</span></span><br><span class="line">    <span class="string">| 那么 jwt 将会使用 对称算法 来生成 token</span></span><br><span class="line">    <span class="string">| 如果你没有定有，那么jwt 将会使用如下配置的公钥和私钥来生成 token</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'keys' =&gt; [</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Public Key</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 公钥</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'public' =&gt; env('JWT_PUBLIC_KEY'),</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Private Key</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 私钥</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'private' =&gt; env('JWT_PRIVATE_KEY'),</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Passphrase</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 私钥的密码。 如果没有设置，可以为 null。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'passphrase' =&gt; env('JWT_PASSPHRASE'),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT time to live</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定 access_token 有效的时间长度（以分钟为单位），默认为1小时，您也可以将其设置为空，以产生永不过期的标记</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'ttl' =&gt; env('JWT_TTL', <span class="number">60</span>),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Refresh time to live</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定 access_token 可刷新的时间长度（以分钟为单位）。默认的时间为 2 周。</span></span><br><span class="line">    <span class="string">| 大概意思就是如果用户有一个 access_token，那么他可以带着他的 access_token </span></span><br><span class="line">    <span class="string">| 过来领取新的 access_token，直到 2 周的时间后，他便无法继续刷新了，需要重新登录。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'refresh_ttl' =&gt; env('JWT_REFRESH_TTL', <span class="number">20160</span>),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT hashing algorithm</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定将用于对令牌进行签名的散列算法。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'algo' =&gt; env('JWT_ALGO', 'HS256'),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Required Claims</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定必须存在于任何令牌中的声明。</span></span><br><span class="line">    <span class="string">| </span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'required_claims' =&gt; [</span><br><span class="line">        'iss',</span><br><span class="line">        'iat',</span><br><span class="line">        'exp',</span><br><span class="line">        'nbf',</span><br><span class="line">        'sub',</span><br><span class="line">        'jti',</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Persistent Claims</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定在刷新令牌时要保留的声明密钥。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'persistent_claims' =&gt; [</span><br><span class="line">        <span class="comment">// 'foo',</span></span><br><span class="line">        <span class="comment">// 'bar',</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Blacklist Enabled</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 为了使令牌无效，您必须启用黑名单。</span></span><br><span class="line">    <span class="string">| 如果您不想或不需要此功能，请将其设置为 false。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'blacklist_enabled' =&gt; env('JWT_BLACKLIST_ENABLED', true),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">| -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Blacklist Grace Period</span></span><br><span class="line">    <span class="string">| -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 当多个并发请求使用相同的JWT进行时，</span></span><br><span class="line">    <span class="string">| 由于 access_token 的刷新 ，其中一些可能会失败</span></span><br><span class="line">    <span class="string">| 以秒为单位设置请求时间以防止并发的请求失败。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'blacklist_grace_period' =&gt; env('JWT_BLACKLIST_GRACE_PERIOD', <span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Providers</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定整个包中使用的各种提供程序。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'providers' =&gt; [</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| JWT Provider</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 指定用于创建和解码令牌的提供程序。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'jwt' =&gt; Tymon\JWTAuth\Providers\JWT\Namshi::class,</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Authentication Provider</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 指定用于对用户进行身份验证的提供程序。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'auth' =&gt; Tymon\JWTAuth\Providers\Auth\Illuminate::class,</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Storage Provider</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 指定用于在黑名单中存储标记的提供程序。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'storage' =&gt; Tymon\JWTAuth\Providers\Storage\Illuminate::class,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-6-3-测试"><a href="#5-6-3-测试" class="headerlink" title="5.6.3. 测试"></a>5.6.3. 测试</h3><p>1.我们在<code>UserController</code>控制器中将<code>login</code>方法进行修改以及新增一个<code>logout</code>方法用来退出登录还有<code>info</code>方法用来获取当前用户的信息。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $token=Auth::guard(<span class="string">'api'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>($token) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Auth::guard(<span class="string">'api'</span>)-&gt;logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'退出成功...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回当前登录用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $user = Auth::guard(<span class="string">'api'</span>)-&gt;user();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.添加一下路由<br><code>routes/api.php</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前用户信息</span></span><br><span class="line">Route::get(<span class="string">'/users/info'</span>,<span class="string">'UserController@info'</span>)-&gt;name(<span class="string">'users.info'</span>);</span><br></pre></td></tr></table></figure></p><p>3.接着我们打开<code>postman</code>,请求<code>http://你的域名/api/v1/login</code>.可以看到接口返回的<code>token</code>.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"token"</span>: <span class="string">"bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC90ZXN0LmNvbVwvYXBpXC92MVwvbG9naW4iLCJpYXQiOjE1NTEzMzUyNzgsImV4cCI6MTU1MTMzODg3OCwibmJmIjoxNTUxMzM1Mjc4LCJqdGkiOiJrUzZSWHRoQVBkczR6ck4wIiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.FLk-JPFBDTWcItPRN8SVGaLI0j2zgiWLLs_MNKxCafQ"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.此时，我们打开<code>Postman</code>直接访问<code>http://你的域名/api/v1/users/info</code>,你会看到报了如下错误.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trying <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">property</span> '<span class="built_in">id</span>' <span class="keyword">of</span> non-object</span><br></pre></td></tr></table></figure></p><p>这是我们没有携带token导致的。报错不友好我们将在下面<code>自动刷新用户认证</code>解决。</p><p>5.我们在<code>Postman</code>的<code>Header</code>头部分再加一个<code>key</code>为<code>Authorization</code>，<code>value</code>为登陆成功后返回的<code>token</code>值，然后再次进行请求，可以看到成功返回当前登陆用户的信息。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/postman_set_bearer.png" alt="postman_set_bearer"></p><h2 id="5-7-自动刷新用户认证"><a href="#5-7-自动刷新用户认证" class="headerlink" title="5.7. 自动刷新用户认证"></a>5.7. 自动刷新用户认证</h2><h3 id="5-7-1-需求"><a href="#5-7-1-需求" class="headerlink" title="5.7.1. 需求"></a>5.7.1. 需求</h3><p>现在我想用户登录后，为了保证安全性，每个小时该用户的token都会自动刷新为全新的，用旧的token请求不会通过。我们知道，用户如果token不对，就会退到当前界面重新登录来获得新的token，我同时希望虽然刷新了token，但是能否不要重新登录，就算重新登录也是一周甚至一个月之后呢？给用户一种无感知的体验。</p><p>看着感觉很神奇，我们一起手摸手来实现。</p><h3 id="5-7-2-自定义认证中间件"><a href="#5-7-2-自定义认证中间件" class="headerlink" title="5.7.2. 自定义认证中间件"></a>5.7.2. 自定义认证中间件</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:middleware Api/RefreshTokenMiddleware</span><br></pre></td></tr></table></figure><p>打开 <code>app/Http/Middleware/Api</code> 目录下的 <code>RefreshTokenMiddleware.php</code> 文件，填写以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"><span class="comment">//         使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::guard(<span class="string">'api'</span>)-&gt;onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-7-3-增加中间件别名"><a href="#5-7-3-增加中间件别名" class="headerlink" title="5.7.3. 增加中间件别名"></a>5.7.3. 增加中间件别名</h3><p>打开 <code>app/Http</code> 目录下的 <code>Kernel.php</code> 文件，添加如下一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'api.refresh'</span>=&gt;\App\Http\Middleware\Api\RefreshTokenMiddleware::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-7-4-路由器修改"><a href="#5-7-4-路由器修改" class="headerlink" title="5.7.4. 路由器修改"></a>5.7.4. 路由器修改</h3><p>接着我们将路由进行修改，添加上我们写好的中间件。<br><code>routes/api.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">Route::namespace(<span class="string">'Api'</span>)-&gt;prefix(<span class="string">'v1'</span>)-&gt;middleware(<span class="string">'cors'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">        Route::post(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)-&gt;name(<span class="string">'users.store'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">        Route::post(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)-&gt;name(<span class="string">'users.login'</span>);</span></span><br><span class="line"><span class="php">        Route::middleware(<span class="string">'api.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">//当前用户信息</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/users/info'</span>,<span class="string">'UserController@info'</span>)-&gt;name(<span class="string">'users.info'</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">//用户列表</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)-&gt;name(<span class="string">'users.index'</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">//用户信息</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/users/&#123;user&#125;'</span>,<span class="string">'UserController@show'</span>)-&gt;name(<span class="string">'users.show'</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">//用户退出</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/logout'</span>,<span class="string">'UserController@logout'</span>)-&gt;name(<span class="string">'users.logout'</span>);</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">&#125;);</span></span><br></pre></td></tr></table></figure></p><h3 id="5-7-5-测试"><a href="#5-7-5-测试" class="headerlink" title="5.7.5. 测试"></a>5.7.5. 测试</h3><p>1.此时我们再次不携带token，使用<code>Postman</code>直接访问<code>http://你的域名/api/v1/users/info</code>,返回如下错误<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"未登录或登录状态失效"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.那随便输入token又会是怎么样呢？我们也来尝试一下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"token不正确"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.现在，我们再做一个如果<code>token</code>过期了，但是刷新限制没有过期的情况，看看会有什么结果。我们先将<code>config/jwt.php</code>里的<code>ttl</code>从<code>60</code>改成<code>1</code>。意味着重新生成的token将会1分钟后过期。</p><p>然后我们重新登录获取到<code>token</code>，替换<code>/api/v1/users/info</code>原有的token，进行访问，可以正常返回用户的信息。</p><p>等过了一分钟，我们再进行访问，发现依旧可以返回用户信息，但是我们在返回的<code>Headers</code>的<code>Authorization</code>可以看到新的<code>token</code>。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/refresh_token_ttl.png" alt="refresh_token_ttl"><br>此时如果我们再次访问，则报出异常<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"未登录或登录状态失效"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们替换上新的<code>token</code>，再次访问，访问正常通过。</p><p>4.现在，我们接着继续做<code>token</code>和刷新时间都过期的情况，会发生什么。我们再将<code>config/jwt.php</code>里的<code>refresh_ttl</code>从<code>20160</code>改成<code>2</code>。</p><p>重新按照3步骤执行一次，当刚过一分钟时，返回结果与3相同，都是正常返回信息并且在<code>Headers</code>携带了新的token。</p><p>当2分钟过后，报如下错误信息。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"未登录或登录状态失效"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.为了后面的方便，我们将修改的<code>ttl</code>和<code>refresh_ttl</code>的时间复原。</p><h3 id="5-7-6-前端逻辑"><a href="#5-7-6-前端逻辑" class="headerlink" title="5.7.6. 前端逻辑"></a>5.7.6. 前端逻辑</h3><p>上面可以看出，当token过期或者无效以及乱写，返回的<code>HTTP状态码</code>都是<code>422</code>。这是因为这个异常被我们上面自定义异常捕捉了<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnauthorizedHttpException::<span class="class"><span class="keyword">class</span>=&gt;['未登录或登录状态失效',<span class="type">422]</span>,<span class="type"></span></span></span><br></pre></td></tr></table></figure></p><p>所以，可以跟前端小伙伴商量一个状态码，专门表示接收到这个状态码就要退回重新登录了。当<code>Header</code>头携带<code>Authorization</code>时，就要及时自动替换新的token，不需要回到重新登录界面。这样用户就能完全无感知啦~</p><h2 id="5-8-多角色认证"><a href="#5-8-多角色认证" class="headerlink" title="5.8. 多角色认证"></a>5.8. 多角色认证</h2><p>如果我们的系统不仅仅只有一种角色身份，还有其他的角色身份需要认证呢？目前我们的角色认证是认证<code>Users</code>表的，如果我们再加入一个<code>Admins</code>表，也要角色认证要如何操作?</p><h3 id="5-8-1-Admin用户表"><a href="#5-8-1-Admin用户表" class="headerlink" title="5.8.1. Admin用户表"></a>5.8.1. Admin用户表</h3><p>我们将数据库的<code>Users</code>表复制一份，将其命名为<code>Admins</code>表，并且将其中的一个用户名进行修改，以示区别。</p><h3 id="5-8-2-框架文件"><a href="#5-8-2-框架文件" class="headerlink" title="5.8.2. 框架文件"></a>5.8.2. 框架文件</h3><p>我们分别将<code>User.php</code>模型文件，<code>UserEnum.php</code>枚举文件,<code>UserResource.php</code>资源文件，<code>UserRequest.php</code>验证器文件<code>UserController.php</code>控制器文件各复制一份，更改为<code>Admin</code>的，并将其中内容也改为<code>Admin</code>相关。因为就是复制粘贴，把<code>user</code>改成<code>admin</code>,由于篇幅问题具体修改过程我就不放代码了。具体的可以看下面的<code>成品</code></p><h3 id="5-8-3-用户认证文件"><a href="#5-8-3-用户认证文件" class="headerlink" title="5.8.3. 用户认证文件"></a>5.8.3. 用户认证文件</h3><p>打开<code>config/auth.php</code>文件，修改如下内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">        <span class="string">'web'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">'admin'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'admins'</span>,</span><br><span class="line">        ],</span><br><span class="line">],</span><br><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">        <span class="string">'users'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'eloquent'</span>,</span><br><span class="line">            <span class="string">'model'</span> =&gt; App\Models\User::class,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'admins'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'eloquent'</span>,</span><br><span class="line">            <span class="string">'model'</span> =&gt; App\Models\Admin::class,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 'users' =&gt; [</span></span><br><span class="line">        <span class="comment">//     'driver' =&gt; 'database',</span></span><br><span class="line">        <span class="comment">//     'table' =&gt; 'users',</span></span><br><span class="line">        <span class="comment">// ],</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p><p>此时，guard守护就多了一个<code>admin</code>，当<code>Auth::guard(&#39;admin&#39;)</code>时，就会自动查找<code>Admin</code>模型文件，这样就能跟上面的<code>User</code>模型认证分开了。</p><h3 id="5-8-4-刷新用户认证中间件"><a href="#5-8-4-刷新用户认证中间件" class="headerlink" title="5.8.4. 刷新用户认证中间件"></a>5.8.4. 刷新用户认证中间件</h3><p>我们需要再复制一个刷新用户认证的中间件，专门为<code>admin</code>认证以及刷新<code>token</code>.<br><code>app/Http/Controllers/Middleware/Api/RefreshAdminTokenMiddleware.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"><span class="comment">//         使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::guard(<span class="string">'admin'</span>)-&gt;onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-8-5-增加中间件别名"><a href="#5-8-5-增加中间件别名" class="headerlink" title="5.8.5. 增加中间件别名"></a>5.8.5. 增加中间件别名</h3><p>打开 app/Http 目录下的 Kernel.php 文件，添加如下一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'admin.refresh'</span>=&gt;\App\Http\Middleware\Api\RefreshAdminTokenMiddleware::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-8-6-路由文件"><a href="#5-8-6-路由文件" class="headerlink" title="5.8.6. 路由文件"></a>5.8.6. 路由文件</h3><p>routes/api.php<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">Route::namespace(<span class="string">'Api'</span>)-&gt;prefix(<span class="string">'v1'</span>)-&gt;middleware(<span class="string">'cors'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/users'</span>, <span class="string">'UserController@store'</span>)-&gt;name(<span class="string">'users.store'</span>);</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/login'</span>, <span class="string">'UserController@login'</span>)-&gt;name(<span class="string">'users.login'</span>);</span></span><br><span class="line"><span class="php">    Route::middleware(<span class="string">'api.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//当前用户信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users/info'</span>, <span class="string">'UserController@info'</span>)-&gt;name(<span class="string">'users.info'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户列表</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users'</span>, <span class="string">'UserController@index'</span>)-&gt;name(<span class="string">'users.index'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users/&#123;user&#125;'</span>, <span class="string">'UserController@show'</span>)-&gt;name(<span class="string">'users.show'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户退出</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/logout'</span>, <span class="string">'UserController@logout'</span>)-&gt;name(<span class="string">'users.logout'</span>);</span></span><br><span class="line"><span class="php">    &#125;);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//管理员注册</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/admins'</span>, <span class="string">'AdminController@store'</span>)-&gt;name(<span class="string">'admins.store'</span>);</span></span><br><span class="line"><span class="php">    <span class="comment">//管理员登录</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/admin/login'</span>, <span class="string">'AdminController@login'</span>)-&gt;name(<span class="string">'admins.login'</span>);</span></span><br><span class="line"><span class="php">    Route::middleware(<span class="string">'admin.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//当前管理员信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins/info'</span>, <span class="string">'AdminController@info'</span>)-&gt;name(<span class="string">'admins.info'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//管理员列表</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins'</span>, <span class="string">'AdminController@index'</span>)-&gt;name(<span class="string">'admins.index'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//管理员信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins/&#123;user&#125;'</span>, <span class="string">'AdminController@show'</span>)-&gt;name(<span class="string">'admins.show'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//管理员退出</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins/logout'</span>, <span class="string">'AdminController@logout'</span>)-&gt;name(<span class="string">'admins.logout'</span>);</span></span><br><span class="line"><span class="php">    &#125;);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;);</span></span><br></pre></td></tr></table></figure></p><h3 id="5-8-7-控制器文件"><a href="#5-8-7-控制器文件" class="headerlink" title="5.8.7. 控制器文件"></a>5.8.7. 控制器文件</h3><p><code>app/Http/Controllers/Api/AdminController.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Api</span>\<span class="title">AdminResource</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Admin</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//返回用户列表</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//3个用户为一页</span></span></span><br><span class="line"><span class="php">        $admins = Admin::paginate(<span class="number">3</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> AdminResource::collection($admins);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回单一用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(Admin $admin)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> AdminResource($admin));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回当前登录用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        $admins = Auth::guard(<span class="string">'admin'</span>)-&gt;user();</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> AdminResource($admins));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        Admin::create($request-&gt;all());</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">'用户注册成功'</span>);x`</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $token=Auth::guard(<span class="string">'admin'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($token) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>,<span class="number">400</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户退出</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        Auth::guard(<span class="string">'admin'</span>)-&gt;logout();</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'退出成功...'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-8-8-测试"><a href="#5-8-8-测试" class="headerlink" title="5.8.8. 测试"></a>5.8.8. 测试</h3><p>我们将<code>admin</code>这边登陆返回的token放在<code>admin</code>的请求用户信息接口，看看会不会串号。结果返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"guaosi123"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="string">"正常"</span>,</span><br><span class="line">        <span class="attr">"created_at"</span>: <span class="string">"2019-02-26 08:12:31"</span>,</span><br><span class="line">        <span class="attr">"updated_at"</span>: <span class="string">"2019-02-26 08:12:31"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们再将token放在<code>user</code>的请求用户信息接口，看看会不会串号。结果返回<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"data"</span>: &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"guaosi123"</span>,</span><br><span class="line">        <span class="string">"status"</span>: <span class="string">"正常"</span>,</span><br><span class="line">        <span class="string">"created_at"</span>: <span class="string">"2019-02-26 08:12:31"</span>,</span><br><span class="line">        <span class="string">"updated_at"</span>: <span class="string">"2019-03-01 01:48:12"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看来<code>jwt-auth</code>真的串号了，这个问题我们下面再开一个标题进行解决。</p><h3 id="5-8-9-自动区分guard"><a href="#5-8-9-自动区分guard" class="headerlink" title="5.8.9. 自动区分guard"></a>5.8.9. 自动区分guard</h3><p>1.当我们编写登陆，退出，获取当前用户信息的时候，都需要<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Auth::guard(<span class="string">'admin'</span>)</span><br></pre></td></tr></table></figure></p><p>通过制定<code>guard</code>的具体守护是哪一个。因为框架默认的<code>guard</code>默认守护的是<code>web</code>。</p><p>所以，我希望可以让<code>guard</code>自动化，如果我请求的是<code>users</code>的，我就守护<code>api</code>。如果我请求的是<code>admins</code>的，我就守护<code>admin</code>。</p><p>接下来，就以<code>admins</code>的为例，<code>users</code>的保持不动</p><p>2.新建中间件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:middleware Api/AdminGuardMiddleware</span><br></pre></td></tr></table></figure></p><p>打开<code>app/Http/Middleware/Api/AdminGuardMiddleware.php</code> 文件，填入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">AdminGuardMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        config([<span class="string">'auth.defaults.guard'</span>=&gt;<span class="string">'admin'</span>]);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>3.添加中间件别名<br>打开 <code>app/Http</code> 目录下的 <code>Kernel.php</code> 文件，添加如下一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'admin.guard'</span>=&gt;\App\Http\Middleware\Api\AdminGuardMiddleware::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>4.修改路由<br>接着我们将路由进行修改，添加上我们写好的中间件。<br><code>routes/api.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'admin.guard'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//管理员注册</span></span><br><span class="line">        Route::post(<span class="string">'/admins'</span>, <span class="string">'AdminController@store'</span>)-&gt;name(<span class="string">'admins.store'</span>);</span><br><span class="line">        <span class="comment">//管理员登录</span></span><br><span class="line">        Route::post(<span class="string">'/admin/login'</span>, <span class="string">'AdminController@login'</span>)-&gt;name(<span class="string">'admins.login'</span>);</span><br><span class="line">        Route::middleware(<span class="string">'admin.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//当前管理员信息</span></span><br><span class="line">            Route::get(<span class="string">'/admins/info'</span>, <span class="string">'AdminController@info'</span>)-&gt;name(<span class="string">'admins.info'</span>);</span><br><span class="line">            <span class="comment">//管理员列表</span></span><br><span class="line">            Route::get(<span class="string">'/admins'</span>, <span class="string">'AdminController@index'</span>)-&gt;name(<span class="string">'admins.index'</span>);</span><br><span class="line">            <span class="comment">//管理员信息</span></span><br><span class="line">            Route::get(<span class="string">'/admins/&#123;user&#125;'</span>, <span class="string">'AdminController@show'</span>)-&gt;name(<span class="string">'admins.show'</span>);</span><br><span class="line">            <span class="comment">//管理员退出</span></span><br><span class="line">            Route::get(<span class="string">'/admins/logout'</span>, <span class="string">'AdminController@logout'</span>)-&gt;name(<span class="string">'admins.logout'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>5.修改控制器<br><code>app/Http/Controllers/Api/AdminController.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回当前登录用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $admins = Auth::user();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(newAdminResource($admins));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $token=Auth::attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>($token) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Auth::logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'退出成功...'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.测试结果<br>将<code>admin</code>登陆后的token再次携带访问<code>/api/v1/admins/info</code>,依旧可以正常输出当前用户信息。</p><blockquote><p>user的自动区分请自己填写，这里就不再啰嗦一遍了。</p></blockquote><h2 id="5-9-修复角色认证串号问题"><a href="#5-9-修复角色认证串号问题" class="headerlink" title="5.9. 修复角色认证串号问题"></a>5.9. 修复角色认证串号问题</h2><p>首先，我们需要知道一个问题，<code>jwt-auth</code>颁发的<code>token</code>里面是不包含<code>模型驱动</code>的。也就是说，通过这个令牌，我们不知道它到底是属于<code>api</code>还是属于<code>admin</code>的。</p><blockquote><p>折腾了一晚上，百度了很多资料，想找找有没有解决办法。结果找到的都是没什么作用的，或者是让自动刷新失效了。最后自己追源码，找到了这种比较完美的方式。</p></blockquote><h3 id="5-9-1-函数"><a href="#5-9-1-函数" class="headerlink" title="5.9.1. 函数"></a>5.9.1. 函数</h3><p>我们先来看几个我们在中间件中用的函数<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span>checkForToken($request)</span><br><span class="line"><span class="comment">//这个函数只会检测是否携带token以及token是否能被当前密钥所解析</span></span><br><span class="line"></span><br><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">auth</span>-&gt;</span><span class="function"><span class="title">parseToken</span>()-&gt;</span>authenticate()</span><br><span class="line"><span class="comment">//将使用token进行登录，如果token过期，则抛出 TokenExpiredException 异常</span></span><br><span class="line"></span><br><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">auth</span>-&gt;</span>refresh(); </span><br><span class="line"><span class="comment">//刷新当前token</span></span><br></pre></td></tr></table></figure></p><p>然后我们再来看一个有趣的函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Auth::check();</span><br><span class="line"><span class="comment">//可以根据当前的`guard`来判断这个token是否属于这个 guard ,不是则抛出 TokenInvalidException 异常</span></span><br><span class="line"><span class="comment">//但是，当token过期时，无论是不是属于这个 guard ，它也是都抛出 TokenInvalidException 异常。这导致我们无法正常判断出到底是属于哪种问题</span></span><br><span class="line"><span class="comment">//所以，想要用check()来判断，是不可能的。</span></span><br></pre></td></tr></table></figure></p><p>接着，我们继续看一个有意思的函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Auth::payload();</span><br><span class="line"><span class="comment">//可以输出当前token的载荷信息(也就是token解析后的内容)</span></span><br><span class="line"><span class="comment">//但是，如果你这个token已经过期了，那这个函数将会报错</span></span><br></pre></td></tr></table></figure></p><h3 id="5-9-2-原理"><a href="#5-9-2-原理" class="headerlink" title="5.9.2. 原理"></a>5.9.2. 原理</h3><p>我们通过<code>Auth::payload()</code>可以看到未过期token的载荷信息<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"iss"</span>: <span class="string">"http://test.com/api/v1/admin/login"</span>,</span><br><span class="line">  <span class="attr">"iat"</span>: <span class="number">1551407332</span>,</span><br><span class="line">  <span class="attr">"exp"</span>: <span class="number">1551407392</span>,</span><br><span class="line">  <span class="attr">"nbf"</span>: <span class="number">1551407332</span>,</span><br><span class="line">  <span class="attr">"jti"</span>: <span class="string">"f9zwcMHaXBr5kQYp"</span>,</span><br><span class="line">  <span class="attr">"prv"</span>: <span class="string">"df883db97bd05ef8ff85082d686c45e832e593a9"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们其实是可以拿到这些荷载信息的。同时，我们也可以加入自己的信息，这样在中间件时候进行解析，拿到我们的负载，就可以进行判断是否是属于当前<code>guard</code>的token了。</p><h3 id="5-9-3-实现"><a href="#5-9-3-实现" class="headerlink" title="5.9.3. 实现"></a>5.9.3. 实现</h3><p>修改 <code>app\Http\Controllers\Api\AdminController.php</code> 中的 <code>login</code>方法，在<code>token</code>中加入我们定义的字段。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前守护的名称</span></span><br><span class="line">    $present_guard =Auth::getDefaultDriver();</span><br><span class="line">    $token = Auth::claims([<span class="string">'guard'</span>=&gt;$present_guard])-&gt;attempt([<span class="string">'name'</span> =&gt; $request-&gt;name, <span class="string">'password'</span> =&gt; $request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span> ($token) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再修改中间件<code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code> ，让其就算过期<code>token</code>也能读取出里面的信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line">     * @throws TokenInvalidException</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//1. 格式通过，验证是否是专属于这个的token</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前守护的名称</span></span></span><br><span class="line"><span class="php">        $present_guard = Auth::getDefaultDriver();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前token</span></span></span><br><span class="line"><span class="php">        $token=Auth::getToken();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//即使过期了，也能获取到token里的 载荷 信息。</span></span></span><br><span class="line"><span class="php">        $payload = Auth::manager()-&gt;getJWTProvider()-&gt;decode($token-&gt;get());</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//如果不包含guard字段或者guard所对应的值与当前的guard守护值不相同</span></span></span><br><span class="line"><span class="php">        <span class="comment">//证明是不属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">empty</span>($payload[<span class="string">'guard'</span>])||$payload[<span class="string">'guard'</span>]!=$present_guard)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="comment">//使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="comment">//2. 此时进入的都是属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 3. 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这个中间件是通用的，可以直接替换User的刷新用户认证中间件噢</p></blockquote><h3 id="5-9-4-测试"><a href="#5-9-4-测试" class="headerlink" title="5.9.4. 测试"></a>5.9.4. 测试</h3><p>此时再次进行测试是否串号，最后结果可以成功阻止之前的串号问题，暂未发现其他BUG。</p><blockquote><p>user的修复串号问题请自己修改，这里就不再啰嗦一遍了。</p></blockquote><h2 id="5-10-单一设备登陆"><a href="#5-10-单一设备登陆" class="headerlink" title="5.10. 单一设备登陆"></a>5.10. 单一设备登陆</h2><h3 id="5-10-1-提出需求"><a href="#5-10-1-提出需求" class="headerlink" title="5.10.1. 提出需求"></a>5.10.1. 提出需求</h3><p>同一时间只允许登录唯一一台设备。例如设备 A 中用户如果已经登录，那么使用设备 B 登录同一账户，设备 A 就无法继续使用了。</p><h3 id="5-10-2-原理"><a href="#5-10-2-原理" class="headerlink" title="5.10.2. 原理"></a>5.10.2. 原理</h3><p>我们在登陆，<code>token</code>过期自动更换的时候，都会产生一个新的<code>token</code>。</p><p>我们将<code>token</code>都存到表中的<code>last_token</code>字段。在登陆接口，获取到<code>last_token</code>里的值，将其加入黑名单。</p><p>这样，只要我们无论在哪里登陆，之前的<code>token</code>一定会被拉黑失效，必须重新登陆，我们的目的也就达到了。</p><h3 id="5-10-3-实现"><a href="#5-10-3-实现" class="headerlink" title="5.10.3. 实现"></a>5.10.3. 实现</h3><p>修改 <code>app\Http\Controllers\Api\AdminController.php</code> 中的 <code>login</code>方法，在登陆的时候，拉黑上一个<code>token</code>。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前守护的名称</span></span><br><span class="line">    $present_guard =Auth::getDefaultDriver();</span><br><span class="line">    $token = Auth::claims([<span class="string">'guard'</span>=&gt;$present_guard])-&gt;attempt([<span class="string">'name'</span> =&gt; $request-&gt;name, <span class="string">'password'</span> =&gt; $request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span> ($token) &#123;</span><br><span class="line">        <span class="comment">//如果登陆，先检查原先是否有存token，有的话先失效，然后再存入最新的token</span></span><br><span class="line">        $user = Auth::user();</span><br><span class="line">        <span class="keyword">if</span> ($user-&gt;last_token) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Auth::setToken($user-&gt;last_token)-&gt;invalidate();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (TokenExpiredException $e)&#123;</span><br><span class="line">                <span class="comment">//因为让一个过期的token再失效，会抛出异常，所以我们捕捉异常，不需要做任何处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $user-&gt;last_token = $token;</span><br><span class="line">        $user-&gt;save();        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再修改中间件<code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code> ，更新的<code>token</code>加到<code>last_token</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line">     * @throws TokenInvalidException</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//1. 格式通过，验证是否是专属于这个的token</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前守护的名称</span></span></span><br><span class="line"><span class="php">        $present_guard = Auth::getDefaultDriver();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前token</span></span></span><br><span class="line"><span class="php">        $token=Auth::getToken();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//即使过期了，也能获取到token里的 载荷 信息。</span></span></span><br><span class="line"><span class="php">        $payload = Auth::manager()-&gt;getJWTProvider()-&gt;decode($token-&gt;get());</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//如果不包含guard字段或者guard所对应的值与当前的guard守护值不相同</span></span></span><br><span class="line"><span class="php">        <span class="comment">//证明是不属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">empty</span>($payload[<span class="string">'guard'</span>])||$payload[<span class="string">'guard'</span>]!=$present_guard)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="comment">//使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="comment">//2. 此时进入的都是属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 3. 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">                <span class="comment">//刷新了token，将token存入数据库</span></span></span><br><span class="line"><span class="php">                $user = Auth::user();</span></span><br><span class="line"><span class="php">                $user-&gt;last_token = $token;</span></span><br><span class="line"><span class="php">                $user-&gt;save();</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-10-4-测试"><a href="#5-10-4-测试" class="headerlink" title="5.10.4. 测试"></a>5.10.4. 测试</h3><p>我们先登陆一次<code>/api/v1/admin/login</code>，将获取到<code>token</code>携带访问<code>/api/v1/admins/info</code>。正常访问。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/invalid_token_first.png" alt="invalid_token_first"><br>当我们再次请求登陆<code>/api/v1/admin/login</code>，然后继续用原<code>token</code>访问<code>/api/v1/admins/info</code>，提示错误。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/invalid_token_second.png" alt="refresh_token_second"></p><blockquote><p>user的请自行添加，自行测试结果</p></blockquote><h2 id="5-11-horizon管理异步队列"><a href="#5-11-horizon管理异步队列" class="headerlink" title="5.11. horizon管理异步队列"></a>5.11. horizon管理异步队列</h2><p>开发中，我们也经常需要使用异步队列，来加快我们的响应速度。比如发送短信，发送验证码等。但是队列执行结果的成功或者失败只能通过日志来查看。这里，我们使用<code>horizonl</code>来管理异步队列，完成登陆和刷新<code>token</code>时，将<code>token</code>存入<code>last_token</code>的因为放在异步完成。</p><blockquote><p>Horizon 提供了一个漂亮的仪表盘，并且可以通过代码配置你的 Laravel Redis 队列，同时它允许你轻易的监控你的队列系统中诸如任务吞吐量，运行时间和失败任务等关键指标。</p></blockquote><h3 id="5-11-1-安装"><a href="#5-11-1-安装" class="headerlink" title="5.11.1. 安装"></a>5.11.1. 安装</h3><p><code>horizon</code>的详细介绍可以<a href="https://learnku.com/docs/laravel/5.7/horizon/2308" target="_blank" rel="noopener">查看手册</a>。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> laravel/horizon</span><br></pre></td></tr></table></figure></p><h3 id="5-11-2-发布配置文件"><a href="#5-11-2-发布配置文件" class="headerlink" title="5.11.2. 发布配置文件"></a>5.11.2. 发布配置文件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="string">vendor:</span>publish --provider=<span class="string">"Laravel\Horizon\HorizonServiceProvider"</span></span><br></pre></td></tr></table></figure><h3 id="5-11-3-修改队列驱动"><a href="#5-11-3-修改队列驱动" class="headerlink" title="5.11.3. 修改队列驱动"></a>5.11.3. 修改队列驱动</h3><p>打开 <code>.env</code> 文件，将<code>QUEUE_CONNECTION</code>从<code>sync</code>改成<code>redis</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">QUEUE_CONNECTION</span>=redis</span><br></pre></td></tr></table></figure></p><h3 id="5-11-4-仪表盘权限验证"><a href="#5-11-4-仪表盘权限验证" class="headerlink" title="5.11.4. 仪表盘权限验证"></a>5.11.4. 仪表盘权限验证</h3><p>仪表盘不能通过接口访问。所以我们做验证的时候，可以通过指定的<code>IP</code>才能正常通过进入仪表盘。<code>IP</code>可以写在<code>.env</code>文件里，当IP发生变化时进行修改。</p><p>在 <code>.env</code> 最后加上一行<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HORIZON_IP=想通过访问的IP地址</span><br><span class="line">比如</span><br><span class="line">HORIZON_IP=127.0.0.1</span><br></pre></td></tr></table></figure></p><p>修改改<code>app/Providers/AuthServiceProvider.php</code> 文件 里的 <code>boot</code> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerPolicies();</span><br><span class="line">    Horizon::auth(<span class="function"><span class="keyword">function</span><span class="params">($request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(env(<span class="string">'APP_ENV'</span>,<span class="string">'local'</span>) ==<span class="string">'local'</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $get_ip=$request-&gt;getClientIp();</span><br><span class="line">           $can_ip=en(<span class="string">'HORIZON_IP'</span><span class="string">'127.0.0.1'</span>);</span><br><span class="line">           <span class="keyword">return</span> $get_ip == $can_ip;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-11-5-编写任务类"><a href="#5-11-5-编写任务类" class="headerlink" title="5.11.5. 编写任务类"></a>5.11.5. 编写任务类</h3><p>创建一个专门负责保存<code>last_token</code>的任务类<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:<span class="keyword">job</span> Api/SaveLastTokenJob</span><br></pre></td></tr></table></figure></p><p>打开 <code>app/Jobs/Api/SaveLastTokenJob.php</code> 文件 ，填写以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Queueable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">InteractsWithQueue</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Bus</span>\<span class="title">Dispatchable</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">SaveLastTokenJob</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $model;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $token;</span></span><br><span class="line">    /**</span><br><span class="line">     * Create a new job instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($model,$token)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model=$model;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;token=$token;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Execute the job.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model-&gt;last_token = <span class="keyword">$this</span>-&gt;token;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model-&gt;save();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-11-6-使用任务类"><a href="#5-11-6-使用任务类" class="headerlink" title="5.11.6. 使用任务类"></a>5.11.6. 使用任务类</h3><p>将控制器与中间件里的<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>-&gt;last_token = <span class="variable">$token</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;save();</span><br></pre></td></tr></table></figure></p><p>统一替换为<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SaveLastTokenJob::dispatch(<span class="variable">$user</span>,<span class="variable">$token</span>);</span><br></pre></td></tr></table></figure></p><h3 id="5-11-7-运行Horizon"><a href="#5-11-7-运行Horizon" class="headerlink" title="5.11.7. 运行Horizon"></a>5.11.7. 运行Horizon</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php artisan horizon</span></span><br></pre></td></tr></table></figure><p>此时，进程处于阻塞状态。<br>打开浏览器输入<code>http://你的域名/horizon</code>,可以看到<code>Horizon</code>仪表盘。</p><p><img src="/assets/blogImg/laravel-api-initialization-preparation/horizon_dashboard.png" alt="horizon_dashboard"></p><h3 id="5-11-8-Supervisor守护进程"><a href="#5-11-8-Supervisor守护进程" class="headerlink" title="5.11.8. Supervisor守护进程"></a>5.11.8. Supervisor守护进程</h3><p>我们可以使用Supervisor来守护我们的horizon阻塞进程。具体方法可以看我之前写的文章:<a href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/">安装和使用守护进程–Supervisor</a></p><h3 id="5-11-9-测试"><a href="#5-11-9-测试" class="headerlink" title="5.11.9. 测试"></a>5.11.9. 测试</h3><p>确认<code>horizon</code>已经正常启动。然后我们访问<code>/api/v1/admin/login</code>这个登陆接口。打开数据库可以发现，<code>last_token</code>与返回结果的<code>token</code>相同。我们也可以再打开仪表盘，看任务完成情况<br><img src="/assets/blogImg/laravel-api-initialization-preparation/horizon_dashboard_job.png" alt="horizon_dashboard_job"></p><h3 id="5-11-10-注意"><a href="#5-11-10-注意" class="headerlink" title="5.11.10. 注意"></a>5.11.10. 注意</h3><p>如果修改了<code>job</code>类的源码，需要将<code>horizon</code>重新启动，否则代码还是未改动前的。(应该是<code>horzion</code>是将所有任务类常驻内存的原因)</p><h1 id="6-成品"><a href="#6-成品" class="headerlink" title="6. 成品"></a>6. 成品</h1><p>到此，所有修改已经全部完成，如果还有新的更改也会实时更新。同时，本文中的所有修改都已经在正式项目中运行过了。</p><p>如果你已经看完了整篇文章，知道了修改的原因，但是不想受累自己修改一遍。我已经将修改后的上传到全球最大的同性交友网站了，可以直接点击<a href="https://github.com/guaosi/Laravel_api_init" target="_blank" rel="noopener">这里</a>直接搬走。或者复制下方的链接打开。</p><p>项目地址: </p><p><a href="https://github.com/guaosi/Laravel_api_init" target="_blank" rel="noopener">https://github.com/guaosi/Laravel_api_init</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;随着前后端完全分离，&lt;code&gt;PHP&lt;/code&gt;也基本告别了&lt;code&gt;view&lt;/code&gt;模板嵌套开发，转而专门写资源接口。&lt;code&gt;Laravel&lt;/code&gt;是PHP框架中最优雅的框架，国内也越来越多人告别&lt;code&gt;ThinkPHP&lt;/code&gt;选择了&lt;code&gt;Laravel&lt;/code&gt;。&lt;code&gt;Laravel&lt;/code&gt;框架本身对&lt;code&gt;API&lt;/code&gt;有支持，但是感觉再工作中还是需要再做一些处理。&lt;code&gt;Lumen&lt;/code&gt;用起来不顺手，有些包不能很好地支持。所以，将&lt;code&gt;Laravel&lt;/code&gt;框架进行一些配置处理，让其在开发&lt;code&gt;API&lt;/code&gt;时更得心应手。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内容划水过长，请谨慎打开&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="https://www.guaosi.com/tags/Laravel/"/>
    
      <category term="Api" scheme="https://www.guaosi.com/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>指定时间自动取消订单</title>
    <link href="https://www.guaosi.com/2019/02/25/automatically-cancel-the-order/"/>
    <id>https://www.guaosi.com/2019/02/25/automatically-cancel-the-order/</id>
    <published>2019-02-25T05:26:22.000Z</published>
    <updated>2021-12-05T08:13:24.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;在电商网站或者外卖网站，通常都有会一种需求。当一个用户下单后没有支付，此时库存量已经减少，需要取消订单才能回复库存量。取消订单有2种方式:<code>1.用户手动取消</code>,<code>2.系统在指定时间过后，比如淘宝的30分钟，自动取消</code>。<br>&#160; &#160; &#160; &#160;那么，应该如何来实现系统在指定时间过后,自动取消订单?<br><a id="more"></a></p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h1><p>以下提供三种方案参考:</p><p>1) 使用<code>Linux</code>内置的<code>crontab</code>定时任务，每隔几秒甚至几分钟轮训遍历一次数据库，找到超出时间间隔的订单，进行取消。这种办法没有失效性以及在没有订单的时间内属于浪费服务器资源。</p><p>2) 使用框架内置的延时处理机制。比如<code>Laravel</code>的队列任务，可以指定多少分钟后执行。这样就能判断订单是否超出时间间隔，是否要取消订单恢复库存量。</p><p>3) 使用<code>Redis</code>的<code>keyspace notification</code>（键空间通知）。<code>Redis</code>可以设置一个<code>key</code>到多久时间后过期,比如:<code>SETEX name 123 20</code>,设置<code>name</code>在20秒后过期。此时，过期会触发<code>事件发布</code>，所有<code>redis客户端</code>都会订阅，获得相关信息。</p><h1 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h1><h2 id="3-1-环境"><a href="#3-1-环境" class="headerlink" title="3.1. 环境"></a>3.1. 环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Linux</span>系统</span><br><span class="line"><span class="selector-tag">Redis</span> 版本大于2<span class="selector-class">.8</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">PHP</span></span><br></pre></td></tr></table></figure><p>相关安装教程自行百度，这里跳过。</p><h2 id="3-2-Redis开启过期事件订阅"><a href="#3-2-Redis开启过期事件订阅" class="headerlink" title="3.2. Redis开启过期事件订阅"></a>3.2. Redis开启过期事件订阅</h2><p>找到redis.conf存放位置，比如我的是<code>usr/local/etc/redis/redis.conf</code><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim usr<span class="regexp">/local/</span>etc<span class="regexp">/redis/</span>redis.conf</span><br></pre></td></tr></table></figure></p><p>找到<code>notify-keyspace-events</code>,如果没有就在最后添加上<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-<span class="keyword">events</span> <span class="string">"Ex"</span></span><br></pre></td></tr></table></figure></p><p>保存退出后，重启redis<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service redis-server restart <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>redis<span class="regexp">/redis.conf</span></span><br></pre></td></tr></table></figure></p><h1 id="4-实践"><a href="#4-实践" class="headerlink" title="4. 实践"></a>4. 实践</h1><h2 id="4-1-redis-cli"><a href="#4-1-redis-cli" class="headerlink" title="4.1. redis-cli"></a>4.1. redis-cli</h2><p>开启一个终端，<code>redis-cli</code>进入<code>redis</code><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p><p>开始订阅所有操作，等待接收消息。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psubscribe __keyevent<span class="variable">@0__</span><span class="symbol">:expired</span></span><br></pre></td></tr></table></figure></p><p>此时会监听0号库所有<code>过期</code>的key。</p><p>再开启一个终端，<code>redis-cli</code>进入<code>redis</code><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p><p>新增一个5秒过期的键<code>name</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex <span class="built_in">name</span> <span class="number">5</span> guaosi</span><br></pre></td></tr></table></figure></p><p>5秒后，原终端会输出如下<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"name"</span></span><br></pre></td></tr></table></figure></p><p>此时，成功监听到key为<code>name</code>过期。</p><h2 id="4-2-原生PHP"><a href="#4-2-原生PHP" class="headerlink" title="4.2. 原生PHP"></a>4.2. 原生PHP</h2><p>编写<code>test.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">MRedis</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $redis;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * 构造函数</span><br><span class="line">     *</span><br><span class="line">     * @param string $host 主机号</span><br><span class="line">     * @param int $port 端口号</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($host = <span class="string">'redis'</span>, $port = <span class="number">6379</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis = <span class="keyword">new</span> redis();</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis-&gt;connect($host, $port);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">expire</span><span class="params">($key = null, $time = <span class="number">0</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redis-&gt;expire($key, $time);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">psubscribe</span><span class="params">($patterns = array<span class="params">()</span>, $callback)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis-&gt;psubscribe($patterns, $callback);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setOption</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis-&gt;setOption(Redis::OPT_READ_TIMEOUT, <span class="number">-1</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">($redis, $pattern, $chan, $msg)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// 回调函数,这里写处理逻辑</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Pattern: $pattern\n"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Channel: $chan\n"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Payload: $msg\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$redis = <span class="keyword">new</span> MRedis();</span></span><br><span class="line"><span class="php"><span class="comment">//redis会有默认连接时间，对 redis客户端进行一些参数设置，使读取超时参数 为 -1，表示不超时。</span></span></span><br><span class="line"><span class="php">$redis-&gt;setOption();</span></span><br><span class="line"><span class="php"><span class="comment">//这里输入订阅，以及订阅成功后触发的函数名</span></span></span><br><span class="line"><span class="php"><span class="comment">//监听库为0里的过期key</span></span></span><br><span class="line"><span class="php">$redis-&gt;psubscribe(<span class="keyword">array</span>(<span class="string">'__keyevent@0__:expired'</span>), <span class="string">'callback'</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>使用cli模式执行<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php <span class="keyword">test</span>.php</span><br></pre></td></tr></table></figure></p><p>此时可以看到变成了阻塞进程<br>然后我们回到<code>redis-cli</code>下，再生成一个过期<code>key</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex <span class="built_in">name</span> <span class="number">5</span> guaosi</span><br></pre></td></tr></table></figure></p><p>5秒后，cli模式下输出<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Pattern</span>: __keyevent<span class="variable">@0__</span>:expired</span><br><span class="line"><span class="attribute">Channel</span>: __keyevent<span class="variable">@0__</span>:expired</span><br><span class="line"><span class="attribute">Payload</span>: name</span><br></pre></td></tr></table></figure></p><p>则变量<code>$msg</code>就是<code>过期的key的名称</code>，我们只能获取到key的名称，不能获得到原来设置的值。</p><h2 id="4-3-框架中使用"><a href="#4-3-框架中使用" class="headerlink" title="4.3. 框架中使用"></a>4.3. 框架中使用</h2><p>以Laravel框架为例，Laravel自己本身已经支持Redis的订阅模式了，<a href="https://learnku.com/docs/laravel/5.7/redis/2293#08edd9" target="_blank" rel="noopener">查看文档详情</a></p><p>确认<code>Laravel</code>已经安装了<code>predis</code>扩展,如果没有安装只需执行<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> predis/predis ^<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>编辑<code>config/database.php</code>，在redis部分修改如下<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'redis'</span> =&gt; [</span><br><span class="line">        <span class="string">'client'</span> =&gt; <span class="string">'predis'</span>,</span><br><span class="line">        <span class="string">'default'</span> =&gt; [</span><br><span class="line">            <span class="string">'host'</span> =&gt; env(<span class="string">'REDIS_HOST'</span>, <span class="string">'127.0.0.1'</span>),</span><br><span class="line">            <span class="string">'password'</span> =&gt; env(<span class="string">'REDIS_PASSWORD'</span>, <span class="keyword">null</span>),</span><br><span class="line">            <span class="string">'port'</span> =&gt; env(<span class="string">'REDIS_PORT'</span>, <span class="number">6379</span>),</span><br><span class="line">            <span class="string">'database'</span> =&gt; env(<span class="string">'REDIS_DATABASE'</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="string">'persistent'</span> =&gt; <span class="keyword">true</span>, <span class="comment">// 开启持久连接</span></span><br><span class="line">            <span class="string">'read_write_timeout'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="comment">//据Predis作者在配置文件中说明</span></span><br><span class="line">            <span class="comment">//因为在底层网络资源上执行读取或写入操作时使用了超时，默认设置了timeout 为60s。</span></span><br><span class="line">            <span class="comment">//到60s自动断开并报错.设置成0可以解决这个问题。</span></span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p><p>在<code>app/Http/Controllers</code>下新建控制器<code>OrderController.php</code>,填下以下测试内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Redis</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//创建用户订单</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//这里是接收到用户传来的下单信息，存入数据库后，返回一个订单id</span></span></span><br><span class="line"><span class="php">        <span class="comment">//我们让返回的订单ID为2019</span></span></span><br><span class="line"><span class="php">        $order_id = <span class="number">2019</span>;</span></span><br><span class="line"><span class="php">        <span class="comment">//因为一个项目中可能会有很多使用到setex的地方，所以给订单id加个前缀</span></span></span><br><span class="line"><span class="php">        $order_prefix_id = <span class="string">'order_'</span>.$order_id;</span></span><br><span class="line"><span class="php">        <span class="comment">//将订单ID存入redis缓存中，并且设置过期时间为5秒</span></span></span><br><span class="line"><span class="php">        $key_name = $order_prefix_id; <span class="comment">//我们在订阅中只能接收到$key_name的值</span></span></span><br><span class="line"><span class="php">        $expire_second = <span class="number">5</span>; <span class="comment">//设置过期时间，单位为秒</span></span></span><br><span class="line"><span class="php">        $value = $order_id;</span></span><br><span class="line"><span class="php">        Redis::setex($key_name,$expire_second,$value);</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"设置过期key="</span>.$order_prefix_id.<span class="string">"成功"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后编辑<code>routes/web.php</code>定义路由为<code>/order</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get<span class="function"><span class="params">(<span class="string">'/order'</span>, <span class="string">'OrderController@store'</span>)</span>-&gt;</span>name(<span class="string">'order.store'</span>);</span><br></pre></td></tr></table></figure></p><p>最后编写command命令，让订阅监听在后台运行.<br>在<code>app/Console/Commands</code>下新建<code>OrderCancel.php</code>文件,填下以下测试内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Redis</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OrderCancel</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * The name and signature of the console command.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $signature = <span class="string">'order:cancel'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * The console command description.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $description = <span class="string">'过期订单处理'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Create a new command instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::__construct();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Execute the console command.</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//项目中有可能用的redis不是0，所以这里用env配置里面获取的</span></span></span><br><span class="line"><span class="php">        $publish_num=env(<span class="string">'REDIS_DATABASE'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="php">        Redis::psubscribe([<span class="string">'__keyevent@'</span>.$publish_num.<span class="string">'__:expired'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($message, $channel)</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">//$message 就是我们从获取到的过期key的名称</span></span></span><br><span class="line"><span class="php">            $explode_arr=explode(<span class="string">'_'</span>,$message);</span></span><br><span class="line"><span class="php">            $prefix=$explode_arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>($prefix==<span class="string">'order'</span>)&#123;</span></span><br><span class="line"><span class="php">                $order_id=$explode_arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> $order_id;</span></span><br><span class="line"><span class="php">                <span class="comment">//这里就是编写过期的订单，过期后要如何处理的业务逻辑</span></span></span><br><span class="line"><span class="php">                <span class="comment">//TODO</span></span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>此时，在项目根目录下运行<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="keyword">order</span>:cancel</span><br></pre></td></tr></table></figure></p><p>进行订阅监听，此时进程处于阻塞状态<br>然后用浏览器访问<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//项目虚拟站点地址/order</span></span><br></pre></td></tr></table></figure></p><p>浏览器输出<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置过期<span class="attribute">key</span>=order_2019成功</span><br></pre></td></tr></table></figure></p><p>5秒后，订阅监听窗口输出<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span></span><br></pre></td></tr></table></figure></p><p>至此，完成我们的需求。</p><h1 id="5-注意"><a href="#5-注意" class="headerlink" title="5. 注意"></a>5. 注意</h1><p>阻塞进程不做处理，在关闭窗口后就会自动跳出。需要使用<code>Supervisor</code>守护进程，让阻塞进程保持持续运行状态，并且发送错误退出了也会自动自动。安装以及配置<code>Supervisor</code>可以参考<a href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/">这里</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在电商网站或者外卖网站，通常都有会一种需求。当一个用户下单后没有支付，此时库存量已经减少，需要取消订单才能回复库存量。取消订单有2种方式:&lt;code&gt;1.用户手动取消&lt;/code&gt;,&lt;code&gt;2.系统在指定时间过后，比如淘宝的30分钟，自动取消&lt;/code&gt;。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;那么，应该如何来实现系统在指定时间过后,自动取消订单?&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.guaosi.com/tags/Redis/"/>
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>安装和使用守护进程--Supervisor</title>
    <link href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/"/>
    <id>https://www.guaosi.com/2019/02/25/install-and-use-supervisor/</id>
    <published>2019-02-25T01:03:33.000Z</published>
    <updated>2021-12-05T08:13:24.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;在Linux上有时候需要开启一个阻塞进程来监听操作。当ssh连上服务器，直接运行一个阻塞进程，然后退出服务器时，这个阻塞进程也会跟着关闭。</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h1><p>以下提供三种方案参考:</p><ol><li>使用<code>nohup ./xxx &amp;</code>将进程后台挂起，不过有效期只有12小时，会被自动杀进程。</li><li>使用<code>screen</code>建立窗口，将阻塞进程运行在该窗口内，这个窗口可以被多个物理窗口所复用(就是就算这次退出了服务器连接，下次再连进来还是依旧存在的)，貌似可以满足我们的要求了。但是如果阻塞进程出错，阻塞进程不会自动重新启动，需要我们手动干预。</li><li>使用python开发的<code>Supervisor</code>守护进程。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。</li></ol><a id="more"></a><h1 id="3-安装配置Supervisor"><a href="#3-安装配置Supervisor" class="headerlink" title="3. 安装配置Supervisor"></a>3. 安装配置Supervisor</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1. 安装"></a>3.1. 安装</h2><h3 id="3-1-1-Centos安装"><a href="#3-1-1-Centos安装" class="headerlink" title="3.1.1. Centos安装"></a>3.1.1. Centos安装</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line">yum <span class="keyword">install</span> -y supervisor</span><br></pre></td></tr></table></figure><h3 id="3-1-2-Ubuntu安装"><a href="#3-1-2-Ubuntu安装" class="headerlink" title="3.1.2. Ubuntu安装"></a>3.1.2. Ubuntu安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install supervisor</span><br></pre></td></tr></table></figure><h2 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2. 配置"></a>3.2. 配置</h2><p>在<code>/etc/supervisor/</code>目录下有个<code>conf.d</code>的文件夹和<code>supervisord.conf</code>配置文件。打开配置文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> supervisord.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">include</span>]</span><br><span class="line">files = <span class="regexp">/etc/supervisor</span><span class="regexp">/conf.d/</span>*.conf</span><br></pre></td></tr></table></figure></p><p>意思是<code>Supervisor</code>在启动的时候会加载conf.d目录下所有的conf配置文件。<br>下面给出2个参考配置的案例</p><h3 id="3-2-1-horizon守护进程配置参考"><a href="#3-2-1-horizon守护进程配置参考" class="headerlink" title="3.2.1. horizon守护进程配置参考"></a>3.2.1. horizon守护进程配置参考</h3><p>laravel的horizon守护进程配置<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.d/</span><br><span class="line"><span class="keyword">vim</span> horizon.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>填入以下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:horizon]</span></span><br><span class="line"><span class="attr">process_name</span>=%(program_name)s</span><br><span class="line"><span class="attr">command</span>=php /home/wwwroot/www.guaosi.com/artisan horizon ; 阻塞进程执行的命令</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span> ; 阻塞进程是否跟着Supervisor一起开机自动</span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span> ; 阻塞进程被异常退出是否自动重启</span><br><span class="line"><span class="attr">user</span>=www ; 由哪个用户执行阻塞进程的命令</span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/home/wwwroot/www.guaosi.com/storage/logs/horizon.log ; 阻塞进程打印到控制台的内容写到哪里</span><br></pre></td></tr></table></figure></p><h3 id="3-2-2-yii2的队列守护进程配置参考"><a href="#3-2-2-yii2的队列守护进程配置参考" class="headerlink" title="3.2.2. yii2的队列守护进程配置参考"></a>3.2.2. yii2的队列守护进程配置参考</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.d/</span><br><span class="line"><span class="keyword">vim</span> yii2-queue.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>填入以下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:yii-queue-worker]</span></span><br><span class="line"><span class="attr">process_name</span>=%(program_name)s_%(process_num)<span class="number">02</span>d</span><br><span class="line"><span class="attr">command</span>=/usr/bin/php7.<span class="number">2</span> /home/wwwroot/www.guaosi.com/yii queue/listen --verbose=<span class="number">1</span> --color=<span class="number">0</span> ; 阻塞进程执行的命令</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span> ; 阻塞进程是否跟着Supervisor一起开机自动</span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span> ; 阻塞进程被异常退出是否自动重启</span><br><span class="line"><span class="attr">user</span>=www ; 由哪个用户执行阻塞进程的命令</span><br><span class="line"><span class="attr">numprocs</span>=<span class="number">10</span> ; 启动几个阻塞进程</span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/home/wwwroot/www.guaosi.com/runtime/logs/yii2-queue.log ; 阻塞进程打印到控制台的内容写到哪里</span><br></pre></td></tr></table></figure></p><h2 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3. 启动服务"></a>3.3. 启动服务</h2><h3 id="3-3-1-Centos启动"><a href="#3-3-1-Centos启动" class="headerlink" title="3.3.1. Centos启动"></a>3.3.1. Centos启动</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> supervisord</span><br></pre></td></tr></table></figure><h3 id="3-3-2-Ubuntu启动"><a href="#3-3-2-Ubuntu启动" class="headerlink" title="3.3.2. Ubuntu启动"></a>3.3.2. Ubuntu启动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c <span class="regexp">/etc/</span>supervisor<span class="regexp">/supervisord.conf</span></span><br></pre></td></tr></table></figure><h2 id="3-4-开机自启"><a href="#3-4-开机自启" class="headerlink" title="3.4. 开机自启"></a>3.4. 开机自启</h2><h3 id="3-4-1-Centos开机自启"><a href="#3-4-1-Centos开机自启" class="headerlink" title="3.4.1. Centos开机自启"></a>3.4.1. Centos开机自启</h3><p>新建文件<code>supervisord.service</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisord.service</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Unit]</span> </span><br><span class="line"><span class="attr">Description</span>=Supervisor daemon</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span> </span><br><span class="line"><span class="attr">Type</span>=forking </span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/supervisord -c /etc/supervisord.conf </span><br><span class="line"><span class="attr">ExecStop</span>=/usr/bin/supervisorctl shutdown </span><br><span class="line"><span class="attr">ExecReload</span>=/usr/bin/supervisorctl reload </span><br><span class="line"><span class="attr">KillMode</span>=process </span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure </span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span> </span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></p><p>将文件拷贝到<code>/usr/lib/systemd/system/</code><br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp supervisord.service /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/</span></span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> supervisord</span><br></pre></td></tr></table></figure></p><p>验证一下是否为开机启动<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">is</span>-enabled supervisord</span><br></pre></td></tr></table></figure></p><h3 id="3-4-2-Ubuntu开机自启"><a href="#3-4-2-Ubuntu开机自启" class="headerlink" title="3.4.2. Ubuntu开机自启"></a>3.4.2. Ubuntu开机自启</h3><p>编辑<code>/etc/rc.local</code>文件<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure></p><p>在<code>exit 0</code>之前加入以下命令<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>supervisord</span><br></pre></td></tr></table></figure></p><p>保存并退出<br>最后修改<code>rc.local</code>权限<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure></p><h2 id="3-5-常用命令"><a href="#3-5-常用命令" class="headerlink" title="3.5. 常用命令"></a>3.5. 常用命令</h2><p>重新启动配置中的所有程序</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl reload</span></span><br></pre></td></tr></table></figure><p>启动某个进程(program_name=你配置中写的程序名称)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="literal">start</span> program_name</span><br></pre></td></tr></table></figure><p>查看正在守候的进程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl</span></span><br></pre></td></tr></table></figure><p>停止某一进程 (program_name=你配置中写的程序名称)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">stop</span> program_name</span><br></pre></td></tr></table></figure><p>重启某一进程 (program_name=你配置中写的程序名称)</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">restart</span> program_name</span><br></pre></td></tr></table></figure><p>停止全部进程</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="keyword">stop</span> <span class="built_in">all</span></span><br></pre></td></tr></table></figure><p>注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。</p><h1 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h1><p>被<code>Supervisor</code>守护的进程都是<code>常驻内存</code>的，即如果<code>修改了被守护的进程的源码</code>，需要重启对这个进程的守护才能生效，否则还是未修改前的。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">restart</span> program_name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在Linux上有时候需要开启一个阻塞进程来监听操作。当ssh连上服务器，直接运行一个阻塞进程，然后退出服务器时，这个阻塞进程也会跟着关闭。&lt;/p&gt;
&lt;h1 id=&quot;2-解决办法&quot;&gt;&lt;a href=&quot;#2-解决办法&quot; class=&quot;headerlink&quot; title=&quot;2. 解决办法&quot;&gt;&lt;/a&gt;2. 解决办法&lt;/h1&gt;&lt;p&gt;以下提供三种方案参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;nohup ./xxx &amp;amp;&lt;/code&gt;将进程后台挂起，不过有效期只有12小时，会被自动杀进程。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;screen&lt;/code&gt;建立窗口，将阻塞进程运行在该窗口内，这个窗口可以被多个物理窗口所复用(就是就算这次退出了服务器连接，下次再连进来还是依旧存在的)，貌似可以满足我们的要求了。但是如果阻塞进程出错，阻塞进程不会自动重新启动，需要我们手动干预。&lt;/li&gt;
&lt;li&gt;使用python开发的&lt;code&gt;Supervisor&lt;/code&gt;守护进程。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
      <category term="Python" scheme="https://www.guaosi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OneDrive+olaIndex/OneIndex+aria2+ariaNg 制作个人大容量网盘，支持离线下载</title>
    <link href="https://www.guaosi.com/2019/02/22/onedrive-olyindex-oneindex-aria-ariang/"/>
    <id>https://www.guaosi.com/2019/02/22/onedrive-olyindex-oneindex-aria-ariang/</id>
    <published>2019-02-22T05:13:25.000Z</published>
    <updated>2021-12-05T08:13:24.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;随着网速的提升，越来越多人选择使用网络云盘来存储自己的文件资料。国内代表有<code>百度云</code>以及<code>腾讯云</code>，<code>天翼云</code>等，国外则是<code>oneDrive</code>，<code>谷歌云盘</code>，<code>dropbox</code>等。国内云盘虽然都打着大<code>容量</code>的旗号，但是不开会员下载速度就被恶心<code>限速</code>。国外的网盘则需要科学上网，并且容量也小，优点就是不限速。<br>&#160; &#160; &#160; &#160;微软的oneDrive虽然网页版在国内会被墙，但是客户端是正常使用的，并且不限速，只是普通的微软账号的oneDrive只有5G。<br>&#160; &#160; &#160; &#160;微软有一个产品，叫做<code>office365</code>,如果是教育版则可以让oneDrive变成1T或者5T。用国内教育邮箱注册的office365一般是1T，并且只能使用网页版的office365套件。如果是使用国外教育邮箱注册的，则可以使用桌面版的office365套件(就是office办公软件全家桶，正版！)<br><a id="more"></a></p><h1 id="2-获取office365账号"><a href="#2-获取office365账号" class="headerlink" title="2. 获取office365账号"></a>2. 获取office365账号</h1><p>以下提供3种办法:</p><p>1) <a href="https://developer.microsoft.com/en-us/office/dev-program" target="_blank" rel="noopener">微软的Office 365开发者计划</a>,免费获得一年的21TB OneDrive和Microsoft Office 365企业。不过只有1年有效期。</p><p>2) 临时教育邮箱申请office365，不过不支持桌面版office365。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)、进入注册地址http<span class="variable">s:</span>//products.office.<span class="keyword">com</span>/<span class="keyword">en</span>-us/student?<span class="keyword">tab</span>=students</span><br><span class="line"><span class="number">2</span>)、输入如有乐享提供的临时邮箱，地址：http<span class="variable">s:</span>//<span class="number">51</span>.ruyo.net/<span class="number">8263</span>.html</span><br><span class="line"><span class="number">3</span>)、填入密码，和从临时邮箱获取的验证码</span><br></pre></td></tr></table></figure></p><p>3) 去某宝或者某鱼购买国外的<code>教育邮箱</code>账号，也不贵，前几天买的就10元，这个账号提供1T的oneDrive跟桌面版office365，没有限制时间。并且，它提供无限容量的谷歌网盘！这个是国内教育邮箱办不到的。</p><h1 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h1><p>根据这篇文章做完，你将会获得如下功能的网盘<br>1) 1T或者5T的大容量不限速不用科学上网<br>2) 安全稳定，微软提供技术支持<br>3) 支持迅雷以及多线程下载工具不限速下载<br>4) 在线查看office各类文件<br>5) 在线观看电影，支持字幕(字幕获取待优化)<br>6) 在线播放音乐，支持歌词(支持歌词待做)<br>7) 在线查看代码<br>8) 支持文件密码访问保护<br>9) 离线BT下载<br>10) 下载以及在线类的，都是走<code>oneDrive</code>服务器带宽，本服务器带宽无论多小都能正常使用</p><h2 id="3-1-完成效果"><a href="#3-1-完成效果" class="headerlink" title="3.1. 完成效果"></a>3.1. 完成效果</h2><p><img src="http://wx4.sinaimg.cn/large/5a5977d4gy1g0dzxhh4c0j21gb0u0dmd.jpg" alt="预览"></p><h1 id="4-准备工作"><a href="#4-准备工作" class="headerlink" title="4. 准备工作"></a>4. 准备工作</h1><ol><li>office365账号一个</li><li>服务器或者vps(个人电脑未测试)</li><li>lnmp环境</li><li>域名(ip:端口未测试)</li></ol><p>lnmp环境要求<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PHP &gt;= <span class="number">7.1</span>.<span class="number">3</span></span><br><span class="line">OpenSSL PHP</span><br><span class="line">PHP PDO 扩展</span><br><span class="line">PHP Mbstring 扩展</span><br><span class="line">PHP Tokenizer 扩展</span><br><span class="line">PHP <span class="keyword">XML</span> <span class="title">扩展</span></span><br><span class="line"><span class="title">PHP</span> Ctype 扩展</span><br><span class="line">PHP JSON 扩展</span><br><span class="line">PHP File<span class="literal">inf</span>o 扩展</span><br></pre></td></tr></table></figure></p><h1 id="5-感谢"><a href="#5-感谢" class="headerlink" title="5. 感谢"></a>5. 感谢</h1><p>本文安装部分参考<a href="https://www.moerats.com" target="_blank" rel="noopener">Rat’s</a>,目录列表程序修改自<a href="https://github.com/WangNingkai/OLAINDEX" target="_blank" rel="noopener">OlaIndex</a>,aria2自动上传脚本来自<a href="https://moeclub.org/" target="_blank" rel="noopener">萌咖</a></p><h1 id="6-安装"><a href="#6-安装" class="headerlink" title="6. 安装"></a>6. 安装</h1><p>接下来以我安装过程为例。环境为lnmp一键包环境，我创建的站点为<a href="https://cloud.guaosi.com，不知道如何安装lnmp和创建站点可以参考[这里](https://https://www.guaosi.com/2018/12/18/environment-by-lnmp/)" target="_blank" rel="noopener">https://cloud.guaosi.com，不知道如何安装lnmp和创建站点可以参考[这里](https://https://www.guaosi.com/2018/12/18/environment-by-lnmp/)</a></p><h2 id="6-1-创建站点"><a href="#6-1-创建站点" class="headerlink" title="6.1. 创建站点"></a>6.1. 创建站点</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost <span class="keyword">add</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>添加一个<code>cloud.guaosi.com</code>的站点</p><h2 id="6-2-安装目录列表程序"><a href="#6-2-安装目录列表程序" class="headerlink" title="6.2. 安装目录列表程序"></a>6.2. 安装目录列表程序</h2><p>这里可以使用我修改的<a href="https://github.com/guaosi/OLAINDEX" target="_blank" rel="noopener">OlaIndex</a>，或者使用<a href="https://github.com/WangNingkai/OLAINDEX" target="_blank" rel="noopener">OlaIndex原版</a>，也可以使用<a href="https://github.com/donwa/oneindex" target="_blank" rel="noopener">OneIndex</a>。都大同小异，选一个最好看最适合自己的就好了。下面以我修改的为例。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /home/wwwroot/cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">git clone git@github<span class="selector-class">.com</span>:guaosi/OLAINDEX<span class="selector-class">.git</span> ./</span><br><span class="line">composer install</span><br><span class="line">cp <span class="selector-class">.env</span><span class="selector-class">.example</span> .env</span><br><span class="line">php artisan key:generate</span><br><span class="line">cd ..</span><br><span class="line">chmod -R <span class="number">755</span> cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">chown -R www:www cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>如果在composer install提示没有安装fileinfo扩展，可以参考我的<a href="https://www.guaosi.com/2019/02/22/install-php-fileinfo/">安装php扩展:Fileinfo</a></p><h2 id="6-3-站点伪静态设置"><a href="#6-3-站点伪静态设置" class="headerlink" title="6.3. 站点伪静态设置"></a>6.3. 站点伪静态设置</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>加入以下内容<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></p><p>不知道怎么加的，可以参考<a href="https://https://www.guaosi.com/2018/12/18/environment-by-lnmp/" target="_blank" rel="noopener">这里</a></p><h2 id="6-4-获取oneDrive授权"><a href="#6-4-获取oneDrive授权" class="headerlink" title="6.4. 获取oneDrive授权"></a>6.4. 获取oneDrive授权</h2><p>&#160; &#160; &#160; &#160;安装完成后，访问 <a href="https://cloud.guaosi.com" target="_blank" rel="noopener">https://cloud.guaosi.com</a> ，会自动跳转到安装界面，两个<code>redirect_uri</code>都填写<code>https://cloud.guaosi.com</code>即可。</p><p>然后点击<code>申请</code>:<br>1) 跳转到微软获取秘钥(打不开可能要科学上网)，然后将秘钥复制后粘贴到<code>client_secret</code>，<br>2) 然后点击<code>知道了，返回到快速启动</code>，将<code>APP ID</code>内容复制到<code>client_id</code>,<br>3) 最后点击<code>保存</code>。最后点击<code>绑定</code>，跳转到微软授权页面，成功后会看到目录列表显示。</p><blockquote><p>如果失败了，就返回再点击绑定或者返回修改，多试几次。</p></blockquote><h2 id="6-5-后台配置"><a href="#6-5-后台配置" class="headerlink" title="6.5. 后台配置"></a>6.5. 后台配置</h2><p>绑定成功后，访问 <a href="https://cloud.guaosi.com/admin" target="_blank" rel="noopener">https://cloud.guaosi.com/admin</a> 进行后台相关设置，初始化密码为:<code>12345678</code>，记得修改初始化密码。因为配置是走缓存的，所以修改了配置后，要点击<code>清理缓存</code>才会生效。</p><h2 id="6-6-安装Aria2"><a href="#6-6-安装Aria2" class="headerlink" title="6.6. 安装Aria2"></a>6.6. 安装Aria2</h2><p>1) 这里用的逗比的脚本，使用命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubiBackup/doubi/master/aria2.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> aria2.<span class="keyword">sh</span> &amp;&amp; bash aria2.<span class="keyword">sh</span></span><br><span class="line">#备用地址</span><br><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//www.moerats.<span class="keyword">com</span>/usr/<span class="keyword">shell</span>/Aria2/aria2.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> aria2.<span class="keyword">sh</span> &amp;&amp; bash aria2.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>2) 安装完成后，如果我们想修改密码、下载文件位置、端口的话，可以使用命令<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /root/.aria2/aria2.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>3) 找到对应的选项进行修改，这里面有个<code>rpc-secret</code>，是Aria2的密码，下面AriaNg会用到。</p><p>4) 重启Aria2，修改的配置文件才会生效<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service aria2 <span class="built_in">restart</span></span><br></pre></td></tr></table></figure></p><h2 id="6-7-安装AriaNg"><a href="#6-7-安装AriaNg" class="headerlink" title="6.7. 安装AriaNg"></a>6.7. 安装AriaNg</h2><p>1) 这一步和安装目录列表程序差不多，先添加一个域名，不想用域名的可以在添加域名那里填上IP或者IP:端口，然后将AriaNg程序上传到对应站点的根目录(比如我是aria.guaosi.com)，可以使用命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install unzip -y</span><br><span class="line">cd /www/wwwroot/aria<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">wget https:<span class="comment">//www.moerats.com/usr/down/aria-ng-0.2.0.zip &amp;&amp; unzip aria-ng-0.2.0.zip</span></span><br></pre></td></tr></table></figure></p><p>2) 这时候我们就可以使用域名访问AriaNg界面了，或者IP:端口。有的服务器提供商会<code>默认关闭Aria的端口(6800)</code>，记得去开启。<br>3) 目前AriaNg还没连上我们服务器里的Aria2服务。在<code>Aria2 RPC 协议</code>选择<code>Https</code>。在<code>Aria2 RPC 秘钥</code>填写你在Aria2获取的<code>rpc-secret</code>。然后<code>重新加载页面</code>。<br>4) 此时侧边栏<code>Aria2 状态</code>应该是显示已连接</p><p>如果你想做成Https:</p><p>1) 打开Aria2配置文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /root/.aria2/aria2.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>2) 修改如下位置<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span></span><br><span class="line"><span class="attr">rpc-secure</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span></span><br><span class="line"><span class="attr">rpc-certificate</span>=你的ssl证书绝地路径</span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span></span><br><span class="line"><span class="attr">rpc-private-key</span>=你的ssl证书绝地路径</span><br></pre></td></tr></table></figure></p><p>3) 重启Aria2服务<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service aria2 <span class="built_in">restart</span></span><br></pre></td></tr></table></figure></p><p>4) 在AriaNg界面的<code>AriaNg 设置</code>- <code>RPC栏目</code>。在<code>Aria2 RPC 协议</code>选择<code>Https</code>。</p><h2 id="6-8-安装oneDrive的bash"><a href="#6-8-安装oneDrive的bash" class="headerlink" title="6.8. 安装oneDrive的bash"></a>6.8. 安装oneDrive的bash</h2><p>摘抄自<a href="https://www.moerats.com/archives/697/" target="_blank" rel="noopener">萌咖</a></p><h3 id="6-8-1-安装过程"><a href="#6-8-1-安装过程" class="headerlink" title="6.8.1. 安装过程"></a>6.8.1. 安装过程</h3><p>1) 确保服务器已经安装了curl扩展，如果没有安装，则执行<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#Ubuntu和Debian系统</span></span><br><span class="line">apt-<span class="keyword">get</span> install -y curl</span><br><span class="line"></span><br><span class="line"><span class="meta">#Centos系统</span></span><br><span class="line">yum install curl -y</span><br></pre></td></tr></table></figure></p><p>2) 安装<a href="https://github.com/0oVicero0/OneDrive" target="_blank" rel="noopener">萌咖</a>做的oneDrive的bash<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便小白，本脚本内置萌咖大佬永久有效的应用参数，可以直接使用，如果你不放心可以自己获取参数，不过可能会遇到很多坑，建议直接使用脚本默认的参数</span></span><br><span class="line"><span class="attribute">wget</span> --<span class="literal">no</span>-check-certificate -qO- <span class="string">"https://raw.githubusercontent.com/0oVicero0/OneDrive/master/OneDrive.sh"</span> |bash</span><br></pre></td></tr></table></figure></p><p>3) 运行账号认证程序</p><p>&#160; &#160; &#160; &#160;运行命令onedrive -a，将返回的网址复制到浏览器打开，再登陆你的OneDrive for Business账号，登陆成功后复制地址栏中的地址(复制包括localhost的所有链接地址)，粘贴到SSH客户端里，敲回车键即可。<br>&#160; &#160; &#160; &#160;如果返回以下字段：<code>It seems like we have a refresh token, so we are ready to go</code>，那就恭喜你，设置成功!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：如果你遇到bash: onedrive: <span class="built_in">command</span> not found错误，则需要找到/usr/<span class="built_in">local</span>/etc/OneDrive文件夹，修改onedrive和onedrive<span class="_">-d</span>脚本，在第二行都加上<span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span>代码，再保存就行了。</span><br></pre></td></tr></table></figure></p><h3 id="6-8-2-oneDrive的bash使用"><a href="#6-8-2-oneDrive的bash使用" class="headerlink" title="6.8.2. oneDrive的bash使用"></a>6.8.2. oneDrive的bash使用</h3><p>1) 使用命令</p><p>onedrive –help<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">###</span></span><br><span class="line"><span class="comment">Usage: onedrive [OPTIONS] file1 [file2...]</span></span><br><span class="line"><span class="comment">       onedrive-d folder</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Options:</span></span><br><span class="line"><span class="comment">  -d, --debug        Enable debug mode</span></span><br><span class="line"><span class="comment">  -a, --authorize    Run authorization process</span></span><br><span class="line"><span class="comment">  -f, --folder       Upload files into this remote folder</span></span><br><span class="line"><span class="comment">  -c, --creat        Creat remote folder."</span></span><br><span class="line"><span class="comment">                     Directory names are separated with a slash, e.g.</span></span><br><span class="line"><span class="comment">                     rootFolder/subFolder</span></span><br><span class="line"><span class="comment">                     Do NOT use a trailing slash!</span></span><br><span class="line"><span class="comment">  -h, --help         Show this help</span></span><br><span class="line"><span class="comment">  -r, --rename       Rename the files during upload</span></span><br><span class="line"><span class="comment">                     For each file you specify you MUST also specify</span></span><br><span class="line"><span class="comment">                     the remote filename as the subsequent parameter</span></span><br><span class="line"><span class="comment">                     Be especially careful with globbing!</span></span><br><span class="line"><span class="comment">  -s, --silent       Silent mode for use in crontab scripts.</span></span><br><span class="line"><span class="comment">                     Return only exit code.</span></span><br><span class="line"><span class="comment">  -ls,--list         Show the itmes in this directory.</span></span><br><span class="line"><span class="comment">  -l, --link         Show the file share link.</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">###</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span></span><br></pre></td></tr></table></figure></p><p>2、命令示范<br>如果我们要上传<code>/root</code>文件夹里面的<code>moerats.txt</code>，使用命令：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令默认上传到OneDrive根目录</span></span><br><span class="line"><span class="attribute">onedrive</span> <span class="string">'/root/moerats.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果上传到指定文件夹，就需要加-f参数</span></span><br><span class="line">onedrive -f RATS <span class="string">'/root/moerats.txt'</span>  <span class="comment">#上传到OneDrive根目录的RATS文件夹</span></span><br><span class="line">onedrive -f RATS/RATS <span class="string">'/root/moerats.txt'</span>  <span class="comment">#上传到OneDrive根目录RATS文件夹里的RATS文件夹</span></span><br></pre></td></tr></table></figure></p><p>如果我们要将<code>/root</code>文件夹及里面的文件夹和文件一起上传，使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令默认上传到OneDrive根目录</span></span><br><span class="line">onedrive<span class="_">-d</span> <span class="string">'/root'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果上传到指定文件夹，就需要加-f参数</span></span><br><span class="line">onedrive<span class="_">-d</span> -f RATS <span class="string">'/root'</span>  <span class="comment">#上传到OneDrive根目录的RATS文件夹</span></span><br><span class="line">onedrive<span class="_">-d</span> -f RATS/RATS <span class="string">'/root'</span>  <span class="comment">#上传到OneDrive根目录RATS文件夹里的RATS文件夹</span></span><br></pre></td></tr></table></figure></p><p>如果我们想直接查看OneDrive网盘目录的文件，使用命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#此命令只查看根目录文件</span></span><br><span class="line">onedrive -l</span><br><span class="line"><span class="meta">#如果我们要查看根目录root文件夹里的文件</span></span><br><span class="line">onedrive -l /root</span><br></pre></td></tr></table></figure></p><h2 id="6-9-Aria2自动上传"><a href="#6-9-Aria2自动上传" class="headerlink" title="6.9. Aria2自动上传"></a>6.9. Aria2自动上传</h2><h3 id="6-9-1-配置过程"><a href="#6-9-1-配置过程" class="headerlink" title="6.9.1. 配置过程"></a>6.9.1. 配置过程</h3><p>1) 创建shell脚本<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="keyword">local</span>/rcloneupload.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>2) 填入以下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">GID=<span class="string">"<span class="variable">$1</span>"</span>;</span><br><span class="line">FileNum=<span class="string">"<span class="variable">$2</span>"</span>;</span><br><span class="line">File=<span class="string">"<span class="variable">$3</span>"</span>;</span><br><span class="line">MaxSize=<span class="string">"15728640"</span></span><br><span class="line">RemoteDIR=<span class="string">""</span>;  <span class="comment">#上传到Onedrive的路径，默认为根目录，如果要上传到指定目录，请看后面。</span></span><br><span class="line">LocalDIR=<span class="string">"/usr/local/caddy/www/aria2/Download/"</span>;  <span class="comment">#Aria2下载目录，记得最后面加上/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z $(<span class="built_in">echo</span> <span class="string">"<span class="variable">$FileNum</span>"</span> |grep -o <span class="string">'[0-9]*'</span> |head -n1) ]]; <span class="keyword">then</span> FileNum=<span class="string">'0'</span>; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$FileNum</span>"</span> -le <span class="string">'0'</span> ]]; <span class="keyword">then</span> <span class="built_in">exit</span> 0; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$#</span>"</span> != <span class="string">'3'</span> ]]; <span class="keyword">then</span> <span class="built_in">exit</span> 0; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">LoadFile</span></span>()&#123;</span><br><span class="line">  IFS_BAK=<span class="variable">$IFS</span></span><br><span class="line">  IFS=$<span class="string">'\n'</span></span><br><span class="line">  <span class="keyword">if</span> [[ ! -d <span class="string">"<span class="variable">$LocalDIR</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [[ -e <span class="string">"<span class="variable">$File</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [[ $(dirname <span class="string">"<span class="variable">$File</span>"</span>) == $(readlink -f <span class="variable">$LocalDIR</span>) ]]; <span class="keyword">then</span></span><br><span class="line">      ONEDRIVE=<span class="string">"onedrive"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ONEDRIVE=<span class="string">"onedrive-d"</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    FileLoad=<span class="string">"<span class="variable">$&#123;File/#$LocalDIR&#125;</span>"</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$FileLoad</span>"</span> == <span class="string">'/'</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$FileLoad</span>"</span> |grep -q <span class="string">'/'</span>;</span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"$?"</span> == <span class="string">"0"</span> ]]; <span class="keyword">then</span></span><br><span class="line">          FileLoad=$(dirname <span class="string">"<span class="variable">$FileLoad</span>"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">fi</span>;</span><br><span class="line">      <span class="keyword">done</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$FileLoad</span>"</span> == <span class="string">"<span class="variable">$LocalDIR</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">"<span class="variable">$RemoteDIR</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">      Option=<span class="string">" -f <span class="variable">$RemoteDIR</span>"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      Option=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    EXEC=<span class="string">"<span class="variable">$(command -v $ONEDRIVE)</span>"</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$EXEC</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$LocalDIR</span>"</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ -e <span class="string">"<span class="variable">$FileLoad</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">      ItemSize=$(du -s <span class="string">"<span class="variable">$FileLoad</span>"</span> |cut -f1 |grep -o <span class="string">'[0-9]*'</span> |head -n1)</span><br><span class="line">      <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$ItemSize</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$ItemSize</span>"</span> -ge <span class="string">"<span class="variable">$MaxSize</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">"\033[33m<span class="variable">$File</span> \033[0mtoo large to spik.\n"</span>;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      <span class="built_in">eval</span> <span class="string">"<span class="variable">$&#123;EXEC&#125;</span><span class="variable">$&#123;Option&#125;</span>"</span> \<span class="string">'"$&#123;FileLoad&#125;"\'</span>;</span><br><span class="line">      <span class="keyword">if</span> [[ $? == <span class="string">'0'</span> ]]; <span class="keyword">then</span></span><br><span class="line">        rm -rf <span class="string">"<span class="variable">$FileLoad</span>"</span>;</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  IFS=<span class="variable">$IFS_BAK</span></span><br><span class="line">&#125;</span><br><span class="line">LoadFile;</span><br></pre></td></tr></table></figure></p><p>如果你想上传到指定的文件夹，修改如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#上传到Onedrive里的RATS目录，参数改为：RemoteDIR=<span class="string">"RATS"</span><span class="comment">; </span></span></span><br><span class="line"><span class="meta">#上传到Onedrive里的RATS目录里的RATS目录，参数改为：RemoteDIR=<span class="string">"RATS/RATS"</span><span class="comment">;</span></span></span><br></pre></td></tr></table></figure></p><p>3) 启用脚本</p><p>先授权<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> +<span class="selector-tag">x</span> <span class="selector-tag">rcloneupload</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure></p><p>然后再到<code>aria2.conf</code>中加上一行<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span>-download-<span class="built_in">complete</span>=/root/rcloneupload.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>最后重启<code>Aria2</code>生效。</p><p>4) 如果你觉得上传速度较慢，可以编辑<code>/usr/local/etc/OneDrive/onedrive.cfg</code>，修改threads线程数，默认2。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里提供个快速修改线程数的命令，这里默认修改为5，建议别太高！</span></span><br><span class="line">sed -i <span class="string">"s<span class="subst">#max_upload_threads</span>=2<span class="subst">#max_upload_threads</span>=5<span class="subst">#g</span>"</span> <span class="string">'/usr/local/etc/OneDrive/onedrive.cfg'</span></span><br></pre></td></tr></table></figure></p><h3 id="6-9-2-注意"><a href="#6-9-2-注意" class="headerlink" title="6.9.2. 注意"></a>6.9.2. 注意</h3><p>&#160; &#160; &#160; &#160;在<code>AriaNg</code>上下载文件，实际上是服务器通过<code>Aria2</code>先把文件下载到服务器，然后服务器再通过<code>oneDrive的bash</code>命令将服务器上下载的文件传到<code>oneDrive</code>。当上传成功后，脚本会<code>自动删除服务器上的源文件</code>。<br>所以，这里要考虑到的问题就是服务器的磁盘容量以及上传速度。<br>1) <code>下载的文件不能大于服务器磁盘容量</code>。<br>2) 上传速度与服务器带宽有关，比如服务器的带宽是1M，那么上传速度就是130kb/s或者140kb/s。如果想离线上传快速，那么就需要加大带宽了。</p><h1 id="7-上传文件"><a href="#7-上传文件" class="headerlink" title="7. 上传文件"></a>7. 上传文件</h1><p>目前有4种上传方法:<br>1) 使用oneDrive客户端上传(推荐)<br>2) 使用AriaNg离线下载(推荐)<br>3) 使用oneDrive网页版本上传<br>4) 使用服务器安装的<code>oneDrive</code>的<code>bash</code>命令上传</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;随着网速的提升，越来越多人选择使用网络云盘来存储自己的文件资料。国内代表有&lt;code&gt;百度云&lt;/code&gt;以及&lt;code&gt;腾讯云&lt;/code&gt;，&lt;code&gt;天翼云&lt;/code&gt;等，国外则是&lt;code&gt;oneDrive&lt;/code&gt;，&lt;code&gt;谷歌云盘&lt;/code&gt;，&lt;code&gt;dropbox&lt;/code&gt;等。国内云盘虽然都打着大&lt;code&gt;容量&lt;/code&gt;的旗号，但是不开会员下载速度就被恶心&lt;code&gt;限速&lt;/code&gt;。国外的网盘则需要科学上网，并且容量也小，优点就是不限速。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;微软的oneDrive虽然网页版在国内会被墙，但是客户端是正常使用的，并且不限速，只是普通的微软账号的oneDrive只有5G。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;微软有一个产品，叫做&lt;code&gt;office365&lt;/code&gt;,如果是教育版则可以让oneDrive变成1T或者5T。用国内教育邮箱注册的office365一般是1T，并且只能使用网页版的office365套件。如果是使用国外教育邮箱注册的，则可以使用桌面版的office365套件(就是office办公软件全家桶，正版！)&lt;br&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="lnmp" scheme="https://www.guaosi.com/tags/lnmp/"/>
    
      <category term="OneDrive" scheme="https://www.guaosi.com/tags/OneDrive/"/>
    
  </entry>
  
  <entry>
    <title>安装php扩展--Fileinfo</title>
    <link href="https://www.guaosi.com/2019/02/22/install-php-fileinfo/"/>
    <id>https://www.guaosi.com/2019/02/22/install-php-fileinfo/</id>
    <published>2019-02-22T01:32:35.000Z</published>
    <updated>2021-12-05T08:13:24.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;在编译安装php或者lnmp安装的时候，可能由于服务器的配置不够(内存小于1G)，会将fileinfo扩展默认不安装，已保证php可以正常安装。可是有的时候我们又必须安装fileinfo扩展。<br><a id="more"></a></p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2. 解决"></a>2. 解决</h1><h2 id="2-1-下载php的源码编译包"><a href="#2-1-下载php的源码编译包" class="headerlink" title="2.1. 下载php的源码编译包"></a>2.1. 下载php的源码编译包</h2><p>php源码包下载地址(下载与当前安装的php相同版本的源码包): <a href="http://www.php.net/downloads.php" target="_blank" rel="noopener">http://www.php.net/downloads.php</a><br>如果是lnmp安装的，则在<code>lnmp下载处/src/</code>下可以看到php的源码包。</p><h2 id="2-2-安装fileinfo"><a href="#2-2-安装fileinfo" class="headerlink" title="2.2. 安装fileinfo"></a>2.2. 安装fileinfo</h2><p>以lnmp1.5安装位置为例,我安装的是php7.2.6版本<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xvf php-<span class="number">7.2</span>.<span class="number">6</span>.tar.bz2</span><br><span class="line">cd php-<span class="number">7.2</span>.<span class="number">6</span><span class="regexp">/ext/</span>fileinfo</span><br><span class="line">phpize</span><br><span class="line">.<span class="regexp">/configure --with-php-config=/u</span>sr<span class="regexp">/local/</span>php<span class="regexp">/bin/</span>php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>当<code>make &amp;&amp; make install</code>时报错提示内存不够时，可以参考<a href="https://www.guaosi.com/2019/02/21/linux-add-virtual-memory/">Linux虚拟内存设置</a>解决</p><h2 id="2-3-开启fileinfo扩展"><a href="#2-3-开启fileinfo扩展" class="headerlink" title="2.3. 开启fileinfo扩展"></a>2.3. 开启fileinfo扩展</h2><p>以lnmp安装位置为例<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php.ini</span></span><br></pre></td></tr></table></figure></p><p>在最后一行加上<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[FileInfo]</span></span><br><span class="line"><span class="attr">extension</span> = fileinfo.so</span><br></pre></td></tr></table></figure></p><p>保存退出后，重启php-fpm<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service php-fpm restart</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在编译安装php或者lnmp安装的时候，可能由于服务器的配置不够(内存小于1G)，会将fileinfo扩展默认不安装，已保证php可以正常安装。可是有的时候我们又必须安装fileinfo扩展。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟内存设置</title>
    <link href="https://www.guaosi.com/2019/02/21/linux-add-virtual-memory/"/>
    <id>https://www.guaosi.com/2019/02/21/linux-add-virtual-memory/</id>
    <published>2019-02-21T02:32:35.000Z</published>
    <updated>2021-12-05T08:13:24.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;开发过程中，可能会碰到安装某个扩展需要扩大本服务器的内存，但是给的硬件内存只有那么点，该如何处理呢？<br>Linux上开启虚拟内存即可解决。</p><a id="more"></a><blockquote><p>虚拟内存是为了满足物理内存不足采用的策略，利用磁盘空间虚拟出一块逻辑内存，用作虚拟内存的空间也就是交换分区。<br>作为物理内存的扩展，Linux会在物理内存不足时，使用交换分区的逻辑内存，内核会把暂时不用的内存块信息写到交换空间，这样物理内存就得到了释放，这块儿内存就可以用于其他目的，而需要用到这些内容的时候，这些信息就会被重新从交换分区读入物理内存。<br>Linux的内存管理采用的是分页存取机制，为了保证物理内存得到充分的利用，内核会在适当的时间把物理内存中不经常使用的数据块儿自动交换到虚拟内存中，而将充分使用的信息保留到物理内存中。</p></blockquote><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h1><h2 id="2-1-创建swap分区"><a href="#2-1-创建swap分区" class="headerlink" title="2.1. 创建swap分区"></a>2.1. 创建swap分区</h2><p>用<code>拥有ROOT权限</code>的用户登入到系统，进行创建swap分区，通过下面指令创建1G的虚拟内存<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/zero <span class="attribute">of</span>=/swap/swap <span class="attribute">bs</span>=1024 <span class="attribute">count</span>=1024000</span><br></pre></td></tr></table></figure></p><h2 id="2-2-创建交换文件"><a href="#2-2-创建交换文件" class="headerlink" title="2.2. 创建交换文件"></a>2.2. 创建交换文件</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /<span class="keyword">swap</span>/<span class="keyword">swap</span></span><br></pre></td></tr></table></figure><h2 id="2-3-立即激活交换文件"><a href="#2-3-立即激活交换文件" class="headerlink" title="2.3. 立即激活交换文件"></a>2.3. 立即激活交换文件</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /<span class="keyword">swap</span>/<span class="keyword">swap</span></span><br></pre></td></tr></table></figure><h2 id="2-4-设置成永久生效"><a href="#2-4-设置成永久生效" class="headerlink" title="2.4. 设置成永久生效"></a>2.4. 设置成永久生效</h2><p>虽然现在已经生效，但是等下次服务器重启之后。该swap虚拟磁盘会失效，为保证永久生效，还需往/etc/fstab文件添加分区信息：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"/swap/swap swap swap defaults 0 0"</span> <span class="meta">&gt;&gt; </span>/etc/fstab</span><br></pre></td></tr></table></figure></p><p>现在为止，swap分区已经完成创建。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;开发过程中，可能会碰到安装某个扩展需要扩大本服务器的内存，但是给的硬件内存只有那么点，该如何处理呢？&lt;br&gt;Linux上开启虚拟内存即可解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用lnmp快速构建线上环境并搭建项目成功上线</title>
    <link href="https://www.guaosi.com/2018/12/18/environment-by-lnmp/"/>
    <id>https://www.guaosi.com/2018/12/18/environment-by-lnmp/</id>
    <published>2018-12-18T07:20:09.000Z</published>
    <updated>2021-12-05T08:13:24.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h1><p>本文适合:</p><p>1.已经在linux虚拟机上搭建过环境，可以正常访问的，但是没有搭建在真实服务器上。</p><p>2.需要有略微的<code>linux</code>基础。</p><p>3.有自己的小项目或者demo，如果没有，会<code>composer</code>安装框架也是可以的。</p><p>因为本文适合偷懒使用，如果没有丝毫搭建经验的，所以我建议最好是创建一台虚拟机，自己手动安装<code>nginx</code>,<code>php</code>,<code>MySQL</code>，让内网可以上线访问。有了相关的认识，再来看本文效果是最好的。</p><a id="more"></a><h1 id="2-起因"><a href="#2-起因" class="headerlink" title="2. 起因"></a>2. 起因</h1><p>当大家做好自己的项目或者是demo，都想放在服务器上线，这样其他人才能随时随地访问使用。但是新拿到一台服务器后，可是服务器里<code>nginx</code>,<code>php</code>,<code>mysql</code>这些必须环境都没有安装，去装的话又是很繁琐。<br>那么，有没有一种快速高效的办法，类似windows上的<code>phpstudy</code>一样的集成环境呢？答案是有的，比如<code>宝塔</code>，<code>lnmp</code>。这里，我们选择已经很成熟的<code>lnmp</code>的<code>1.5</code>版本来快速构建环境。</p><p>LNMP官网: <a href="https://lnmp.org" target="_blank" rel="noopener">LNMP</a></p><h1 id="3-配置域名"><a href="#3-配置域名" class="headerlink" title="3. 配置域名"></a>3. 配置域名</h1><h2 id="3-1-域名问题"><a href="#3-1-域名问题" class="headerlink" title="3.1.  域名问题"></a>3.1.  域名问题</h2><p>首先，我们要知道域名是什么？为什么域名可以知道我们服务器在哪里？甚至还可以知道最后要访问我们哪一个项目？</p><h3 id="3-1-1-域名是什么？"><a href="#3-1-1-域名是什么？" class="headerlink" title="3.1.1. 域名是什么？"></a>3.1.1. 域名是什么？</h3><p>百度上有相关的定义，我这里就不阐述了，直接举个例子吧。比如，我在万网或者腾讯云上购买了一个域名，这个域名可以是<code>guaosi.com</code>，<code>guaosi.cn</code>或者<code>guaosi.top</code>，这些域名都称之为一级域名。然后我买了<code>guaosi.com</code>这个域名，那么，我就可以随心所欲在这个域名旗下生成我想要的域名了。给项目1的域名是<code>www.guaosi.com</code>,项目2的域名是<code>test.guaosi.com</code>。这些称之为二级域名，甚至还可以创建三级域名，四级域名，这些域名都是归于<code>guaosi.com</code>旗下的，不需要购买。</p><h3 id="3-1-2-域名如何知道我们服务器在哪里"><a href="#3-1-2-域名如何知道我们服务器在哪里" class="headerlink" title="3.1.2. 域名如何知道我们服务器在哪里"></a>3.1.2. 域名如何知道我们服务器在哪里</h3><p>以腾讯云的域名系统为例。已经购买了腾讯云的域名后，找到<code>域名与网站</code>-<code>云解析</code>-<code>域名解析列表</code>-<code>解析</code>。点击<code>添加记录</code>添加想要的域名，比如我想添加<code>www.guaosi.com</code>。那么，在<code>主机记录</code>填写<code>www</code>，<code>记录值</code>填写服务器的地址,然后保存即可。</p><p><img src="/assets/blogImg/tencent-domain-name.png" alt="腾讯云域名配置"></p><p>现在如果一个用户在电脑上访问了我的<code>www.guaosi.com</code>域名，首先，电脑上会先查看自己本地的Hosts文件里是否有做了关于<code>www.guaosi.com</code>的重定向，如果没有，那么电脑再访问由宽带运营商规定DNS(域名解析)服务器，查到<code>www.guaosi.com</code>的服务器地址为<code>xx.xx.xx.xx</code>，然后此时将请求发往IP为<code>xx.xx.xx.xx</code>的服务器上。最后，具体是访问到这台服务器上的哪个项目，哪个文件，我们下面再说。</p><h2 id="3-2-没有服务器或者域名"><a href="#3-2-没有服务器或者域名" class="headerlink" title="3.2. 没有服务器或者域名"></a>3.2. 没有服务器或者域名</h2><p>由上文的 <code>域名如何知道我们服务器在哪里</code> ，里面提及到，电脑上是先查看自己本地的Hosts文件里是否有做了关于<code>www.guaosi.com</code>的重定向，如果没有，电脑才访问由宽带运营商规定DNS(域名解析)服务器。所以，我们可以修改Hosts文件来假装自己已经拥有了自己的域名。</p><p>编辑hosts文件，加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">环境地址       <span class="selector-tag">www</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line"></span><br><span class="line"># 比如我虚拟机环境地址是192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span>  <span class="selector-tag">www</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h2 id="3-3-拥有自己的服务器以及域名"><a href="#3-3-拥有自己的服务器以及域名" class="headerlink" title="3.3. 拥有自己的服务器以及域名"></a>3.3. 拥有自己的服务器以及域名</h2><p>通过上文的 <code>域名如何知道我们服务器在哪里</code> ，进行配置即可。</p><h1 id="4-安装LNMP"><a href="#4-安装LNMP" class="headerlink" title="4. 安装LNMP"></a>4. 安装LNMP</h1><p>根据官网的步骤安装即可，因为是一键包而且官网已经说得很详细了，我就不复现了。</p><p>建议安装MySQL8和PHP7.26版本，不要忘记设置的MySQL密码，并且密码的加密方式最好选择<code>mysql_native_password</code>。</p><p>LNMP安装: <a href="https://lnmp.org/install.html" target="_blank" rel="noopener">LNMP安装</a></p><p>安装完毕后，默认是root账户只能在本服务器上被访问，外界访问不到，可以进到mysql客户端里进行修改。</p><p>LNMP相关软件目录及文件位置 : <a href="https://lnmp.org/faq/lnmp-software-list.html" target="_blank" rel="noopener">LNMP相关软件目录及文件位置</a></p><p><code>my.ini</code>位置: <code>/etc/my.cnf</code></p><p><code>php.ini</code>位置: <code>/usr/local/php/etc/php.ini</code></p><p><code>vhost</code>位置: <code>/usr/local/nginx/conf/vhost</code></p><h1 id="5-配置虚拟站点"><a href="#5-配置虚拟站点" class="headerlink" title="5. 配置虚拟站点"></a>5. 配置虚拟站点</h1><h2 id="5-1-添加虚拟站点"><a href="#5-1-添加虚拟站点" class="headerlink" title="5.1. 添加虚拟站点"></a>5.1. 添加虚拟站点</h2><p>输入命令，新建虚拟站点<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost <span class="keyword">add</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><p>之后的选择，可以参考如下:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.Please enter domain(example: www.lnmp.org)</span><br><span class="line">输入想要创建的域名。比如  www.guaosi.com  回车</span><br><span class="line"></span><br><span class="line">2.Enter more domain name(example: lnmp.org *.lnmp.org)</span><br><span class="line">输入更多域名。没有必要，回车</span><br><span class="line"></span><br><span class="line">3.Default directory: /home/wwwroot/www.guaosi.com:</span><br><span class="line">项目存放的目录。默认即可，回车</span><br><span class="line"></span><br><span class="line">4.Allow Rewrite rule? (y/n)</span><br><span class="line">vhost里的配置规则。默认即可，回车</span><br><span class="line"></span><br><span class="line">5.<span class="builtin-name">Enable</span> PHP Pathinfo? (y/n)</span><br><span class="line">是否添加PHP Pathinfo。默认即可，回车</span><br><span class="line"></span><br><span class="line">6.Allow access log? (y/n)</span><br><span class="line">是否开启访问日志。默认即可，回车</span><br><span class="line"></span><br><span class="line">7. Multiple PHP version found, Please select the PHP version.</span><br><span class="line">选择运行该项目的php版本，回车</span><br><span class="line"></span><br><span class="line">8. Create database <span class="keyword">and</span> MySQL<span class="built_in"> user </span>with same name</span><br><span class="line">是否在mysql里创建当前项目专用的数据库与账户。这步可以选择 n 跳过,但是为了安全起见，最好是一个项目存放一个数据库以及配置专用的MySQL账号密码，所以我这里选择y，回车</span><br><span class="line"></span><br><span class="line">9. Enter current root password of Database (Password will <span class="keyword">not</span> shown):</span><br><span class="line">请输入当前mysql的root密码。输入完毕后，回车</span><br><span class="line"></span><br><span class="line">10.Enter database name:</span><br><span class="line">输入新建数据库的名称。输入完毕后，回车</span><br><span class="line"></span><br><span class="line">11.Please enter password <span class="keyword">for</span> mysql user</span><br><span class="line">为新建的mysql账户设置密码。输入完毕后，回车</span><br><span class="line"></span><br><span class="line">12.<span class="builtin-name">Add</span> SSL Certificate</span><br><span class="line">是否添加SSL证书。现在SSL证书都是可以免费拿到，比如腾讯云，阿里云的域名都可以免费申请，我们这边直接n跳过，自己来配置SSL证书</span><br><span class="line"></span><br><span class="line">13.Press any key <span class="keyword">to</span> start create virtul host.</span><br><span class="line">直接回车，添加新的虚拟站点成功</span><br></pre></td></tr></table></figure></p><p>成功后，会生成对应的项目目录 <code>/home/wwwroot/www.guaosi.com</code> ，成生成nginx关于这个项目的虚拟站点配置文件<code>/usr/local/nginx/conf/vhost/www.guaosi.com.conf</code></p><h2 id="5-2-修改vhost配置文件"><a href="#5-2-修改vhost配置文件" class="headerlink" title="5.2. 修改vhost配置文件"></a>5.2. 修改vhost配置文件</h2><p>输入<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure></p><p>将 <code>root</code> 指向的地址，进行修改，将原来的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  /home/wwwroot/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span>/</span><br></pre></td></tr></table></figure></p><p>修改为项目入口地址所在目录。<br>如果是yii2项目，修改为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  /home/wwwroot/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span>/web</span><br></pre></td></tr></table></figure></p><p>如果是laravel或者tp5项目，修改为<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  <span class="regexp">/home/</span>wwwroot<span class="regexp">/www.guaosi.com/</span><span class="keyword">public</span></span><br></pre></td></tr></table></figure></p><h1 id="6-测试项目上线"><a href="#6-测试项目上线" class="headerlink" title="6. 测试项目上线"></a>6. 测试项目上线</h1><h2 id="6-1-将项目放入线上"><a href="#6-1-将项目放入线上" class="headerlink" title="6.1. 将项目放入线上"></a>6.1. 将项目放入线上</h2><p>将自己已经完成的项目或者demo，放到服务器的项目目录下(比如<code>home/wwwroot/www.guaosi.com/</code>)。</p><p>以下提供四种方式，<code>推荐使用git</code>，因为git有版本控制，可以回退版本以及分支开发，团队合作，是现在的主流趋势，是每个程序猿必须掌握的。</p><h3 id="6-1-1-composer"><a href="#6-1-1-composer" class="headerlink" title="6.1.1. composer"></a>6.1.1. composer</h3><p>如果没有可以放的项目或者demo，可以直接composer下载thinkphp5或者laravel到项目目录下，可以通过域名成功访问到即代表成功.</p><h3 id="6-1-2-FTP上传"><a href="#6-1-2-FTP上传" class="headerlink" title="6.1.2. FTP上传"></a>6.1.2. FTP上传</h3><p>需要服务器开了FTP的21端口或者sftp的22端口.建议把自己的项目打包成zip，然后通过ftp工具上传到项目目录，然后解压。工具推荐<code>winscp</code>,<code>FlashFXP</code>。</p><h3 id="6-1-3-git"><a href="#6-1-3-git" class="headerlink" title="6.1.3. git"></a>6.1.3. git</h3><p>需要有git的使用基础，如果还不会git或者对git有兴趣，可以查查廖大神的git教程。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">点我查看git教程</a></p><p>已经将项目上传至<code>github</code>或者<code>gitee</code>这样的远程仓库，然后在项目目录下<code>git clone</code>自己的项目下来即可。（如果是laravel或者tp5项目，记得<code>composer update</code>,laravel记得修改<code>.env</code>文件）</p><h3 id="6-1-4-其他"><a href="#6-1-4-其他" class="headerlink" title="6.1.4. 其他"></a>6.1.4. 其他</h3><p>如果服务器已经做过ssh免密码登陆。那么可以把项目打包成zip，然后通过scp<br>进行上传<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的 /Users/guaosi/Documents/www.guaosi.com.zip 的文件复制到ip为192.168.120.204的服务器上的</span></span><br><span class="line">scp /Users/guaosi/Documents/www.guaosi.com.zip  root<span class="variable">@192</span>.<span class="number">168.120</span>.<span class="number">204</span><span class="symbol">:/home/wwwroot/www</span>.guaosi.com</span><br><span class="line"><span class="comment"># 最后记得解压</span></span><br></pre></td></tr></table></figure></p><p>如果是从服务器上复制文件到本地<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从ip为192.168.120.204的服务器上，通过root登录，然后复制 /opt/soft/ 下的nginx-0.5.38.tar.gz 文件 到 本地的 /Users/guaosi/Documents 目录下</span></span><br><span class="line">scp root<span class="variable">@192</span>.<span class="number">168.120</span>.<span class="number">204</span><span class="symbol">:/opt/soft/nginx-</span><span class="number">0</span>.<span class="number">5.38</span>.tar.gz /Users/guaosi/Documents</span><br></pre></td></tr></table></figure></p><h2 id="6-2-遇到的问题"><a href="#6-2-遇到的问题" class="headerlink" title="6.2. 遇到的问题"></a>6.2. 遇到的问题</h2><p>说几个在<code>lnmp</code>集成环境下部署遇到的问题。</p><h3 id="6-2-1-多站点白屏问题"><a href="#6-2-1-多站点白屏问题" class="headerlink" title="6.2.1. 多站点白屏问题"></a>6.2.1. 多站点白屏问题</h3><p>一个服务器其实是可以部署多个项目的。那么，回到之前欠下的问题<code>如何知道最后要访问我们哪一个项目？</code><br>通过上面的虚拟站点配置文件，我们可以知道，我们为域名为<code>www.guaosi.com</code>专门指定了访问目录root为<code>/home/wwwroot/www.guaosi.com/public</code>。这样，当用户访问<code>www.guaosi.com</code>的时候，他的电脑会先去DNS服务器查询到<code>www.guaosi.com</code>解析的服务器IP地址，然后访问到这台服务器。因为访问的是<code>www.guaosi.com</code>，那么，nginx后找到配置文件中站点为<code>www.guaosi.com</code>,找到它对应的root指向目录，进行访问。</p><p>lnmp多站点(多项目)部署的时候，tp5会出现项目白屏的问题，报500错误。这是因为我们在vhost配置中的root指向的是<code>public</code>，这样一来，访问网址就不需要加<code>public</code>了，可是因为lnmp设置了目录访问权限，无法访问上级目录，所以需要进行修改。</p><p>1.修改<code>fastcgi.conf</code>的配置<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/fastcgi.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>2.然后在最后一行加入<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param PHP_ADMIN_VALUE $<span class="keyword">basedir </span>if_not_empty<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>3.保存退出</p><p>4.再修改<code>www.guaosi.com.conf</code>的配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>5.在<code>root</code>下面一行加入 <code>&quot;open_basedir=/home/wwwroot/www.guaosi.com/:/tmp/:/proc/&quot;;</code><br>完整配置参考<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#listen [::]:80;</span></span><br><span class="line">        <span class="attribute">server_name</span> www.guaosi.com ;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">        <span class="comment"># yii2</span></span><br><span class="line">        <span class="comment"># root  /home/wwwroot/www.guaosi.com/web;</span></span><br><span class="line">        <span class="comment"># thinkphp5跟laravel5</span></span><br><span class="line">        <span class="attribute">root</span>  /home/wwwroot/www.guaosi.com/public;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$basedir</span> <span class="string">"open_basedir=/home/wwwroot/www.guaosi.com/:/tmp/:/proc/"</span>;</span><br><span class="line">        <span class="attribute">include</span> rewrite/none.conf;</span><br><span class="line">        <span class="comment">#error_page   404   /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Deny access to PHP files in specific directory</span></span><br><span class="line">        <span class="comment">#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> enable-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># yii2 nginx规则</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">         <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">           <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.php <span class="literal">last</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># thinkphp5 nginx规则</span></span><br><span class="line">         <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /index.php?s=<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment"># laravel5 nginx规则</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span>      <span class="number">30d</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span>      <span class="number">12h</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /.well-known</span> &#123;</span><br><span class="line">            <span class="attribute">allow</span> all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /\.</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">access_log</span>  /home/wwwlogs/www.guaosi.com.log;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ol start="6"><li><p>保存退出</p></li><li><p>重启nginx</p></li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lnmp nginx restart</span></span><br></pre></td></tr></table></figure><ol start="8"><li>测试访问 <code>http://www.guaosi.com</code> 看看是否正常吧</li></ol><h3 id="6-2-2-添加SSL证书-HTTPS"><a href="#6-2-2-添加SSL证书-HTTPS" class="headerlink" title="6.2.2. 添加SSL证书(HTTPS)"></a>6.2.2. 添加SSL证书(HTTPS)</h3><p>在阿里云或者腾讯云购买的域名，可以免费申请ssl证书.申请通过后，下载并且上传到服务器上，解压。</p><p>修改修改<code>www.guaosi.com.conf</code>的配置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure></p><p>在 <code>listen 80;</code>后面加入下面代码<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span> 证书存在位置;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> 证书存在位置;</span><br></pre></td></tr></table></figure></p><p>参考案例<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">server</span></span><br><span class="line">    &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        listen <span class="number">443</span> ssl;</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate /usr/cert/www/ssl.crt;</span><br><span class="line">        ssl_certificate_key /usr/cert/www/ssl.key;</span><br><span class="line">        <span class="meta">#listen [::]:80;</span></span><br><span class="line">        server_name www.guaosi.com ;</span><br><span class="line">        <span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php <span class="keyword">default</span>.html <span class="keyword">default</span>.htm <span class="keyword">default</span>.php;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p><h3 id="6-2-3-强制跳转HTTPS"><a href="#6-2-3-强制跳转HTTPS" class="headerlink" title="6.2.3. 强制跳转HTTPS"></a>6.2.3. 强制跳转HTTPS</h3><p>如果想http强制https，只要<code>让80端口的强制重定向https</code>即可。可以参考这样设置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">#listen 80;</span></span><br><span class="line">        <span class="comment">#listen [::]:80;</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /usr/cert/cloud/ssl.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /usr/cert/cloud/ssl.key;</span><br><span class="line">        <span class="attribute">server_name</span> cloud.guaosi.com ;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">        <span class="attribute">root</span>  /home/wwwroot/cloud.guaosi.com/public;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$basedir</span> <span class="string">"open_basedir=/home/wwwroot/cloud.guaosi.com/:/tmp/:/proc/"</span>;</span><br><span class="line">        <span class="attribute">include</span> rewrite/none.conf;</span><br><span class="line">        <span class="comment">#error_page   404   /404.html;</span></span><br><span class="line">        <span class="comment"># Deny access to PHP files in specific directory</span></span><br><span class="line">        <span class="comment">#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> enable-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> cloud.guaosi.com ;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-2-4-无法删除项目"><a href="#6-2-4-无法删除项目" class="headerlink" title="6.2.4. 无法删除项目"></a>6.2.4. 无法删除项目</h3><p>因为LNMP 1.2开始PHP防跨目录限制使用<code>.user.ini</code>，该文件在网站根目录下，<code>.user.ini</code>文件无法直接修改。所以需要先解锁<code>.user.ini</code>文件。<br>执行下面的命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -<span class="selector-tag">i</span> /home/wwwroot/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span>/<span class="selector-class">.user</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-前提&quot;&gt;&lt;a href=&quot;#1-前提&quot; class=&quot;headerlink&quot; title=&quot;1. 前提&quot;&gt;&lt;/a&gt;1. 前提&lt;/h1&gt;&lt;p&gt;本文适合:&lt;/p&gt;
&lt;p&gt;1.已经在linux虚拟机上搭建过环境，可以正常访问的，但是没有搭建在真实服务器上。&lt;/p&gt;
&lt;p&gt;2.需要有略微的&lt;code&gt;linux&lt;/code&gt;基础。&lt;/p&gt;
&lt;p&gt;3.有自己的小项目或者demo，如果没有，会&lt;code&gt;composer&lt;/code&gt;安装框架也是可以的。&lt;/p&gt;
&lt;p&gt;因为本文适合偷懒使用，如果没有丝毫搭建经验的，所以我建议最好是创建一台虚拟机，自己手动安装&lt;code&gt;nginx&lt;/code&gt;,&lt;code&gt;php&lt;/code&gt;,&lt;code&gt;MySQL&lt;/code&gt;，让内网可以上线访问。有了相关的认识，再来看本文效果是最好的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="lnmp" scheme="https://www.guaosi.com/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>二维数组的巧妙整合</title>
    <link href="https://www.guaosi.com/2018/12/14/complex-two-dimensional-arrays/"/>
    <id>https://www.guaosi.com/2018/12/14/complex-two-dimensional-arrays/</id>
    <published>2018-12-14T06:58:15.000Z</published>
    <updated>2021-12-05T08:13:24.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>在工作中，经常会遇到多个多维数组或者orm对象数组需要整合的情况。通过整合好数据，然后输出给前端。</p><h1 id="2-数据"><a href="#2-数据" class="headerlink" title="2. 数据"></a>2. 数据</h1><p>比如现在，有2个orm对象，他们的表间关系存在不明显，互相没有做模型关联，但是id相同。</p><a id="more"></a><ol><li>$name_data对象数组(已转json格式，方便查看)</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>$order_data对象数组(已转json格式，方便查看)</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在我想把这2个orm对象数组整合成一个数组，方便前端调用，想转成的数据结构如下所示（已转json格式，方便查看）<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"1"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"2"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"3"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"4"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"5"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"6"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"7"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"8"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><h2 id="3-1-想法一"><a href="#3-1-想法一" class="headerlink" title="3.1. 想法一"></a>3.1. 想法一</h2><p>脑子里一闪间的想法，2个数组整合成一个，并且根据id来区别。容易，做2个foreach循环就行了，判断id相同的，放到一个数组里就行了，于是可能会想到了下面的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v)&#123;</span><br><span class="line">        <span class="keyword">if</span>($v-&gt;id == $val-&gt;id)&#123;</span><br><span class="line">            $data[<span class="string">'id'</span>] = $v-&gt;id;</span><br><span class="line">            $data[<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">            $data[<span class="string">'order_count'</span>] = $v-&gt;order_count;</span><br><span class="line">            $users_info[]=$data;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后的结果(已转json格式，方便查看)<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>很明显，这不是我们想要的结果。</p><h2 id="3-2-想法二"><a href="#3-2-想法二" class="headerlink" title="3.2. 想法二"></a>3.2. 想法二</h2><p>想法一的想法太武断，只考虑了2个ID相等的情况，没有考虑到不同，所以导致只做了一半的事情，答案不正确。再次经过考虑后，可能有了如下的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    $flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v)&#123;</span><br><span class="line">        <span class="keyword">if</span>($v-&gt;id == $val-&gt;id)&#123;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span><br><span class="line">            $flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!$flag)&#123;</span><br><span class="line">        $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span><br><span class="line">        $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行过后的结果(已转json格式，方便查看)<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"1"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"2"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"3"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"4"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"5"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"6"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"7"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"8"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这次，跟我们想要的结果很接近了。其实，这样已经可以传给我们的前端，让前端自己去判断处理了。</p><h2 id="3-3-想法三"><a href="#3-3-想法三" class="headerlink" title="3.3. 想法三"></a>3.3. 想法三</h2><p>那有没有一种简单点的办法，既可以实现我们要的数据结果，又简单方便好理解呢？答案是有的，其实想法二已经体现出来了，就是活用php的数组特性，充分利用id来判断相同可以整合的数据，于是想法三就诞生了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = $val-&gt;order_count;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'name'</span>] = $users_info[$val-&gt;id][<span class="string">'name'</span>]??<span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行过后的结果(已转json格式，方便查看)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"1"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"2"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"3"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"4"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"5"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"6"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"7"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"8"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>以上三种想法可以看出来，想法三具有以下三个特点:</p><ol><li>简单高效，想法一与想法二最大运行次数都是<code>m*n</code>次，然而想法三是<code>m+n</code>次，速度效率存在本质的区别。</li><li>可以实现我们想要的数据结构，并且相比想法二，减少了大量的逻辑代码。</li><li>活用php数组特性，利用id来区分以及整合数组，在我们的平时工作中，很经常会遇到类似相关的问题。</li></ol><p>虽然这里只是以两个对象数组为例，其实还可以更多应用到其他多维数组，多个数组整合之类的，灵活变通，类似问题都会迎刃而解。</p><h1 id="5-案例完整代码"><a href="#5-案例完整代码" class="headerlink" title="5. 案例完整代码"></a>5. 案例完整代码</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//制作名字与ID的对象数组</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">mockNameData</span><span class="params">($n)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $name_data = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span></span><br><span class="line"><span class="php">        $obj = <span class="keyword">new</span> \stdClass();</span></span><br><span class="line"><span class="php">        $obj-&gt;id = $i + <span class="number">1</span>;</span></span><br><span class="line"><span class="php">        $obj-&gt;name = <span class="string">'std_name_'</span> . $i;</span></span><br><span class="line"><span class="php">        $name_data[] = $obj;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $name_data;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//制作订单数量与ID的对象数组</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">mockOrderData</span><span class="params">($n)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $order_data = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span></span><br><span class="line"><span class="php">        $obj = <span class="keyword">new</span> \stdClass();</span></span><br><span class="line"><span class="php">        $obj-&gt;id = $i + <span class="number">2</span>;</span></span><br><span class="line"><span class="php">        $obj-&gt;order_count = $i * <span class="number">2</span>;</span></span><br><span class="line"><span class="php">        $order_data[] = $obj;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $order_data;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 想法一</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">think1</span><span class="params">($name_data, $order_data)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $users_info = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($v-&gt;id == $val-&gt;id) &#123;</span></span><br><span class="line"><span class="php">                $data[<span class="string">'id'</span>] = $v-&gt;id;</span></span><br><span class="line"><span class="php">                $data[<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">                $data[<span class="string">'order_count'</span>] = $v-&gt;order_count;</span></span><br><span class="line"><span class="php">                $users_info[] = $data;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $users_info;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//想法二</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">think2</span><span class="params">($name_data, $order_data)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $users_info = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        $flag = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($v-&gt;id == $val-&gt;id) &#123;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span></span><br><span class="line"><span class="php">                $flag = <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!$flag) &#123;</span></span><br><span class="line"><span class="php">            $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span></span><br><span class="line"><span class="php">            $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $users_info;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//想法三</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">think3</span><span class="params">($name_data, $order_data)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $users_info = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = $val-&gt;order_count;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'name'</span>] = $users_info[$val-&gt;id][<span class="string">'name'</span>] ?? <span class="string">''</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $users_info;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//设置虚拟数据的长度</span></span></span><br><span class="line"><span class="php">$n = <span class="number">5</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//设置虚拟数据的长度</span></span></span><br><span class="line"><span class="php">$m = <span class="number">7</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//制作名字与ID的对象数组</span></span></span><br><span class="line"><span class="php">$name_data = mockNameData($n);</span></span><br><span class="line"><span class="php"><span class="comment">////制作订单数量与ID的对象数组</span></span></span><br><span class="line"><span class="php">$order_data = mockOrderData($m);</span></span><br><span class="line"><span class="php"><span class="comment">//打印想法1</span></span></span><br><span class="line"><span class="php">print_r(think1($name_data, $order_data));</span></span><br><span class="line"><span class="php"><span class="comment">//打印想法2</span></span></span><br><span class="line"><span class="php">print_r(think2($name_data, $order_data));</span></span><br><span class="line"><span class="php"><span class="comment">//打印想法3</span></span></span><br><span class="line"><span class="php">print_r(think3($name_data, $order_data));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;在工作中，经常会遇到多个多维数组或者orm对象数组需要整合的情况。通过整合好数据，然后输出给前端。&lt;/p&gt;
&lt;h1 id=&quot;2-数据&quot;&gt;&lt;a href=&quot;#2-数据&quot; class=&quot;headerlink&quot; title=&quot;2. 数据&quot;&gt;&lt;/a&gt;2. 数据&lt;/h1&gt;&lt;p&gt;比如现在，有2个orm对象，他们的表间关系存在不明显，互相没有做模型关联，但是id相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>git pull或git checkout 后保持权限不变</title>
    <link href="https://www.guaosi.com/2018/12/06/git-auto-change/"/>
    <id>https://www.guaosi.com/2018/12/06/git-auto-change/</id>
    <published>2018-12-06T08:43:14.000Z</published>
    <updated>2021-12-05T08:13:24.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;服务器上的项目,一般都是使用用户组<code>www-data</code>或者<code>www</code>来保证权限安全,不会使用<code>root</code>的。但是<code>git pull</code>下来的新文件或者修改的文件,则会把原有的文件的权限更改为644,用户组改为root。</p><a id="more"></a><p>如下图所示:<br><img src="/assets/blogImg/git-auto-change-demo.png" alt="docker-mascot"></p><h1 id="2-危害"><a href="#2-危害" class="headerlink" title="2. 危害"></a>2. 危害</h1><p>例如<code>日志文件</code>，<code>异步程序</code>,<code>定时任务</code>,<code>配置文件</code>之类的，由于最后运行用户的用户不对或者权限不够，可能会导致异常退出,文件无法读取,日志无法写入等等。所以,这个问题是值得引起我们重视的。</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h1><h2 id="3-1-手动解决"><a href="#3-1-手动解决" class="headerlink" title="3.1. 手动解决"></a>3.1. 手动解决</h2><p>想法很简单，重新修改文件的权限。比如，回到站点上级目录，执行如下命令</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">chmod</span> -<span class="type">R</span> <span class="number">755</span> www.guaosi.com/</span><br><span class="line"><span class="meta"># 修改项目内所有文件为755权限</span></span><br><span class="line"><span class="title">chown</span> -<span class="type">R</span> www-<span class="class"><span class="keyword">data</span>:www-<span class="keyword">data</span> www.guaosi.com/</span></span><br><span class="line"><span class="meta"># 修改项目内所有文件的用户和用户组为www-data</span></span><br></pre></td></tr></table></figure><p>只要不嫌累，每次git pull 或者 git checkout . 后退回上级目录执行一次，还是可以舒舒服服解决这个问题的.</p><h2 id="3-2-git-hook函数"><a href="#3-2-git-hook函数" class="headerlink" title="3.2. git hook函数"></a>3.2. git hook函数</h2><p>接下来是这篇文章的重点了，我们可以使用git内置的钩子函数来解决这个问题.</p><p>先来看一下怎么操作:</p><h3 id="3-2-1-git-pull-操作"><a href="#3-2-1-git-pull-操作" class="headerlink" title="3.2.1. git pull 操作"></a>3.2.1. git pull 操作</h3><p>1.进入项目目录<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>2.进入.git目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">.git/hooks/</span></span><br></pre></td></tr></table></figure></p><p>3.新建post-merge文件<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="built_in">post</span>-<span class="built_in">merge</span></span><br></pre></td></tr></table></figure></p><p>4.写入钩子内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This is post-merge hook"</span></span><br><span class="line">chmod -R 755 ./* &amp;&amp; chown -R www-data:www-data ./*</span><br></pre></td></tr></table></figure></p><p>5.给予运行权限<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="built_in">post</span>-<span class="built_in">merge</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-2-git-checkout-操作"><a href="#3-2-2-git-checkout-操作" class="headerlink" title="3.2.2. git checkout 操作"></a>3.2.2. git checkout 操作</h3><p>1.进入项目目录<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>2.进入.git目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">.git/hooks/</span></span><br></pre></td></tr></table></figure></p><p>3.新建post-checkout文件<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim post-checkout</span></span><br></pre></td></tr></table></figure></p><p>4.写入钩子内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This is post-checkout hook"</span></span><br><span class="line">chmod -R 755 ./* &amp;&amp; chown -R www-data:www-data ./*</span><br></pre></td></tr></table></figure></p><p>5.给予运行权限<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="built_in">post</span>-checkout</span><br></pre></td></tr></table></figure></p><h3 id="3-2-3-原理"><a href="#3-2-3-原理" class="headerlink" title="3.2.3. 原理"></a>3.2.3. 原理</h3><p>看了钩子内容应该大家都明白了，其实就是把手动运行的内容放入了钩子函数。在执行<code>git pull</code>命令时，会自动调用<code>post-merge</code>。在执行<code>git checkout</code>时,会自动调用<code>git checkout</code>.这样我们以后就不用再操心，怕遗忘权限有没有修改的问题了.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;服务器上的项目,一般都是使用用户组&lt;code&gt;www-data&lt;/code&gt;或者&lt;code&gt;www&lt;/code&gt;来保证权限安全,不会使用&lt;code&gt;root&lt;/code&gt;的。但是&lt;code&gt;git pull&lt;/code&gt;下来的新文件或者修改的文件,则会把原有的文件的权限更改为644,用户组改为root。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.guaosi.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用基础</title>
    <link href="https://www.guaosi.com/2018/11/30/docker-basic/"/>
    <id>https://www.guaosi.com/2018/11/30/docker-basic/</id>
    <published>2018-11-30T03:39:18.000Z</published>
    <updated>2021-12-05T08:13:24.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-docker用来干什么"><a href="#1-docker用来干什么" class="headerlink" title="1. docker用来干什么"></a>1. docker用来干什么</h1><p>将做好的环境和代码，打包成镜像，可以让各个地方都可以直接使用，不再受到环境的限制。</p><h1 id="2-docker与虚拟机的区别"><a href="#2-docker与虚拟机的区别" class="headerlink" title="2. docker与虚拟机的区别"></a>2. docker与虚拟机的区别</h1><p>1.虚拟机是模拟整个操作系统，包括硬件部分<br>2.docker是使用linux容器，通过进程隔离，拥有自己的文件系统，不会跟宿主机产生错乱。<br>3.docker没有自己的内核，使用的是宿主机的内核。</p><a id="more"></a><p><img src="/assets/blogImg/docker-mascot.jpeg" alt="docker-mascot"></p><h1 id="3-docker三大要素"><a href="#3-docker三大要素" class="headerlink" title="3. docker三大要素"></a>3. docker三大要素</h1><ol><li>镜像</li><li>容器</li><li>仓库(用于云上存放镜像)<blockquote><p><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p></blockquote></li></ol><p>镜像就是模板。镜像好比类，容器是对象实例。</p><h2 id="3-1-需要正确的理解仓库-镜像-容器这几个概念"><a href="#3-1-需要正确的理解仓库-镜像-容器这几个概念" class="headerlink" title="3.1. 需要正确的理解仓库/镜像/容器这几个概念"></a>3.1. 需要正确的理解仓库/镜像/容器这几个概念</h2><p>Docker本身是一个容器运行载体货或之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成docker容器。image文件可以看做是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</p><p>1.image文件生成的容器实例，本身也是一个文件，称之为镜像文件。<br>2.一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器。<br>3.至于仓库，就是存放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</p><h1 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4. 安装docker"></a>4. 安装docker</h1><h2 id="4-1-在centos6上安装docker"><a href="#4-1-在centos6上安装docker" class="headerlink" title="4.1. 在centos6上安装docker"></a>4.1. 在centos6上安装docker</h2><p>至少要centos6.5以上。</p><p>1.yum install -y epel-release<br>2.yum install -y docker-io<br>3.安装后的配置文件: /etc/sysconfig/docker<br>4.启动Docker后台服务: service docker start<br>5.docker version验证</p><h2 id="4-2-在centos7上安装docker"><a href="#4-2-在centos7上安装docker" class="headerlink" title="4.2. 在centos7上安装docker"></a>4.2. 在centos7上安装docker</h2><p>官网安装教程:<br><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce</a><br>使用镜像仓库进行安装</p><p>1.安装gcc</p><blockquote><p>yum -y install gcc</p></blockquote><p>2.安装gcc-c++</p><blockquote><p>yum -y install gcc-c++</p></blockquote><p>3.卸载之前的docker(如果有装过)<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p><p>4.安装需要的软件包</p><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p></blockquote><p>5.设置stable镜像仓库</p><blockquote><p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><p>6.更新yum软件包索引</p><blockquote><p>yum makecache fast</p></blockquote><p>7.安装docker ce</p><blockquote><p>yum -y install docker-ce</p></blockquote><p>8.启动docker</p><blockquote><p>systemctl start docker </p></blockquote><p>9.测试</p><blockquote><p>docker version</p></blockquote><blockquote><p>docker run hello-world</p></blockquote><blockquote><p>docker images</p></blockquote><p>10.配置镜像加速</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line"><span class="comment">// 配置加速服务器</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>加速服务器</p><p>1.网易云<br>{“registry-mirrors”:[“<a href="http://hub-mirror.c.163.com&quot;]}" target="_blank" rel="noopener">http://hub-mirror.c.163.com&quot;]}</a></p><p>2.阿里云 (dev.alipay.com 里申请自己专属的线上hub)<br>{“registry-mirrors”:[“https://自己的专属hub.mirror.aliyuncs.com”]}</p><p>11.docker进程查看</p><blockquote><p>ps -ef|grep docker|grep -v grep</p></blockquote><p>12.卸载<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line">sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure></p><h1 id="5-使用阿里云镜像仓库"><a href="#5-使用阿里云镜像仓库" class="headerlink" title="5. 使用阿里云镜像仓库"></a>5. 使用阿里云镜像仓库</h1><p>注册地址</p><blockquote><p><a href="https://dev.aliyun.com" target="_blank" rel="noopener">https://dev.aliyun.com</a></p></blockquote><h2 id="5-1-centos6-修改镜像仓库"><a href="#5-1-centos6-修改镜像仓库" class="headerlink" title="5.1. centos6 修改镜像仓库"></a>5.1. centos6 修改镜像仓库</h2><blockquote><p>vim /etc/sysconfig/docker</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">other_args</span>=<span class="string">"--registry-mirror=https://自己的专属hub.mirror.aliyuncs.com"</span></span><br></pre></td></tr></table></figure><h2 id="5-2-centos7-修改镜像仓库"><a href="#5-2-centos7-修改镜像仓库" class="headerlink" title="5.2. centos7 修改镜像仓库"></a>5.2. centos7 修改镜像仓库</h2><blockquote><p>vim /etc/docker/daemon.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"registry-mirrors"</span>:[<span class="string">"https://自己的专属hub.mirror.aliyuncs.com"</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="6-docker的命令"><a href="#6-docker的命令" class="headerlink" title="6. docker的命令"></a>6. docker的命令</h1><h2 id="6-1-docker帮助命令"><a href="#6-1-docker帮助命令" class="headerlink" title="6.1. docker帮助命令"></a>6.1. docker帮助命令</h2><blockquote><p>docker version</p></blockquote><p>查看docker基础信息，版本号等等</p><blockquote><p>docker info</p></blockquote><p>查看docker详细信息，容器数量，内存等等</p><blockquote><p>docker –help</p></blockquote><p>查看docker命令</p><h2 id="6-2-docker镜像命令"><a href="#6-2-docker镜像命令" class="headerlink" title="6.2. docker镜像命令"></a>6.2. docker镜像命令</h2><h3 id="6-2-1-docker-images"><a href="#6-2-1-docker-images" class="headerlink" title="6.2.1. docker images"></a>6.2.1. docker images</h3><blockquote><p>docker images </p></blockquote><p>列出本地主机上的镜像</p><blockquote><p>docker images -a</p></blockquote><p>列出本地主机上的镜像(包括中间映象层)</p><blockquote><p>docker images -q</p></blockquote><p>列出本地主机上的所有镜像，而只显示Image ID的值</p><blockquote><p>docker images -qa</p></blockquote><p>a 加 q 的结合,列出本地主机上的镜像(包括中间映象层),而只显示Image ID的值</p><blockquote><p>docker images –digests</p></blockquote><p>显示镜像的摘要信息(DIGEST)</p><blockquote><p>docker images –no-trunc</p></blockquote><p>显示完整的镜像信息(完整的image id)</p><h3 id="6-2-2-docker-search"><a href="#6-2-2-docker-search" class="headerlink" title="6.2.2. docker search"></a>6.2.2. docker search</h3><p>去 <a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a> 上查找镜像。(拉下来还是根据自己配置的，如阿里云上拉)</p><blockquote><p>docker search php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列。</p><blockquote><p>docker search -s 30 php</p></blockquote><p>在docker官方hub上查找php并且stars超过30的镜像后进行罗列。</p><blockquote><p>docker search –no-trunc php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列,将DESCRIPTION完整的显示。</p><blockquote><p>docker search –automated php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列,将AUTOMATED是ok的进行显示。</p><h3 id="6-2-3-docker-pull"><a href="#6-2-3-docker-pull" class="headerlink" title="6.2.3. docker pull"></a>6.2.3. docker pull</h3><p>下载镜像</p><blockquote><p>docker pull php</p></blockquote><p>与 docker pull php:latest 相同，下载最新版。</p><blockquote><p>docker pull php:5.6</p></blockquote><p>下载php5.6版本</p><h3 id="6-2-4-docker-rmi"><a href="#6-2-4-docker-rmi" class="headerlink" title="6.2.4. docker rmi"></a>6.2.4. docker rmi</h3><p>删除镜像</p><blockquote><p>docker rmi hello-world</p></blockquote><p>相当于 docker rmi hello-world:3.2 ,删除最新版</p><blockquote><p>docker rmi -f hello-world</p></blockquote><p>强制删除</p><blockquote><p>docker rmi -f 2cb0d9787c4d</p></blockquote><p>根据镜像id进行强制删除</p><blockquote><p>docker rmi -f hello-world nginx php:5.6</p></blockquote><p>强制删除多个，默认删除latest版本</p><blockquote><p>docker rmi -f $(docker images -qa)</p></blockquote><p>强制清空删除所有镜像( $(docker images -qa) 相当于先找出所有的image id，包括中间映像层的，然后一口气全部删除)，是一种组合命令</p><h2 id="6-3-docker容器命令"><a href="#6-3-docker容器命令" class="headerlink" title="6.3. docker容器命令"></a>6.3. docker容器命令</h2><h3 id="6-3-1-docker-run"><a href="#6-3-1-docker-run" class="headerlink" title="6.3.1. docker run"></a>6.3.1. docker run</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world`</span></span><br></pre></td></tr></table></figure><p>先在本地查找是否有hello-world的镜像，没有再去远程镜像仓库查找。找到了镜像，会创建该镜像的容器出来然后运行。</p><blockquote><p>docker run -it centos</p></blockquote><p>-i 交互模式<br>-t 伪终端</p><p>以交互模式和伪终端模式运行centos。在一个镜像被run后，如果还在再run这个镜像，直接再执行这个命令即可，不会冲突。</p><blockquote><p>docker run -d centos</p></blockquote><p>以守护进程的形式在后台执行。但是，Docker容器后台运行，必须在容器中有一个前台进行的进程，一直挂起，否则docker容器就会自动退出.docker ps 里不会有显示</p><blockquote><p>docker run -d centos /bin/sh -c “while true;do echo hello world;sleep 2;done”</p></blockquote><p>运行容器的时候，同时让容器执行一段shell脚本，这个脚本永远为真，每隔2秒输出一次 “hello world”.此时docker ps 里会有显示</p><blockquote><p> docker run -it –name mycentos1 centos<br>以交互模式和伪终端模式运行centos,并且取别名为mycentos1</p></blockquote><p>在docker伪终端中</p><blockquote><p>docker run -it -p 8080:80 nginx</p></blockquote><p>以交互模式和伪终端模式运行nginx,此时暴露给宿主机的端口为8080，而docker容器内的端口为80(根据软件原来的端口定义).</p><blockquote><p>docker run -it -P nginx</p></blockquote><p>以交互模式和伪终端模式运行nginx,此时暴露给宿主机的端口是随机分配的，只能自己通过docker ps查看，而docker容器内的端口软件原来的端口定义.</p><p>或者以守护进程的形式启动</p><blockquote><p>docker run -d nginx</p></blockquote><p>无法进入交互可以使用</p><blockquote><p>docker exec -it 11165c51310d /bin/bash </p></blockquote><blockquote><p>exit</p></blockquote><p>代表退出当前docker并且停止，回到原有</p><blockquote><p>ctrl+p+q</p></blockquote><p>代表退出当前docker终端界面回到原有，docker容器后台运行</p><h3 id="6-3-2-docker-ps"><a href="#6-3-2-docker-ps" class="headerlink" title="6.3.2. docker ps"></a>6.3.2. docker ps</h3><blockquote><p>docker ps</p></blockquote><p>(宿主机)列出当前所有正在运行的容器</p><blockquote><p>docker ps -a</p></blockquote><p>列出所有当前+历史所有运行过的容器</p><blockquote><p>docker ps -l</p></blockquote><p>列出最近一次运行过的容器</p><blockquote><p>docker ps -n 3</p></blockquote><p>列出最近三次运行过的容器</p><blockquote><p>docker ps -qa</p></blockquote><p>精简显示所有当前+历史所有运行过的容器的CONTAINER ID</p><h3 id="6-3-3-docker-start"><a href="#6-3-3-docker-start" class="headerlink" title="6.3.3. docker start"></a>6.3.3. docker start</h3><blockquote><p>docker start be2ce65efe84</p></blockquote><p>根据CONTAINER ID，将已经停止的容器重新启动。</p><h3 id="6-3-4-docker-restart"><a href="#6-3-4-docker-restart" class="headerlink" title="6.3.4. docker restart"></a>6.3.4. docker restart</h3><blockquote><p>docker restart feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器重新启动。此时容器内的文件不会被清除。</p><h3 id="6-3-5-docker-stop"><a href="#6-3-5-docker-stop" class="headerlink" title="6.3.5. docker stop"></a>6.3.5. docker stop</h3><blockquote><p>docker stop feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器停止(缓慢安全停止)。再启动，所有文件复原。</p><h3 id="6-3-6-docker-kill"><a href="#6-3-6-docker-kill" class="headerlink" title="6.3.6. docker kill"></a>6.3.6. docker kill</h3><blockquote><p>docker kill feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器停止(立刻马上停)。再启动，所有文件复原。</p><h3 id="6-3-7-docker-rm"><a href="#6-3-7-docker-rm" class="headerlink" title="6.3.7. docker rm"></a>6.3.7. docker rm</h3><blockquote><p>docker rm feffc090ef3e</p></blockquote><p>根据CONTAINER ID，删除容器。</p><blockquote><p>docker rm $(docker ps -q)</p></blockquote><p>删除所有正在运行的容器</p><blockquote><p>docker rm $(docker ps -aq)</p></blockquote><p>删除所有正在运行和已经停止的容器</p><h3 id="6-3-8-重要"><a href="#6-3-8-重要" class="headerlink" title="6.3.8. 重要"></a>6.3.8. 重要</h3><blockquote><p>docker logs -f -t –tail 5 d14363d9eff8</p></blockquote><p>查看指定容器ID内的打印输出,-f 表示从最后开始,-t表示展示时间,–tail 表示一开始展示多少行</p><blockquote><p>docker top d14363d9eff8</p></blockquote><p>查看指定容器ID内的进程</p><blockquote><p>docker inspect d14363d9eff8</p></blockquote><p>查看指定容器ID的内部细节</p><blockquote><p>docker attach d14363d9eff8</p></blockquote><p>进入指定容器ID的正在运行的容器并以交互行模式进行交互.</p><blockquote><p>docker exec -it d14363d9eff8 /bin/bash</p></blockquote><p>进入指定容器ID的正在运行的容器并以交互行模式进行交互.</p><blockquote><p>docker exec -it 6a68ebda9254 ls -al /tmp</p></blockquote><p>返回指定容器ID的正在运行的容器中指定命令内容，但是不进入容器交互中</p><blockquote><p>docker cp 6a68ebda9254:/tmp/yum.log /usr/local</p></blockquote><p>复制指定容器ID的正在运行的容器内的文件到宿主机上</p><h1 id="7-docker镜像原理"><a href="#7-docker镜像原理" class="headerlink" title="7. docker镜像原理"></a>7. docker镜像原理</h1><h2 id="7-1-是什么"><a href="#7-1-是什么" class="headerlink" title="7.1. 是什么"></a>7.1. 是什么</h2><p>Union文件系统是Docker镜像的基础。Union文件系统(UnionFs)是一种分层，轻量级并且高薪更的文件系统。它支持对<code>文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</code><br>特征: 一次同时加载多个文件系统，但是从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。<br>说白了，就是类似与一个<code>同心圆</code>。比如tomcat，最底层是kernel，倒数第二层是centos，倒数第三层是jdk8，最外面一层是tomcat。</p><h2 id="7-2-加载原理"><a href="#7-2-加载原理" class="headerlink" title="7.2. 加载原理"></a>7.2. 加载原理</h2><p>Docker镜像的最底层是bootfs,就是linux系统的引导文件系统，这个是公用的。一般是rootfs不同，代表着kernel内核，比如centos和Ubuntu不同.   </p><h2 id="7-3-特点"><a href="#7-3-特点" class="headerlink" title="7.3. 特点"></a>7.3. 特点</h2><p>Docker镜像都是只读的。<br>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常称为“容器层”,”容器层”之下的都叫镜像层。<br>比如 tomcat,tomcat是容器层，jdk8，centos，kernel都是镜像层。</p><h2 id="7-4-docker-commit"><a href="#7-4-docker-commit" class="headerlink" title="7.4. docker commit"></a>7.4. docker commit</h2><p>因为docker的镜像是只读的，不允许修改，如果想修改成自己的。需要做成自己的镜像.</p><blockquote><p>docker commit -m ‘text’ -a ‘guaosi’ ce704066570d guaosi/nginx:1.2</p></blockquote><p>将当前运行的指定容器ID做成新的镜像，可以保存原来容器内修改的文件。-m 是注释 -a 是作者名称 . guaosi/nginx是规范写法,后面需要加上版本号。注意，启动的时候也需要带上这个版本号。</p><h1 id="8-docker容器数据卷"><a href="#8-docker容器数据卷" class="headerlink" title="8. docker容器数据卷"></a>8. docker容器数据卷</h1><h2 id="8-1-能干嘛"><a href="#8-1-能干嘛" class="headerlink" title="8.1. 能干嘛"></a>8.1. 能干嘛</h2><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><h3 id="8-1-1-特点"><a href="#8-1-1-特点" class="headerlink" title="8.1.1. 特点"></a>8.1.1. 特点</h3><ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li></ol><h2 id="8-2-作用"><a href="#8-2-作用" class="headerlink" title="8.2. 作用"></a>8.2. 作用</h2><p>容器的持久化 和 容器间继承+共享数据</p><h2 id="8-3-容器内添加数据券"><a href="#8-3-容器内添加数据券" class="headerlink" title="8.3. 容器内添加数据券"></a>8.3. 容器内添加数据券</h2><h3 id="8-3-1-使用-v命令直接添加"><a href="#8-3-1-使用-v命令直接添加" class="headerlink" title="8.3.1. 使用-v命令直接添加"></a>8.3.1. 使用-v命令直接添加</h3><p>添加数据券相当于目录映射,容器开启或者关闭都不会影响到宿主机映射的内容,宿主机与容器实时同步。第一个参数是宿主机要映射的文件夹，第二个参数是容器想要映射的文件夹。</p><blockquote><p>docker run -it -v /myHostFile:/myDockerFile:ro centos</p></blockquote><p>使用交互模式，可读可写添加数据券,2个文件可以不存在,系统会自动创建。此时容器对该文件夹具有可读可写的权限。</p><blockquote><p>docker run -it -v /myHostFile:/myDockerFile centos</p></blockquote><p>使用交互模式，可读添加数据券,2个文件可以不存在,系统会自动创建。此时容器对该文件夹具有可读的权限,无法进行任何写操作。</p><blockquote><p>docker inspect 4744cddb3964</p></blockquote><p>查看容器的详情，可以通过Binds看到对应的映射数据券，RWc查看是否可读可写。true代表可读可写，false代表只可读。</p><h3 id="8-3-2-DockerFile添加"><a href="#8-3-2-DockerFile添加" class="headerlink" title="8.3.2. DockerFile添加"></a>8.3.2. DockerFile添加</h3><p>DockerFile相当于image镜像的源文件</p><p>1.编写DockerFile文件<br>vim DockerFile(文件名随便)<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># volume test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/dataVolumeContainer1"</span>,<span class="string">"/dataVolumeContainer2"</span>]</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"finished,-------success1"</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>意思是集成centos这个镜像后，在容器的根目录下创建了2个数据券共享的文件夹,然后输出字符串，然后结束</p><p>最后的 /bin/bash相当于将<code>docker run -it xxx</code>转为<code>docker run -it xxx /bin/bash</code></p><p>2.构建DockerFile对应的镜像</p><blockquote><p>docker build -f /usr/local/DockerFile -t guaosi/centos .</p></blockquote><p>将编写好的DockerFile通过build命令创建出image镜像,DockerFile需要填写绝对路径，-t 后面写镜像的名称, . 代表镜像具体文件生成在当前目录下</p><p>3.检查</p><p>容器运行刚刚生成的镜像后，通过 <code>docker inspect ff146b4fccd5</code> 可以看到对应的容器数据券,<code>Source</code>字段代表宿主机上所映射的文件夹。宿主机与容器实时同步，可读可写.</p><h3 id="8-3-3-容器间数据共享-DockerFile"><a href="#8-3-3-容器间数据共享-DockerFile" class="headerlink" title="8.3.3. 容器间数据共享(DockerFile)"></a>8.3.3. 容器间数据共享(DockerFile)</h3><p>因为用DockerFile构建的镜像运行的容器，每一次运行宿主机上都会重新生成一个新的映射文件夹与之对应共享数据。此时同一镜像的不同容器想要想要进行数据共享，则需要<code>--volumes-from</code></p><p>测试过程</p><p>1.</p><blockquote><p>docker run -it –name dc01 guaosi/centos</p></blockquote><p>创建一个别名为dc01的guaosi/centos的容器</p><p>2.</p><blockquote><p>docker run -it –name dc02 –volumes-from dc01 guaosi/centos</p></blockquote><blockquote><p>docker run -it –name dc03 –volumes-from dc01 guaosi/centos</p></blockquote><p>创建一个别名为dc02和dc03的guaosi/centos的容器,同时这个容器继承别名为dc01的guaosi/centos容器的数据共享(继承最好是同一个镜像)</p><p>3.此时对dc01容器,dc02容器,dc03容器其中的任意一个进行修改或者删除，其他两个都会同步到，现在这三个容器是实时同步。</p><p>4.如果此时删除dc01容器这个父容器，那么剩下两个子容器依旧可以数据券共享，实时同步，不会有任何影响(包括dc01里的文件也健在)。就算dc04继承dc03然后删除dc03，那么dc04与dc02依旧可以数据共享。</p><p>总结: 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用为止(DockerFile)。</p><h1 id="9-dockerFile"><a href="#9-dockerFile" class="headerlink" title="9. dockerFile"></a>9. dockerFile</h1><h2 id="9-1-dockerfile构建过程解析"><a href="#9-1-dockerfile构建过程解析" class="headerlink" title="9.1. dockerfile构建过程解析"></a>9.1. dockerfile构建过程解析</h2><h3 id="9-1-1-dockerfile内容基础知识"><a href="#9-1-1-dockerfile内容基础知识" class="headerlink" title="9.1.1. dockerfile内容基础知识"></a>9.1.1. dockerfile内容基础知识</h3><p>1.每条保留字指令都必须为大写字母并且后面要跟随至少一个参数</p><p>2.指令按照从上到下，顺序执行</p><p>3.#代表注释</p><p>4.每条指令都会创建一个新的镜像层，并对镜像进行提交。</p><h3 id="9-1-2-docker执行dockerfile的大致流程"><a href="#9-1-2-docker执行dockerfile的大致流程" class="headerlink" title="9.1.2. docker执行dockerfile的大致流程"></a>9.1.2. docker执行dockerfile的大致流程</h3><p>1.docker从基础镜像运行一个容器</p><p>2.执行一条指令并对容器做出修改</p><p>3.执行类型docker commit的操作提交一个新的镜像层</p><p>4.docker再基于刚提交的镜像运行一个新容器</p><p>5.执行dockerfile的下一条指令直到所有指令都执行完。</p><h2 id="9-2-dockerfile体系结构-保留字指令"><a href="#9-2-dockerfile体系结构-保留字指令" class="headerlink" title="9.2. dockerfile体系结构(保留字指令)"></a>9.2. dockerfile体系结构(保留字指令)</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line"><span class="keyword">MAINTAINER</span>  镜像维护者的姓名和邮箱地址</span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  容器构建时需要运行的命令(容器中执行Linux的命令)</span></span><br><span class="line"><span class="bash">EXPOSE  当前容器对外暴露出的端口</span></span><br><span class="line"><span class="bash">WORKDIR  指定在创建容器之后，终端默认登陆进来的工作目录，一个落脚点</span></span><br><span class="line"><span class="bash">ENV  用来在构建镜像过程中设置环境变量，相当于是设定了变量，方便调用使用</span></span><br><span class="line"><span class="bash">ADD 将宿主机目录下的文件拷贝进镜像并且ADD会自动处理URL和解压tar压缩包</span></span><br><span class="line"><span class="bash">COPY  类似ADD，拷贝文件和目录到镜像中，但是不会自动解压。将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内&lt;目标路径&gt;位置</span></span><br><span class="line"><span class="bash">VOLUME  容器数据卷，用于数据保存和持久化工作</span></span><br><span class="line"><span class="bash">CMD  指定一个容器启动时要运行的命令，dockerfile中可以有多个CMD指令，构建时CMD都会运行。但是docker run时只有最后一个命令生效，并且CMD会被docker run之后的命令参数替代。(命令执行在容器)</span></span><br><span class="line"><span class="bash">ENTRYPOINT  指定一个容器启动时要运行的命令 ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数。ENTRYPOINT不会被docker run之后的命令参数替代，而是会被做成附加参数执行(命令执行在容器)</span></span><br><span class="line"><span class="bash">ONBUILD  当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，此时父镜像的onbuild被触发</span></span><br></pre></td></tr></table></figure><h2 id="9-3-案例"><a href="#9-3-案例" class="headerlink" title="9.3. 案例"></a>9.3. 案例</h2><h3 id="9-3-1-查看构建历史"><a href="#9-3-1-查看构建历史" class="headerlink" title="9.3.1. 查看构建历史"></a>9.3.1. 查看构建历史</h3><blockquote><p>docker history 镜像id</p></blockquote><h3 id="9-3-2-自定义镜像1-FROM-MAINTAINER-ENV-WORKDIR-RUN-EXPOSE"><a href="#9-3-2-自定义镜像1-FROM-MAINTAINER-ENV-WORKDIR-RUN-EXPOSE" class="headerlink" title="9.3.2. 自定义镜像1(FROM,MAINTAINER,ENV,WORKDIR,RUN,EXPOSE)"></a>9.3.2. 自定义镜像1(FROM,MAINTAINER,ENV,WORKDIR,RUN,EXPOSE)</h3><ol><li>编写dockerfile文件</li></ol><p>vim  myCentosDockerFile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> guaosi&lt;guaosi@vip.qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="bash">RUN yum -y install vim</span></span><br><span class="line"><span class="bash">RUN yum -y install net-tools</span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"success---------------ok"</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosDockerFile -t guaosi/centos:1.5 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>运行容器</li></ol><blockquote><p>docker run -it guaosi/centos:1.5</p></blockquote><h3 id="9-3-3-自定义镜像2-CMD-ENTRYPOINT"><a href="#9-3-3-自定义镜像2-CMD-ENTRYPOINT" class="headerlink" title="9.3.3. 自定义镜像2(CMD,ENTRYPOINT)"></a>9.3.3. 自定义镜像2(CMD,ENTRYPOINT)</h3><ol><li>编写dockerfile文件</li></ol><p>vim  myCentosIp</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"curl"</span>,<span class="string">"-s"</span>,<span class="string">"http://ip.cn"</span>]</span></span><br><span class="line"><span class="bash">//或者</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"curl"</span>,<span class="string">"-s"</span>,<span class="string">"http://ip.cn"</span>]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosIp -t guaosi/Ip:1.0 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>运行容器</li></ol><blockquote><p>docker run -it guaosi/Ip:1.0 -i</p></blockquote><p>CMD的不能追加参数，比如想再加一个 <code>-i</code> ,追加了会导致都被换掉，而ENTRYPOINT可以正确追加参数</p><h3 id="9-3-4-自定义镜像3-ONBUILD"><a href="#9-3-4-自定义镜像3-ONBUILD" class="headerlink" title="9.3.4. 自定义镜像3(ONBUILD)"></a>9.3.4. 自定义镜像3(ONBUILD)</h3><ol><li>编写dockerfile文件(父)</li></ol><p>vim  myCentosFather</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br><span class="line"><span class="bash">ONBUILD RUN <span class="built_in">echo</span> <span class="string">"father is extended"</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosFather -t guaosi/father:1.0 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>编写dockerfile文件(子)</li></ol><p>vim myCentosSon</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> guaosi/son</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br></pre></td></tr></table></figure><ol start="4"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentoSson -t guaosi/son:1.0 /usr/local/MyCenntos/</p></blockquote><h1 id="10-上传镜像到阿里云"><a href="#10-上传镜像到阿里云" class="headerlink" title="10. 上传镜像到阿里云"></a>10. 上传镜像到阿里云</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=guaosi@vip<span class="selector-class">.qq</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br><span class="line">$ sudo docker tag [ImageId] registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:[镜像版本号]</span><br><span class="line">$ sudo docker push registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p>ImageId 是镜像ID，镜像版本号是自己设定的版本号</p><p>示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=guaosi@vip<span class="selector-class">.qq</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br><span class="line">docker tag <span class="number">1309</span>e6c731d8 registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br><span class="line">docker push registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>上传成功后，可以搜索得到</p><p>下载验证</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-docker用来干什么&quot;&gt;&lt;a href=&quot;#1-docker用来干什么&quot; class=&quot;headerlink&quot; title=&quot;1. docker用来干什么&quot;&gt;&lt;/a&gt;1. docker用来干什么&lt;/h1&gt;&lt;p&gt;将做好的环境和代码，打包成镜像，可以让各个地方都可以直接使用，不再受到环境的限制。&lt;/p&gt;
&lt;h1 id=&quot;2-docker与虚拟机的区别&quot;&gt;&lt;a href=&quot;#2-docker与虚拟机的区别&quot; class=&quot;headerlink&quot; title=&quot;2. docker与虚拟机的区别&quot;&gt;&lt;/a&gt;2. docker与虚拟机的区别&lt;/h1&gt;&lt;p&gt;1.虚拟机是模拟整个操作系统，包括硬件部分&lt;br&gt;2.docker是使用linux容器，通过进程隔离，拥有自己的文件系统，不会跟宿主机产生错乱。&lt;br&gt;3.docker没有自己的内核，使用的是宿主机的内核。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.guaosi.com/tags/Docker/"/>
    
  </entry>
  
</feed>
