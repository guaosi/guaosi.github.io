<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guaosi的博客</title>
  <icon>https://www.gravatar.com/avatar/5c7dda047d9c4447cd2aaebf6fcc87ec</icon>
  <subtitle>白茶清欢无别事，我在等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//www.guaosi.com/"/>
  <updated>2018-12-04T08:01:05.714Z</updated>
  <id>//www.guaosi.com/</id>
  
  <author>
    <name>guaosi</name>
    <email>guaosi@vip.qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker常用基础</title>
    <link href="//www.guaosi.com/2018/11/30/docker-basic/"/>
    <id>//www.guaosi.com/2018/11/30/docker-basic/</id>
    <published>2018-11-30T03:39:18.000Z</published>
    <updated>2018-12-04T08:01:05.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-docker用来干什么"><a href="#1-docker用来干什么" class="headerlink" title="1. docker用来干什么"></a>1. docker用来干什么</h1><p>将做好的环境和代码，打包成镜像，可以让各个地方都可以直接使用，不再受到环境的限制。</p><h1 id="2-docker与虚拟机的区别"><a href="#2-docker与虚拟机的区别" class="headerlink" title="2. docker与虚拟机的区别"></a>2. docker与虚拟机的区别</h1><p>1.虚拟机是模拟整个操作系统，包括硬件部分<br>2.docker是使用linux容器，通过进程隔离，拥有自己的文件系统，不会跟宿主机产生错乱。<br>3.docker没有自己的内核，使用的是宿主机的内核。</p><a id="more"></a><p><img src="/assets/blogImg/docker-mascot.jpeg" alt="docker-mascot"></p><h1 id="3-docker三大要素"><a href="#3-docker三大要素" class="headerlink" title="3. docker三大要素"></a>3. docker三大要素</h1><ol><li>镜像</li><li>容器</li><li>仓库(用于云上存放镜像)<blockquote><p><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p></blockquote></li></ol><p>镜像就是模板。镜像好比类，容器是对象实例。</p><h2 id="3-1-需要正确的理解仓库-镜像-容器这几个概念"><a href="#3-1-需要正确的理解仓库-镜像-容器这几个概念" class="headerlink" title="3.1. 需要正确的理解仓库/镜像/容器这几个概念"></a>3.1. 需要正确的理解仓库/镜像/容器这几个概念</h2><p>Docker本身是一个容器运行载体货称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成docker容器。image文件可以看做是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</p><p>1.image文件生成的容器实例，本身也是一个文件，称之为镜像文件。<br>2.一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器。<br>3.至于仓库，就是存放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</p><h1 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4. 安装docker"></a>4. 安装docker</h1><h2 id="4-1-在centos6上安装docker"><a href="#4-1-在centos6上安装docker" class="headerlink" title="4.1. 在centos6上安装docker"></a>4.1. 在centos6上安装docker</h2><p>至少要centos6.5以上。</p><p>1.yum install -y epel-release<br>2.yum install -y docker-io<br>3.安装后的配置文件: /etc/sysconfig/docker<br>4.启动Docker后台服务: service docker start<br>5.docker version验证</p><h2 id="4-2-在centos7上安装docker"><a href="#4-2-在centos7上安装docker" class="headerlink" title="4.2. 在centos7上安装docker"></a>4.2. 在centos7上安装docker</h2><p>官网安装教程:<br><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce</a><br>使用镜像仓库进行安装</p><p>1.安装gcc</p><blockquote><p>yum -y install gcc</p></blockquote><p>2.安装gcc-c++</p><blockquote><p>yum -y install gcc-c++</p></blockquote><p>3.卸载之前的docker(如果有装过)<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p><p>4.安装需要的软件包</p><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p></blockquote><p>5.设置stable镜像仓库</p><blockquote><p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><p>6.更新yum软件包索引</p><blockquote><p>yum makecache fast</p></blockquote><p>7.安装docker ce</p><blockquote><p>yum -y install docker-ce</p></blockquote><p>8.启动docker</p><blockquote><p>systemctl start docker </p></blockquote><p>9.测试</p><blockquote><p>docker version</p></blockquote><blockquote><p>docker run hello-world</p></blockquote><blockquote><p>docker images</p></blockquote><p>10.配置镜像加速</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line"><span class="comment">// 配置加速服务器</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>加速服务器</p><p>1.网易云<br>{“registry-mirrors”:[“<a href="http://hub-mirror.c.163.com&quot;]}" target="_blank" rel="noopener">http://hub-mirror.c.163.com&quot;]}</a></p><p>2.阿里云 (dev.alipay.com 里申请自己专属的线上hub)<br>{“registry-mirrors”:[“https://自己的专属hub.mirror.aliyuncs.com”]}</p><p>11.docker进程查看</p><blockquote><p>ps -ef|grep docker|grep -v grep</p></blockquote><p>12.卸载<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line">sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure></p><h1 id="5-使用阿里云镜像仓库"><a href="#5-使用阿里云镜像仓库" class="headerlink" title="5. 使用阿里云镜像仓库"></a>5. 使用阿里云镜像仓库</h1><p>注册地址</p><blockquote><p><a href="https://dev.aliyun.com" target="_blank" rel="noopener">https://dev.aliyun.com</a></p></blockquote><h2 id="5-1-centos6-修改镜像仓库"><a href="#5-1-centos6-修改镜像仓库" class="headerlink" title="5.1. centos6 修改镜像仓库"></a>5.1. centos6 修改镜像仓库</h2><blockquote><p>vim /etc/sysconfig/docker</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">other_args</span>=<span class="string">"--registry-mirror=https://自己的专属hub.mirror.aliyuncs.com"</span></span><br></pre></td></tr></table></figure><h2 id="5-2-centos7-修改镜像仓库"><a href="#5-2-centos7-修改镜像仓库" class="headerlink" title="5.2. centos7 修改镜像仓库"></a>5.2. centos7 修改镜像仓库</h2><blockquote><p>vim /etc/docker/daemon.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"registry-mirrors"</span>:[<span class="string">"https://自己的专属hub.mirror.aliyuncs.com"</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="6-docker的命令"><a href="#6-docker的命令" class="headerlink" title="6. docker的命令"></a>6. docker的命令</h1><h2 id="6-1-docker帮助命令"><a href="#6-1-docker帮助命令" class="headerlink" title="6.1. docker帮助命令"></a>6.1. docker帮助命令</h2><blockquote><p>docker version</p></blockquote><p>查看docker基础信息，版本号等等</p><blockquote><p>docker info</p></blockquote><p>查看docker详细信息，容器数量，内存等等</p><blockquote><p>docker –help</p></blockquote><p>查看docker命令</p><h2 id="6-2-docker镜像命令"><a href="#6-2-docker镜像命令" class="headerlink" title="6.2. docker镜像命令"></a>6.2. docker镜像命令</h2><h3 id="6-2-1-docker-iamges"><a href="#6-2-1-docker-iamges" class="headerlink" title="6.2.1. docker iamges"></a>6.2.1. docker iamges</h3><blockquote><p>docker images </p></blockquote><p>列出本地主机上的镜像</p><blockquote><p>docker images -a</p></blockquote><p>列出本地主机上的镜像(包括中间映象层)</p><blockquote><p>docker images -q</p></blockquote><p>列出本地主机上的所有镜像，而只显示Image ID的值</p><blockquote><p>docker images -qa</p></blockquote><p>a 加 q 的结合,列出本地主机上的镜像(包括中间映象层),而只显示Image ID的值</p><blockquote><p>docker images –digests</p></blockquote><p>显示镜像的摘要信息(DIGEST)</p><blockquote><p>docker iamges –no-trunc</p></blockquote><p>显示完整的镜像信息(完整的image id)</p><h3 id="6-2-2-docker-search"><a href="#6-2-2-docker-search" class="headerlink" title="6.2.2. docker search"></a>6.2.2. docker search</h3><p>去 <a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a> 上查找镜像。(拉下来还是根据自己配置的，如阿里云上拉)</p><blockquote><p>docker search php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列。</p><blockquote><p>docker search -s 30 php</p></blockquote><p>在docker官方hub上查找php并且stars超过30的镜像后进行罗列。</p><blockquote><p>docker search –no-trunc php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列,将DESCRIPTION完整的显示。</p><blockquote><p>docker search –automated php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列,将AUTOMATED是ok的进行显示。</p><h3 id="6-2-3-docker-pull"><a href="#6-2-3-docker-pull" class="headerlink" title="6.2.3. docker pull"></a>6.2.3. docker pull</h3><p>下载镜像</p><blockquote><p>docker pull php</p></blockquote><p>与 docker pull php:latest 相同，下载最新版。</p><blockquote><p>docker pull php:5.6</p></blockquote><p>下载php5.6版本</p><h3 id="6-2-4-docker-rmi"><a href="#6-2-4-docker-rmi" class="headerlink" title="6.2.4. docker rmi"></a>6.2.4. docker rmi</h3><p>删除镜像</p><blockquote><p>docker rmi hello-world</p></blockquote><p>相当于 docker rmi hello-world:3.2 ,删除最新版</p><blockquote><p>docker rmi -f hello-world</p></blockquote><p>强制删除</p><blockquote><p>docker rmi -f 2cb0d9787c4d</p></blockquote><p>根据镜像id进行强制删除</p><blockquote><p>docker rmi -f hello-world nginx php:5.6</p></blockquote><p>强制删除多个，默认删除latest版本</p><blockquote><p>docker rmi -f $(docker images -qa)</p></blockquote><p>强制清空删除所有镜像( $(docker images -qa) 相当于先找出所有的image id，包括中间映像层的，然后一口气全部删除)，是一种组合命令</p><h2 id="6-3-docker容器命令"><a href="#6-3-docker容器命令" class="headerlink" title="6.3. docker容器命令"></a>6.3. docker容器命令</h2><h3 id="6-3-1-docker-run"><a href="#6-3-1-docker-run" class="headerlink" title="6.3.1. docker run"></a>6.3.1. docker run</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world`</span></span><br></pre></td></tr></table></figure><p>先在本地查找是否有hello-world的镜像，没有再去远程镜像仓库查找。找到了镜像，会创建该镜像的容器出来然后运行。</p><blockquote><p>docker run -it centos</p></blockquote><p>-i 交互模式<br>-t 伪终端</p><p>以交互模式和伪终端模式运行centos。在一个镜像被run后，如果还在再run这个镜像，直接再执行这个命令即可，不会冲突。</p><blockquote><p>docker run -d centos</p></blockquote><p>以守护进程的形式在后台执行。但是，Docker容器后台运行，必须在容器中有一个前台进行的进程，一直挂起，否则docker容器就会自动退出.docker ps 里不会有显示</p><blockquote><p>docker run -d centos /bin/sh -c “while true;do echo hello world;sleep 2;done”</p></blockquote><p>运行容器的时候，同时让容器执行一段shell脚本，这个脚本永远为真，每隔2秒输出一次 “hhello world”.此时docker ps 里会有显示</p><blockquote><p> docker run -it –name mycentos1 centos<br>以交互模式和伪终端模式运行centos,并且取别名为mycentos1</p></blockquote><p>在docker伪终端中</p><blockquote><p>docker run -it -p 8080:80 nginx</p></blockquote><p>以交互模式和伪终端模式运行nginx,此时暴露给宿主机的端口为8080，而docker容器内的端口为80(根据软件原来的端口定义).</p><blockquote><p>docker run -it -P nginx</p></blockquote><p>以交互模式和伪终端模式运行nginx,此时暴露给宿主机的端口是随机分配的，只能自己通过docker ps查看，而docker容器内的端口软件原来的端口定义.</p><p>或者以守护进程的形式启动</p><blockquote><p>docker run -d nginx</p></blockquote><p>无法进入交互可以使用</p><blockquote><p>docker exec -it 11165c51310d /bin/bash </p></blockquote><blockquote><p>exit</p></blockquote><p>代表退出当前docker并且停止，回到原有</p><blockquote><p>ctrl+p+q</p></blockquote><p>代表退出当前docker终端界面回到原有，docker容器后台运行</p><h3 id="6-3-2-docker-ps"><a href="#6-3-2-docker-ps" class="headerlink" title="6.3.2. docker ps"></a>6.3.2. docker ps</h3><blockquote><p>docker ps</p></blockquote><p>(宿主机)列出当前所有正在运行的容器</p><blockquote><p>docker ps -a</p></blockquote><p>列出所有当前+历史所有运行过的容器</p><blockquote><p>docker ps -l</p></blockquote><p>列出最近一次运行过的容器</p><blockquote><p>docker ps -n 3</p></blockquote><p>列出最近三次运行过的容器</p><blockquote><p>docker ps -qa</p></blockquote><p>精简显示所有当前+历史所有运行过的容器的CONTAINER ID</p><h3 id="6-3-3-docker-start"><a href="#6-3-3-docker-start" class="headerlink" title="6.3.3. docker start"></a>6.3.3. docker start</h3><blockquote><p>docker start be2ce65efe84</p></blockquote><p>根据CONTAINER ID，将已经停止的容器重新启动。</p><h3 id="6-3-4-docker-restart"><a href="#6-3-4-docker-restart" class="headerlink" title="6.3.4. docker restart"></a>6.3.4. docker restart</h3><blockquote><p>docker restart feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器重新启动。此时容器内的文件不会被清除。</p><h3 id="6-3-5-docker-stop"><a href="#6-3-5-docker-stop" class="headerlink" title="6.3.5. docker stop"></a>6.3.5. docker stop</h3><blockquote><p>docker stop feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器停止(缓慢安全停止)。再启动，所有文件复原。</p><h3 id="6-3-6-docker-kill"><a href="#6-3-6-docker-kill" class="headerlink" title="6.3.6. docker kill"></a>6.3.6. docker kill</h3><blockquote><p>docker kill feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器停止(立刻马上停)。再启动，所有文件复原。</p><h3 id="6-3-7-docker-rm"><a href="#6-3-7-docker-rm" class="headerlink" title="6.3.7. docker rm"></a>6.3.7. docker rm</h3><blockquote><p>docker rm feffc090ef3e</p></blockquote><p>根据CONTAINER ID，删除容器。</p><blockquote><p>docker rm $(docker ps -q)</p></blockquote><p>删除所有正在运行的容器</p><blockquote><p>docker rm $(docker ps -aq)</p></blockquote><p>删除所有正在运行和已经停止的容器</p><h3 id="6-3-8-重要"><a href="#6-3-8-重要" class="headerlink" title="6.3.8. 重要"></a>6.3.8. 重要</h3><blockquote><p>docker logs -f -t –tail 5 d14363d9eff8</p></blockquote><p>查看指定容器ID内的打印输出,-f 表示从最后开始,-t表示展示时间,–tail 表示一开始展示多少行</p><blockquote><p>docker top d14363d9eff8</p></blockquote><p>查看指定容器ID内的进程</p><blockquote><p>docker inspect d14363d9eff8</p></blockquote><p>查看指定容器ID的内部细节</p><blockquote><p>docker attach d14363d9eff8</p></blockquote><p>进入指定容器ID的正在运行的容器并以交互行模式进行交互.</p><blockquote><p>docker exec -it d14363d9eff8 /bin/bash</p></blockquote><p>进入指定容器ID的正在运行的容器并以交互行模式进行交互.</p><blockquote><p>docker exec -it 6a68ebda9254 ls -al /tmp</p></blockquote><p>返回指定容器ID的正在运行的容器中指定命令内容，但是不进入容器交互中</p><blockquote><p>docker cp 6a68ebda9254:/tmp/yum.log /usr/local</p></blockquote><p>复制指定容器ID的正在运行的容器内的文件到宿主机上</p><h1 id="7-docker镜像原理"><a href="#7-docker镜像原理" class="headerlink" title="7. docker镜像原理"></a>7. docker镜像原理</h1><h2 id="7-1-是什么"><a href="#7-1-是什么" class="headerlink" title="7.1. 是什么"></a>7.1. 是什么</h2><p>Union文件系统是Docker镜像的基础。Union文件系统(UnionFs)是一种分层，轻量级并且高薪更的文件系统。它支持对<code>文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</code><br>特征: 一次同时加载多个文件系统，但是从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。<br>说白了，就是类似与一个<code>同心圆</code>。比如tomcat，最底层是kernel，倒数第二层是centos，倒数第三层是jdk8，最外面一层是tomcat。</p><h2 id="7-2-加载原理"><a href="#7-2-加载原理" class="headerlink" title="7.2. 加载原理"></a>7.2. 加载原理</h2><p>Docker镜像的最底层是bootfs,就是linux系统的引导文件系统，这个是公用的。一般是rootfs不同，代表着kernel内核，比如centos和Ubuntu不同.   </p><h2 id="7-3-特点"><a href="#7-3-特点" class="headerlink" title="7.3. 特点"></a>7.3. 特点</h2><p>Docker镜像都是只读的。<br>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常称为“容器层”,”容器层”之下的都叫镜像层。<br>比如 tomcat,tomcat是容器层，jdk8，centos，kernel都是镜像层。</p><h2 id="7-4-docker-commit"><a href="#7-4-docker-commit" class="headerlink" title="7.4. docker commit"></a>7.4. docker commit</h2><p>因为docker的镜像是只读的，不允许修改，如果想修改成自己的。需要做成自己的镜像.</p><blockquote><p>docker commit -m ‘text’ -a ‘guaosi’ ce704066570d guaosi/nginx:1.2</p></blockquote><p>将当前运行的指定容器ID做成新的镜像，可以保存原来容器内修改的文件。-m 是注释 -a 是作者名称 . guaosi/nginx是规范写法,后面需要加上版本号。注意，启动的时候也需要带上这个版本号。</p><h1 id="8-docker容器数据卷"><a href="#8-docker容器数据卷" class="headerlink" title="8. docker容器数据卷"></a>8. docker容器数据卷</h1><h2 id="8-1-能干嘛"><a href="#8-1-能干嘛" class="headerlink" title="8.1. 能干嘛"></a>8.1. 能干嘛</h2><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><h3 id="8-1-1-特点"><a href="#8-1-1-特点" class="headerlink" title="8.1.1. 特点"></a>8.1.1. 特点</h3><ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li></ol><h2 id="8-2-作用"><a href="#8-2-作用" class="headerlink" title="8.2. 作用"></a>8.2. 作用</h2><p>容器的持久化 和 容器间继承+共享数据</p><h2 id="8-3-容器内添加数据券"><a href="#8-3-容器内添加数据券" class="headerlink" title="8.3. 容器内添加数据券"></a>8.3. 容器内添加数据券</h2><h3 id="8-3-1-使用-v命令直接添加"><a href="#8-3-1-使用-v命令直接添加" class="headerlink" title="8.3.1. 使用-v命令直接添加"></a>8.3.1. 使用-v命令直接添加</h3><p>添加数据券相当于目录映射,容器开启或者关闭都不会影响到宿主机映射的内容,宿主机与容器实时同步。第一个参数是宿主机要映射的文件夹，第二个参数是容器想要映射的文件夹。</p><blockquote><p>docker run -it -v /myHostFile:/myDockerFile:ro centos</p></blockquote><p>使用交互模式，可读可写添加数据券,2个文件可以不存在,系统会自动创建。此时容器对该文件夹具有可读可写的权限。</p><blockquote><p>docker run -it -v /myHostFile:/myDockerFile centos</p></blockquote><p>使用交互模式，可读添加数据券,2个文件可以不存在,系统会自动创建。此时容器对该文件夹具有可读的权限,无法进行任何写操作。</p><blockquote><p>docker inspect 4744cddb3964</p></blockquote><p>查看容器的详情，可以通过Binds看到对应的映射数据券，RWc查看是否可读可写。true代表可读可写，false代表只可读。</p><h3 id="8-3-2-DockerFile添加"><a href="#8-3-2-DockerFile添加" class="headerlink" title="8.3.2. DockerFile添加"></a>8.3.2. DockerFile添加</h3><p>DockerFile相当于image镜像的源文件</p><p>1.编写DockerFile文件<br>vim DockerFile(文件名随便)<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># volume test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/dataVolumeContainer1"</span>,<span class="string">"/dataVolumeContainer2"</span>]</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"finished,-------success1"</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>意思是集成centos这个镜像后，在容器的根目录下创建了2个数据券共享的文件夹,然后输出字符串，然后结束</p><p>最后的 /bin/bash相当于将<code>docker run -it xxx</code>转为<code>docker run -it xxx /bin/bash</code></p><p>2.构建DockerFile对应的镜像</p><blockquote><p>docker build -f /usr/local/DockerFile -t guaosi/centos .</p></blockquote><p>将编写好的DockerFile通过build命令创建出image镜像,DockerFile需要填写绝对路径，-t 后面写镜像的名称, . 代表镜像具体文件生成在当前目录下</p><p>3.检查</p><p>容器运行刚刚生成的镜像后，通过 <code>docker inspect ff146b4fccd5</code> 可以看到对应的容器数据券,<code>Source</code>字段代表宿主机上所映射的文件夹。宿主机与容器实时同步，可读可写.</p><h3 id="8-3-3-容器间数据共享-DockerFile"><a href="#8-3-3-容器间数据共享-DockerFile" class="headerlink" title="8.3.3. 容器间数据共享(DockerFile)"></a>8.3.3. 容器间数据共享(DockerFile)</h3><p>因为用DockerFile构建的镜像运行的容器，每一次运行宿主机上都会重新生成一个新的映射文件夹与之对应共享数据。此时同一镜像的不同容器想要想要进行数据共享，则需要<code>--volumes-from</code></p><p>测试过程</p><p>1.</p><blockquote><p>docker run -it –name dc01 guaosi/centos</p></blockquote><p>创建一个别名为dc01的guaosi/centos的容器</p><p>2.</p><blockquote><p>docker run -it –name dc02 –volumes-from dc01 guaosi/centos</p></blockquote><blockquote><p>docker run -it –name dc03 –volumes-from dc01 guaosi/centos</p></blockquote><p>创建一个别名为dc02和dc03的guaosi/centos的容器,同时这个容器继承别名为dc01的guaosi/centos容器的数据共享(继承最好是同一个镜像)</p><p>3.此时对dc01容器,dc02容器,dc03容器其中的任意一个进行修改或者删除，其他两个都会同步到，现在这三个容器是实时同步。</p><p>4.如果此时删除dc01容器这个父容器，那么剩下两个子容器依旧可以数据券共享，实时同步，不会有任何影响(包括dc01里的文件也健在)。就算dc04继承dc03然后删除dc03，那么dc04与dc02依旧可以数据共享。</p><p>总结: 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用为止(DockerFile)。</p><h1 id="9-dockerFile"><a href="#9-dockerFile" class="headerlink" title="9. dockerFile"></a>9. dockerFile</h1><h2 id="9-1-dockerfile构建过程解析"><a href="#9-1-dockerfile构建过程解析" class="headerlink" title="9.1. dockerfile构建过程解析"></a>9.1. dockerfile构建过程解析</h2><h3 id="9-1-1-dockerfile内容基础知识"><a href="#9-1-1-dockerfile内容基础知识" class="headerlink" title="9.1.1. dockerfile内容基础知识"></a>9.1.1. dockerfile内容基础知识</h3><p>1.每条保留字指令都必须为大写字母并且后面要跟随至少一个参数</p><p>2.指令按照从上到下，顺序执行</p><p>3.#代表注释</p><p>4.每条指令都会创建一个新的镜像层，并对镜像进行提交。</p><h3 id="9-1-2-docker执行dockerfile的大致流程"><a href="#9-1-2-docker执行dockerfile的大致流程" class="headerlink" title="9.1.2. docker执行dockerfile的大致流程"></a>9.1.2. docker执行dockerfile的大致流程</h3><p>1.docker从基础镜像运行一个容器</p><p>2.执行一条指令并对容器做出修改</p><p>3.执行类型docker commit的操作提交一个新的镜像层</p><p>4.docker再基于刚提交的镜像运行一个新容器</p><p>5.执行dockerfile的下一条指令直到所有指令都执行完。</p><h2 id="9-2-dockerfile体系结构-保留字指令"><a href="#9-2-dockerfile体系结构-保留字指令" class="headerlink" title="9.2. dockerfile体系结构(保留字指令)"></a>9.2. dockerfile体系结构(保留字指令)</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line"><span class="keyword">MAINTAINER</span>  镜像维护者的姓名和邮箱地址</span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  容器构建时需要运行的命令(容器中执行Linux的命令)</span></span><br><span class="line"><span class="bash">EXPOSE  当前容器对外暴露出的端口</span></span><br><span class="line"><span class="bash">WORKDIR  指定在创建容器之后，终端默认登陆进来的工作目录，一个落脚点</span></span><br><span class="line"><span class="bash">ENV  用来在构建镜像过程中设置环境变量，相当于是设定了变量，方便调用使用</span></span><br><span class="line"><span class="bash">ADD 将宿主机目录下的文件拷贝进镜像并且ADD会自动处理URL和解压tar压缩包</span></span><br><span class="line"><span class="bash">COPY  类似ADD，拷贝文件和目录到镜像中，但是不会自动解压。将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内&lt;目标路径&gt;位置</span></span><br><span class="line"><span class="bash">VOLUME  容器数据卷，用于数据保存和持久化工作</span></span><br><span class="line"><span class="bash">CMD  指定一个容器启动时要运行的命令，dockerfile中可以有多个CMD指令，构建时CMD都会运行。但是docker run时只有最后一个命令生效，并且CMD会被docker run之后的命令参数替代。(命令执行在容器)</span></span><br><span class="line"><span class="bash">ENTRYPOINT  指定一个容器启动时要运行的命令 ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数。ENTRYPOINT不会被docker run之后的命令参数替代，而是会被做成附加参数执行(命令执行在容器)</span></span><br><span class="line"><span class="bash">ONBUILD  当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，此时父镜像的onbuild被触发</span></span><br></pre></td></tr></table></figure><h2 id="9-3-案例"><a href="#9-3-案例" class="headerlink" title="9.3. 案例"></a>9.3. 案例</h2><h3 id="9-3-1-查看构建历史"><a href="#9-3-1-查看构建历史" class="headerlink" title="9.3.1. 查看构建历史"></a>9.3.1. 查看构建历史</h3><blockquote><p>docker history 镜像id</p></blockquote><h3 id="9-3-2-自定义镜像1-FROM-MAINTAINER-ENV-WORKDIR-RUN-EXPOSE"><a href="#9-3-2-自定义镜像1-FROM-MAINTAINER-ENV-WORKDIR-RUN-EXPOSE" class="headerlink" title="9.3.2. 自定义镜像1(FROM,MAINTAINER,ENV,WORKDIR,RUN,EXPOSE)"></a>9.3.2. 自定义镜像1(FROM,MAINTAINER,ENV,WORKDIR,RUN,EXPOSE)</h3><ol><li>编写dockerfile文件</li></ol><p>vim  myCentosDockerFile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> guaosi&lt;guaosi@vip.qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="bash">RUN yum -y install vim</span></span><br><span class="line"><span class="bash">RUN yum -y install net-tools</span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"success---------------ok"</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosDockerFile -t guaosi/centos:1.5 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>运行容器</li></ol><blockquote><p>docker run -it guaosi/centos:1.5</p></blockquote><h3 id="9-3-3-自定义镜像2-CMD-ENTRYPOINT"><a href="#9-3-3-自定义镜像2-CMD-ENTRYPOINT" class="headerlink" title="9.3.3. 自定义镜像2(CMD,ENTRYPOINT)"></a>9.3.3. 自定义镜像2(CMD,ENTRYPOINT)</h3><ol><li>编写dockerfile文件</li></ol><p>vim  myCentosIp</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"curl"</span>,<span class="string">"-s"</span>,<span class="string">"http://ip.cn"</span>]</span></span><br><span class="line"><span class="bash">//或者</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"curl"</span>,<span class="string">"-s"</span>,<span class="string">"http://ip.cn"</span>]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosIp -t guaosi/Ip:1.0 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>运行容器</li></ol><blockquote><p>docker run -it guaosi/Ip:1.0 -i</p></blockquote><p>CMD的不能追加参数，比如想再加一个 <code>-i</code> ,追加了会导致都被换掉，而ENTRYPOINT可以正确追加参数</p><h3 id="9-3-4-自定义镜像3-ONBUILD"><a href="#9-3-4-自定义镜像3-ONBUILD" class="headerlink" title="9.3.4. 自定义镜像3(ONBUILD)"></a>9.3.4. 自定义镜像3(ONBUILD)</h3><ol><li>编写dockerfile文件(父)</li></ol><p>vim  myCentosFather</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br><span class="line"><span class="bash">ONBUILD RUN <span class="built_in">echo</span> <span class="string">"father is extended"</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosFather -t guaosi/father:1.0 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>编写dockerfile文件(子)</li></ol><p>vim myCentosSon</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> guaosi/son</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br></pre></td></tr></table></figure><ol start="4"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentoSson -t guaosi/son:1.0 /usr/local/MyCenntos/</p></blockquote><h1 id="10-上传镜像到阿里云"><a href="#10-上传镜像到阿里云" class="headerlink" title="10. 上传镜像到阿里云"></a>10. 上传镜像到阿里云</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=guaosi@vip<span class="selector-class">.qq</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br><span class="line">$ sudo docker tag [ImageId] registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:[镜像版本号]</span><br><span class="line">$ sudo docker push registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p>ImageId 是镜像ID，镜像版本号是自己设定的版本号</p><p>示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=guaosi@vip<span class="selector-class">.qq</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br><span class="line">docker tag <span class="number">1309</span>e6c731d8 registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br><span class="line">docker push registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>上传成功后，可以搜索得到</p><p>下载验证</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-docker用来干什么&quot;&gt;&lt;a href=&quot;#1-docker用来干什么&quot; class=&quot;headerlink&quot; title=&quot;1. docker用来干什么&quot;&gt;&lt;/a&gt;1. docker用来干什么&lt;/h1&gt;&lt;p&gt;将做好的环境和代码，打包成镜像，可以让各个地方都可以直接使用，不再受到环境的限制。&lt;/p&gt;
&lt;h1 id=&quot;2-docker与虚拟机的区别&quot;&gt;&lt;a href=&quot;#2-docker与虚拟机的区别&quot; class=&quot;headerlink&quot; title=&quot;2. docker与虚拟机的区别&quot;&gt;&lt;/a&gt;2. docker与虚拟机的区别&lt;/h1&gt;&lt;p&gt;1.虚拟机是模拟整个操作系统，包括硬件部分&lt;br&gt;2.docker是使用linux容器，通过进程隔离，拥有自己的文件系统，不会跟宿主机产生错乱。&lt;br&gt;3.docker没有自己的内核，使用的是宿主机的内核。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="//www.guaosi.com/tags/docker/"/>
    
  </entry>
  
</feed>
