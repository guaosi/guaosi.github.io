<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guaosi的博客</title>
  <icon>https://www.gravatar.com/avatar/5c7dda047d9c4447cd2aaebf6fcc87ec</icon>
  <subtitle>白茶清欢无别事，我在等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.guaosi.com/"/>
  <updated>2019-03-17T05:07:35.697Z</updated>
  <id>https://www.guaosi.com/</id>
  
  <author>
    <name>guaosi</name>
    <email>guaosi@vip.qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang算法与数据结构：散列表(hashtable)</title>
    <link href="https://www.guaosi.com/2019/03/17/golang-hash-table/"/>
    <id>https://www.guaosi.com/2019/03/17/golang-hash-table/</id>
    <published>2019-03-17T05:04:28.000Z</published>
    <updated>2019-03-17T05:07:35.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>&#160; &#160; &#160; &#160;散列表(Hash table，也叫哈希表)，是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><a id="more"></a><h1 id="2-雇员的管理系统-增删改查"><a href="#2-雇员的管理系统-增删改查" class="headerlink" title="2. 雇员的管理系统[增删改查]"></a>2. 雇员的管理系统[增删改查]</h1><p>google 公司的一个上机题:<br>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工 的 id 时,要求查找到该员工的所有信息.</p><p><img src="/assets/blogImg/data-structures-and-algorithms/hashtable/hashtable.png" alt="hashtable"></p><p>要求:<br>1) 不使用数据库,尽量节省内存,速度越快越好=&gt;哈希表(散列)<br>2) 添加时，保证按照雇员的 id 从低到高插入</p><h2 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1. 思路"></a>2.1. 思路</h2><p>1) 使用链表来实现哈希表, 该链表不带表头[即: 链表的第一个结点就存放雇员信息] </p><p>2) 思路分析并画出示意图</p><p><img src="/assets/blogImg/data-structures-and-algorithms/hashtable/hashtable-emp.png" alt="hashtable-emp"></p><h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Emp <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">int</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Next *Emp <span class="comment">//链表连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emp)</span> <span class="title">ShowMe</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"id:%d,姓名:%s\n"</span>, this.Id, this.Name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emp)</span> <span class="title">UpdateMe</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">this.Name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Emplink <span class="keyword">struct</span> &#123;</span><br><span class="line">Head *Emp <span class="comment">//头指针，指向链表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法2 -- 单一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">Insert</span><span class="params">(emp *Emp)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//证明目前暂时没有节点，直接添加即可</span></span><br><span class="line">this.Head = emp</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//此时证明有成员，需要进行插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要根据大小插入</span></span><br><span class="line"></span><br><span class="line">tail := this.Head <span class="comment">//第一个雇员节点</span></span><br><span class="line">head := tail.Next <span class="comment">//下一个雇员节点</span></span><br><span class="line"><span class="keyword">if</span> tail.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//第一个雇员节点都比他大，证明他是最小的，放在第一位</span></span><br><span class="line">this.Head = emp</span><br><span class="line">emp.Next = tail</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//此时到了链表最后或者找到了插入位置</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tail = head</span><br><span class="line">head = head.Next</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tail.Next = emp</span><br><span class="line">emp.Next = head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单一显示</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">Show</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//链表为空</span></span><br><span class="line">fmt.Printf(<span class="string">"链表 %d 为空"</span>, i)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head := this.Head</span><br><span class="line">fmt.Printf(<span class="string">"链表 %d 信息: "</span>, i)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"编号:%d , 姓名:%s --&gt;"</span>, head.Id, head.Name)</span><br><span class="line">head = head.Next</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> *<span class="title">Emp</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head := this.Head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.Id == id &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line">head = head.Next</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Emplink)</span> <span class="title">DeleteById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//没有成员，无法删除</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//给2个指针，开始查找</span></span><br><span class="line">head := this.Head</span><br><span class="line">tail := head</span><br><span class="line"><span class="keyword">if</span> head.Id == id &#123;</span><br><span class="line"><span class="comment">//如果第一个就是，直接处理</span></span><br><span class="line">this.Head = head.Next</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//没有找到，直接退出</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head.Next.Id == id &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">head = head.Next</span><br><span class="line">tail = head</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走到这里说明找到了</span></span><br><span class="line">tail.Next = head.Next.Next</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Hashtable <span class="keyword">struct</span> &#123;</span><br><span class="line">LinkArr [<span class="number">7</span>]Emplink <span class="comment">//结构体数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">Insert1</span><span class="params">(emp *Emp)</span></span> &#123;</span><br><span class="line"><span class="comment">//根据哈希算法，找到数组下标</span></span><br><span class="line">linkNo := this.HashFun(emp.Id)</span><br><span class="line"></span><br><span class="line">emplink := this.LinkArr[linkNo]</span><br><span class="line"><span class="keyword">if</span> emplink.Head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//证明目前暂时没有节点，直接添加即可</span></span><br><span class="line">emplink.Head = emp</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//此时证明有成员，需要进行插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要根据大小插入</span></span><br><span class="line"></span><br><span class="line">tail := emplink.Head <span class="comment">//第一个雇员节点</span></span><br><span class="line">head := tail.Next    <span class="comment">//下一个雇员节点</span></span><br><span class="line"><span class="keyword">if</span> tail.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//第一个雇员节点都比他大，证明他是最小的，放在第一位</span></span><br><span class="line">emplink.Head = emp</span><br><span class="line">emp.Next = tail</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Id &gt;= emp.Id &#123;</span><br><span class="line"><span class="comment">//此时到了链表最后或者找到了插入位置</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tail = head</span><br><span class="line">head = head.Next</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tail.Next = emp</span><br><span class="line">emp.Next = head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为结构体数组本质还是结构体，结构体是值传递，上面修改不会影响当前值，所以要重新赋值一次。</span></span><br><span class="line">this.LinkArr[linkNo] = emplink</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法2 -- 所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">Insert2</span><span class="params">(emp *Emp)</span></span> &#123;</span><br><span class="line"><span class="comment">//根据哈希算法，找到数组下标</span></span><br><span class="line">linkNo := this.HashFun(emp.Id)</span><br><span class="line"></span><br><span class="line">this.LinkArr[linkNo].Insert(emp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">ShowAll</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(this.LinkArr); i++ &#123;</span><br><span class="line">this.LinkArr[i].Show(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">HashFun</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> id % <span class="built_in">len</span>(this.LinkArr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> *<span class="title">Emp</span></span> &#123;</span><br><span class="line">linkNo := this.HashFun(id)</span><br><span class="line"><span class="keyword">return</span> this.LinkArr[linkNo].FindById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hashtable)</span> <span class="title">DeleteById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">linkNo := this.HashFun(id)</span><br><span class="line"><span class="keyword">return</span> this.LinkArr[linkNo].DeleteById(id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">key := <span class="string">""</span></span><br><span class="line">id := <span class="number">0</span></span><br><span class="line">name := <span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> hashtable Hashtable</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"===============雇员系统菜单============"</span>)</span><br><span class="line">fmt.Println(<span class="string">"input 表示添加雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"show 表示显示雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"find 表示查找雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"edit 表示修改雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"del 表示删除雇员"</span>)</span><br><span class="line">fmt.Println(<span class="string">"exit 表示退出系统"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请输入你的选择"</span>)</span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"input"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">fmt.Println(<span class="string">"输入雇员 name"</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">emp := &amp;Emp&#123;</span><br><span class="line">Id:   id,</span><br><span class="line">Name: name&#125;</span><br><span class="line">hashtable.Insert2(emp)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">hashtable.ShowAll()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"find"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">emp := hashtable.FindById(id)</span><br><span class="line"><span class="keyword">if</span> emp == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"对不起，没有找到id为 %d 的雇员\n"</span>, id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emp.ShowMe()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"edit"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入要修改的雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">fmt.Println(<span class="string">"输入要修改雇员name的值"</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">emp := hashtable.FindById(id)</span><br><span class="line"><span class="keyword">if</span> emp == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"对不起，没有找到id为 %d 的雇员\n"</span>, id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emp.UpdateMe(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"del"</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入要删除的雇员 id"</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">ok := hashtable.DeleteById(id)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"对不起，没有找到id为 %d 的雇员\n"</span>, id)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"删除id为 %d 的雇员 成功\n"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;散列表(Hash table，也叫哈希表)，是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>golang算法与数据结构：栈(stack)</title>
    <link href="https://www.guaosi.com/2019/03/15/golang-stack/"/>
    <id>https://www.guaosi.com/2019/03/15/golang-stack/</id>
    <published>2019-03-15T15:38:29.000Z</published>
    <updated>2019-03-16T03:38:55.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>有些程序员也把栈称为堆栈, 即栈和堆栈是同一个概念<br>1) 栈的英文为(stack)<br>2) 栈是一个先入后出(FILO-First In Last Out)的有序列表。<br>3) 栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。<br>4) 根据堆栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p><a id="more"></a><h2 id="1-1-示意图"><a href="#1-1-示意图" class="headerlink" title="1.1. 示意图"></a>1.1. 示意图</h2><p>入栈</p><p><img src="/assets/blogImg/data-structures-and-algorithms/stack/push-stack.png" alt="push-stack"></p><p>出栈</p><p><img src="/assets/blogImg/data-structures-and-algorithms/stack/pop-stack.png" alt="pop-stack"></p><h2 id="1-2-场景"><a href="#1-2-场景" class="headerlink" title="1.2. 场景"></a>1.2. 场景</h2><p>1) 子程序的调用:在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再 将地址取出，以回到原来的程序中。<br>2) 处理递归调用:和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变 量等数据存入堆栈中。<br>3) 表达式的转换与求值。<br>4) 二叉树的遍历。<br>5) 图形的深度优先(depth 一 first)搜索法。</p><h2 id="1-3-案例"><a href="#1-3-案例" class="headerlink" title="1.3. 案例"></a>1.3. 案例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Stack struct &#123;</span><br><span class="line">maxNum int    <span class="comment">//规定栈最多放几个元素</span></span><br><span class="line">top    int    <span class="comment">//目前栈顶的下标</span></span><br><span class="line">arr    [<span class="number">5</span>]int <span class="comment">//模拟栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *Stack) Push(<span class="keyword">val</span> int) (err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.isFull() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack full"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack full"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始入栈操作</span></span><br><span class="line"><span class="comment">//先向上走一步</span></span><br><span class="line"><span class="keyword">this</span>.top++</span><br><span class="line"><span class="comment">//再赋值</span></span><br><span class="line"><span class="keyword">this</span>.arr[<span class="keyword">this</span>.top] = <span class="keyword">val</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Stack) Pop() (<span class="keyword">val</span> int, err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> = <span class="keyword">this</span>.arr[<span class="keyword">this</span>.top]</span><br><span class="line"><span class="keyword">this</span>.top--</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Stack) List() (err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">this</span>.top; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">fmt.Printf(<span class="string">"arr[%d]=%d\n"</span>, i, <span class="keyword">this</span>.arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *Stack) isFull() bool &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.top+<span class="number">1</span> &gt;= <span class="keyword">this</span>.maxNum</span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Stack) isEmpty() bool &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.top == -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="keyword">var</span> stack = &amp;Stack&#123;</span><br><span class="line">maxNum: <span class="number">5</span>,</span><br><span class="line">top:    -<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">stack.Push(<span class="number">1</span>)</span><br><span class="line">stack.Push(<span class="number">2</span>)</span><br><span class="line">stack.Push(<span class="number">3</span>)</span><br><span class="line">stack.Push(<span class="number">4</span>)</span><br><span class="line">stack.Push(<span class="number">5</span>)</span><br><span class="line">stack.List()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span>, _ := stack.Pop()</span><br><span class="line">fmt.Println(<span class="string">"弹出 "</span>, <span class="keyword">val</span>)</span><br><span class="line">stack.List()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-栈的计算表达式"><a href="#1-4-栈的计算表达式" class="headerlink" title="1.4. 栈的计算表达式"></a>1.4. 栈的计算表达式</h2><h3 id="1-4-1-分析"><a href="#1-4-1-分析" class="headerlink" title="1.4.1. 分析"></a>1.4.1. 分析</h3><p><img src="/assets/blogImg/data-structures-and-algorithms/stack/exp分析.png" alt="exp分析"></p><h3 id="1-4-2-实现"><a href="#1-4-2-实现" class="headerlink" title="1.4.2. 实现"></a>1.4.2. 实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stack <span class="keyword">struct</span> &#123;</span><br><span class="line">maxNum <span class="keyword">int</span>     <span class="comment">//规定栈最多放几个元素</span></span><br><span class="line">top    <span class="keyword">int</span>     <span class="comment">//目前栈顶的下标</span></span><br><span class="line">arr    [<span class="number">20</span>]<span class="keyword">int</span> <span class="comment">//模拟栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">Push</span><span class="params">(val <span class="keyword">int</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.isFull() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack full"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack full"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始入栈操作</span></span><br><span class="line"><span class="comment">//先向上走一步</span></span><br><span class="line">this.top++</span><br><span class="line"><span class="comment">//再赋值</span></span><br><span class="line">this.arr[this.top] = val</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="params">(val <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">val = this.arr[this.top]</span><br><span class="line">this.top--</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">List</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> this.isEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">"stack empty"</span>)</span><br><span class="line">err = errors.New(<span class="string">"stack empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := this.top; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">fmt.Printf(<span class="string">"arr[%d]=%d\n"</span>, i, this.arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">isFull</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.top+<span class="number">1</span> &gt;= this.maxNum</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.top == <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是不是运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">isOper</span><span class="params">(oper <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> oper == <span class="number">42</span> || oper == <span class="number">43</span> || oper == <span class="number">45</span> || oper == <span class="number">47</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">cal</span><span class="params">(num1, num2, oper <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//因为栈是先进后出，所以num2应该是第一个数，num1是第二个数</span></span><br><span class="line"><span class="keyword">switch</span> oper &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line"><span class="keyword">return</span> num2 * num1</span><br><span class="line"><span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line"><span class="keyword">return</span> num2 + num1</span><br><span class="line"><span class="keyword">case</span> <span class="number">45</span>:</span><br><span class="line"><span class="keyword">return</span> num2 - num1</span><br><span class="line"><span class="keyword">case</span> <span class="number">47</span>:</span><br><span class="line"><span class="keyword">return</span> num2 / num1</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"运算符错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回优先级</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Stack)</span> <span class="title">Priority</span><span class="params">(oper <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> oper == <span class="number">42</span> || oper == <span class="number">47</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> oper == <span class="number">43</span> || oper == <span class="number">45</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numStack := &amp;Stack&#123; <span class="comment">//数栈</span></span><br><span class="line">maxNum: <span class="number">20</span>,</span><br><span class="line">top:    <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line">operStack := &amp;Stack&#123; <span class="comment">//运算符栈</span></span><br><span class="line">maxNum: <span class="number">20</span>,</span><br><span class="line">top:    <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line">exp := <span class="string">"300+600*2-18*5"</span></span><br><span class="line">exp_len := <span class="built_in">len</span>(exp)</span><br><span class="line">num1 := <span class="number">0</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">oper := <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> num_str <span class="keyword">string</span></span><br><span class="line"><span class="comment">//将表达式入栈并且进行计算</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; exp_len; i++ &#123;</span><br><span class="line">ch := <span class="keyword">int</span>(exp[i]) <span class="comment">//返回的是asiic码值</span></span><br><span class="line"><span class="keyword">if</span> operStack.isOper(ch) &#123;</span><br><span class="line"><span class="comment">//如果放进去的是运算符</span></span><br><span class="line"><span class="comment">//需要先考虑是不是第一个元素</span></span><br><span class="line"><span class="keyword">if</span> operStack.isEmpty() &#123;</span><br><span class="line"><span class="comment">//如果是空，代表第一个元素，直接入栈</span></span><br><span class="line">operStack.Push(ch)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果不是第一个元素，则需要考虑，此时栈顶元素的优先级是否大于等于当前想要入栈的值</span></span><br><span class="line"><span class="keyword">if</span> operStack.Priority(operStack.arr[operStack.top]) &gt;= operStack.Priority(ch) &#123;</span><br><span class="line"><span class="comment">//无需担心数量是否不匹配，只要表达式正确，数量一定没问题</span></span><br><span class="line"><span class="comment">//从数栈中弹出2个</span></span><br><span class="line">num1, _ = numStack.Pop()</span><br><span class="line">num2, _ = numStack.Pop()</span><br><span class="line"><span class="comment">//运算符栈弹出一个</span></span><br><span class="line">oper, _ = operStack.Pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算结果入数栈（这里num1,num2顺序不能错乱，因为是先进后出）</span></span><br><span class="line">numStack.Push(numStack.cal(num1, num2, oper))</span><br><span class="line"><span class="comment">//运算符入运算符栈</span></span><br><span class="line">operStack.Push(ch)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不成立的话，证明运算符级别相同，直接入栈</span></span><br><span class="line">operStack.Push(ch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果放进去的是数字</span></span><br><span class="line"><span class="comment">//此时需要考虑，数字有几位数</span></span><br><span class="line"><span class="comment">//数字是否是最后一位</span></span><br><span class="line">temp := i</span><br><span class="line">num_str = <span class="keyword">string</span>(ch) <span class="comment">//将asiic用string强转，返回的是对应的字符</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> temp+<span class="number">1</span> != exp_len &amp;&amp; !operStack.isOper(<span class="keyword">int</span>(exp[temp+<span class="number">1</span>])) &#123;</span><br><span class="line"><span class="comment">//如果下一位既不是字符串最后一个或者不是运算符</span></span><br><span class="line"><span class="comment">//那么就加入到num_str,累计字符串</span></span><br><span class="line">num_str += <span class="keyword">string</span>(exp[temp+<span class="number">1</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//否则就是不符合，直接退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">temp++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将拼接后的字符串转为数字</span></span><br><span class="line">num, _ := strconv.Atoi(num_str)</span><br><span class="line"><span class="comment">//是数字就不需要考虑，直接入栈</span></span><br><span class="line">numStack.Push(num)</span><br><span class="line"><span class="comment">//同时，让for循环走到temp的位置</span></span><br><span class="line">i = temp</span><br><span class="line"><span class="comment">//清空内容</span></span><br><span class="line">num_str = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将栈内剩余的表达式再进行运算</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> operStack.isEmpty() &#123;</span><br><span class="line"><span class="comment">//如果运算符为空，证明全部计算完成，直接退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则进行计算</span></span><br><span class="line"></span><br><span class="line">num1, _ = numStack.Pop()</span><br><span class="line">num2, _ = numStack.Pop()</span><br><span class="line"><span class="comment">//运算符栈弹出一个</span></span><br><span class="line">oper, _ = operStack.Pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算结果入数栈（这里num1,num2顺序不能错乱，因为是先进后出）</span></span><br><span class="line">numStack.Push(numStack.cal(num1, num2, oper))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全部计算完成，弹出numStack就是结果</span></span><br><span class="line">result, _ := numStack.Pop()</span><br><span class="line">fmt.Printf(<span class="string">"%s = %v \n"</span>, exp, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;有些程序员也把栈称为堆栈, 即栈和堆栈是同一个概念&lt;br&gt;1) 栈的英文为(stack)&lt;br&gt;2) 栈是一个先入后出(FILO-First In Last Out)的有序列表。&lt;br&gt;3) 栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。&lt;br&gt;4) 根据堆栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>golang算法与数据结构：排序(sort)</title>
    <link href="https://www.guaosi.com/2019/03/15/golang-sort/"/>
    <id>https://www.guaosi.com/2019/03/15/golang-sort/</id>
    <published>2019-03-15T06:02:31.000Z</published>
    <updated>2019-03-16T04:16:48.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>排序是将一组数据，依指定的顺序进行排列的过程, 常见的排序:<br>1)冒泡排序<br>2)选择排序<br>3)插入排序<br>4)快速排序</p><a id="more"></a><h1 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2. 冒泡排序"></a>2. 冒泡排序</h1><h2 id="2-1-思想"><a href="#2-1-思想" class="headerlink" title="2.1. 思想"></a>2.1. 思想</h2><p>通过对待排序序列从后向前(从下标较大的元素开始) ,依次比较相邻元素的排序码，若发现逆序则交换，使排序码较小的元素逐渐从后部移向前部(从下标较大的单元移向下标较小的单元)，就象水底下的气泡一样逐渐向上冒。</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。 从而减少不必要的比较。</p><h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr *[6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr)-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">bubbleSort(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3. 选择排序"></a>3. 选择排序</h1><p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，经过和其他元素重整，再依原则交换位置后达到排序的目的。</p><h2 id="3-1-思想"><a href="#3-1-思想" class="headerlink" title="3.1. 思想"></a>3.1. 思想</h2><p>选择排序(select sorting)也是一种简单的排序方法。</p><p>它的基本思想是:第一次从 R[0]~R[n-1]中选 取最小值，与R[0]交换，第二次从 R[1]~R[n-1]中选取最小值，与R[1]交换，第三次从 R[2]~R[n-1]中选取最小值，与R[2]交换，…，第 i 次从 R[i-1]~R[n-1]中选取最小值，与 R[i-1]交换，…, 第 n-1 次从 R[n-2]~R[n-1]中选取最小值，与 R[n-2]交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p><h2 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2. 分析"></a>3.2. 分析</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/sort/selectsort.png" alt="selectsort"></p><h2 id="3-3-实现"><a href="#3-3-实现" class="headerlink" title="3.3. 实现"></a>3.3. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectSort</span><span class="params">(arr *[6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">maxIndex := i + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(arr); j++ &#123;</span><br><span class="line"><span class="comment">//找到最大的下标</span></span><br><span class="line"><span class="keyword">if</span> arr[maxIndex] &lt; arr[j] &#123;</span><br><span class="line">maxIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> arr[i] &lt; arr[maxIndex] &#123;</span><br><span class="line">arr[i], arr[maxIndex] = arr[maxIndex], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">selectSort(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-插入排序"><a href="#4-插入排序" class="headerlink" title="4. 插入排序"></a>4. 插入排序</h1><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p><h2 id="4-1-思想"><a href="#4-1-思想" class="headerlink" title="4.1. 思想"></a>4.1. 思想</h2><p>插入排序(Insertion Sorting)的基本思想是:把 n 个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，排序过程中每次从无序表中取出第一个 元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p><h2 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2. 分析"></a>4.2. 分析</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/sort/insertsort.png" alt="insertsort"></p><h2 id="4-3-实现"><a href="#4-3-实现" class="headerlink" title="4.3. 实现"></a>4.3. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSort</span><span class="params">(arr *[6]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">index := i - <span class="number">1</span>  <span class="comment">//指向当前元素的前一个元素下标</span></span><br><span class="line">value := arr[i] <span class="comment">//当前元素的值</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="number">0</span> &amp;&amp; arr[index] &lt; value &#123;</span><br><span class="line"><span class="comment">//证明还没有找到，需要继续往下找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把值往后复制</span></span><br><span class="line">arr[index+<span class="number">1</span>] = arr[index]</span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标往前挪动</span></span><br><span class="line">index--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//index &lt; 0 是用来判断是不是已经找完了数组的全部。</span></span><br><span class="line"><span class="comment">//如果找完了，证明就是最大</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有可能原地不动，此时就不要交换了</span></span><br><span class="line"><span class="keyword">if</span> index+<span class="number">1</span> != i &#123;</span><br><span class="line">arr[index+<span class="number">1</span>] = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">insertSort(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h1><p>快速排序(Quicksort)是对冒泡排序的一种改进。</p><h2 id="5-1-思想"><a href="#5-1-思想" class="headerlink" title="5.1. 思想"></a>5.1. 思想</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><h2 id="5-2-分析"><a href="#5-2-分析" class="headerlink" title="5.2. 分析"></a>5.2. 分析</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/sort/quicksort.png" alt="quicksort"></p><h2 id="5-3-实现"><a href="#5-3-实现" class="headerlink" title="5.3. 实现"></a>5.3. 实现</h2><p>以中点作为判断标准(与上面分析图找的判断标准不同，上面分析图找的是最右边)<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1. left 表示 数组左边的下标</span></span><br><span class="line"><span class="comment">//2. right 表示数组右边的下标</span></span><br><span class="line"><span class="comment">//3 array 表示要排序的数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">left</span> int, <span class="keyword">right</span> int, array *[<span class="number">11</span>]int)</span></span> &#123;</span><br><span class="line">l := <span class="keyword">left</span></span><br><span class="line">r := <span class="keyword">right</span></span><br><span class="line"><span class="comment">// pivot 是中轴， 支点</span></span><br><span class="line">pivot := array[(<span class="keyword">left</span>+<span class="keyword">right</span>)/<span class="number">2</span>]</span><br><span class="line"><span class="comment">//for 循环的目标是将比 pivot 小的数放到 左边 // 比 pivot 大的数放到 右边</span></span><br><span class="line"><span class="comment">//for 循环结束后无论pivot，在哪里。它的左边永远会比他小，它的右边永远比他大。</span></span><br><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line"><span class="comment">//从 pivot 的左边找到大于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> array[l] &lt; pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从 pivot 的右边边找到小于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> array[r] &gt; pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当l==r时，证明这一轮已经全部找完了，退出循环，进行递归</span></span><br><span class="line"><span class="keyword">if</span> l == r &#123;</span><br><span class="line">l++</span><br><span class="line">r--</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换有可能是2个大小的值在两边进行交换，也有可能是我们的中间值会被交换。</span></span><br><span class="line"><span class="comment">//不过结果都会是中间件的左边都是会比它小的数，右边都是比它大的数</span></span><br><span class="line">array[l], array[r] = array[r], array[l]</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面两步是因为l或者r其中有一个指向了中间值，进行了交换。</span></span><br><span class="line"><span class="comment">//交换位置后，另一个值刚刚跟中间值已经比较过一次了，所以直接跳过</span></span><br><span class="line"><span class="keyword">if</span> array[l] == pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> array[r] == pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向左递归</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">left</span> &lt; r &#123;</span><br><span class="line"><span class="type">QuickSort</span>(<span class="keyword">left</span>, r, array)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向右递归</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">right</span> &gt; l &#123;</span><br><span class="line"><span class="type">QuickSort</span>(l, <span class="keyword">right</span>, array)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [<span class="number">11</span>]int&#123;-<span class="number">9</span>, <span class="number">78</span>, <span class="number">0</span>, -<span class="number">900</span>, <span class="number">23</span>, -<span class="number">567</span>, <span class="number">70</span>, <span class="number">123</span>, <span class="number">90</span>, -<span class="number">23</span>, -<span class="number">1200</span>&#125;</span><br><span class="line">fmt.<span class="type">Println</span>(<span class="string">"初始"</span>, arr)</span><br><span class="line"><span class="comment">//调用快速排序</span></span><br><span class="line"><span class="type">QuickSort</span>(<span class="number">0</span>, len(arr)-<span class="number">1</span>, &amp;arr)</span><br><span class="line">fmt.<span class="type">Println</span>(<span class="string">"main.."</span>)</span><br><span class="line">fmt.<span class="type">Println</span>(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-4-提示"><a href="#5-4-提示" class="headerlink" title="5.4. 提示"></a>5.4. 提示</h2><p>可以先把递归代码注释，专门理解下面代码。这段代码的执行完毕后，设置的数，比它小的肯定都在它左边，比它大的都在它右边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line"><span class="comment">//从 pivot 的左边找到大于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">array</span>[l] &lt; pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从 pivot 的右边边找到小于等于 pivot 的值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">array</span>[r] &gt; pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当l==r时，证明这一轮已经全部找完了，退出循环，进行递归</span></span><br><span class="line"><span class="keyword">if</span> l == r &#123;</span><br><span class="line">l++</span><br><span class="line">r--</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换有可能是2个大小的值在两边进行交换，也有可能是我们的中间值会被交换。</span></span><br><span class="line"><span class="comment">//不过结果都会是中间件的左边都是会比它小的数，右边都是比它大的数</span></span><br><span class="line"><span class="built_in">array</span>[l], <span class="built_in">array</span>[r] = <span class="built_in">array</span>[r], <span class="built_in">array</span>[l]</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面两步是因为l或者r其中有一个指向了中间值，进行了交换。</span></span><br><span class="line"><span class="comment">//交换位置后，另一个值刚刚跟中间值已经比较过一次了，所以直接跳过</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">array</span>[l] == pivot &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">array</span>[r] == pivot &#123;</span><br><span class="line">l++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-时间对比"><a href="#6-时间对比" class="headerlink" title="6. 时间对比"></a>6. 时间对比</h1><h2 id="6-1-实现"><a href="#6-1-实现" class="headerlink" title="6.1. 实现"></a>6.1. 实现</h2><p>考虑到快排的速度，所以同一用毫秒作为单位。随机从90万中取8万个数据，进行排序，比较时间差<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">80000</span>]<span class="built_in">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">arr[i] = rand.Intn(<span class="number">900000</span>)</span><br><span class="line">&#125;</span><br><span class="line">start := <span class="built_in">time</span>.<span class="built_in">Now</span>().UnixNano()</span><br><span class="line">quickSort(<span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>, &amp;arr)</span><br><span class="line"><span class="keyword">end</span> := <span class="built_in">time</span>.<span class="built_in">Now</span>().UnixNano()</span><br><span class="line">fmt.Printf(<span class="string">"快速排序:%d 毫秒\n"</span>, (<span class="keyword">end</span>-start)/<span class="number">1000</span>/<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><h2 id="6-2-时间结果"><a href="#6-2-时间结果" class="headerlink" title="6.2. 时间结果"></a>6.2. 时间结果</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序<span class="selector-pseudo">:9086</span> 毫秒</span><br><span class="line">选择排序<span class="selector-pseudo">:5848</span> 毫秒</span><br><span class="line">插入排序<span class="selector-pseudo">:1254</span> 毫秒</span><br><span class="line">快速排序<span class="selector-pseudo">:7</span> 毫秒</span><br></pre></td></tr></table></figure><p>可以看出，快排是真的很快。以上四种都是单线程排序，快排碾压的原因是其一直在递归，每次排序都是排2个(因为2个指针调换元素)，所以会有这么惊人的速度。但是因为一直在使用递归函数，需要一直开辟新的空间，会耗费很大的cpu与内存。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;排序是将一组数据，依指定的顺序进行排列的过程, 常见的排序:&lt;br&gt;1)冒泡排序&lt;br&gt;2)选择排序&lt;br&gt;3)插入排序&lt;br&gt;4)快速排序&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>golang算法与数据结构：链表(linkedlist)</title>
    <link href="https://www.guaosi.com/2019/03/14/golang-linkedlist/"/>
    <id>https://www.guaosi.com/2019/03/14/golang-linkedlist/</id>
    <published>2019-03-14T00:42:44.000Z</published>
    <updated>2019-03-14T00:53:50.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>链表是有序的列表，但是它在内存中是存储如下:</p><p><img src="/assets/blogImg/data-structures-and-algorithms/linkedlist/linkedlist单链表示意图1.png" height="330" width="600"></p><a id="more"></a><h1 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2. 单链表"></a>2. 单链表</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1. 介绍"></a>2.1. 介绍</h2><p>单链表的示意图</p><p><img src="/assets/blogImg/data-structures-and-algorithms/linkedlist/linkedlist单链表示意图2.png" alt="linkedlist单链表示意图2"></p><p>说明:一般来说，为了比较好的对单链表进行增删改查的操作，我们都会给他设置一个头结点, 头结点的作用主要是用来标识链表头，本身这个结点不存放数据。</p><h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2. 实现"></a>2.2. 实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">type heroNode struct &#123;</span><br><span class="line">no       int</span><br><span class="line">name     string</span><br><span class="line">nickname string</span><br><span class="line">next     *heroNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新结点(直接最后添加)</span></span><br><span class="line">func insertHeroNode(head *heroNode, newNode *heroNode) &#123;</span><br><span class="line"><span class="comment">//这里传进来的一定要是个指针，否则结构体是值传递，每次都是重新复制一份，就丢失了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找最后一个结点</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//当下一个结点是空的时候，证明找到了最后的节点。</span></span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line">head<span class="selector-class">.next</span> = newNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有序插入新节点</span></span><br><span class="line">func insertHeroNode2(head *heroNode, newNode *heroNode) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。head = head.next不对让对外面的生效，因为是地址(引用)赋值。</span></span><br><span class="line"></span><br><span class="line">flag := true</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//如果下一个节点是空节点，则直接进行添加</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> head<span class="selector-class">.next</span><span class="selector-class">.no</span> &gt; newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line"><span class="comment">//因为链表一直都在排序，所以直接找到下一个链表进行符合条件的对比即可</span></span><br><span class="line"><span class="comment">// &gt; 表示从小到大排序  &lt; 表示从大到小排序</span></span><br><span class="line"><span class="comment">//如果想有相同值也能插入，在这里变成&gt;=或者&lt;=即可</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> head<span class="selector-class">.next</span><span class="selector-class">.no</span> == newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !flag &#123;</span><br><span class="line">fmt.Println(<span class="string">"插入失败，已经有相同编号了，no:"</span>, newNode.no)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode<span class="selector-class">.next</span> = head.next</span><br><span class="line">head<span class="selector-class">.next</span> = newNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表删除</span></span><br><span class="line">func deleteHeroNode(head *heroNode, id int) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。head = head.next不对让对外面的生效，因为是地址(引用)赋值。</span></span><br><span class="line"></span><br><span class="line">flag := false</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> head<span class="selector-class">.next</span><span class="selector-class">.no</span> == id &#123;</span><br><span class="line">flag = true</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//找到了，确实有这个节点</span></span><br><span class="line"><span class="comment">//这里2个next不会报错</span></span><br><span class="line"><span class="comment">//因为tempHead.next.next有可能是nil</span></span><br><span class="line">head<span class="selector-class">.next</span> = head<span class="selector-class">.next</span><span class="selector-class">.next</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有则提示</span></span><br><span class="line">fmt.Println(<span class="string">"没有找到对应节点，删除失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表显示</span></span><br><span class="line">func listHeroNode(head *heroNode) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对head进行操作，不会对外面的head产生影响。head = head.next不对让对外面的生效，因为是地址(引用)赋值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[%d %s %s]==&gt; "</span>, head<span class="selector-class">.next</span><span class="selector-class">.no</span>, head<span class="selector-class">.next</span><span class="selector-class">.name</span>, head<span class="selector-class">.next</span><span class="selector-class">.nickname</span>)</span><br><span class="line">head = head.next</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="comment">//1.先创建一个头结点，里面不包含内容</span></span><br><span class="line">head := &amp;heroNode&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.再创建一个数据结点</span></span><br><span class="line">hero1 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">1</span>,</span><br><span class="line">name:     <span class="string">"宋江"</span>,</span><br><span class="line">nickname: <span class="string">"及时雨"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero2 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">2</span>,</span><br><span class="line">name:     <span class="string">"卢俊义"</span>,</span><br><span class="line">nickname: <span class="string">"玉麒麟"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero3 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">3</span>,</span><br><span class="line">name:     <span class="string">"吴用"</span>,</span><br><span class="line">nickname: <span class="string">"智多星"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero4 := &amp;heroNode&#123;</span><br><span class="line">no:       <span class="number">4</span>,</span><br><span class="line">name:     <span class="string">"林冲"</span>,</span><br><span class="line">nickname: <span class="string">"豹子头"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero1)</span></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero2)</span></span><br><span class="line">insertHeroNode2(head, hero2)</span><br><span class="line">insertHeroNode2(head, hero3)</span><br><span class="line">insertHeroNode2(head, hero1)</span><br><span class="line">insertHeroNode2(head, hero4)</span><br><span class="line">listHeroNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">deleteHeroNode(head, <span class="number">4</span>)</span><br><span class="line">listHeroNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3. 缺点"></a>2.3. 缺点</h2><p>1)单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</p><p>2)单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们单链表删除时节点，总是找到temp的下一个节点来删除的</p><h1 id="3-双向链表"><a href="#3-双向链表" class="headerlink" title="3. 双向链表"></a>3. 双向链表</h1><h2 id="3-1-实现"><a href="#3-1-实现" class="headerlink" title="3.1. 实现"></a>3.1. 实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">type HeroNode struct &#123;</span><br><span class="line">no       int</span><br><span class="line">name     string</span><br><span class="line">nickname string</span><br><span class="line">pre      *HeroNode</span><br><span class="line">next     *HeroNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新结点(直接最后添加)</span></span><br><span class="line">func insertHeroNode(head *HeroNode, newNode *HeroNode) &#123;</span><br><span class="line"><span class="comment">//这里传进来的一定要是个指针，否则结构体是值传递，每次都是重新复制一份，就丢失了。</span></span><br><span class="line"></span><br><span class="line">tempHead := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line">&#125;</span><br><span class="line">tempHead<span class="selector-class">.next</span> = newNode</span><br><span class="line">newNode<span class="selector-class">.pre</span> = tempHead</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有序插入新节点</span></span><br><span class="line">func insertHeroNode2(head *HeroNode, newNode *HeroNode) &#123;</span><br><span class="line">tempHead := head</span><br><span class="line">flag := true</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//如果下一个节点是空节点，则直接进行添加</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.no</span> &gt; newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line"><span class="comment">//因为链表一直都在排序，所以直接找到下一个链表进行符合条件的对比即可</span></span><br><span class="line"><span class="comment">// &gt; 表示从小到大排序  &lt; 表示从大到小排序</span></span><br><span class="line"><span class="comment">//如果想有相同值也能插入，在这里变成&gt;=或者&lt;=即可</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.no</span> == newNode<span class="selector-class">.no</span> &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !flag &#123;</span><br><span class="line">fmt.Println(<span class="string">"插入失败，已经有相同编号了，no:"</span>, newNode.no)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode<span class="selector-class">.next</span> = tempHead.next</span><br><span class="line">newNode<span class="selector-class">.pre</span> = tempHead</span><br><span class="line">tempHead<span class="selector-class">.next</span> = newNode</span><br><span class="line"><span class="keyword">if</span> newNode<span class="selector-class">.next</span> != nil &#123;</span><br><span class="line">newNode<span class="selector-class">.next</span><span class="selector-class">.pre</span> = newNode</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表删除</span></span><br><span class="line">func deleteHeroNode(head *HeroNode, id int) &#123;</span><br><span class="line">tempHead := head</span><br><span class="line">flag := true</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.no</span> == id &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//没有则提示</span></span><br><span class="line">fmt.Println(<span class="string">"没有找到对应节点，删除失败"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span><span class="selector-class">.next</span> != nil &#123;</span><br><span class="line">tempHead<span class="selector-class">.next</span><span class="selector-class">.next</span><span class="selector-class">.pre</span> = tempHead</span><br><span class="line">&#125;</span><br><span class="line">tempHead<span class="selector-class">.next</span> = tempHead<span class="selector-class">.next</span><span class="selector-class">.next</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表显示(正向)</span></span><br><span class="line">func listHeroNode(head *HeroNode) &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempNode := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[%d %s %s]==&gt; "</span>, tempNode<span class="selector-class">.next</span><span class="selector-class">.no</span>, tempNode<span class="selector-class">.next</span><span class="selector-class">.name</span>, tempNode<span class="selector-class">.next</span><span class="selector-class">.nickname</span>)</span><br><span class="line">tempNode = tempNode.next</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表显示(反向)</span></span><br><span class="line">func listHeroNode2(head *HeroNode) &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempHead := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">tempHead = tempHead.next</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时到了最后一个</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[%d %s %s]==&gt; "</span>, tempHead<span class="selector-class">.no</span>, tempHead<span class="selector-class">.name</span>, tempHead.nickname)</span><br><span class="line"><span class="keyword">if</span> tempHead<span class="selector-class">.pre</span> != nil &amp;&amp; tempHead<span class="selector-class">.pre</span><span class="selector-class">.no</span> != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//去掉头结点</span></span><br><span class="line">tempHead = tempHead.pre</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="comment">//1.先创建一个头结点，里面不包含内容</span></span><br><span class="line">head := &amp;HeroNode&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.再创建一个数据结点</span></span><br><span class="line">hero1 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">1</span>,</span><br><span class="line">name:     <span class="string">"宋江"</span>,</span><br><span class="line">nickname: <span class="string">"及时雨"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero2 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">2</span>,</span><br><span class="line">name:     <span class="string">"卢俊义"</span>,</span><br><span class="line">nickname: <span class="string">"玉麒麟"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero3 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">3</span>,</span><br><span class="line">name:     <span class="string">"吴用"</span>,</span><br><span class="line">nickname: <span class="string">"智多星"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hero4 := &amp;HeroNode&#123;</span><br><span class="line">no:       <span class="number">4</span>,</span><br><span class="line">name:     <span class="string">"林冲"</span>,</span><br><span class="line">nickname: <span class="string">"豹子头"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero1)</span></span><br><span class="line"><span class="comment">// insertHeroNode(head, hero2)</span></span><br><span class="line">insertHeroNode2(head, hero2)</span><br><span class="line">insertHeroNode2(head, hero3)</span><br><span class="line">insertHeroNode2(head, hero1)</span><br><span class="line">insertHeroNode2(head, hero4)</span><br><span class="line">listHeroNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">deleteHeroNode(head, <span class="number">2</span>)</span><br><span class="line">listHeroNode2(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-环形链表"><a href="#4-环形链表" class="headerlink" title="4. 环形链表"></a>4. 环形链表</h1><h2 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1. 介绍"></a>4.1. 介绍</h2><p><img src="/assets/blogImg/data-structures-and-algorithms/linkedlist/circle_linked.png" alt="circle_linked"></p><h2 id="4-2-实现"><a href="#4-2-实现" class="headerlink" title="4.2. 实现"></a>4.2. 实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">type CatNode struct &#123;</span><br><span class="line">no   int</span><br><span class="line">name string</span><br><span class="line">next *CatNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func insertCatNode(head *CatNode, newNode *CatNode) &#123;</span><br><span class="line"><span class="comment">//环形链表需要把头节点也作为一部分</span></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line"><span class="comment">//如果头结点的next为空，证明此时只有一个头结点</span></span><br><span class="line"><span class="comment">//需要给头结点填充数据</span></span><br><span class="line">head<span class="selector-class">.no</span> = newNode.no</span><br><span class="line">head<span class="selector-class">.name</span> = newNode.name</span><br><span class="line">head<span class="selector-class">.next</span> = head <span class="comment">//让下一个节点先指向自己。自己指向自己，也算是环形链表</span></span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempNode := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == head &#123;</span><br><span class="line"><span class="comment">//证明此时是最后一个节点了。在这里插入</span></span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempNode = tempNode.next</span><br><span class="line">&#125;</span><br><span class="line">tempNode<span class="selector-class">.next</span> = newNode</span><br><span class="line">newNode<span class="selector-class">.next</span> = head</span><br><span class="line">&#125;</span><br><span class="line">func circleListCatNode(head *CatNode) &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"环形链表为空"</span>)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">tempNode := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(tempNode)</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == head &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">tempNode = tempNode.next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func delelteCatNode(head *CatNode, id int) *CatNode &#123;</span><br><span class="line"><span class="comment">//需要将头结点返回，因为这里面有可能让头结点head换了个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.先判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.再判断链表是否只有一个头结点</span></span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.next</span> == head &#123;</span><br><span class="line"><span class="keyword">if</span> head<span class="selector-class">.no</span> == id &#123;</span><br><span class="line">head<span class="selector-class">.next</span> = nil <span class="comment">//因为我们设置认为，当头结点的下一个元素为nil时，则表示这个链表为空</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"对不起，没有找到，删除失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.制作两个辅助指针，一个指向头，一个指向尾</span></span><br><span class="line">tempNode := head</span><br><span class="line">helper := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//指到尾</span></span><br><span class="line"><span class="keyword">if</span> helper<span class="selector-class">.next</span> == head &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.next</span><br><span class="line">&#125;</span><br><span class="line">flag := true</span><br><span class="line"><span class="comment">//4.开始判断</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.next</span> == head &#123;</span><br><span class="line"><span class="comment">//证明已经到了最后一个元素，但是最后一个元素还没有进行比较</span></span><br><span class="line">break</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tempNode<span class="selector-class">.no</span> == id &#123;</span><br><span class="line"><span class="comment">//找到了节点，进行删除。</span></span><br><span class="line"><span class="keyword">if</span> tempNode == head &#123;</span><br><span class="line"><span class="comment">//证明是才刚刚开始，还在头结点时找到了。</span></span><br><span class="line"><span class="comment">//则让头指针先指向下一个</span></span><br><span class="line">head = head.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将这个节点跳过删除</span></span><br><span class="line">helper<span class="selector-class">.next</span> = tempNode.next</span><br><span class="line">fmt.Printf(<span class="string">"找到了，进行删除\n"</span>)</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正常往下走</span></span><br><span class="line"><span class="comment">//没有找到正常往下走</span></span><br><span class="line">tempNode = tempNode.next</span><br><span class="line">helper = helper.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//证明在上面没有找到删除</span></span><br><span class="line"><span class="comment">//此时是因为走到了最后一个元素，但是没有进行比较</span></span><br><span class="line"><span class="keyword">if</span> tempNode<span class="selector-class">.no</span> == id &#123;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line">helper<span class="selector-class">.next</span> = tempNode.next</span><br><span class="line">fmt.Printf(<span class="string">"找到了，进行删除\n"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"对不起，没有找到，删除失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line"><span class="selector-tag">var</span> head *CatNode = &amp;CatNode&#123;&#125;</span><br><span class="line">cat1 := &amp;CatNode&#123;</span><br><span class="line">no:   <span class="number">1</span>,</span><br><span class="line">name: <span class="string">"小黄猫"</span>,</span><br><span class="line">&#125;</span><br><span class="line">cat2 := &amp;CatNode&#123;</span><br><span class="line">no:   <span class="number">2</span>,</span><br><span class="line">name: <span class="string">"小红猫"</span>,</span><br><span class="line">&#125;</span><br><span class="line">cat3 := &amp;CatNode&#123;</span><br><span class="line">no:   <span class="number">3</span>,</span><br><span class="line">name: <span class="string">"小花猫"</span>,</span><br><span class="line">&#125;</span><br><span class="line">insertCatNode(head, cat1)</span><br><span class="line">insertCatNode(head, cat2)</span><br><span class="line">insertCatNode(head, cat3)</span><br><span class="line">circleListCatNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">head = delelteCatNode(head, <span class="number">1</span>)</span><br><span class="line">circleListCatNode(head)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-约瑟夫-Josephu"><a href="#5-约瑟夫-Josephu" class="headerlink" title="5. 约瑟夫(Josephu)"></a>5. 约瑟夫(Josephu)</h1><h2 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1. 问题"></a>5.1. 问题</h2><p>设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k(1&lt;=k&lt;=n)的人从 1开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推， 直到所有人出列为止，由此产生一个出队编号的序列。</p><h2 id="5-2-提示"><a href="#5-2-提示" class="headerlink" title="5.2. 提示"></a>5.2. 提示</h2><p>用一个不带头结点的循环链表来处理 Josephu 问题:先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又 从 1 开始计数，直到最后一个结点从链表中删除算法结束。</p><h2 id="5-3-实现"><a href="#5-3-实现" class="headerlink" title="5.3. 实现"></a>5.3. 实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Boy <span class="keyword">struct</span> &#123;</span><br><span class="line">no   <span class="keyword">int</span></span><br><span class="line">next *Boy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddBoy</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="params">(head *Boy)</span></span> &#123;</span><br><span class="line"><span class="comment">//返回一个头指针</span></span><br><span class="line"></span><br><span class="line">helper := &amp;Boy&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"无法构建，退出"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= num; i++ &#123;</span><br><span class="line">boy := &amp;Boy&#123;</span><br><span class="line">no: i,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先看看是不是第一个元素，是一个元素需要特别处理</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">head = boy</span><br><span class="line"><span class="comment">//辅助指针跟着移动</span></span><br><span class="line">helper = boy</span><br><span class="line"><span class="comment">//因为是第一个元素，让其自己指向自己</span></span><br><span class="line">head.next = head</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">helper.next = boy</span><br><span class="line">helper = boy</span><br><span class="line"><span class="comment">//指向头指针，完成环形</span></span><br><span class="line">helper.next = head</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示环形链表内容，同时返回链表个数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowBoy</span><span class="params">(head *Boy)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.next == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">helper := head</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Printf(<span class="string">"编号:%d\n"</span>, helper.no)</span><br><span class="line"><span class="keyword">if</span> helper.next == head &#123;</span><br><span class="line"><span class="comment">//证明是最后一个元素了，退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">helper = helper.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正式开始约瑟夫环问题</span></span><br><span class="line"><span class="comment">//head表示头指针，startNo表示从第几个人开始，countNum表示数几下淘汰一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PlayGame</span><span class="params">(head *Boy, startNo <span class="keyword">int</span>, countNum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head.next == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"链表为空"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ShowBoy(head) &lt; startNo &#123;</span><br><span class="line">fmt.Println(<span class="string">"开始数量不匹配总量，请重新输入"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指向链表尾</span></span><br><span class="line">tail := head</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tail.next == head &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">tail = tail.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始约瑟夫环问题"</span>)</span><br><span class="line"><span class="comment">//1.开始移动</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; startNo<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="comment">//因为从第几个人开始，本身head就指向第一个人。比如从第二个人开始，那么只要移动一次即可</span></span><br><span class="line">head = head.next</span><br><span class="line">tail = tail.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//2.开始计数淘汰</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; countNum<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="comment">//与上面减1同理，自己要数一次</span></span><br><span class="line">head = head.next</span><br><span class="line">tail = tail.next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时head指向的编号就是要淘汰的编号</span></span><br><span class="line">fmt.Printf(<span class="string">"淘汰编号:%d\n"</span>, head.no)</span><br><span class="line"></span><br><span class="line"><span class="comment">//head走向下一个，让tail的next连接上</span></span><br><span class="line">head = head.next</span><br><span class="line">tail.next = head</span><br><span class="line"></span><br><span class="line"><span class="comment">//head == tail 证明只剩下最后一个了</span></span><br><span class="line"><span class="comment">//因为当最后两个时，head的next是tail，tail的next是head</span></span><br><span class="line"><span class="keyword">if</span> head == tail &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"淘汰编号:%d\n"</span>, head.no)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := AddBoy(<span class="number">500</span>)</span><br><span class="line">PlayGame(head, <span class="number">31</span>, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;链表是有序的列表，但是它在内存中是存储如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/data-structures-and-algorithms/linkedlist/linkedlist单链表示意图1.png&quot; height=&quot;330&quot; width=&quot;600&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Laravel的限制条数再分页</title>
    <link href="https://www.guaosi.com/2019/03/13/laravel-limit-paginate/"/>
    <id>https://www.guaosi.com/2019/03/13/laravel-limit-paginate/</id>
    <published>2019-03-13T05:00:27.000Z</published>
    <updated>2019-03-13T06:36:28.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h1><p>&#160; &#160; &#160; &#160; 有这么一个需求，我想取出一个表(比如<code>user</code>表)中，按照某一排序规则(比如按照时间倒叙)，取出前<code>100</code>条，进行分页，每页<code>10</code>条。应该如何实现？自然而然可能会这样写下:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::orderBy<span class="function"><span class="params">(<span class="string">'id'</span>,<span class="string">'desc'</span>)</span>-&gt;</span>limit<span class="function"><span class="params">(<span class="number">100</span>)</span>-&gt;</span>paginate(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>最后打印结果可以发现，<code>limit</code>并未生效，依旧是将所有结果进行分页。</p><a id="more"></a><h1 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h1><p>&#160; &#160; &#160; &#160; 本文中用到的<code>user</code>模型，数据，控制器，路由之类的都已经在另一篇文章 <a href="https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/">手摸手教你让Laravel开发Api更得心应手</a> 创建好了。</p><p><code>users</code>表中的数据</p><p><img src="/assets/blogImg/laravel-limit-paginate/users-data.png" alt="users-data"></p><h1 id="3-限制条数再分页"><a href="#3-限制条数再分页" class="headerlink" title="3. 限制条数再分页"></a>3. 限制条数再分页</h1><p>继续通过<code>paginate</code>方法来分页以及行不通了。确幸<code>Laravel</code>框架给我们提供了自定义分页类，我们通过使用自定义分页类来达到我们限制条数再分页的需求。</p><p>下面我们分别讲解<code>数组手动分页</code>以及<code>模型对象手动分页</code></p><h2 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1. 需求"></a>3.1. 需求</h2><p>通过<code>id</code>来倒叙排序，并且取出前6条来分页，每页2条数据</p><h2 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2. 数组"></a>3.2. 数组</h2><h3 id="3-2-1-代码"><a href="#3-2-1-代码" class="headerlink" title="3.2.1. 代码"></a>3.2.1. 代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index1</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    <span class="comment">//将对象结果集转为数组结果集</span></span><br><span class="line">    $data = User::orderBy(<span class="string">'id'</span>,<span class="string">'desc'</span>)-&gt;limit(<span class="number">6</span>)-&gt;get()-&gt;toArray();</span><br><span class="line">    <span class="comment">//传入页数，默认值为1</span></span><br><span class="line">    $page = $request-&gt;page ?? <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页的条数</span></span><br><span class="line">    $perPage = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//计算每页分页的初始位置</span></span><br><span class="line">    $offset = ($page * $perPage) - $perPage;</span><br><span class="line">    <span class="comment">//实例化LengthAwarePaginator类，并传入对应的参数</span></span><br><span class="line">    $data = <span class="keyword">new</span> LengthAwarePaginator(array_slice($data, $offset, $perPage, <span class="keyword">true</span>), count($data), $perPage,$page, [<span class="string">'path'</span> =&gt; $request-&gt;url(), <span class="string">'query'</span> =&gt; $request-&gt;query()]);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-测试"><a href="#3-2-2-测试" class="headerlink" title="3.2.2. 测试"></a>3.2.2. 测试</h3><p>符合我们的需求</p><p><img src="/assets/blogImg/laravel-limit-paginate/array_paginate.png" alt="array_paginate"></p><h3 id="3-2-3-适用"><a href="#3-2-3-适用" class="headerlink" title="3.2.3. 适用"></a>3.2.3. 适用</h3><p>比较适用于自建的数组想进行分页。</p><p>因为一开始就被转换为数组了，所以想要用模型中的方法是不可能了。</p><h3 id="3-2-4-缺点"><a href="#3-2-4-缺点" class="headerlink" title="3.2.4. 缺点"></a>3.2.4. 缺点</h3><p>1.无法使用对应模型里的方法。</p><p>2.内置的Api资源无法正常使用。</p><p>当我们的<code>UserResource.php</code>里的内容为这样时:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">            <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">            <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">            <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在控制器中使用Api资源来返回结果<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> UserResource::collection(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure></p><p>报错，提示<code>Trying to get property &#39;id&#39; of non-object</code>。这是由于我们传入到内置分页类中的是数组而不是一开始的对象形式，所以提示找不到这个属性。我们只需要进行一些稍微的修改。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;resource[<span class="string">'id'</span>],</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;resource[<span class="string">'name'</span>],</span><br><span class="line">        <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;resource[<span class="string">'status'</span>]),</span><br><span class="line">        <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;resource[<span class="string">'created_at'</span>],</span><br><span class="line">        <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;resource[<span class="string">'updated_at'</span>]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时返回结果正常，但是不会报错。但是还是有很多问题，比如，无法使用<code>数据包裹</code>,<code>条件关联</code>等等。因为传入的分页是数组而不是对象导致的。</p><p>所以说，数组来进行分页，只适用于自己构建的数据数组。</p><h2 id="3-3-对象"><a href="#3-3-对象" class="headerlink" title="3.3. 对象"></a>3.3. 对象</h2><p>接着解决上面的痛点，一开始我们就将对象结果集转为了数组结果集（百度上千篇一律都是转成了数组结果集），所以让导致模型方法以及Api资源都不能很好地使用。</p><p>现在我们不转换为数组，直接用对象结果集来进行自定义分页。</p><p>先来看一个函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">array_slice</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>这是上面数组能进行分页的关键，可以指定从第几个元素开始，显示几个元素。</p><p>那对象结果集是否有类似的方法可以调用？这样我们就可以做出对象结果集的分页了。答案是有的。<a href="https://learnku.com/docs/laravel/5.7/collections/2279#941767" target="_blank" rel="noopener">文档中</a>的集合方法<code>slice()</code>拥有一样的功能。</p><h3 id="3-3-1-代码"><a href="#3-3-1-代码" class="headerlink" title="3.3.1. 代码"></a>3.3.1. 代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $data = User::orderBy(<span class="string">'id'</span>,<span class="string">'desc'</span>)-&gt;limit(<span class="number">6</span>)-&gt;get();</span><br><span class="line">    <span class="comment">//传入页数，默认值为1</span></span><br><span class="line">    $page = $request-&gt;page ?? <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页的条数</span></span><br><span class="line">    $perPage = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//计算每页分页的初始位置</span></span><br><span class="line">    $offset = ($page * $perPage) - $perPage;</span><br><span class="line">    <span class="comment">//实例化LengthAwarePaginator类，并传入对应的参数</span></span><br><span class="line">    $data = <span class="keyword">new</span> LengthAwarePaginator($data-&gt;slice($offset,$perPage), count($data), $perPage,$page, [<span class="string">'path'</span> =&gt; $request-&gt;url(), <span class="string">'query'</span> =&gt; $request-&gt;query()]);</span><br><span class="line">    <span class="keyword">return</span> UserResource::collection($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>UserResource.php</code>文件中的内容为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">            <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">            <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">            <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-2-测试"><a href="#3-3-2-测试" class="headerlink" title="3.3.2. 测试"></a>3.3.2. 测试</h3><p>没有任何错误，符合我们的要求</p><p><img src="/assets/blogImg/laravel-limit-paginate/object_paginate.png" alt="object_paginate"></p><h3 id="3-3-3-适用"><a href="#3-3-3-适用" class="headerlink" title="3.3.3. 适用"></a>3.3.3. 适用</h3><p>非自建数组，想使用模型的方法或者使用Api资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-需求&quot;&gt;&lt;a href=&quot;#1-需求&quot; class=&quot;headerlink&quot; title=&quot;1. 需求&quot;&gt;&lt;/a&gt;1. 需求&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160; 有这么一个需求，我想取出一个表(比如&lt;code&gt;user&lt;/code&gt;表)中，按照某一排序规则(比如按照时间倒叙)，取出前&lt;code&gt;100&lt;/code&gt;条，进行分页，每页&lt;code&gt;10&lt;/code&gt;条。应该如何实现？自然而然可能会这样写下:&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$users = User::orderBy&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;desc&#39;&lt;/span&gt;)&lt;/span&gt;-&amp;gt;&lt;/span&gt;limit&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;-&amp;gt;&lt;/span&gt;paginate(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后打印结果可以发现，&lt;code&gt;limit&lt;/code&gt;并未生效，依旧是将所有结果进行分页。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="https://www.guaosi.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>golang算法与数据结构：队列(queue)</title>
    <link href="https://www.guaosi.com/2019/03/12/golang-queue/"/>
    <id>https://www.guaosi.com/2019/03/12/golang-queue/</id>
    <published>2019-03-12T08:46:28.000Z</published>
    <updated>2019-03-15T06:20:08.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h1><ul><li><p>队列是一个有序列表，可以用数组或是链表来实现。</p></li><li><p>遵循先入先出的原则。即:先存入队列的数据，要先取出。后存入的要后取出</p></li></ul><a id="more"></a><h1 id="2-数组模拟队列"><a href="#2-数组模拟队列" class="headerlink" title="2. 数组模拟队列"></a>2. 数组模拟队列</h1><ul><li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下 其中maxSize是该队列的最大容量。</p></li><li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个交量front及rear分别记录队列前后端的下标，front 会随着数据输出而改变，而rear则是随着数据输入而改变。如图所示:<br><img src="/assets/blogImg/data-structures-and-algorithms/queue/queue原理图.png" alt="queue原理图"></p></li></ul><h2 id="2-1-非环形队列-数组实现"><a href="#2-1-非环形队列-数组实现" class="headerlink" title="2.1. 非环形队列(数组实现)"></a>2.1. 非环形队列(数组实现)</h2><p>当我们将数据存入队列时称为” addqueue”, addqueue的处理需要有两个步骤:<br>1)将尾指针往后移: rear+1，front== rear [空]</p><p>2)若尾指针rear小于等于队列的最大下标MaxSize-1,则将数据存入rear所指的数组元素中，否则无法存入数据。rear == MaxSize-1[队列满]</p><h3 id="2-1-1-思路分析"><a href="#2-1-1-思路分析" class="headerlink" title="2.1.1. 思路分析"></a>2.1.1. 思路分析</h3><p>1.创建一个数组arrary, 作为队列的一个字段</p><ol start="2"><li>front,表示队列头部,初始化为-1</li><li>rear,表示队列尾部,初始化为-1<br>4.完成队列的基本查找</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddQueue <span class="comment">//加入数据到队列</span></span><br><span class="line">GetQueue <span class="comment">//从队列取出数据</span></span><br><span class="line">ShowQueue <span class="comment">//显示队列</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-实现"><a href="#2-1-2-实现" class="headerlink" title="2.1.2. 实现"></a>2.1.2. 实现</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体来管理</span></span><br><span class="line">type Queue struct &#123;</span><br><span class="line">maxSize <span class="keyword">int</span>    <span class="comment">//队列最大长度</span></span><br><span class="line">array   [<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">//数组模拟队列</span></span><br><span class="line">front   <span class="keyword">int</span>    <span class="comment">//指向队首(不包括第一个元素)</span></span><br><span class="line">rear    <span class="keyword">int</span>    <span class="comment">// 指向队尾(包括最后一个元素)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *Queue) addQueue(num <span class="keyword">int</span>) (err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.rear == <span class="keyword">this</span>.maxSize-<span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">//证明已经是队尾元素了，不能再加了</span></span><br><span class="line"><span class="keyword">return</span> errors.<span class="keyword">New</span>(<span class="string">"queue full"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.rear++</span><br><span class="line"><span class="keyword">this</span>.array[<span class="keyword">this</span>.rear] = num</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Queue) getQueue() (num <span class="keyword">int</span>, err error) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.front == <span class="keyword">this</span>.rear &#123;</span><br><span class="line"><span class="comment">//证明头尾指针已经到了一起，队列元素为空</span></span><br><span class="line">err = errors.<span class="keyword">New</span>(<span class="string">"queue empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.front++</span><br><span class="line">num = <span class="keyword">this</span>.array[<span class="keyword">this</span>.front]</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *Queue) showQueue() &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"当前队列:"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">this</span>.front + <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.rear; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"array[%d]=%d\n"</span>, i, <span class="keyword">this</span>.array[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var key string</span><br><span class="line">var queue = &amp;Queue&#123;</span><br><span class="line">maxSize: <span class="number">5</span>,</span><br><span class="line">rear:    -<span class="number">1</span>,</span><br><span class="line">front:   -<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">var num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"show 查看队列:"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"add 添加数据到队列"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"get 从队列获取元素"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"exit 退出"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入操作名称:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%s\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">queue.showQueue()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入数据:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%d\n"</span>, &amp;num)</span><br><span class="line">err := queue.addQueue(num)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"get"</span>:</span><br><span class="line">num, err := queue.getQueue()</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"输入有误，请重新输入"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-环形队列实现-数组实现"><a href="#2-2-环形队列实现-数组实现" class="headerlink" title="2.2. 环形队列实现(数组实现)"></a>2.2. 环形队列实现(数组实现)</h2><p>对前面的数组模拟队列的优化，充分利用数组，因此将数组看做是一个环形的。(通过取模的方式来实现)</p><p>提醒:</p><p>1) 尾索引的下一个尾头索引是表示队列满，即将队列容量空出一个作为约定，这个在判断队列满的时候需要注意<code>(tail+1)%maxSize == head</code> [满]</p><p>2) tail == head [空]</p><h3 id="2-2-1-思路分析"><a href="#2-2-1-思路分析" class="headerlink" title="2.2.1. 思路分析"></a>2.2.1. 思路分析</h3><p>1) 什么时候表示队列满 <code>(tail + 1) % maxSize = hedd</code><br>2) <code>tail == head</code> 表示空<br>3) 初始化时， <code>tail=0，head=0</code><br>4) 怎么统计该队列有多少个元素 <code>(tail + maxSize - head ) % maxSize</code></p><h3 id="2-2-2-实现"><a href="#2-2-2-实现" class="headerlink" title="2.2.2. 实现"></a>2.2.2. 实现</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type circleQueue struct &#123;</span><br><span class="line">maxSize <span class="keyword">int</span></span><br><span class="line">array   [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">head    <span class="keyword">int</span> <span class="comment">//指向队首，包含队首元素。先弹出，指针再向下移动</span></span><br><span class="line">tail    <span class="keyword">int</span> <span class="comment">//指向队尾，不包含队尾元素。先推入，指针再向下移动</span></span><br><span class="line"><span class="comment">//这里的包含不包含的意思是，当直接取 this.array[head] 或者 this.array[tail]时，是否有值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) <span class="keyword">Push</span>(num <span class="keyword">int</span>) (err error) &#123;</span><br><span class="line"><span class="comment">//判断队列是否已满</span></span><br><span class="line"><span class="comment">//因为是+1来判断是否到达了头指针，如果回到头指针，证明队列就满了</span></span><br><span class="line"><span class="comment">//故意将数组留了一个位置，来判断是否到达头指针。因为tail是不包含队尾的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.tail+<span class="number">1</span>)%<span class="keyword">this</span>.maxSize == <span class="keyword">this</span>.head &#123;</span><br><span class="line">err = errors.<span class="keyword">New</span>(<span class="string">"queue full"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.array[<span class="keyword">this</span>.tail] = num</span><br><span class="line"><span class="keyword">this</span>.tail = (<span class="keyword">this</span>.tail + <span class="number">1</span>) % <span class="keyword">this</span>.maxSize</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) <span class="keyword">Pop</span>() (num <span class="keyword">int</span>, err error) &#123;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">this</span>.head == <span class="keyword">this</span>.tail &#123;</span><br><span class="line">err = errors.<span class="keyword">New</span>(<span class="string">"queue empty"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">num = <span class="keyword">this</span>.array[<span class="keyword">this</span>.head]</span><br><span class="line"><span class="keyword">this</span>.head = (<span class="keyword">this</span>.head + <span class="number">1</span>) % <span class="keyword">this</span>.maxSize</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) <span class="keyword">Size</span>() (num <span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="comment">//因为tail有可能回到0开始，所以需要加上长度</span></span><br><span class="line"><span class="comment">//取模是因为这是一个万能公式，可以通用</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.tail + <span class="keyword">this</span>.maxSize - <span class="keyword">this</span>.head) % <span class="keyword">this</span>.maxSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">this</span> *circleQueue) List() &#123;</span><br><span class="line"><span class="keyword">size</span> := <span class="keyword">this</span>.<span class="keyword">Size</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">size</span> == <span class="number">0</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tempHead := <span class="keyword">this</span>.head</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">size</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"array[%d]=%d "</span>, tempHead, <span class="keyword">this</span>.array[tempHead])</span><br><span class="line">tempHead = (tempHead + <span class="number">1</span>) % <span class="keyword">this</span>.maxSize</span><br><span class="line">&#125;</span><br><span class="line">fmt.<span class="keyword">Println</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var key string</span><br><span class="line">var queue = &amp;circleQueue&#123;</span><br><span class="line">maxSize: <span class="number">5</span>,</span><br><span class="line">head:    <span class="number">0</span>,</span><br><span class="line">tail:    <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">var num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"show 查看队列:"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"add 添加数据到队列"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"get 从队列获取元素"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"exit 退出"</span>)</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入操作名称:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%s\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">queue.List()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"请输入数据:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%d\n"</span>, &amp;num)</span><br><span class="line">err := queue.<span class="keyword">Push</span>(num)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"get"</span>:</span><br><span class="line">num, err := queue.<span class="keyword">Pop</span>()</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(err.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"输入有误，请重新输入"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;队列是一个有序列表，可以用数组或是链表来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遵循先入先出的原则。即:先存入队列的数据，要先取出。后存入的要后取出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>记一次golang网络编程开发聊天室有感</title>
    <link href="https://www.guaosi.com/2019/03/11/golang-tcp-socket/"/>
    <id>https://www.guaosi.com/2019/03/11/golang-tcp-socket/</id>
    <published>2019-03-11T06:47:08.000Z</published>
    <updated>2019-03-11T07:19:08.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;一直都是使用PHP的<code>B/S</code>开发(不知道swoole的socket算不算)，很想尝试一下<code>C/S</code>开发是什么感觉。于是乎，就做了一个聊天室，这是一个网络编程几乎必做的项目。</p><a id="more"></a><h1 id="2-有感"><a href="#2-有感" class="headerlink" title="2. 有感"></a>2. 有感</h1><p>果然，<code>C/S</code>开发就是比<code>B/S</code>麻烦的多，因为<code>B/S</code>的协议都是已经定义好的，照着这个逻辑写就行。<code>C/S</code>需要自己来制定协议，比如发送数据包之前，应该先制作一个数据包，专门记录将要发送数据包的长度。先行发送这个记录长度的数据包，然后再发送真正的数据包。</p><p>服务端也一样，先接收长度数据包后再接收真正的数据包，验证长度是否有误，是否有丢包。</p><p>当然，这些在<code>B/S</code>里是完全不会让我们写的，因为这些底层已经全都封装好了，都不需要考虑丢包问题。</p><p>这或许是一件好事，不会让人操心这个，因为这东西确实很繁琐。但是也可能是一件坏事，因为我们会少了一些底层知识认知。</p><p>下面放一段用于读取数据与发送数据的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"go_code/chatroom1/common/message"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Transfer struct &#123;</span><br><span class="line">Conn net.Conn</span><br><span class="line">buf  [<span class="number">8096</span>]byte</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送传入的message.Message</span></span><br><span class="line">func (<span class="keyword">this</span> *Transfer) WritePkg(mess *message.Message) (err error) &#123;</span><br><span class="line"><span class="comment">//1.先计算传入的长度,并且发送长度包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1 json化</span></span><br><span class="line">messByte, err := json.Marshal(*mess)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal fail error ="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.2 计算长度,转化为byte</span></span><br><span class="line"><span class="comment">//因为是Uint32，表示4个字节。4个字节需要4个byte，一个字节8位，4个就是2的32次方</span></span><br><span class="line"><span class="comment">//最大可以表示4G的数据长度</span></span><br><span class="line">binary.BigEndian.PutUint32(<span class="keyword">this</span>.buf[:<span class="number">4</span>], uint32(len(messByte)))</span><br><span class="line"><span class="comment">//1.4 发送长度</span></span><br><span class="line">_, err = <span class="keyword">this</span>.Conn.Write(<span class="keyword">this</span>.buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"发送数据长度失败,error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.再发送真正的内容</span></span><br><span class="line">_, err = <span class="keyword">this</span>.Conn.Write(messByte)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"发送内容失败,error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于将接收包进行反json化</span></span><br><span class="line">func (<span class="keyword">this</span> *Transfer) ReadPkg() (mess message.Message, err error) &#123;</span><br><span class="line">n, err := <span class="keyword">this</span>.Conn.Read(<span class="keyword">this</span>.buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != nil || n != <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端异常退出，关闭连接,error = "</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取数据错误,error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将接收到的byte再转回数字</span></span><br><span class="line">pkg_len := binary.BigEndian.Uint32(<span class="keyword">this</span>.buf[:<span class="number">4</span>])</span><br><span class="line">n, err = <span class="keyword">this</span>.Conn.Read(<span class="keyword">this</span>.buf[:pkg_len])</span><br><span class="line"><span class="keyword">if</span> err != nil || n != int(pkg_len) &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端异常退出，关闭连接,error = "</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取数据错误,error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = json.Unmarshal(<span class="keyword">this</span>.buf[:pkg_len], &amp;mess)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Unmarshal error = "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-项目"><a href="#3-项目" class="headerlink" title="3. 项目"></a>3. 项目</h1><p>专门详解项目里每个文件的具体作用，篇幅又是很长，还是直接体验结果吧(README.md 有相关功能介绍)。</p><p>项目地址: </p><p><a href="https://github.com/guaosi/golang_tcp_chatroom" target="_blank" rel="noopener">https://github.com/guaosi/golang_tcp_chatroom</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;一直都是使用PHP的&lt;code&gt;B/S&lt;/code&gt;开发(不知道swoole的socket算不算)，很想尝试一下&lt;code&gt;C/S&lt;/code&gt;开发是什么感觉。于是乎，就做了一个聊天室，这是一个网络编程几乎必做的项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="tcp" scheme="https://www.guaosi.com/tags/tcp/"/>
    
      <category term="网络编程" scheme="https://www.guaosi.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>golang算法与数据结构：稀疏数组(sparsearray)</title>
    <link href="https://www.guaosi.com/2019/03/11/golang-sparsearray/"/>
    <id>https://www.guaosi.com/2019/03/11/golang-sparsearray/</id>
    <published>2019-03-11T05:45:11.000Z</published>
    <updated>2019-03-11T07:20:44.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h1><p>&#160; &#160; &#160; &#160;当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><h1 id="2-处理方法"><a href="#2-处理方法" class="headerlink" title="2. 处理方法"></a>2. 处理方法</h1><p>1) 记录数组一共有几行几列，有多少个不同的值<br>2) 思想:把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p><a id="more"></a><h1 id="3-举例说明"><a href="#3-举例说明" class="headerlink" title="3. 举例说明"></a>3. 举例说明</h1><p><img src="/assets/blogImg/data-structures-and-algorithms/sparsearray/sparsearray原理图.png" alt="sparsearray原理图"></p><h1 id="4-实践"><a href="#4-实践" class="headerlink" title="4. 实践"></a>4. 实践</h1><h2 id="4-1-原始数组转稀疏数组"><a href="#4-1-原始数组转稀疏数组" class="headerlink" title="4.1. 原始数组转稀疏数组"></a>4.1. 原始数组转稀疏数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> valNode <span class="keyword">struct</span> &#123;</span><br><span class="line">row <span class="keyword">int</span></span><br><span class="line">col <span class="keyword">int</span></span><br><span class="line">val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//初始化原始数组</span></span><br><span class="line"><span class="keyword">var</span> chapmap [<span class="number">11</span>][<span class="number">11</span>]<span class="keyword">int</span></span><br><span class="line">chapmap[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span> <span class="comment">//黑子</span></span><br><span class="line">chapmap[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span> <span class="comment">//白字</span></span><br><span class="line"><span class="comment">//输出原始数组</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> value &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\t"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体切片</span></span><br><span class="line"><span class="keyword">var</span> val_node []valNode</span><br><span class="line"><span class="comment">//初始化，先记录一下稀疏数组的行列以及默认值</span></span><br><span class="line"><span class="keyword">var</span> node = valNode&#123;</span><br><span class="line">row: <span class="number">11</span>,</span><br><span class="line">col: <span class="number">11</span>,</span><br><span class="line">val: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">val_node = <span class="built_in">append</span>(val_node, node)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将原始数组转稀疏组数</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> j, v := <span class="keyword">range</span> value &#123;</span><br><span class="line"><span class="keyword">if</span> v != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">var</span> node = valNode&#123;</span><br><span class="line">row: i,</span><br><span class="line">col: j,</span><br><span class="line">val: v,</span><br><span class="line">&#125;</span><br><span class="line">val_node = <span class="built_in">append</span>(val_node, node)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path <span class="keyword">string</span> = <span class="string">"./save.data"</span></span><br><span class="line"><span class="comment">//通过只写方式，如果不存在则创建方式打开一个文件，权限为666</span></span><br><span class="line">file, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"file create error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//使用带缓冲区的方式写入</span></span><br><span class="line"><span class="keyword">var</span> write *bufio.Writer = bufio.NewWriter(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出稀疏数组,同时写入文件</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> val_node &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d:%d %d %d\n"</span>, i, value.row, value.col, value.val)</span><br><span class="line">info := fmt.Sprintf(<span class="string">"%d %d %d\r\n"</span>, value.row, value.col, value.val)</span><br><span class="line"><span class="comment">//将内容全部写到缓存区</span></span><br><span class="line">write.WriteString(info)</span><br><span class="line">&#125;</span><br><span class="line">write.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-稀疏数组转原始数组"><a href="#4-2-稀疏数组转原始数组" class="headerlink" title="4.2. 稀疏数组转原始数组"></a>4.2. 稀疏数组转原始数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> valNode <span class="keyword">struct</span> &#123;</span><br><span class="line">row <span class="keyword">int</span></span><br><span class="line">col <span class="keyword">int</span></span><br><span class="line">val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> val_node []valNode</span><br><span class="line"><span class="keyword">var</span> path <span class="keyword">string</span> = <span class="string">"../save.data"</span></span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"file open error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">var</span> node = valNode&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, bu_err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">//指定每次读取到换行就结束</span></span><br><span class="line"><span class="keyword">if</span> bu_err == io.EOF &#123;</span><br><span class="line"><span class="comment">//如果读到最后，则会报io.EOF错误</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件中保存的内容重新变成稀疏数组</span></span><br><span class="line">arr := strings.Split(line, <span class="string">" "</span>)</span><br><span class="line">row, err := strconv.Atoi(arr[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转换错误 error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">col, err := strconv.Atoi(arr[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转换错误 error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">val, err := strconv.Atoi(strings.TrimRight(arr[<span class="number">2</span>], <span class="string">"\r\n"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转换错误 error = "</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.row = row</span><br><span class="line">node.col = col</span><br><span class="line">node.val = val</span><br><span class="line">val_node = <span class="built_in">append</span>(val_node, node)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建动态二维数组</span></span><br><span class="line"><span class="keyword">var</span> chapmap [][]<span class="keyword">int</span> = <span class="built_in">make</span>([][]<span class="keyword">int</span>, val_node[<span class="number">0</span>].row) <span class="comment">//有多少行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; val_node[<span class="number">0</span>].row; i++ &#123;</span><br><span class="line">chapmap[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, val_node[<span class="number">0</span>].col)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将动态二维数组先设置成默认值</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> j, _ := <span class="keyword">range</span> value &#123;</span><br><span class="line">chapmap[i][j] = val_node[<span class="number">0</span>].val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再将稀疏数组转回原始数组</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> val_node &#123;</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">chapmap[value.row][value.col] = value.val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出最后的原始数组</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> chapmap &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> value &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\t"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。&lt;/p&gt;
&lt;h1 id=&quot;2-处理方法&quot;&gt;&lt;a href=&quot;#2-处理方法&quot; class=&quot;headerlink&quot; title=&quot;2. 处理方法&quot;&gt;&lt;/a&gt;2. 处理方法&lt;/h1&gt;&lt;p&gt;1) 记录数组一共有几行几列，有多少个不同的值&lt;br&gt;2) 思想:把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://www.guaosi.com/tags/golang/"/>
    
      <category term="算法" scheme="https://www.guaosi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.guaosi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你破解移动光猫吉比特--H2-3</title>
    <link href="https://www.guaosi.com/2019/03/09/crack-china-mobile-optical-modem-h2-3/"/>
    <id>https://www.guaosi.com/2019/03/09/crack-china-mobile-optical-modem-h2-3/</id>
    <published>2019-03-09T10:20:33.000Z</published>
    <updated>2019-03-11T05:40:02.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;过年期间家里装了2年免费的移动光纤(真香)，可是移动装机默认光猫都是<code>路由模式</code>，装机师傅以及移动人工客服都是拒绝给超级账户的。所以只能自己想办法解决。</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h1><p>1.工信部投诉，百试百灵<br>2.淘宝或者闲鱼花钱让别人破解(我查了貌似没有这个型号)<br>3.手摸手自己折腾自己搞</p><a id="more"></a><h1 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h1><p>破解后的好处:<br>1.可以将光猫变成<code>桥接模式</code>，然后用自己的路由器拨号，更稳定。<br>2.对光猫<code>h2-3</code>有完全控制能力，可以使用全部功能。<br>破解后的界面图如下:<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/success-web-ui.png" alt="success-web-ui"></p><h1 id="4-准备"><a href="#4-准备" class="headerlink" title="4. 准备"></a>4. 准备</h1><p>1.一台确认已经开启<code>telnet</code>的电脑</p><p>2.一台正常可用的主人公<code>h2-3光猫</code></p><p>3.知道光猫的普通账户的账号密码(在光猫后面贴着)</p><p>4.确认电脑与光猫在同一局域网内</p><p>5.<code>Firefox</code>浏览器或者<code>Chrome</code>浏览器</p><p>注意:如果想把光猫转成桥接模式，路由器来拨号的话，需要知道<code>宽带密码</code>是多少。如果不知道，建议先打<code>10086</code>人工客服下发重置密码的短信。</p><h1 id="5-破解过程"><a href="#5-破解过程" class="headerlink" title="5. 破解过程"></a>5. 破解过程</h1><h2 id="5-1-打开光猫telnet"><a href="#5-1-打开光猫telnet" class="headerlink" title="5.1. 打开光猫telnet"></a>5.1. 打开光猫telnet</h2><p>1.首先打开浏览器，在扩展中安装<code>HTTP Header Live</code>插件(不知道怎么安装自行百度)。</p><p>2.浏览器打开<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.1.1</span></span><br></pre></td></tr></table></figure></p><p>看到光猫的登陆界面，使用普通账户进行登陆<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/login-web-ui.png" alt="login-web-ui"></p><p>3.打开<code>HTTP Header Live</code>插件，在页面上随便点击一个页面，再次查看<code>HTTP Header Live</code>插件，捕捉到了<code>post</code>信息<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/http-header-live1.jpg" alt="http-header-live1"><br>我们需要使用它的header头来发送我们的消息，以此来修改光猫<code>telnet</code>的账号密码</p><p>4.点击打开一个post<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/http-header-live2.jpg" alt="http-header-live2"></p><p>修改链接为<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="regexp">/boaform/</span>set_telenet_enabled.cgi</span><br></pre></td></tr></table></figure></p><p>内容为：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode_name=set_telenet_enabled<span class="variable">&amp;nonedata</span>=<span class="number">0.3535281170047305</span><span class="variable">&amp;user_name</span>=root<span class="variable">&amp;user_password</span>=admin<span class="variable">&amp;telenet_enabled</span>=<span class="number">1</span><span class="variable">&amp;default_flag</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/http-header-live3.jpg" alt="http-header-live3"><br>意思是将光猫的telnet账号密码分别设置为<code>root</code>与<code>admin</code></p><p>5.然后点击右下角的<code>send</code>确认，会返回一个成功的页面，代表已经成功打开光猫的<code>telnet</code><br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/success-info.jpg" alt="success-info"></p><h2 id="5-2-登陆光猫telnet"><a href="#5-2-登陆光猫telnet" class="headerlink" title="5.2. 登陆光猫telnet"></a>5.2. 登陆光猫telnet</h2><ol><li>打开<code>命令行</code>工具，输入</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">telnet</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure><p>连接上后，在<code>OpenWrt login</code>提示时输入账号<code>root</code>，在<code>Password</code>提示时输入密码<code>admin</code>，然后回车。即可成功登陆进光猫的<code>telnet</code></p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/telnet-login-success.png" alt="telnet-login-success"></p><p>2.切换到配置文件目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/config/worka</span></span><br></pre></td></tr></table></figure></p><p>然后我们查看一下文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure></p><p>如果使用的是<code>windows</code>的<code>cmd</code>，那么可以使用<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure></p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/telnet-dir-file.png" alt="telnet-dir-file"></p><p>其中，<code>backup_lastgood.xml</code>与<code>lastgood.xml</code>是我们后面需要修改的文件</p><h2 id="5-3-修改配置文件"><a href="#5-3-修改配置文件" class="headerlink" title="5.3. 修改配置文件"></a>5.3. 修改配置文件</h2><p>1.我们查看一下<code>backup_lastgood.xml</code>里面的内容<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">backup_lastgood</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure></p><p>然后搜索<code>TeleAccountName</code>,就可以看到存放的账号以及密码<br><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/telnet-modify.png" alt="telnet-modify"></p><p>其中，<code>TeleAccountName</code>和<code>TeleAccountPassword</code>分别代表超级账户的账号密码。<code>UserAccountName</code>和<code>UserAccountPassword</code>分别代表普通账户的账号密码。</p><p>2.现在我们来分析一下,<code>UserAccountName</code>的Value是<code>user</code>，跟我们普通账户的账号相同。那密码<code>UserAccountPassword</code>又是什么含义。比如，此时我的<code>UserAccountPassword</code>的值为<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">61</span>,<span class="number">62</span>,<span class="number">64</span>,<span class="number">66</span>,<span class="number">6</span>e,<span class="number">68</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,......</span><br></pre></td></tr></table></figure></p><p>我光猫背面的密码是<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abdfnh</span></span><br></pre></td></tr></table></figure></p><p>此时不难发现,密码字母所对应的<code>ASCII</code>数字，<code>十六进制</code>转换后与<code>UserAccountPassword</code>的值是相同的。</p><p>3.知道这个原理后，我们就可以将密码修改成我们喜欢的密码了。大家自行在查找字符所对应的<code>ASCII</code>数字的<code>十六进制</code>是多少即可，将其替换。</p><p>4.为了方便，我们将普通密码与超级密码设置成相同的，即把<code>TeleAccountPassword</code>所对应的内容替换为<code>UserAccountPassword</code>的内容。</p><p>5.<code>lastgood.xml</code>与<code>backup_lastgood.xml</code>内容基本是相同的，一样替换<code>TeleAccountPassword</code>的内容即可。</p><h2 id="5-4-生效"><a href="#5-4-生效" class="headerlink" title="5.4. 生效"></a>5.4. 生效</h2><p>输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">reboot</span></span><br></pre></td></tr></table></figure></p><p>重启光猫，2分钟后登陆<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></p><p>输入超级账号<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CMCCAdmin</span></span><br></pre></td></tr></table></figure></p><p>自己自定义的密码(比如我刚刚是与普通用户密码设置相同)<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abdfnh</span></span><br></pre></td></tr></table></figure></p><p>登陆成功，代表破解成功。</p><h2 id="5-5-桥接模式"><a href="#5-5-桥接模式" class="headerlink" title="5.5. 桥接模式"></a>5.5. 桥接模式</h2><p><code>网络</code>-<code>宽带设置</code>，然后点击<code>2_INTERNET_R_VID_400</code>,将连接模式从<code>Route</code>改成<code>Brige</code>,保存即可。</p><p><img src="/assets/blogImg/crack-china-mobile-optical-modem-h2-3/web-ui-modify-brige.png" alt="web-ui-modify-brige"></p><h1 id="6-注意"><a href="#6-注意" class="headerlink" title="6. 注意"></a>6. 注意</h1><p>1.有可能修改成自己自定义密码后，自定义密码不会生效，此时有可能是光猫恢复成了万能密码，也就是<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aD<span class="name">m8</span>H<span class="meta">%</span>MdA</span><br></pre></td></tr></table></figure></p><p>可以登录尝试看看。</p><p>2.如果你忘记了自己的宽带密码，拨打人工重置下发的话，光猫也会被移动远程重置信息。此时按照本教程重新再破解一次即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;过年期间家里装了2年免费的移动光纤(真香)，可是移动装机默认光猫都是&lt;code&gt;路由模式&lt;/code&gt;，装机师傅以及移动人工客服都是拒绝给超级账户的。所以只能自己想办法解决。&lt;/p&gt;
&lt;h1 id=&quot;2-解决办法&quot;&gt;&lt;a href=&quot;#2-解决办法&quot; class=&quot;headerlink&quot; title=&quot;2. 解决办法&quot;&gt;&lt;/a&gt;2. 解决办法&lt;/h1&gt;&lt;p&gt;1.工信部投诉，百试百灵&lt;br&gt;2.淘宝或者闲鱼花钱让别人破解(我查了貌似没有这个型号)&lt;br&gt;3.手摸手自己折腾自己搞&lt;/p&gt;
    
    </summary>
    
    
      <category term="crack" scheme="https://www.guaosi.com/tags/crack/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你让Laravel开发Api更得心应手</title>
    <link href="https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/"/>
    <id>https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/</id>
    <published>2019-02-26T02:47:04.000Z</published>
    <updated>2019-03-13T02:01:05.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;随着前后端完全分离，<code>PHP</code>也基本告别了<code>view</code>模板嵌套开发，转而专门写资源接口。<code>Laravel</code>是PHP框架中最优雅的框架，国内也越来越多人告别<code>ThinkPHP</code>选择了<code>Laravel</code>。<code>Laravel</code>框架本身对<code>API</code>有支持，但是感觉再工作中还是需要再做一些处理。<code>Lumen</code>用起来不顺手，有些包不能很好地支持。所以，将<code>Laravel</code>框架进行一些配置处理，让其在开发<code>API</code>时更得心应手。</p><blockquote><p>内容划水过长，请谨慎打开</p></blockquote><a id="more"></a><p>&#160; &#160; &#160; &#160;当然，你也可以点击<a href="#6-%E6%88%90%E5%93%81">这里</a>,直接跳到成果~</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><h2 id="2-1-环境"><a href="#2-1-环境" class="headerlink" title="2.1. 环境"></a>2.1. 环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">PHP</span> &gt; 7<span class="selector-class">.1</span></span><br><span class="line"><span class="selector-tag">MySQL</span> &gt; 5<span class="selector-class">.5</span></span><br><span class="line"><span class="selector-tag">Redis</span> &gt; 2<span class="selector-class">.8</span></span><br></pre></td></tr></table></figure><h2 id="2-2-工具"><a href="#2-2-工具" class="headerlink" title="2.2. 工具"></a>2.2. 工具</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">postman</span></span><br><span class="line"><span class="attribute">composer</span></span><br></pre></td></tr></table></figure><h2 id="2-3-使用postman"><a href="#2-3-使用postman" class="headerlink" title="2.3. 使用postman"></a>2.3. 使用postman</h2><p>为了模拟AJAX请求，请将 <code>header头</code> 设置<code>X-Requested-With</code> 为 <code>XMLHttpRequest</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/postman_set_ajax.png" alt="postman_set_ajax"></p><h2 id="2-4-安装Laravel"><a href="#2-4-安装Laravel" class="headerlink" title="2.4. 安装Laravel"></a>2.4. 安装Laravel</h2><p><code>Laravel</code>只要<code>&gt;=5.5</code>皆可，这里采用文章编写时最新的<code>5.7</code>版本<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">composer </span><span class="built_in">create-project</span> <span class="string">laravel/</span><span class="string">laravel </span><span class="string">Laravel </span><span class="built_in">--prefer-dist</span> <span class="string">"5.7.*"</span></span><br></pre></td></tr></table></figure></p><h2 id="2-5-创建数据库"><a href="#2-5-创建数据库" class="headerlink" title="2.5. 创建数据库"></a>2.5. 创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> auto_increment <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span> ( <span class="number">12</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">VARCHAR</span> ( <span class="number">80</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`last_token`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'登陆时的token'</span>,</span><br><span class="line"><span class="string">`status`</span> TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态 -1代表已删除 0代表正常 1代表冻结'</span>,</span><br><span class="line"><span class="string">`created_at`</span> <span class="built_in">TIMESTAMP</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line"><span class="string">`updated_at`</span> <span class="built_in">TIMESTAMP</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span> </span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h1 id="3-初始化数据"><a href="#3-初始化数据" class="headerlink" title="3. 初始化数据"></a>3. 初始化数据</h1><h2 id="3-1-Model移动"><a href="#3-1-Model移动" class="headerlink" title="3.1. Model移动"></a>3.1. Model移动</h2><p>在项目的<code>app</code>目录下可以看到，有一个<code>User.php</code>的模型文件。因为<code>Laravel</code>默认把模型文件放在<code>app</code>目录下，如果数据表多的话，这里模型文件就会很多，不便于管理，所以我们先要将模型文件移动到其他文件夹内。</p><p>1) 在<code>app</code>目录下新建<code>Models</code>文件夹，然后将<code>User.php</code>文件移动进来。<br>2) 修改<code>User.php</code>的内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>; <span class="comment">//这里从App改成了App\Models</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $table = <span class="string">'users'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="comment">//去掉我创建的数据表没有的字段</span></span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $fillable = [</span></span><br><span class="line"><span class="php">        <span class="string">'name'</span>, <span class="string">'password'</span></span></span><br><span class="line"><span class="php">    ];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="comment">//去掉我创建的数据表没有的字段</span></span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $hidden = [</span></span><br><span class="line"><span class="php">        <span class="string">'password'</span></span></span><br><span class="line"><span class="php">    ];</span></span><br><span class="line"><span class="php">    <span class="comment">//将密码进行加密</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttribute</span><span class="params">($value)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;attributes[<span class="string">'password'</span>] = bcrypt($value);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>3) 因为有关于User的命名空间发生了改变，所以我们全局搜索<code>App\User</code>,将其替换为<code>App\Models\User</code>.我一共搜索到3个文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app/Http/Controllers/Auth 目录下的 RegisterController.php</span><br><span class="line">config 目录下的 services.php</span><br><span class="line">config 目录下的 auth.php</span><br><span class="line">database/factories 目录下的 UserFactory.php</span><br></pre></td></tr></table></figure></p><h2 id="3-2-控制器"><a href="#3-2-控制器" class="headerlink" title="3.2. 控制器"></a>3.2. 控制器</h2><p>因为是专门做API的，所以我们要把是API的控制器都放到<code>app\Http\Controllers\Api</code>目录下。</p><p>使用命令行创建控制器<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:controller Api/UserController</span><br></pre></td></tr></table></figure></p><p>编写<code>app/Http/Controllers/Api</code>目录下的<code>UserController.php</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'guaosi'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这里写了index函数，用来下面建立路由后的测试，查看是否可以正常访问。</p><h2 id="3-3-路由"><a href="#3-3-路由" class="headerlink" title="3.3. 路由"></a>3.3. 路由</h2><p>在<code>routes</code>目录下的<code>api.php</code>是专门用来写Api接口的路由，所以我们打开它，填写以下内容，做一个测试.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">Route::namespace(<span class="string">'Api'</span>)-&gt;prefix(<span class="string">'v1'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)-&gt;name(<span class="string">'users.index'</span>);</span></span><br><span class="line"><span class="php">&#125;);</span></span><br></pre></td></tr></table></figure></p><blockquote><p>因为我们Api控制器的命名空间是<code>App\Http\Controllers\Api</code>,而<code>Laravel</code>默认只会在命名空间<code>App\Http\Controllers</code>下查找控制器，所以需要我们给出<code>namespace</code>。</p></blockquote><blockquote><p>同时，添加一个<code>prefix</code>是为了版本号，方便后期接口升级区分。</p></blockquote><p>打开<code>postman</code>,用<code>get</code>方式请求<code>你的域名/api/v1/users</code>,最后返回结果是<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">guaosi</span></span><br></pre></td></tr></table></figure></p><p>则成功</p><h2 id="3-4-创建验证器"><a href="#3-4-创建验证器" class="headerlink" title="3.4. 创建验证器"></a>3.4. 创建验证器</h2><p>在创建用户之前，我们先创建验证器，来让我们服务器接收到的数据更安全.当然，我们也要把关于Api验证的放在一个专门的文件夹内。<br>先创建一个<code>Request</code>的基类<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:request Api/FormRequest</span><br></pre></td></tr></table></figure></p><p>因为验证器默认是关闭状态，每个文件都需要我们将<code>false</code>改成<code>true</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//false代表不进行验证</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们修改<code>app/Http/Requests/Api</code> 目录下的 <code>FormRequest.php</code> 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span> <span class="title">as</span> <span class="title">BaseFormRequest</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">FormRequest</span> <span class="keyword">extends</span> <span class="title">BaseFormRequest</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这样这个命名空间下的验证器都会主动开启验证。<br>接着我们开始创建关于<code>UserController</code>的专属验证器<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:request Api/UserRequest</span><br></pre></td></tr></table></figure></p><p>编辑<code>app/Http/Requests/Api</code> 目录下的 <code>UserRequest.php</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;method()) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'GET'</span>:</span></span><br><span class="line"><span class="php">                &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">                        <span class="string">'id'</span> =&gt; [<span class="string">'required,exists:shop_user,id'</span>]</span></span><br><span class="line"><span class="php">                    ];</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span></span><br><span class="line"><span class="php">                &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">                        <span class="string">'name'</span> =&gt; [<span class="string">'required'</span>, <span class="string">'max:12'</span>, <span class="string">'unique:user,name'</span>],</span></span><br><span class="line"><span class="php">                        <span class="string">'password'</span> =&gt; [<span class="string">'required'</span>, <span class="string">'max:16'</span>, <span class="string">'min:6'</span>]</span></span><br><span class="line"><span class="php">                    ];</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="php">                &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">                    ];</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">            <span class="string">'id.required'</span>=&gt;<span class="string">'用户ID必须填写'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'id.exists'</span>=&gt;<span class="string">'用户不存在'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'name.unique'</span> =&gt; <span class="string">'用户名已经存在'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'name.required'</span> =&gt; <span class="string">'用户名不能为空'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'name.max'</span> =&gt; <span class="string">'用户名最大长度为12个字符'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'password.required'</span> =&gt; <span class="string">'密码不能为空'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'password.max'</span> =&gt; <span class="string">'密码长度不能超过16个字符'</span>,</span></span><br><span class="line"><span class="php">            <span class="string">'password.min'</span> =&gt; <span class="string">'密码长度不能小于6个字符'</span></span></span><br><span class="line"><span class="php">        ];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-5-创建用户"><a href="#3-5-创建用户" class="headerlink" title="3.5. 创建用户"></a>3.5. 创建用户</h2><p>现在我们来编写创建用户接口，制作一些虚拟数据。(就不使用seeder来填充了)<br>打开<code>UserController.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span><br><span class="line">    $user = User::create($request-&gt;all());</span><br><span class="line">    <span class="keyword">if</span>($user)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'用户注册成功。。。'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'用户注册失败。。。'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $res=Auth::guard(<span class="string">'web'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>($res)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'用户登录成功...'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'用户登录失败'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>然后我们创建路由，编辑<code>api.php</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::post<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)</span>-&gt;</span>name(<span class="string">'users.store'</span>);</span><br><span class="line">Route::post<span class="function"><span class="params">(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)</span>-&gt;</span>name(<span class="string">'users.login'</span>);</span><br></pre></td></tr></table></figure></p><p>打开<code>postman</code>,用<code>post</code>方式请求<code>你的域名/api/v1/users</code>,在<code>form-data</code>记得填写要创建的用户名和密码。</p><p>最后返回结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户创建成功。。。</span><br></pre></td></tr></table></figure></p><p>则成功。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/create_user.png" alt="create_user"></p><p>如果返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"The given data was invalid."</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: [</span><br><span class="line">            <span class="string">"用户名不能为空"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"password"</span>: [</span><br><span class="line">            <span class="string">"密码不能为空"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>则证明验证失败。</p><p>然后验证是否可以正常登录。因为我们认证的字段是<code>name</code>跟<code>password</code>,而<code>Laravel</code>默认认证的是<code>email</code>跟<code>password</code>。所以我们还要打开<code>app/Http/Controllers/auth</code> 目录下的 <code>LoginController.php</code>,加入如下代码<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">username</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'name'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开<code>postman</code>,用<code>post</code>方式请求<code>你的域名/api/v1/login</code><br>最后返回结果是<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户登录成功...</span><br></pre></td></tr></table></figure></p><p>则成功<br><img src="/assets/blogImg/laravel-api-initialization-preparation/login_user.png" alt="login_user"></p><h2 id="3-6-创建10个用户"><a href="#3-6-创建10个用户" class="headerlink" title="3.6. 创建10个用户"></a>3.6. 创建10个用户</h2><p>为了测试使用，请自行通过接口创建10个用户。</p><h2 id="3-7-编写相关资源接口"><a href="#3-7-编写相关资源接口" class="headerlink" title="3.7. 编写相关资源接口"></a>3.7. 编写相关资源接口</h2><p>给出整体控制器信息<code>UserController.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//返回用户列表</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//3个用户为一页</span></span></span><br><span class="line"><span class="php">        $users = User::paginate(<span class="number">3</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $users;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回单一用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $user;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $user = User::create($request-&gt;all());</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($user)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="string">'用户注册成功。。。'</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'用户注册失败。。。'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $res=Auth::guard(<span class="string">'web'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($res)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="string">'用户登录成功...'</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'用户登录失败'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-8-编写路由"><a href="#3-8-编写路由" class="headerlink" title="3.8. 编写路由"></a>3.8. 编写路由</h2><p>给出整体路由信息<code>api.php</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use Illuminate<span class="string">\Http\Request;</span></span><br><span class="line"></span><br><span class="line">Route::namespace<span class="function"><span class="params">(<span class="string">'Api'</span>)</span>-&gt;</span>prefix<span class="function"><span class="params">(<span class="string">'v1'</span>)</span>-&gt;</span>group(<span class="keyword">function</span> () &#123;</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)</span>-&gt;</span>name(<span class="string">'users.index'</span>);</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users/&#123;user&#125;'</span>,<span class="string">'UserController@show'</span>)</span>-&gt;</span>name(<span class="string">'users.show'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)</span>-&gt;</span>name(<span class="string">'users.store'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)</span>-&gt;</span>name(<span class="string">'users.login'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="4-存在问题"><a href="#4-存在问题" class="headerlink" title="4. 存在问题"></a>4. 存在问题</h1><p>以上所有返回的结果，无论正确或者错误，都没有一个统一格式规范，对开发<code>Api</code>不太友好的，需要我们进行一些修改，让Laravel框架可以更加友好地编写Api。</p><h1 id="5-构造"><a href="#5-构造" class="headerlink" title="5. 构造"></a>5. 构造</h1><h2 id="5-1-跨域问题"><a href="#5-1-跨域问题" class="headerlink" title="5.1. 跨域问题"></a>5.1. 跨域问题</h2><p>所有问题，跨域先行。跨域问题没有解决，一切处理都是纸老虎。这里我们使用medz做的<a href="https://learnku.com/laravel/t/8816/the-new-wheel-php-cors-cross-origin-resource-sharing-solves-the-cross-domain-requirements-of-the-php-project-program" target="_blank" rel="noopener">cors扩展包</a></p><h3 id="5-1-1-安装medz-cors"><a href="#5-1-1-安装medz-cors" class="headerlink" title="5.1.1. 安装medz/cors"></a>5.1.1. 安装medz/cors</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> medz/cors</span><br></pre></td></tr></table></figure><h3 id="5-1-2-发布配置文件"><a href="#5-1-2-发布配置文件" class="headerlink" title="5.1.2. 发布配置文件"></a>5.1.2. 发布配置文件</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Medz<span class="symbol">\C</span>ors<span class="symbol">\L</span>aravel<span class="symbol">\P</span>roviders<span class="symbol">\L</span>aravelServiceProvider" --force</span><br></pre></td></tr></table></figure><h3 id="5-1-3-修改配置文件"><a href="#5-1-3-修改配置文件" class="headerlink" title="5.1.3. 修改配置文件"></a>5.1.3. 修改配置文件</h3><p>打开<code>config/cors.php</code>,在<code>expose-headers</code>添加值<code>Authorization</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'expose-headers'</span>     =&gt; [<span class="string">'Authorization'</span>],</span><br><span class="line">    ......</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><blockquote><p>这样跨域请求时，才能返回<code>header</code>头为<code>Authorization</code>的内容，否则在刷新用户<code>token</code>时不会返回刷新后的<code>token</code></p></blockquote><h3 id="5-1-4-增加中间件别名"><a href="#5-1-4-增加中间件别名" class="headerlink" title="5.1.4. 增加中间件别名"></a>5.1.4. 增加中间件别名</h3><p>打开<code>app/Http/Kernel.php</code>,增加一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">        ...... <span class="comment">//前面的中间件</span></span><br><span class="line">        <span class="string">'cors'</span>=&gt; \Medz\Cors\Laravel\Middleware\ShouldGroup::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-1-5-修改路由"><a href="#5-1-5-修改路由" class="headerlink" title="5.1.5. 修改路由"></a>5.1.5. 修改路由</h3><p>打开<code>routes/api.php</code>,在路由组中增加使用中间件<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route::namespace<span class="function"><span class="params">(<span class="string">'Api'</span>)</span>-&gt;</span>prefix<span class="function"><span class="params">(<span class="string">'v1'</span>)</span>-&gt;</span>middleware<span class="function"><span class="params">(<span class="string">'cors'</span>)</span>-&gt;</span>group(<span class="keyword">function</span> () &#123;</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)</span>-&gt;</span>name(<span class="string">'users.index'</span>);</span><br><span class="line">        Route::get<span class="function"><span class="params">(<span class="string">'/users/&#123;user&#125;'</span>,<span class="string">'UserController@show'</span>)</span>-&gt;</span>name(<span class="string">'users.show'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)</span>-&gt;</span>name(<span class="string">'users.store'</span>);</span><br><span class="line">        Route::post<span class="function"><span class="params">(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)</span>-&gt;</span>name(<span class="string">'users.login'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="5-2-统一Response响应处理"><a href="#5-2-统一Response响应处理" class="headerlink" title="5.2. 统一Response响应处理"></a>5.2. 统一Response响应处理</h2><p>接口主流返回<code>json</code>格式，其中包含<code>http状态码</code>，<code>status请求状态</code>，<code>data请求资源结果</code>等等。需要我们有一个API接口全局都能有统一的格式和对应的数据处理。参考于<a href="https://learnku.com/articles/6035/laravel55-developing-api-combat" target="_blank" rel="noopener">这里</a>。</p><h3 id="5-2-1-封装返回的统一消息"><a href="#5-2-1-封装返回的统一消息" class="headerlink" title="5.2.1. 封装返回的统一消息"></a>5.2.1. 封装返回的统一消息</h3><p>在 <code>app/Api/Helpers</code> 目录(不存在目录自己新建)下新建 <code>ApiResponse.php</code><br>填入如下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span> <span class="title">as</span> <span class="title">FoundationResponse</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Response</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">trait</span> ApiResponse</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $statusCode = FoundationResponse::HTTP_OK;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusCode</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;statusCode;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $statusCode</span><br><span class="line">     * @return $this</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setStatusCode</span><span class="params">($statusCode,$httpCode=null)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $httpCode = $httpCode ?? $statusCode;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;statusCode = $statusCode;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $data</span><br><span class="line">     * @param array $header</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">respond</span><span class="params">($data, $header = [])</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> Response::json($data,<span class="keyword">$this</span>-&gt;getStatusCode(),$header);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $status</span><br><span class="line">     * @param array $data</span><br><span class="line">     * @param null $code</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">status</span><span class="params">($status, array $data, $code = null)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($code)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;setStatusCode($code);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        $status = [</span></span><br><span class="line"><span class="php">            <span class="string">'status'</span> =&gt; $status,</span></span><br><span class="line"><span class="php">            <span class="string">'code'</span> =&gt; <span class="keyword">$this</span>-&gt;statusCode</span></span><br><span class="line"><span class="php">        ];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $data = array_merge($status,$data);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respond($data);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $message</span><br><span class="line">     * @param int $code</span><br><span class="line">     * @param string $status</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line">    /*</span><br><span class="line">     * 格式</span><br><span class="line">     * data:</span><br><span class="line">     *  code:422</span><br><span class="line">     *  message:xxx</span><br><span class="line">     *  status:'error'</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">failed</span><span class="params">($message, $code = FoundationResponse::HTTP_BAD_REQUEST,$status = <span class="string">'error'</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode($code)-&gt;message($message,$status);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $message</span><br><span class="line">     * @param string $status</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">($message, $status = <span class="string">"success"</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;status($status,[</span></span><br><span class="line"><span class="php">            <span class="string">'message'</span> =&gt; $message</span></span><br><span class="line"><span class="php">        ]);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $message</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">internalError</span><span class="params">($message = <span class="string">"Internal Error!"</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($message,FoundationResponse::HTTP_INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $message</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">created</span><span class="params">($message = <span class="string">"created"</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(FoundationResponse::HTTP_CREATED)</span></span><br><span class="line"><span class="php">            -&gt;message($message);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param $data</span><br><span class="line">     * @param string $status</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">success</span><span class="params">($data, $status = <span class="string">"success"</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;status($status,compact(<span class="string">'data'</span>));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $message</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notFond</span><span class="params">($message = <span class="string">'Not Fond!'</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($message,Foundationresponse::HTTP_NOT_FOUND);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-2-2-新建Api控制器基类"><a href="#5-2-2-新建Api控制器基类" class="headerlink" title="5.2.2. 新建Api控制器基类"></a>5.2.2. 新建Api控制器基类</h3><p>在 <code>app/Http/Controller/Api</code> 目录下新建一个<code>Controller.php</code>作为<code>Api</code>专门的<code>基类</code>.<br>填入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>\<span class="title">ApiResponse</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span> <span class="title">as</span> <span class="title">BaseController</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span></span><br><span class="line"><span class="php">    <span class="comment">// 其他通用的Api帮助函数</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-2-3-继承Api控制器基类"><a href="#5-2-3-继承Api控制器基类" class="headerlink" title="5.2.3. 继承Api控制器基类"></a>5.2.3. 继承Api控制器基类</h3><p>让Api的控制器继承这个基类即可。<br>打开<code>UserController.php</code>文件，去掉命名空间<code>use App\Http\Controllers\Controller</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-2-4-如何使用"><a href="#5-2-4-如何使用" class="headerlink" title="5.2.4. 如何使用"></a>5.2.4. 如何使用</h3><p>得益于前面统一消息的封装，使用起来非常容易。<br>1.返回正确信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;success(<span class="string">'用户登录成功...'</span>);</span><br></pre></td></tr></table></figure></p><p>2.返回正确资源信息<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$this</span>-&gt;success(<span class="variable">$user</span>);</span><br></pre></td></tr></table></figure></p><p>3.返回自定义http状态码的正确信息<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;setStatusCode<span class="function"><span class="params">(<span class="number">201</span>)</span>-&gt;</span>success(<span class="string">'用户登录成功...'</span>);</span><br></pre></td></tr></table></figure></p><p>4.返回错误信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;failed(<span class="string">'用户注册失败'</span>);</span><br></pre></td></tr></table></figure></p><p>5.返回自定义http状态码的错误信息<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $<span class="keyword">this</span>-&gt;failed(<span class="string">'用户登录失败'</span>,<span class="number">401</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>默认success返回的状态码是200，failed返回的状态码是400</p></blockquote><h3 id="5-2-5-修改用户控制器"><a href="#5-2-5-修改用户控制器" class="headerlink" title="5.2.5. 修改用户控制器"></a>5.2.5. 修改用户控制器</h3><p>我们将统一消息封装运用到<code>UserController</code>中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//返回用户列表</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//3个用户为一页</span></span></span><br><span class="line"><span class="php">        $users = User::paginate(<span class="number">3</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success($users);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回单一用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success($user);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $user = User::create($request-&gt;all());</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($user)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">'用户注册成功'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'用户注册失败'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $res=Auth::guard(<span class="string">'web'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($res)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">'用户登录成功...'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'用户登录失败'</span>,<span class="number">401</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-2-6-测试"><a href="#5-2-6-测试" class="headerlink" title="5.2.6. 测试"></a>5.2.6. 测试</h3><ol><li>返回用户列表<br>请求<code>http://你的域名/api/v1/users</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_user_list_message.png" alt="success_user_list_message"></li><li>返回单一用户<br>请求<code>http://你的域名/api/v1/users/1</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_simple_user_message.png" alt="success_simple_user_message"></li><li>登陆正确<br>请求<code>http://你的域名/api/v1/login</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_login_user_message.png" alt="success_login_user_message"></li><li>登陆错误<br>请求<code>http://你的域名/api/v1/login</code><br><img src="/assets/blogImg/laravel-api-initialization-preparation/fail_login_user_message.png" alt="fail_login_user_message"><h2 id="5-3-Api-Resource资源"><a href="#5-3-Api-Resource资源" class="headerlink" title="5.3. Api-Resource资源"></a>5.3. Api-Resource资源</h2></li></ol><p>在上面请求返回用户列表和返回单一用户时，返回的字段都是数据库里所有的字段，当然，不包含我们在<code>User</code>模型中去除的<code>password</code>字段。</p><h3 id="5-3-1-需求"><a href="#5-3-1-需求" class="headerlink" title="5.3.1. 需求"></a>5.3.1. 需求</h3><p>此时，我们如果想控制返回的字段有哪些，可以使用<code>select</code>或者使用<code>User</code>模型中的<code>hidden</code>数组来限制字段。</p><p>这2种办法虽然可以，但是扩展性太差。并且我想对<code>status</code>返回的形式进行修改，比如0的时候显示正常，1显示冻结，此时就需要遍历数据进行修改了。此时，Laravel提供的<code>API 资源</code>就可以很好地解决我们的问题。</p><blockquote><p>当构建 API 时，你往往需要一个转换层来联结你的 Eloquent 模型和实际返回给用户的 JSON 响应。Laravel 的资源类能够让你以更直观简便的方式将模型和模型集合转化成 JSON。</p></blockquote><blockquote><p>也就是在C层输出V层时，中间再来一层来专门处理字段问题，我们可以称之为<code>ViewModel</code>层。</p></blockquote><p>详细可以查看<a href="https://learnku.com/docs/laravel/5.7/eloquent-resources/2298" target="_blank" rel="noopener">手册</a>如何使用。</p><h3 id="5-3-2-创建单一用户资源和列表用户资源"><a href="#5-3-2-创建单一用户资源和列表用户资源" class="headerlink" title="5.3.2. 创建单一用户资源和列表用户资源"></a>5.3.2. 创建单一用户资源和列表用户资源</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:resource Api/UserResource</span><br></pre></td></tr></table></figure><p>修改<code>app/Http/Resources/Api</code> 目录下的 <code>UserResource.php</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Json</span>\<span class="title">JsonResource</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Transform the resource into an array.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request  $request</span><br><span class="line">     * @return array</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;status)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">-1</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;status = <span class="string">'已删除'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;status = <span class="string">'正常'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;status = <span class="string">'冻结'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> [</span></span><br><span class="line"><span class="php">            <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span></span><br><span class="line"><span class="php">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span></span><br><span class="line"><span class="php">            <span class="string">'status'</span> =&gt; <span class="keyword">$this</span>-&gt;status,</span></span><br><span class="line"><span class="php">            <span class="string">'created_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;created_at,</span></span><br><span class="line"><span class="php">            <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span></span><br><span class="line"><span class="php">        ];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-3-3-如何使用"><a href="#5-3-3-如何使用" class="headerlink" title="5.3.3. 如何使用"></a>5.3.3. 如何使用</h3><p>返回单一用户(单一的资源)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br></pre></td></tr></table></figure></p><p>返回用户列表(资源列表)<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> UserResource::collection(<span class="variable">$users</span>);</span><br><span class="line">/<span class="regexp">/这里不能用$this-&gt;success(UserResource::collection($users))</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/否则不能返回分页标签信息</span></span><br></pre></td></tr></table></figure></p><h3 id="5-3-4-修改用户控制器"><a href="#5-3-4-修改用户控制器" class="headerlink" title="5.3.4. 修改用户控制器"></a>5.3.4. 修改用户控制器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回用户列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//3个用户为一页</span></span><br><span class="line">    $users = User::paginate(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> UserResource::collection($users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回单一用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-5-测试"><a href="#5-3-5-测试" class="headerlink" title="5.3.5. 测试"></a>5.3.5. 测试</h3><p>返回单一用户(单一的资源)<br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_simple_user_resource.png" alt="success_simple_user_resource"><br>返回用户列表(资源列表)<br><img src="/assets/blogImg/laravel-api-initialization-preparation/success_user_list_resource.png" alt="success_user_list_resource"></p><h2 id="5-4-Enum枚举"><a href="#5-4-Enum枚举" class="headerlink" title="5.4. Enum枚举"></a>5.4. Enum枚举</h2><p>我们常常会使用数字来代表状态，比如用户表，我们使用 <code>-1</code> 代表已删除 <code>0</code> 代表正常 <code>1</code> 代表冻结。</p><h3 id="5-4-1-两个问题"><a href="#5-4-1-两个问题" class="headerlink" title="5.4.1. 两个问题"></a>5.4.1. 两个问题</h3><ol><li>当我们判断一个用户，如果是删除或者冻结状态就不让其登陆了。判断代码这样写<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有可能状态有很多，所以这边就直接用 或 来判断不取反了。</span></span><br><span class="line"><span class="keyword">if</span>($user-&gt;status==<span class="number">-1</span>||$user-&gt;status==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 不允许用户登录逻辑</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户正常登录逻辑</span></span><br></pre></td></tr></table></figure></li></ol><p>上面逻辑和编写没有什么问题。因为是现在看，可以很明白的知道<code>-1</code> 代表已删除，<code>1</code> 代表冻结。但是如果一个月后再来看这行代码，早已经忘记了 <code>-1</code> 跟 <code>1</code> 具体表示的含义。</p><ol start="2"><li>参考上面<code>UserResource.php</code>编写时，判断<code>status</code>具体状态函数，我们是使用<code>switch</code>语句。这样太不美观，而且地方用多了还容易冗余，每次编写都需要去查看每个数字代表的具体意思。</li></ol><h3 id="5-4-2-解决思路"><a href="#5-4-2-解决思路" class="headerlink" title="5.4.2. 解决思路"></a>5.4.2. 解决思路</h3><ol><li>第一个问题：为什么一段时间后再看就不知道<code>-1</code> 跟 <code>1</code> 具体表示的含义？</li></ol><p>&#160; &#160; &#160; &#160;这是因为单纯的数字没有解释说明的作用，变量以及函数这些具有解释说明的作用，可以让我们立刻知道具体含义。</p><ol start="2"><li>第二个问题：如何给一个数字就能直接知道它代表的含义？</li></ol><p>&#160; &#160; &#160; &#160;提供一个函数，返回这个数字代表的具体含义。</p><p>而这些，都可以使用<code>Enum枚举</code>可以解决。</p><h3 id="5-4-3-注意"><a href="#5-4-3-注意" class="headerlink" title="5.4.3. 注意"></a>5.4.3. 注意</h3><p><code>PHP</code>和<code>Laravel</code>框架本身是不支持<code>Enum枚举</code>的，不过我们可以模拟枚举的功能</p><h3 id="5-4-4-创建枚举"><a href="#5-4-4-创建枚举" class="headerlink" title="5.4.4. 创建枚举"></a>5.4.4. 创建枚举</h3><p>在 <code>app/Models</code> 下新建目录 <code>Enum</code> ,并在目录<code>Enum</code>下新建 <code>UserEnum.php</code> 文件，填写以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Enum</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserEnum</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// 状态类别</span></span></span><br><span class="line"><span class="php">    <span class="keyword">const</span> INVALID = <span class="number">-1</span>; <span class="comment">//已删除</span></span></span><br><span class="line"><span class="php">    <span class="keyword">const</span> NORMAL = <span class="number">0</span>; <span class="comment">//正常</span></span></span><br><span class="line"><span class="php">    <span class="keyword">const</span> FREEZE = <span class="number">1</span>; <span class="comment">//冻结</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusName</span><span class="params">($status)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> ($status)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="keyword">self</span>::INVALID:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'已删除'</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="keyword">self</span>::NORMAL:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'正常'</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="keyword">self</span>::FREEZE:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'冻结'</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">'正常'</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-4-5-使用"><a href="#5-4-5-使用" class="headerlink" title="5.4.5. 使用"></a>5.4.5. 使用</h3><p>1.表示具体含义<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有可能状态有很多，所以这边就直接用 或 来判断不取反了。</span></span><br><span class="line"><span class="keyword">if</span>($user-&gt;status==UserEnum::INVALID||$user-&gt;status==UserEnum::FREEZE)&#123;</span><br><span class="line">    <span class="comment">// 不允许用户登录逻辑</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户正常登录逻辑</span></span><br></pre></td></tr></table></figure></p><p>2.修改<code>UserResource.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'id'</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">        <span class="string">'status'</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">        <span class="string">'created_at'</span>=&gt;(string<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">        <span class="string">'updated_at'</span>=&gt;(string)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再请求单一用户和用户列表接口，返回结果和之前一样。</p><h2 id="5-5-异常自定义处理"><a href="#5-5-异常自定义处理" class="headerlink" title="5.5. 异常自定义处理"></a>5.5. 异常自定义处理</h2><h3 id="5-5-1-再发现一个问题"><a href="#5-5-1-再发现一个问题" class="headerlink" title="5.5.1. 再发现一个问题"></a>5.5.1. 再发现一个问题</h3><p>我们在<code>UserController.php</code>文件中修改<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回单一用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(User $user)</span></span>&#123;</span><br><span class="line">    <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>故意报个错，请求看看结果<br><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_true_error_ajax.png" alt="debug_true_error_ajax"><br>我们再把设置成<code>ajax</code>的<code>header</code>头去掉<br><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_true_error.png" alt="debug_true_error"></p><p>报错非常详细，并且把我们隐私设置都暴露出来了，这是由于我们<code>.env</code>的<code>APP_DEBUG</code>是<code>true</code>状态。我们不希望这些信息被其他访问者看到。我们改为<code>false</code>，再请求看看结果。</p><p><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_false_error.png" alt="debug_false_error"></p><blockquote><p>嗯。很好，不仅别人看不到了，连我们自己都看不到了</p></blockquote><h3 id="5-5-2-需求"><a href="#5-5-2-需求" class="headerlink" title="5.5.2. 需求"></a>5.5.2. 需求</h3><ol><li>所有的异常信息都以统一<code>json</code>格式输出</li><li>因为我们是开发者，并且<code>.env</code>文件默认是不加入<code>git</code>上传线上的，我们希望可以当<code>APP_DEBUG</code>为<code>true</code>(本地)的时候可以继续显示详细的错误信息，<code>false</code>(线上)的时候就显示简要<code>json</code>信息，比如500。</li></ol><h3 id="5-5-3-创建自定义异常处理"><a href="#5-5-3-创建自定义异常处理" class="headerlink" title="5.5.3. 创建自定义异常处理"></a>5.5.3. 创建自定义异常处理</h3><p>在 <code>app/Api/Helpers</code> 目录下新建 <code>ExceptionReport.php</code> 文件，填入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Exception</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">AuthorizationException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">AuthenticationException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">ModelNotFoundException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">ValidationException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">MethodNotAllowedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">NotFoundHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionReport</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @var Exception</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $exception;</span></span><br><span class="line">    /**</span><br><span class="line">     * @var Request</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $request;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @var</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $report;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * ExceptionReport constructor.</span><br><span class="line">     * @param Request $request</span><br><span class="line">     * @param Exception $exception</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Request $request, Exception $exception)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;request = $request;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;exception = $exception;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @var array</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="comment">//当抛出这些异常时，可以使用我们定义的错误信息与HTTP状态码</span></span></span><br><span class="line"><span class="php">    <span class="comment">//可以把常见异常放在这里</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $doReport = [</span></span><br><span class="line"><span class="php">        AuthenticationException::class =&gt; [<span class="string">'未授权'</span>,<span class="number">401</span>],</span></span><br><span class="line"><span class="php">        ModelNotFoundException::class =&gt; [<span class="string">'该模型未找到'</span>,<span class="number">404</span>],</span></span><br><span class="line"><span class="php">        AuthorizationException::class =&gt; [<span class="string">'没有此权限'</span>,<span class="number">403</span>],</span></span><br><span class="line"><span class="php">        ValidationException::class =&gt; [],</span></span><br><span class="line"><span class="php">        UnauthorizedHttpException::class=&gt;[<span class="string">'未登录或登录状态失效'</span>,<span class="number">422</span>],</span></span><br><span class="line"><span class="php">        TokenInvalidException::class=&gt;[<span class="string">'token不正确'</span>,<span class="number">400</span>],</span></span><br><span class="line"><span class="php">        NotFoundHttpException::class=&gt;[<span class="string">'没有找到该页面'</span>,<span class="number">404</span>],</span></span><br><span class="line"><span class="php">        MethodNotAllowedHttpException::class=&gt;[<span class="string">'访问方式不正确'</span>,<span class="number">405</span>],</span></span><br><span class="line"><span class="php">    ];</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($className,callable $callback)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;doReport[$className] = $callback;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return bool</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shouldReturn</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//只有请求包含是json或者ajax请求时才有效</span></span></span><br><span class="line"><span class="php"><span class="comment">//        if (! ($this-&gt;request-&gt;wantsJson() || $this-&gt;request-&gt;ajax()))&#123;</span></span></span><br><span class="line"><span class="php"><span class="comment">//</span></span></span><br><span class="line"><span class="php"><span class="comment">//            return false;</span></span></span><br><span class="line"><span class="php"><span class="comment">//        &#125;</span></span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> (array_keys(<span class="keyword">$this</span>-&gt;doReport) <span class="keyword">as</span> $report)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exception <span class="keyword">instanceof</span> $report)&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;report = $report;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @param Exception $e</span><br><span class="line">     * @return static</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(Exception $e)</span></span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>(\request(),$e);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">report</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exception <span class="keyword">instanceof</span> ValidationException)&#123;</span></span><br><span class="line"><span class="php">            $error = array_first(<span class="keyword">$this</span>-&gt;exception-&gt;errors());</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(array_first($error),<span class="keyword">$this</span>-&gt;exception-&gt;status);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        $message = <span class="keyword">$this</span>-&gt;doReport[<span class="keyword">$this</span>-&gt;report];</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($message[<span class="number">0</span>],$message[<span class="number">1</span>]);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prodReport</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'服务器错误'</span>,<span class="string">'500'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-5-4-捕捉异常"><a href="#5-5-4-捕捉异常" class="headerlink" title="5.5.4. 捕捉异常"></a>5.5.4. 捕捉异常</h3><p>修改 <code>app/Exceptions</code> 目录下的 <code>Handler.php</code> 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exceptions</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>\<span class="title">ExceptionReport</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Exception</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Exceptions</span>\<span class="title">Handler</span> <span class="title">as</span> <span class="title">ExceptionHandler</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">ExceptionHandler</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($request, Exception $exception)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//ajax请求我们才捕捉异常</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($request-&gt;ajax())&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 将方法拦截到自己的ExceptionReport</span></span></span><br><span class="line"><span class="php">            $reporter = ExceptionReport::make($exception);</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($reporter-&gt;shouldReturn())&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $reporter-&gt;report();</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>(env(<span class="string">'APP_DEBUG'</span>))&#123;</span></span><br><span class="line"><span class="php">                <span class="comment">//开发环境，则显示详细错误信息</span></span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="keyword">parent</span>::render($request, $exception);</span></span><br><span class="line"><span class="php">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">                <span class="comment">//线上环境,未知错误，则显示500</span></span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $reporter-&gt;prodReport();</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">parent</span>::render($request, $exception);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-5-5-测试"><a href="#5-5-5-测试" class="headerlink" title="5.5.5. 测试"></a>5.5.5. 测试</h3><p>继续打开设置<code>AJAX</code>的<code>headet</code>头</p><p>1.关闭<code>APP_DEBUG</code>，请求刚刚故意错误的接口。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/exception_debug_false_error.png" alt="exception_debug_false_error"><br>2.开启<code>APP_DEBUG</code>，请求刚刚故意错误的接口。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/debug_true_error_ajax.png" alt="debug_true_error_ajax"><br>3.请求一个不存在的路由，查看返回结果。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/exception_debug_false_not_found.png" alt="exception_debug_false_not_found"></p><blockquote><p>其他的异常显示，自行测试啦~</p></blockquote><h2 id="5-6-jwt-auth"><a href="#5-6-jwt-auth" class="headerlink" title="5.6. jwt-auth"></a>5.6. jwt-auth</h2><p>在传统web中，我们一般是使用<code>session</code>来判定一个用户的登陆状态。而在<code>API</code>开发中，我们使用的是<code>token</code>。<code>jwt-token</code>是<code>Laravel</code>开发<code>API</code>用的比较多的。</p><blockquote><p>JWT 全称 JSON Web Tokens ，是一种规范化的 token。可以理解为对 token 这一技术提出一套规范，是在 RFC 7519 中提出的。</p></blockquote><p><code>jwt-auth</code>的详细介绍分析可以看<a href="https://learnku.com/articles/17883" target="_blank" rel="noopener">JWT超详细分析</a>这篇文章，具体使用可以看<a href="https://learnku.com/articles/10885/full-use-of-jwt" target="_blank" rel="noopener">JWT完整使用详解</a> 这篇文章。</p><h3 id="5-6-1-安装"><a href="#5-6-1-安装" class="headerlink" title="5.6.1. 安装"></a>5.6.1. 安装</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require tymon/jwt-auth <span class="number">1.0</span><span class="number">.0</span>-rc<span class="number">.3</span></span><br></pre></td></tr></table></figure><p>如果是<code>Laravel5.5</code>版本，则安装<code>rc.1</code>。如果是<code>Laravel5.6</code>版本，则安装<code>rc.2</code></p><h3 id="5-6-2-配置"><a href="#5-6-2-配置" class="headerlink" title="5.6.2. 配置"></a>5.6.2. 配置</h3><p>配置参考来自<a href="https://learnku.com/articles/7264/using-jwt-auth-to-implement-api-user-authentication-and-painless-refresh-access-token" target="_blank" rel="noopener">使用 Jwt-Auth 实现 API 用户认证以及无痛刷新访问令牌</a></p><p>1.添加服务提供商<br>打开 <code>config</code> 目录下的 app.php文件，添加下面代码<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Tymon\JWTAuth\Providers\LaravelServiceProvider::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>2.发布配置文件<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Tymon<span class="symbol">\J</span>WTAuth<span class="symbol">\P</span>roviders<span class="symbol">\L</span>aravelServiceProvider"</span><br></pre></td></tr></table></figure></p><p>此命令会在 <code>config</code> 目录下生成一个 <code>jwt.php</code> 配置文件，你可以在此进行自定义配置。</p><p>3.生成密钥<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">jwt</span><span class="selector-pseudo">:secret</span></span><br></pre></td></tr></table></figure></p><p>此命令会在你的 <code>.env</code> 文件中新增一行 <code>JWT_SECRET=secret</code>。以此来作为加密时使用的秘钥。</p><p>4.配置 Auth guard<br>打开 <code>config</code> 目录下的 auth.php文件，修改为下面代码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">    <span class="string">'web'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">       <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">       <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>这样，我们就能让api的用户认证变成使用<code>jwt</code>。</p><p>5.更改 Model</p><p>如果需要使用 <code>jwt-auth</code> 作为用户认证，我们需要对我们的 <code>User</code> 模型进行一点小小的改变，实现一个接口，变更后的 <code>User</code> 模型如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> [];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    ......</span></span><br></pre></td></tr></table></figure></p><p>6.配置项详解<br><code>config</code>目录下的<code>jwt.php</code>文件配置详解<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT Authentication Secret</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 用于加密生成 token 的 secret</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'secret' =&gt; env('JWT_SECRET'),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT Authentication Keys</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 如果你在 .env 文件中定义了 JWT_SECRET 的随机字符串</span></span><br><span class="line">    <span class="string">| 那么 jwt 将会使用 对称算法 来生成 token</span></span><br><span class="line">    <span class="string">| 如果你没有定有，那么jwt 将会使用如下配置的公钥和私钥来生成 token</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'keys' =&gt; [</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Public Key</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 公钥</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'public' =&gt; env('JWT_PUBLIC_KEY'),</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Private Key</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 私钥</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'private' =&gt; env('JWT_PRIVATE_KEY'),</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Passphrase</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 私钥的密码。 如果没有设置，可以为 null。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'passphrase' =&gt; env('JWT_PASSPHRASE'),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT time to live</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定 access_token 有效的时间长度（以分钟为单位），默认为1小时，您也可以将其设置为空，以产生永不过期的标记</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'ttl' =&gt; env('JWT_TTL', <span class="number">60</span>),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Refresh time to live</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定 access_token 可刷新的时间长度（以分钟为单位）。默认的时间为 2 周。</span></span><br><span class="line">    <span class="string">| 大概意思就是如果用户有一个 access_token，那么他可以带着他的 access_token </span></span><br><span class="line">    <span class="string">| 过来领取新的 access_token，直到 2 周的时间后，他便无法继续刷新了，需要重新登录。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'refresh_ttl' =&gt; env('JWT_REFRESH_TTL', <span class="number">20160</span>),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| JWT hashing algorithm</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定将用于对令牌进行签名的散列算法。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'algo' =&gt; env('JWT_ALGO', 'HS256'),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Required Claims</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定必须存在于任何令牌中的声明。</span></span><br><span class="line">    <span class="string">| </span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'required_claims' =&gt; [</span><br><span class="line">        'iss',</span><br><span class="line">        'iat',</span><br><span class="line">        'exp',</span><br><span class="line">        'nbf',</span><br><span class="line">        'sub',</span><br><span class="line">        'jti',</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Persistent Claims</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定在刷新令牌时要保留的声明密钥。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'persistent_claims' =&gt; [</span><br><span class="line">        <span class="comment">// 'foo',</span></span><br><span class="line">        <span class="comment">// 'bar',</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Blacklist Enabled</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 为了使令牌无效，您必须启用黑名单。</span></span><br><span class="line">    <span class="string">| 如果您不想或不需要此功能，请将其设置为 false。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'blacklist_enabled' =&gt; env('JWT_BLACKLIST_ENABLED', true),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">| -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Blacklist Grace Period</span></span><br><span class="line">    <span class="string">| -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 当多个并发请求使用相同的JWT进行时，</span></span><br><span class="line">    <span class="string">| 由于 access_token 的刷新 ，其中一些可能会失败</span></span><br><span class="line">    <span class="string">| 以秒为单位设置请求时间以防止并发的请求失败。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'blacklist_grace_period' =&gt; env('JWT_BLACKLIST_GRACE_PERIOD', <span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">| Providers</span></span><br><span class="line">    <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">| 指定整个包中使用的各种提供程序。</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    'providers' =&gt; [</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| JWT Provider</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 指定用于创建和解码令牌的提供程序。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'jwt' =&gt; Tymon\JWTAuth\Providers\JWT\Namshi::class,</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Authentication Provider</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 指定用于对用户进行身份验证的提供程序。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'auth' =&gt; Tymon\JWTAuth\Providers\Auth\Illuminate::class,</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">| Storage Provider</span></span><br><span class="line">        <span class="string">|--------------------------------------------------------------------------</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">| 指定用于在黑名单中存储标记的提供程序。</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        'storage' =&gt; Tymon\JWTAuth\Providers\Storage\Illuminate::class,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-6-3-测试"><a href="#5-6-3-测试" class="headerlink" title="5.6.3. 测试"></a>5.6.3. 测试</h3><p>1.我们在<code>UserController</code>控制器中将<code>login</code>方法进行修改以及新增一个<code>logout</code>方法用来退出登录还有<code>info</code>方法用来获取当前用户的信息。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $token=Auth::guard(<span class="string">'api'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>($token) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Auth::guard(<span class="string">'api'</span>)-&gt;logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'退出成功...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回当前登录用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $user = Auth::guard(<span class="string">'api'</span>)-&gt;user();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource($user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.添加一下路由<br><code>routes/api.php</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前用户信息</span></span><br><span class="line">Route::get(<span class="string">'/users/info'</span>,<span class="string">'UserController@info'</span>)-&gt;name(<span class="string">'users.info'</span>);</span><br></pre></td></tr></table></figure></p><p>3.接着我们打开<code>postman</code>,请求<code>http://你的域名/api/v1/login</code>.可以看到接口返回的<code>token</code>.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"token"</span>: <span class="string">"bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC90ZXN0LmNvbVwvYXBpXC92MVwvbG9naW4iLCJpYXQiOjE1NTEzMzUyNzgsImV4cCI6MTU1MTMzODg3OCwibmJmIjoxNTUxMzM1Mjc4LCJqdGkiOiJrUzZSWHRoQVBkczR6ck4wIiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.FLk-JPFBDTWcItPRN8SVGaLI0j2zgiWLLs_MNKxCafQ"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.此时，我们打开<code>Postman</code>直接访问<code>http://你的域名/api/v1/users/info</code>,你会看到报了如下错误.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trying <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">property</span> '<span class="built_in">id</span>' <span class="keyword">of</span> non-object</span><br></pre></td></tr></table></figure></p><p>这是我们没有携带token导致的。报错不友好我们将在下面<code>自动刷新用户认证</code>解决。</p><p>5.我们在<code>Postman</code>的<code>Header</code>头部分再加一个<code>key</code>为<code>Authorization</code>，<code>value</code>为登陆成功后返回的<code>token</code>值，然后再次进行请求，可以看到成功返回当前登陆用户的信息。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/postman_set_bearer.png" alt="postman_set_bearer"></p><h2 id="5-7-自动刷新用户认证"><a href="#5-7-自动刷新用户认证" class="headerlink" title="5.7. 自动刷新用户认证"></a>5.7. 自动刷新用户认证</h2><h3 id="5-7-1-需求"><a href="#5-7-1-需求" class="headerlink" title="5.7.1. 需求"></a>5.7.1. 需求</h3><p>现在我想用户登录后，为了保证安全性，每个小时该用户的token都会自动刷新为全新的，用旧的token请求不会通过。我们知道，用户如果token不对，就会退到当前界面重新登录来获得新的token，我同时希望虽然刷新了token，但是能否不要重新登录，就算重新登录也是一周甚至一个月之后呢？给用户一种无感知的体验。</p><p>看着感觉很神奇，我们一起手摸手来实现。</p><h3 id="5-7-2-自定义认证中间件"><a href="#5-7-2-自定义认证中间件" class="headerlink" title="5.7.2. 自定义认证中间件"></a>5.7.2. 自定义认证中间件</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:middleware Api/RefreshTokenMiddleware</span><br></pre></td></tr></table></figure><p>打开 <code>app/Http/Middleware/Api</code> 目录下的 <code>RefreshTokenMiddleware.php</code> 文件，填写以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"><span class="comment">//         使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::guard(<span class="string">'api'</span>)-&gt;onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-7-3-增加中间件别名"><a href="#5-7-3-增加中间件别名" class="headerlink" title="5.7.3. 增加中间件别名"></a>5.7.3. 增加中间件别名</h3><p>打开 <code>app/Http</code> 目录下的 <code>Kernel.php</code> 文件，添加如下一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'api.refresh'</span>=&gt;\App\Http\Middleware\Api\RefreshTokenMiddleware::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-7-4-路由器修改"><a href="#5-7-4-路由器修改" class="headerlink" title="5.7.4. 路由器修改"></a>5.7.4. 路由器修改</h3><p>接着我们将路由进行修改，添加上我们写好的中间件。<br><code>routes/api.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">Route::namespace(<span class="string">'Api'</span>)-&gt;prefix(<span class="string">'v1'</span>)-&gt;middleware(<span class="string">'cors'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">        Route::post(<span class="string">'/users'</span>,<span class="string">'UserController@store'</span>)-&gt;name(<span class="string">'users.store'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">        Route::post(<span class="string">'/login'</span>,<span class="string">'UserController@login'</span>)-&gt;name(<span class="string">'users.login'</span>);</span></span><br><span class="line"><span class="php">        Route::middleware(<span class="string">'api.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">//当前用户信息</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/users/info'</span>,<span class="string">'UserController@info'</span>)-&gt;name(<span class="string">'users.info'</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">//用户列表</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/users'</span>,<span class="string">'UserController@index'</span>)-&gt;name(<span class="string">'users.index'</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">//用户信息</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/users/&#123;user&#125;'</span>,<span class="string">'UserController@show'</span>)-&gt;name(<span class="string">'users.show'</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">//用户退出</span></span></span><br><span class="line"><span class="php">            Route::get(<span class="string">'/logout'</span>,<span class="string">'UserController@logout'</span>)-&gt;name(<span class="string">'users.logout'</span>);</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">&#125;);</span></span><br></pre></td></tr></table></figure></p><h3 id="5-7-5-测试"><a href="#5-7-5-测试" class="headerlink" title="5.7.5. 测试"></a>5.7.5. 测试</h3><p>1.此时我们再次不携带token，使用<code>Postman</code>直接访问<code>http://你的域名/api/v1/users/info</code>,返回如下错误<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"未登录或登录状态失效"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.那随便输入token又会是怎么样呢？我们也来尝试一下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"token不正确"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.现在，我们再做一个如果<code>token</code>过期了，但是刷新限制没有过期的情况，看看会有什么结果。我们先将<code>config/jwt.php</code>里的<code>ttl</code>从<code>60</code>改成<code>1</code>。意味着重新生成的token将会1分钟后过期。</p><p>然后我们重新登录获取到<code>token</code>，替换<code>/api/v1/users/info</code>原有的token，进行访问，可以正常返回用户的信息。</p><p>等过了一分钟，我们再进行访问，发现依旧可以返回用户信息，但是我们在返回的<code>Headers</code>的<code>Authorization</code>可以看到新的<code>token</code>。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/refresh_token_ttl.png" alt="refresh_token_ttl"><br>此时如果我们再次访问，则报出异常<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"未登录或登录状态失效"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们替换上新的<code>token</code>，再次访问，访问正常通过。</p><p>4.现在，我们接着继续做<code>token</code>和刷新时间都过期的情况，会发生什么。我们再将<code>config/jwt.php</code>里的<code>refresh_ttl</code>从<code>20160</code>改成<code>2</code>。</p><p>重新按照3步骤执行一次，当刚过一分钟时，返回结果与3相同，都是正常返回信息并且在<code>Headers</code>携带了新的token。</p><p>当2分钟过后，报如下错误信息。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"未登录或登录状态失效"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.为了后面的方便，我们将修改的<code>ttl</code>和<code>refresh_ttl</code>的时间复原。</p><h3 id="5-7-6-前端逻辑"><a href="#5-7-6-前端逻辑" class="headerlink" title="5.7.6. 前端逻辑"></a>5.7.6. 前端逻辑</h3><p>上面可以看出，当token过期或者无效以及乱写，返回的<code>HTTP状态码</code>都是<code>422</code>。这是因为这个异常被我们上面自定义异常捕捉了<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnauthorizedHttpException::<span class="class"><span class="keyword">class</span>=&gt;['未登录或登录状态失效',<span class="type">422]</span>,<span class="type"></span></span></span><br></pre></td></tr></table></figure></p><p>所以，可以跟前端小伙伴商量一个状态码，专门表示接收到这个状态码就要退回重新登录了。当<code>Header</code>头携带<code>Authorization</code>时，就要及时自动替换新的token，不需要回到重新登录界面。这样用户就能完全无感知啦~</p><h2 id="5-8-多角色认证"><a href="#5-8-多角色认证" class="headerlink" title="5.8. 多角色认证"></a>5.8. 多角色认证</h2><p>如果我们的系统不仅仅只有一种角色身份，还有其他的角色身份需要认证呢？目前我们的角色认证是认证<code>Users</code>表的，如果我们再加入一个<code>Admins</code>表，也要角色认证要如何操作?</p><h3 id="5-8-1-Admin用户表"><a href="#5-8-1-Admin用户表" class="headerlink" title="5.8.1. Admin用户表"></a>5.8.1. Admin用户表</h3><p>我们将数据库的<code>Users</code>表复制一份，将其命名为<code>Admins</code>表，并且将其中的一个用户名进行修改，以示区别。</p><h3 id="5-8-2-框架文件"><a href="#5-8-2-框架文件" class="headerlink" title="5.8.2. 框架文件"></a>5.8.2. 框架文件</h3><p>我们分别将<code>User.php</code>模型文件，<code>UserEnum.php</code>枚举文件,<code>UserResource.php</code>资源文件，<code>UserRequest.php</code>验证器文件<code>UserController.php</code>控制器文件各复制一份，更改为<code>Admin</code>的，并将其中内容也改为<code>Admin</code>相关。因为就是复制粘贴，把<code>user</code>改成<code>admin</code>,由于篇幅问题具体修改过程我就不放代码了。具体的可以看下面的<code>成品</code></p><h3 id="5-8-3-用户认证文件"><a href="#5-8-3-用户认证文件" class="headerlink" title="5.8.3. 用户认证文件"></a>5.8.3. 用户认证文件</h3><p>打开<code>config/auth.php</code>文件，修改如下内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">        <span class="string">'web'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">'admin'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'admins'</span>,</span><br><span class="line">        ],</span><br><span class="line">],</span><br><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">        <span class="string">'users'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'eloquent'</span>,</span><br><span class="line">            <span class="string">'model'</span> =&gt; App\Models\User::class,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'admins'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'eloquent'</span>,</span><br><span class="line">            <span class="string">'model'</span> =&gt; App\Models\Admin::class,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 'users' =&gt; [</span></span><br><span class="line">        <span class="comment">//     'driver' =&gt; 'database',</span></span><br><span class="line">        <span class="comment">//     'table' =&gt; 'users',</span></span><br><span class="line">        <span class="comment">// ],</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p><p>此时，guard守护就多了一个<code>admin</code>，当<code>Auth::guard(&#39;admin&#39;)</code>时，就会自动查找<code>Admin</code>模型文件，这样就能跟上面的<code>User</code>模型认证分开了。</p><h3 id="5-8-4-刷新用户认证中间件"><a href="#5-8-4-刷新用户认证中间件" class="headerlink" title="5.8.4. 刷新用户认证中间件"></a>5.8.4. 刷新用户认证中间件</h3><p>我们需要再复制一个刷新用户认证的中间件，专门为<code>admin</code>认证以及刷新<code>token</code>.<br><code>app/Http/Controllers/Middleware/Api/RefreshAdminTokenMiddleware.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"><span class="comment">//         使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::guard(<span class="string">'admin'</span>)-&gt;onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-8-5-增加中间件别名"><a href="#5-8-5-增加中间件别名" class="headerlink" title="5.8.5. 增加中间件别名"></a>5.8.5. 增加中间件别名</h3><p>打开 app/Http 目录下的 Kernel.php 文件，添加如下一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'admin.refresh'</span>=&gt;\App\Http\Middleware\Api\RefreshAdminTokenMiddleware::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="5-8-6-路由文件"><a href="#5-8-6-路由文件" class="headerlink" title="5.8.6. 路由文件"></a>5.8.6. 路由文件</h3><p>routes/api.php<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">Route::namespace(<span class="string">'Api'</span>)-&gt;prefix(<span class="string">'v1'</span>)-&gt;middleware(<span class="string">'cors'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/users'</span>, <span class="string">'UserController@store'</span>)-&gt;name(<span class="string">'users.store'</span>);</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/login'</span>, <span class="string">'UserController@login'</span>)-&gt;name(<span class="string">'users.login'</span>);</span></span><br><span class="line"><span class="php">    Route::middleware(<span class="string">'api.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//当前用户信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users/info'</span>, <span class="string">'UserController@info'</span>)-&gt;name(<span class="string">'users.info'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户列表</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users'</span>, <span class="string">'UserController@index'</span>)-&gt;name(<span class="string">'users.index'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/users/&#123;user&#125;'</span>, <span class="string">'UserController@show'</span>)-&gt;name(<span class="string">'users.show'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//用户退出</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/logout'</span>, <span class="string">'UserController@logout'</span>)-&gt;name(<span class="string">'users.logout'</span>);</span></span><br><span class="line"><span class="php">    &#125;);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//管理员注册</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/admins'</span>, <span class="string">'AdminController@store'</span>)-&gt;name(<span class="string">'admins.store'</span>);</span></span><br><span class="line"><span class="php">    <span class="comment">//管理员登录</span></span></span><br><span class="line"><span class="php">    Route::post(<span class="string">'/admin/login'</span>, <span class="string">'AdminController@login'</span>)-&gt;name(<span class="string">'admins.login'</span>);</span></span><br><span class="line"><span class="php">    Route::middleware(<span class="string">'admin.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//当前管理员信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins/info'</span>, <span class="string">'AdminController@info'</span>)-&gt;name(<span class="string">'admins.info'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//管理员列表</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins'</span>, <span class="string">'AdminController@index'</span>)-&gt;name(<span class="string">'admins.index'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//管理员信息</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins/&#123;user&#125;'</span>, <span class="string">'AdminController@show'</span>)-&gt;name(<span class="string">'admins.show'</span>);</span></span><br><span class="line"><span class="php">        <span class="comment">//管理员退出</span></span></span><br><span class="line"><span class="php">        Route::get(<span class="string">'/admins/logout'</span>, <span class="string">'AdminController@logout'</span>)-&gt;name(<span class="string">'admins.logout'</span>);</span></span><br><span class="line"><span class="php">    &#125;);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;);</span></span><br></pre></td></tr></table></figure></p><h3 id="5-8-7-控制器文件"><a href="#5-8-7-控制器文件" class="headerlink" title="5.8.7. 控制器文件"></a>5.8.7. 控制器文件</h3><p><code>app/Http/Controllers/Api/AdminController.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Api</span>\<span class="title">AdminResource</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Admin</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//返回用户列表</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//3个用户为一页</span></span></span><br><span class="line"><span class="php">        $admins = Admin::paginate(<span class="number">3</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> AdminResource::collection($admins);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回单一用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(Admin $admin)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> AdminResource($admin));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//返回当前登录用户信息</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        $admins = Auth::guard(<span class="string">'admin'</span>)-&gt;user();</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> AdminResource($admins));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户注册</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $admin = Admin::create($request-&gt;all());</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($admin)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">'用户注册成功'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'用户注册失败'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户登录</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $token=Auth::guard(<span class="string">'admin'</span>)-&gt;attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($token) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>,<span class="number">400</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="comment">//用户退出</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        Auth::guard(<span class="string">'admin'</span>)-&gt;logout();</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'退出成功...'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-8-8-测试"><a href="#5-8-8-测试" class="headerlink" title="5.8.8. 测试"></a>5.8.8. 测试</h3><p>我们将<code>admin</code>这边登陆返回的token放在<code>admin</code>的请求用户信息接口，看看会不会串号。结果返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"guaosi123"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="string">"正常"</span>,</span><br><span class="line">        <span class="attr">"created_at"</span>: <span class="string">"2019-02-26 08:12:31"</span>,</span><br><span class="line">        <span class="attr">"updated_at"</span>: <span class="string">"2019-02-26 08:12:31"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们再将token放在<code>user</code>的请求用户信息接口，看看会不会串号。结果返回<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"data"</span>: &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"guaosi123"</span>,</span><br><span class="line">        <span class="string">"status"</span>: <span class="string">"正常"</span>,</span><br><span class="line">        <span class="string">"created_at"</span>: <span class="string">"2019-02-26 08:12:31"</span>,</span><br><span class="line">        <span class="string">"updated_at"</span>: <span class="string">"2019-03-01 01:48:12"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看来<code>jwt-auth</code>真的串号了，这个问题我们下面再开一个标题进行解决。</p><h3 id="5-8-9-自动区分guard"><a href="#5-8-9-自动区分guard" class="headerlink" title="5.8.9. 自动区分guard"></a>5.8.9. 自动区分guard</h3><p>1.当我们编写登陆，退出，获取当前用户信息的时候，都需要<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Auth::guard(<span class="string">'admin'</span>)</span><br></pre></td></tr></table></figure></p><p>通过制定<code>guard</code>的具体守护是哪一个。因为框架默认的<code>guard</code>默认守护的是<code>web</code>。</p><p>所以，我希望可以让<code>guard</code>自动化，如果我请求的是<code>users</code>的，我就守护<code>api</code>。如果我请求的是<code>admins</code>的，我就守护<code>admin</code>。</p><p>接下来，就以<code>admins</code>的为例，<code>users</code>的保持不动</p><p>2.新建中间件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="built_in">make</span>:middleware Api/AdminGuardMiddleware</span><br></pre></td></tr></table></figure></p><p>打开<code>app/Http/Middleware/Api/AdminGuardMiddleware.php</code> 文件，填入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">AdminGuardMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        config([<span class="string">'auth.defaults.guard'</span>=&gt;<span class="string">'admin'</span>]);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>3.添加中间件别名<br>打开 <code>app/Http</code> 目录下的 <code>Kernel.php</code> 文件，添加如下一行<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'admin.guard'</span>=&gt;\App\Http\Middleware\Api\AdminGuardMiddleware::<span class="keyword">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>4.修改路由<br>接着我们将路由进行修改，添加上我们写好的中间件。<br><code>routes/api.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'admin.guard'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//管理员注册</span></span><br><span class="line">        Route::post(<span class="string">'/admins'</span>, <span class="string">'AdminController@store'</span>)-&gt;name(<span class="string">'admins.store'</span>);</span><br><span class="line">        <span class="comment">//管理员登录</span></span><br><span class="line">        Route::post(<span class="string">'/admin/login'</span>, <span class="string">'AdminController@login'</span>)-&gt;name(<span class="string">'admins.login'</span>);</span><br><span class="line">        Route::middleware(<span class="string">'admin.refresh'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//当前管理员信息</span></span><br><span class="line">            Route::get(<span class="string">'/admins/info'</span>, <span class="string">'AdminController@info'</span>)-&gt;name(<span class="string">'admins.info'</span>);</span><br><span class="line">            <span class="comment">//管理员列表</span></span><br><span class="line">            Route::get(<span class="string">'/admins'</span>, <span class="string">'AdminController@index'</span>)-&gt;name(<span class="string">'admins.index'</span>);</span><br><span class="line">            <span class="comment">//管理员信息</span></span><br><span class="line">            Route::get(<span class="string">'/admins/&#123;user&#125;'</span>, <span class="string">'AdminController@show'</span>)-&gt;name(<span class="string">'admins.show'</span>);</span><br><span class="line">            <span class="comment">//管理员退出</span></span><br><span class="line">            Route::get(<span class="string">'/admins/logout'</span>, <span class="string">'AdminController@logout'</span>)-&gt;name(<span class="string">'admins.logout'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>5.修改控制器<br><code>app/Http/Controllers/Api/AdminController.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回当前登录用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $admins = Auth::user();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(newAdminResource($admins));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">    $token=Auth::attempt([<span class="string">'name'</span>=&gt;$request-&gt;name,<span class="string">'password'</span>=&gt;$request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>($token) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Auth::logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'退出成功...'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.测试结果<br>将<code>admin</code>登陆后的token再次携带访问<code>/api/v1/admins/info</code>,依旧可以正常输出当前用户信息。</p><blockquote><p>user的自动区分请自己填写，这里就不再啰嗦一遍了。</p></blockquote><h2 id="5-9-修复角色认证串号问题"><a href="#5-9-修复角色认证串号问题" class="headerlink" title="5.9. 修复角色认证串号问题"></a>5.9. 修复角色认证串号问题</h2><p>首先，我们需要知道一个问题，<code>jwt-auth</code>颁发的<code>token</code>里面是不包含<code>模型驱动</code>的。也就是说，通过这个令牌，我们不知道它到底是属于<code>api</code>还是属于<code>admin</code>的。</p><blockquote><p>折腾了一晚上，百度了很多资料，想找找有没有解决办法。结果找到的都是没什么作用的，或者是让自动刷新失效了。最后自己追源码，找到了这种比较完美的方式。</p></blockquote><h3 id="5-9-1-函数"><a href="#5-9-1-函数" class="headerlink" title="5.9.1. 函数"></a>5.9.1. 函数</h3><p>我们先来看几个我们在中间件中用的函数<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span>checkForToken($request)</span><br><span class="line"><span class="comment">//这个函数只会检测是否携带token以及token是否能被当前密钥所解析</span></span><br><span class="line"></span><br><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">auth</span>-&gt;</span><span class="function"><span class="title">parseToken</span>()-&gt;</span>authenticate()</span><br><span class="line"><span class="comment">//将使用token进行登录，如果token过期，则抛出 TokenExpiredException 异常</span></span><br><span class="line"></span><br><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">auth</span>-&gt;</span>refresh(); </span><br><span class="line"><span class="comment">//刷新当前token</span></span><br></pre></td></tr></table></figure></p><p>然后我们再来看一个有趣的函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Auth::check();</span><br><span class="line"><span class="comment">//可以根据当前的`guard`来判断这个token是否属于这个 guard ,不是则抛出 TokenInvalidException 异常</span></span><br><span class="line"><span class="comment">//但是，当token过期时，无论是不是属于这个 guard ，它也是都抛出 TokenInvalidException 异常。这导致我们无法正常判断出到底是属于哪种问题</span></span><br><span class="line"><span class="comment">//所以，想要用check()来判断，是不可能的。</span></span><br></pre></td></tr></table></figure></p><p>接着，我们继续看一个有意思的函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Auth::payload();</span><br><span class="line"><span class="comment">//可以输出当前token的载荷信息(也就是token解析后的内容)</span></span><br><span class="line"><span class="comment">//但是，如果你这个token已经过期了，那这个函数将会报错</span></span><br></pre></td></tr></table></figure></p><h3 id="5-9-2-原理"><a href="#5-9-2-原理" class="headerlink" title="5.9.2. 原理"></a>5.9.2. 原理</h3><p>我们通过<code>Auth::payload()</code>可以看到未过期token的载荷信息<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"iss"</span>: <span class="string">"http://test.com/api/v1/admin/login"</span>,</span><br><span class="line">  <span class="attr">"iat"</span>: <span class="number">1551407332</span>,</span><br><span class="line">  <span class="attr">"exp"</span>: <span class="number">1551407392</span>,</span><br><span class="line">  <span class="attr">"nbf"</span>: <span class="number">1551407332</span>,</span><br><span class="line">  <span class="attr">"jti"</span>: <span class="string">"f9zwcMHaXBr5kQYp"</span>,</span><br><span class="line">  <span class="attr">"prv"</span>: <span class="string">"df883db97bd05ef8ff85082d686c45e832e593a9"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们其实是可以拿到这些荷载信息的。同时，我们也可以加入自己的信息，这样在中间件时候进行解析，拿到我们的负载，就可以进行判断是否是属于当前<code>guard</code>的token了。</p><h3 id="5-9-3-实现"><a href="#5-9-3-实现" class="headerlink" title="5.9.3. 实现"></a>5.9.3. 实现</h3><p>修改 <code>app\Http\Controllers\Api\AdminController.php</code> 中的 <code>login</code>方法，在<code>token</code>中加入我们定义的字段。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前守护的名称</span></span><br><span class="line">    $present_guard =Auth::getDefaultDriver();</span><br><span class="line">    $token = Auth::claims([<span class="string">'guard'</span>=&gt;$present_guard])-&gt;attempt([<span class="string">'name'</span> =&gt; $request-&gt;name, <span class="string">'password'</span> =&gt; $request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span> ($token) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再修改中间件<code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code> ，让其就算过期<code>token</code>也能读取出里面的信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line">     * @throws TokenInvalidException</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//1. 格式通过，验证是否是专属于这个的token</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前守护的名称</span></span></span><br><span class="line"><span class="php">        $present_guard = Auth::getDefaultDriver();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前token</span></span></span><br><span class="line"><span class="php">        $token=Auth::getToken();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//即使过期了，也能获取到token里的 载荷 信息。</span></span></span><br><span class="line"><span class="php">        $payload = Auth::manager()-&gt;getJWTProvider()-&gt;decode($token-&gt;get());</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//如果不包含guard字段或者guard所对应的值与当前的guard守护值不相同</span></span></span><br><span class="line"><span class="php">        <span class="comment">//证明是不属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">empty</span>($payload[<span class="string">'guard'</span>])||$payload[<span class="string">'guard'</span>]!=$present_guard)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="comment">//使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="comment">//2. 此时进入的都是属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 3. 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这个中间件是通用的，可以直接替换User的刷新用户认证中间件噢</p></blockquote><h3 id="5-9-4-测试"><a href="#5-9-4-测试" class="headerlink" title="5.9.4. 测试"></a>5.9.4. 测试</h3><p>此时再次进行测试是否串号，最后结果可以成功阻止之前的串号问题，暂未发现其他BUG。</p><blockquote><p>user的修复串号问题请自己修改，这里就不再啰嗦一遍了。</p></blockquote><h2 id="5-10-单一设备登陆"><a href="#5-10-单一设备登陆" class="headerlink" title="5.10. 单一设备登陆"></a>5.10. 单一设备登陆</h2><h3 id="5-10-1-提出需求"><a href="#5-10-1-提出需求" class="headerlink" title="5.10.1. 提出需求"></a>5.10.1. 提出需求</h3><p>同一时间只允许登录唯一一台设备。例如设备 A 中用户如果已经登录，那么使用设备 B 登录同一账户，设备 A 就无法继续使用了。</p><h3 id="5-10-2-原理"><a href="#5-10-2-原理" class="headerlink" title="5.10.2. 原理"></a>5.10.2. 原理</h3><p>我们在登陆，<code>token</code>过期自动更换的时候，都会产生一个新的<code>token</code>。</p><p>我们将<code>token</code>都存到表中的<code>last_token</code>字段。在登陆接口，获取到<code>last_token</code>里的值，将其加入黑名单。</p><p>这样，只要我们无论在哪里登陆，之前的<code>token</code>一定会被拉黑失效，必须重新登陆，我们的目的也就达到了。</p><h3 id="5-10-3-实现"><a href="#5-10-3-实现" class="headerlink" title="5.10.3. 实现"></a>5.10.3. 实现</h3><p>修改 <code>app\Http\Controllers\Api\AdminController.php</code> 中的 <code>login</code>方法，在登陆的时候，拉黑上一个<code>token</code>。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前守护的名称</span></span><br><span class="line">    $present_guard =Auth::getDefaultDriver();</span><br><span class="line">    $token = Auth::claims([<span class="string">'guard'</span>=&gt;$present_guard])-&gt;attempt([<span class="string">'name'</span> =&gt; $request-&gt;name, <span class="string">'password'</span> =&gt; $request-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span> ($token) &#123;</span><br><span class="line">        <span class="comment">//如果登陆，先检查原先是否有存token，有的话先失效，然后再存入最新的token</span></span><br><span class="line">        $user = Auth::user();</span><br><span class="line">        <span class="keyword">if</span> ($user-&gt;last_token) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Auth::setToken($user-&gt;last_token)-&gt;invalidate();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (TokenExpiredException $e)&#123;</span><br><span class="line">                <span class="comment">//因为让一个过期的token再失效，会抛出异常，所以我们捕捉异常，不需要做任何处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $user-&gt;last_token = $token;</span><br><span class="line">        $user-&gt;save();        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">'token'</span> =&gt; <span class="string">'bearer '</span> . $token]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">'账号或密码错误'</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再修改中间件<code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code> ，更新的<code>token</code>加到<code>last_token</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Auth</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Closure</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Http\Request $request</span><br><span class="line">     * @param  \Closure $next</span><br><span class="line">     *</span><br><span class="line">     * @throws \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line">     * @throws TokenInvalidException</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checkForToken($request);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//1. 格式通过，验证是否是专属于这个的token</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前守护的名称</span></span></span><br><span class="line"><span class="php">        $present_guard = Auth::getDefaultDriver();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取当前token</span></span></span><br><span class="line"><span class="php">        $token=Auth::getToken();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//即使过期了，也能获取到token里的 载荷 信息。</span></span></span><br><span class="line"><span class="php">        $payload = Auth::manager()-&gt;getJWTProvider()-&gt;decode($token-&gt;get());</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//如果不包含guard字段或者guard所对应的值与当前的guard守护值不相同</span></span></span><br><span class="line"><span class="php">        <span class="comment">//证明是不属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">empty</span>($payload[<span class="string">'guard'</span>])||$payload[<span class="string">'guard'</span>]!=$present_guard)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="comment">//使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span></span><br><span class="line"><span class="php">        <span class="comment">//2. 此时进入的都是属于当前guard守护的token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> $next($request);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, <span class="string">'未登录'</span>);</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (TokenExpiredException $exception) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// 3. 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 刷新用户的 token</span></span></span><br><span class="line"><span class="php">                $token = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span></span><br><span class="line"><span class="php">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span></span><br><span class="line"><span class="php">                Auth::onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">'sub'</span>]);</span></span><br><span class="line"><span class="php">                <span class="comment">//刷新了token，将token存入数据库</span></span></span><br><span class="line"><span class="php">                $user = Auth::user();</span></span><br><span class="line"><span class="php">                $user-&gt;last_token = $token;</span></span><br><span class="line"><span class="php">                $user-&gt;save();</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (JWTException $exception) &#123;</span></span><br><span class="line"><span class="php">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span></span><br><span class="line"><span class="php">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">'jwt-auth'</span>, $exception-&gt;getMessage());</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 在响应头中返回新的 token</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader($next($request), $token);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-10-4-测试"><a href="#5-10-4-测试" class="headerlink" title="5.10.4. 测试"></a>5.10.4. 测试</h3><p>我们先登陆一次<code>/api/v1/admin/login</code>，将获取到<code>token</code>携带访问<code>/api/v1/admins/info</code>。正常访问。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/invalid_token_first.png" alt="invalid_token_first"><br>当我们再次请求登陆<code>/api/v1/admin/login</code>，然后继续用原<code>token</code>访问<code>/api/v1/admins/info</code>，提示错误。<br><img src="/assets/blogImg/laravel-api-initialization-preparation/invalid_token_second.png" alt="refresh_token_second"></p><blockquote><p>user的请自行添加，自行测试结果</p></blockquote><h2 id="5-11-horizon管理异步队列"><a href="#5-11-horizon管理异步队列" class="headerlink" title="5.11. horizon管理异步队列"></a>5.11. horizon管理异步队列</h2><p>开发中，我们也经常需要使用异步队列，来加快我们的响应速度。比如发送短信，发送验证码等。但是队列执行结果的成功或者失败只能通过日志来查看。这里，我们使用<code>horizonl</code>来管理异步队列，完成登陆和刷新<code>token</code>时，将<code>token</code>存入<code>last_token</code>的因为放在异步完成。</p><blockquote><p>Horizon 提供了一个漂亮的仪表盘，并且可以通过代码配置你的 Laravel Redis 队列，同时它允许你轻易的监控你的队列系统中诸如任务吞吐量，运行时间和失败任务等关键指标。</p></blockquote><h3 id="5-11-1-安装"><a href="#5-11-1-安装" class="headerlink" title="5.11.1. 安装"></a>5.11.1. 安装</h3><p><code>horizon</code>的详细介绍可以<a href="https://learnku.com/docs/laravel/5.7/horizon/2308" target="_blank" rel="noopener">查看手册</a>。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> laravel/horizon</span><br></pre></td></tr></table></figure></p><h3 id="5-11-2-发布配置文件"><a href="#5-11-2-发布配置文件" class="headerlink" title="5.11.2. 发布配置文件"></a>5.11.2. 发布配置文件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="string">vendor:</span>publish --provider=<span class="string">"Laravel\Horizon\HorizonServiceProvider"</span></span><br></pre></td></tr></table></figure><h3 id="5-11-3-修改队列驱动"><a href="#5-11-3-修改队列驱动" class="headerlink" title="5.11.3. 修改队列驱动"></a>5.11.3. 修改队列驱动</h3><p>打开 <code>.env</code> 文件，将<code>QUEUE_CONNECTION</code>从<code>sync</code>改成<code>redis</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">QUEUE_CONNECTION</span>=redis</span><br></pre></td></tr></table></figure></p><h3 id="5-11-4-仪表盘权限验证"><a href="#5-11-4-仪表盘权限验证" class="headerlink" title="5.11.4. 仪表盘权限验证"></a>5.11.4. 仪表盘权限验证</h3><p>仪表盘不能通过接口访问。所以我们做验证的时候，可以通过指定的<code>IP</code>才能正常通过进入仪表盘。<code>IP</code>可以写在<code>.env</code>文件里，当IP发生变化时进行修改。</p><p>在 <code>.env</code> 最后加上一行<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HORIZON_IP=想通过访问的IP地址</span><br><span class="line">比如</span><br><span class="line">HORIZON_IP=127.0.0.1</span><br></pre></td></tr></table></figure></p><p>修改改<code>app/Providers/AuthServiceProvider.php</code> 文件 里的 <code>boot</code> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerPolicies();</span><br><span class="line">    Horizon::auth(<span class="function"><span class="keyword">function</span><span class="params">($request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(env(<span class="string">'APP_ENV'</span>,<span class="string">'local'</span>) ==<span class="string">'local'</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $get_ip=$request-&gt;getClientIp();</span><br><span class="line">           $can_ip=en(<span class="string">'HORIZON_IP'</span><span class="string">'127.0.0.1'</span>);</span><br><span class="line">           <span class="keyword">return</span> $get_ip == $can_ip;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-11-5-编写任务类"><a href="#5-11-5-编写任务类" class="headerlink" title="5.11.5. 编写任务类"></a>5.11.5. 编写任务类</h3><p>创建一个专门负责保存<code>last_token</code>的任务类<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:<span class="keyword">job</span> Api/SaveLastTokenJob</span><br></pre></td></tr></table></figure></p><p>打开 <code>app/Jobs/Api/SaveLastTokenJob.php</code> 文件 ，填写以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">Api</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Queueable</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">InteractsWithQueue</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Bus</span>\<span class="title">Dispatchable</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">SaveLastTokenJob</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $model;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $token;</span></span><br><span class="line">    /**</span><br><span class="line">     * Create a new job instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($model,$token)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model=$model;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;token=$token;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Execute the job.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model-&gt;last_token = <span class="keyword">$this</span>-&gt;token;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model-&gt;save();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="5-11-6-使用任务类"><a href="#5-11-6-使用任务类" class="headerlink" title="5.11.6. 使用任务类"></a>5.11.6. 使用任务类</h3><p>将控制器与中间件里的<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>-&gt;last_token = <span class="variable">$token</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;save();</span><br></pre></td></tr></table></figure></p><p>统一替换为<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SaveLastTokenJob::dispatch(<span class="variable">$user</span>,<span class="variable">$token</span>);</span><br></pre></td></tr></table></figure></p><h3 id="5-11-7-运行Horizon"><a href="#5-11-7-运行Horizon" class="headerlink" title="5.11.7. 运行Horizon"></a>5.11.7. 运行Horizon</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php artisan horizon</span></span><br></pre></td></tr></table></figure><p>此时，进程处于阻塞状态。<br>打开浏览器输入<code>http://你的域名/horizon</code>,可以看到<code>Horizon</code>仪表盘。</p><p><img src="/assets/blogImg/laravel-api-initialization-preparation/horizon_dashboard.png" alt="horizon_dashboard"></p><h3 id="5-11-8-Supervisor守护进程"><a href="#5-11-8-Supervisor守护进程" class="headerlink" title="5.11.8. Supervisor守护进程"></a>5.11.8. Supervisor守护进程</h3><p>我们可以使用Supervisor来守护我们的horizon阻塞进程。具体方法可以看我之前写的文章:<a href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/">安装和使用守护进程–Supervisor</a></p><h3 id="5-11-9-测试"><a href="#5-11-9-测试" class="headerlink" title="5.11.9. 测试"></a>5.11.9. 测试</h3><p>确认<code>horizon</code>已经正常启动。然后我们访问<code>/api/v1/admin/login</code>这个登陆接口。打开数据库可以发现，<code>last_token</code>与返回结果的<code>token</code>相同。我们也可以再打开仪表盘，看任务完成情况<br><img src="/assets/blogImg/laravel-api-initialization-preparation/horizon_dashboard_job.png" alt="horizon_dashboard_job"></p><h3 id="5-11-10-注意"><a href="#5-11-10-注意" class="headerlink" title="5.11.10. 注意"></a>5.11.10. 注意</h3><p>如果修改了<code>job</code>类的源码，需要将<code>horizon</code>重新启动，否则代码还是未改动前的。(应该是<code>horzion</code>是将所有任务类常驻内存的原因)</p><h1 id="6-成品"><a href="#6-成品" class="headerlink" title="6. 成品"></a>6. 成品</h1><p>到此，所有修改已经全部完成，如果还有新的更改也会实时更新。同时，本文中的所有修改都已经在正式项目中运行过了。</p><p>如果你已经看完了整篇文章，知道了修改的原因，但是不想受累自己修改一遍。我已经将修改后的上传到全球最大的同性交友网站了，可以直接点击<a href="https://github.com/guaosi/Laravel_api_init" target="_blank" rel="noopener">这里</a>直接搬走。或者复制下方的链接打开。</p><p>项目地址: </p><p><a href="https://github.com/guaosi/Laravel_api_init" target="_blank" rel="noopener">https://github.com/guaosi/Laravel_api_init</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;随着前后端完全分离，&lt;code&gt;PHP&lt;/code&gt;也基本告别了&lt;code&gt;view&lt;/code&gt;模板嵌套开发，转而专门写资源接口。&lt;code&gt;Laravel&lt;/code&gt;是PHP框架中最优雅的框架，国内也越来越多人告别&lt;code&gt;ThinkPHP&lt;/code&gt;选择了&lt;code&gt;Laravel&lt;/code&gt;。&lt;code&gt;Laravel&lt;/code&gt;框架本身对&lt;code&gt;API&lt;/code&gt;有支持，但是感觉再工作中还是需要再做一些处理。&lt;code&gt;Lumen&lt;/code&gt;用起来不顺手，有些包不能很好地支持。所以，将&lt;code&gt;Laravel&lt;/code&gt;框架进行一些配置处理，让其在开发&lt;code&gt;API&lt;/code&gt;时更得心应手。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内容划水过长，请谨慎打开&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="https://www.guaosi.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="https://www.guaosi.com/tags/Laravel/"/>
    
      <category term="Api" scheme="https://www.guaosi.com/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>指定时间自动取消订单</title>
    <link href="https://www.guaosi.com/2019/02/25/automatically-cancel-the-order/"/>
    <id>https://www.guaosi.com/2019/02/25/automatically-cancel-the-order/</id>
    <published>2019-02-25T05:26:22.000Z</published>
    <updated>2019-02-25T08:40:03.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;在电商网站或者外卖网站，通常都有会一种需求。当一个用户下单后没有支付，此时库存量已经减少，需要取消订单才能回复库存量。取消订单有2种方式:<code>1.用户手动取消</code>,<code>2.系统在指定时间过后，比如淘宝的30分钟，自动取消</code>。<br>&#160; &#160; &#160; &#160;那么，应该如何来实现系统在指定时间过后,自动取消订单?<br><a id="more"></a></p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h1><p>以下提供三种方案参考:</p><p>1) 使用<code>Linux</code>内置的<code>crontab</code>定时任务，每隔几秒甚至几分钟轮训遍历一次数据库，找到超出时间间隔的订单，进行取消。这种办法没有失效性以及在没有订单的时间内属于浪费服务器资源。</p><p>2) 使用框架内置的延时处理机制。比如<code>Laravel</code>的队列任务，可以指定多少分钟后执行。这样就能判断订单是否超出时间间隔，是否要取消订单恢复库存量。</p><p>3) 使用<code>Redis</code>的<code>keyspace notification</code>（键空间通知）。<code>Redis</code>可以设置一个<code>key</code>到多久时间后过期,比如:<code>SETEX name 123 20</code>,设置<code>name</code>在20秒后过期。此时，过期会触发<code>事件发布</code>，所有<code>redis客户端</code>都会订阅，获得相关信息。</p><h1 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h1><h2 id="3-1-环境"><a href="#3-1-环境" class="headerlink" title="3.1. 环境"></a>3.1. 环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Linux</span>系统</span><br><span class="line"><span class="selector-tag">Redis</span> 版本大于2<span class="selector-class">.8</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">PHP</span></span><br></pre></td></tr></table></figure><p>相关安装教程自行百度，这里跳过。</p><h2 id="3-2-Redis开启过期事件订阅"><a href="#3-2-Redis开启过期事件订阅" class="headerlink" title="3.2. Redis开启过期事件订阅"></a>3.2. Redis开启过期事件订阅</h2><p>找到redis.conf存放位置，比如我的是<code>usr/local/etc/redis/redis.conf</code><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim usr<span class="regexp">/local/</span>etc<span class="regexp">/redis/</span>redis.conf</span><br></pre></td></tr></table></figure></p><p>找到<code>notify-keyspace-events</code>,如果没有就在最后添加上<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-<span class="keyword">events</span> <span class="string">"Ex"</span></span><br></pre></td></tr></table></figure></p><p>保存退出后，重启redis<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service redis-server restart <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>redis<span class="regexp">/redis.conf</span></span><br></pre></td></tr></table></figure></p><h1 id="4-实践"><a href="#4-实践" class="headerlink" title="4. 实践"></a>4. 实践</h1><h2 id="4-1-redis-cli"><a href="#4-1-redis-cli" class="headerlink" title="4.1. redis-cli"></a>4.1. redis-cli</h2><p>开启一个终端，<code>redis-cli</code>进入<code>redis</code><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p><p>开始订阅所有操作，等待接收消息。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psubscribe __keyevent<span class="variable">@0__</span><span class="symbol">:expired</span></span><br></pre></td></tr></table></figure></p><p>此时会监听0号库所有<code>过期</code>的key。</p><p>再开启一个终端，<code>redis-cli</code>进入<code>redis</code><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p><p>新增一个5秒过期的键<code>name</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex <span class="built_in">name</span> <span class="number">5</span> guaosi</span><br></pre></td></tr></table></figure></p><p>5秒后，原终端会输出如下<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"name"</span></span><br></pre></td></tr></table></figure></p><p>此时，成功监听到key为<code>name</code>过期。</p><h2 id="4-2-原生PHP"><a href="#4-2-原生PHP" class="headerlink" title="4.2. 原生PHP"></a>4.2. 原生PHP</h2><p>编写<code>test.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">MRedis</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $redis;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * 构造函数</span><br><span class="line">     *</span><br><span class="line">     * @param string $host 主机号</span><br><span class="line">     * @param int $port 端口号</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($host = <span class="string">'redis'</span>, $port = <span class="number">6379</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis = <span class="keyword">new</span> redis();</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis-&gt;connect($host, $port);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">expire</span><span class="params">($key = null, $time = <span class="number">0</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redis-&gt;expire($key, $time);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">psubscribe</span><span class="params">($patterns = array<span class="params">()</span>, $callback)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis-&gt;psubscribe($patterns, $callback);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setOption</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;redis-&gt;setOption(Redis::OPT_READ_TIMEOUT, <span class="number">-1</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">($redis, $pattern, $chan, $msg)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// 回调函数,这里写处理逻辑</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Pattern: $pattern\n"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Channel: $chan\n"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Payload: $msg\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$redis = <span class="keyword">new</span> MRedis();</span></span><br><span class="line"><span class="php"><span class="comment">//redis会有默认连接时间，对 redis客户端进行一些参数设置，使读取超时参数 为 -1，表示不超时。</span></span></span><br><span class="line"><span class="php">$redis-&gt;setOption();</span></span><br><span class="line"><span class="php"><span class="comment">//这里输入订阅，以及订阅成功后触发的函数名</span></span></span><br><span class="line"><span class="php"><span class="comment">//监听库为0里的过期key</span></span></span><br><span class="line"><span class="php">$redis-&gt;psubscribe(<span class="keyword">array</span>(<span class="string">'__keyevent@0__:expired'</span>), <span class="string">'callback'</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>使用cli模式执行<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php <span class="keyword">test</span>.php</span><br></pre></td></tr></table></figure></p><p>此时可以看到变成了阻塞进程<br>然后我们回到<code>redis-cli</code>下，再生成一个过期<code>key</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex <span class="built_in">name</span> <span class="number">5</span> guaosi</span><br></pre></td></tr></table></figure></p><p>5秒后，cli模式下输出<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Pattern</span>: __keyevent<span class="variable">@0__</span>:expired</span><br><span class="line"><span class="attribute">Channel</span>: __keyevent<span class="variable">@0__</span>:expired</span><br><span class="line"><span class="attribute">Payload</span>: name</span><br></pre></td></tr></table></figure></p><p>则变量<code>$msg</code>就是<code>过期的key的名称</code>，我们只能获取到key的名称，不能获得到原来设置的值。</p><h2 id="4-3-框架中使用"><a href="#4-3-框架中使用" class="headerlink" title="4.3. 框架中使用"></a>4.3. 框架中使用</h2><p>以Laravel框架为例，Laravel自己本身已经支持Redis的订阅模式了，<a href="https://learnku.com/docs/laravel/5.7/redis/2293#08edd9" target="_blank" rel="noopener">查看文档详情</a></p><p>确认<code>Laravel</code>已经安装了<code>predis</code>扩展,如果没有安装只需执行<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">require</span> predis/predis ^<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>编辑<code>config/database.php</code>，在redis部分修改如下<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'redis'</span> =&gt; [</span><br><span class="line">        <span class="string">'client'</span> =&gt; <span class="string">'predis'</span>,</span><br><span class="line">        <span class="string">'default'</span> =&gt; [</span><br><span class="line">            <span class="string">'host'</span> =&gt; env(<span class="string">'REDIS_HOST'</span>, <span class="string">'127.0.0.1'</span>),</span><br><span class="line">            <span class="string">'password'</span> =&gt; env(<span class="string">'REDIS_PASSWORD'</span>, <span class="keyword">null</span>),</span><br><span class="line">            <span class="string">'port'</span> =&gt; env(<span class="string">'REDIS_PORT'</span>, <span class="number">6379</span>),</span><br><span class="line">            <span class="string">'database'</span> =&gt; env(<span class="string">'REDIS_DATABASE'</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="string">'persistent'</span> =&gt; <span class="keyword">true</span>, <span class="comment">// 开启持久连接</span></span><br><span class="line">            <span class="string">'read_write_timeout'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="comment">//据Predis作者在配置文件中说明</span></span><br><span class="line">            <span class="comment">//因为在底层网络资源上执行读取或写入操作时使用了超时，默认设置了timeout 为60s。</span></span><br><span class="line">            <span class="comment">//到60s自动断开并报错.设置成0可以解决这个问题。</span></span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p><p>在<code>app/Http/Controllers</code>下新建控制器<code>OrderController.php</code>,填下以下测试内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Redis</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Request</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">//创建用户订单</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//这里是接收到用户传来的下单信息，存入数据库后，返回一个订单id</span></span></span><br><span class="line"><span class="php">        <span class="comment">//我们让返回的订单ID为2019</span></span></span><br><span class="line"><span class="php">        $order_id = <span class="number">2019</span>;</span></span><br><span class="line"><span class="php">        <span class="comment">//因为一个项目中可能会有很多使用到setex的地方，所以给订单id加个前缀</span></span></span><br><span class="line"><span class="php">        $order_prefix_id = <span class="string">'order_'</span>.$order_id;</span></span><br><span class="line"><span class="php">        <span class="comment">//将订单ID存入redis缓存中，并且设置过期时间为5秒</span></span></span><br><span class="line"><span class="php">        $key_name = $order_prefix_id; <span class="comment">//我们在订阅中只能接收到$key_name的值</span></span></span><br><span class="line"><span class="php">        $expire_second = <span class="number">5</span>; <span class="comment">//设置过期时间，单位为秒</span></span></span><br><span class="line"><span class="php">        $value = $order_id;</span></span><br><span class="line"><span class="php">        Redis::setex($key_name,$expire_second,$value);</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"设置过期key="</span>.$order_prefix_id.<span class="string">"成功"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后编辑<code>routes/web.php</code>定义路由为<code>/order</code><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get<span class="function"><span class="params">(<span class="string">'/order'</span>, <span class="string">'OrderController@store'</span>)</span>-&gt;</span>name(<span class="string">'order.store'</span>);</span><br></pre></td></tr></table></figure></p><p>最后编写command命令，让订阅监听在后台运行.<br>在<code>app/Console/Commands</code>下新建<code>OrderCancel.php</code>文件,填下以下测试内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Redis</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OrderCancel</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * The name and signature of the console command.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $signature = <span class="string">'order:cancel'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * The console command description.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $description = <span class="string">'过期订单处理'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Create a new command instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::__construct();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Execute the console command.</span><br><span class="line">     *</span><br><span class="line">     * @return mixed</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//项目中有可能用的redis不是0，所以这里用env配置里面获取的</span></span></span><br><span class="line"><span class="php">        $publish_num=env(<span class="string">'REDIS_DATABASE'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="php">        Redis::psubscribe([<span class="string">'__keyevent@'</span>.$publish_num.<span class="string">'__:expired'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($message, $channel)</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">//$message 就是我们从获取到的过期key的名称</span></span></span><br><span class="line"><span class="php">            $explode_arr=explode(<span class="string">'_'</span>,$message);</span></span><br><span class="line"><span class="php">            $prefix=$explode_arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>($prefix==<span class="string">'order'</span>)&#123;</span></span><br><span class="line"><span class="php">                $order_id=$explode_arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> $order_id;</span></span><br><span class="line"><span class="php">                <span class="comment">//这里就是编写过期的订单，过期后要如何处理的业务逻辑</span></span></span><br><span class="line"><span class="php">                <span class="comment">//TODO</span></span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><p>此时，在项目根目录下运行<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan <span class="keyword">order</span>:cancel</span><br></pre></td></tr></table></figure></p><p>进行订阅监听，此时进程处于阻塞状态<br>然后用浏览器访问<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//项目虚拟站点地址/order</span></span><br></pre></td></tr></table></figure></p><p>浏览器输出<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置过期<span class="attribute">key</span>=order_2019成功</span><br></pre></td></tr></table></figure></p><p>5秒后，订阅监听窗口输出<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span></span><br></pre></td></tr></table></figure></p><p>至此，完成我们的需求。</p><h1 id="5-注意"><a href="#5-注意" class="headerlink" title="5. 注意"></a>5. 注意</h1><p>阻塞进程不做处理，在关闭窗口后就会自动跳出。需要使用<code>Supervisor</code>守护进程，让阻塞进程保持持续运行状态，并且发送错误退出了也会自动自动。安装以及配置<code>Supervisor</code>可以参考<a href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/">这里</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在电商网站或者外卖网站，通常都有会一种需求。当一个用户下单后没有支付，此时库存量已经减少，需要取消订单才能回复库存量。取消订单有2种方式:&lt;code&gt;1.用户手动取消&lt;/code&gt;,&lt;code&gt;2.系统在指定时间过后，比如淘宝的30分钟，自动取消&lt;/code&gt;。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;那么，应该如何来实现系统在指定时间过后,自动取消订单?&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://www.guaosi.com/tags/linux/"/>
    
      <category term="php" scheme="https://www.guaosi.com/tags/php/"/>
    
      <category term="redis" scheme="https://www.guaosi.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>安装和使用守护进程--Supervisor</title>
    <link href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/"/>
    <id>https://www.guaosi.com/2019/02/25/install-and-use-supervisor/</id>
    <published>2019-02-25T01:03:33.000Z</published>
    <updated>2019-02-25T05:32:14.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;在Linux上有时候需要开启一个阻塞进程来监听操作。当ssh连上服务器，直接运行一个阻塞进程，然后退出服务器时，这个阻塞进程也会跟着关闭。</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h1><p>以下提供三种方案参考:</p><ol><li>使用<code>nohup ./xxx &amp;</code>将进程后台挂起，不过有效期只有12小时，会被自动杀进程。</li><li>使用<code>screen</code>建立窗口，将阻塞进程运行在该窗口内，这个窗口可以被多个物理窗口所复用(就是就算这次退出了服务器连接，下次再连进来还是依旧存在的)，貌似可以满足我们的要求了。但是如果阻塞进程出错，阻塞进程不会自动重新启动，需要我们手动干预。</li><li>使用python开发的<code>Supervisor</code>守护进程。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。</li></ol><a id="more"></a><h1 id="3-安装配置Supervisor"><a href="#3-安装配置Supervisor" class="headerlink" title="3. 安装配置Supervisor"></a>3. 安装配置Supervisor</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1. 安装"></a>3.1. 安装</h2><h3 id="3-1-1-Centos安装"><a href="#3-1-1-Centos安装" class="headerlink" title="3.1.1. Centos安装"></a>3.1.1. Centos安装</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line">yum <span class="keyword">install</span> -y supervisor</span><br></pre></td></tr></table></figure><h3 id="3-1-2-Ubuntu安装"><a href="#3-1-2-Ubuntu安装" class="headerlink" title="3.1.2. Ubuntu安装"></a>3.1.2. Ubuntu安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install supervisor</span><br></pre></td></tr></table></figure><h2 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2. 配置"></a>3.2. 配置</h2><p>在<code>/etc/supervisor/</code>目录下有个<code>conf.d</code>的文件夹和<code>supervisord.conf</code>配置文件。打开配置文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> supervisord.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">include</span>]</span><br><span class="line">files = <span class="regexp">/etc/supervisor</span><span class="regexp">/conf.d/</span>*.conf</span><br></pre></td></tr></table></figure></p><p>意思是<code>Supervisor</code>在启动的时候会加载conf.d目录下所有的conf配置文件。<br>下面给出2个参考配置的案例</p><h3 id="3-2-1-horizon守护进程配置参考"><a href="#3-2-1-horizon守护进程配置参考" class="headerlink" title="3.2.1. horizon守护进程配置参考"></a>3.2.1. horizon守护进程配置参考</h3><p>laravel的horizon守护进程配置<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.d/</span><br><span class="line"><span class="keyword">vim</span> horizon.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>填入以下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:horizon]</span></span><br><span class="line"><span class="attr">process_name</span>=%(program_name)s</span><br><span class="line"><span class="attr">command</span>=php /home/wwwroot/www.guaosi.com/artisan horizon ; 阻塞进程执行的命令</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span> ; 阻塞进程是否跟着Supervisor一起开机自动</span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span> ; 阻塞进程被异常退出是否自动重启</span><br><span class="line"><span class="attr">user</span>=www ; 由哪个用户执行阻塞进程的命令</span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/home/wwwroot/www.guaosi.com/storage/logs/horizon.log ; 阻塞进程打印到控制台的内容写到哪里</span><br></pre></td></tr></table></figure></p><h3 id="3-2-2-yii2的队列守护进程配置参考"><a href="#3-2-2-yii2的队列守护进程配置参考" class="headerlink" title="3.2.2. yii2的队列守护进程配置参考"></a>3.2.2. yii2的队列守护进程配置参考</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.d/</span><br><span class="line"><span class="keyword">vim</span> yii2-queue.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>填入以下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:yii-queue-worker]</span></span><br><span class="line"><span class="attr">process_name</span>=%(program_name)s_%(process_num)<span class="number">02</span>d</span><br><span class="line"><span class="attr">command</span>=/usr/bin/php7.<span class="number">2</span> /home/wwwroot/www.guaosi.com/yii queue/listen --verbose=<span class="number">1</span> --color=<span class="number">0</span> ; 阻塞进程执行的命令</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span> ; 阻塞进程是否跟着Supervisor一起开机自动</span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span> ; 阻塞进程被异常退出是否自动重启</span><br><span class="line"><span class="attr">user</span>=www ; 由哪个用户执行阻塞进程的命令</span><br><span class="line"><span class="attr">numprocs</span>=<span class="number">10</span> ; 启动几个阻塞进程</span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/home/wwwroot/www.guaosi.com/runtime/logs/yii2-queue.log ; 阻塞进程打印到控制台的内容写到哪里</span><br></pre></td></tr></table></figure></p><h2 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3. 启动服务"></a>3.3. 启动服务</h2><h3 id="3-3-1-Centos启动"><a href="#3-3-1-Centos启动" class="headerlink" title="3.3.1. Centos启动"></a>3.3.1. Centos启动</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> supervisord</span><br></pre></td></tr></table></figure><h3 id="3-3-2-Ubuntu启动"><a href="#3-3-2-Ubuntu启动" class="headerlink" title="3.3.2. Ubuntu启动"></a>3.3.2. Ubuntu启动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c <span class="regexp">/etc/</span>supervisor<span class="regexp">/supervisord.conf</span></span><br></pre></td></tr></table></figure><h2 id="3-4-开机自启"><a href="#3-4-开机自启" class="headerlink" title="3.4. 开机自启"></a>3.4. 开机自启</h2><h3 id="3-4-1-Centos开机自启"><a href="#3-4-1-Centos开机自启" class="headerlink" title="3.4.1. Centos开机自启"></a>3.4.1. Centos开机自启</h3><p>新建文件<code>supervisord.service</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#supervisord.service</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Unit]</span> </span><br><span class="line"><span class="attr">Description</span>=Supervisor daemon</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span> </span><br><span class="line"><span class="attr">Type</span>=forking </span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/supervisord -c /etc/supervisord.conf </span><br><span class="line"><span class="attr">ExecStop</span>=/usr/bin/supervisorctl shutdown </span><br><span class="line"><span class="attr">ExecReload</span>=/usr/bin/supervisorctl reload </span><br><span class="line"><span class="attr">KillMode</span>=process </span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure </span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span> </span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></p><p>将文件拷贝到<code>/usr/lib/systemd/system/</code><br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp supervisord.service /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/</span></span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> supervisord</span><br></pre></td></tr></table></figure></p><p>验证一下是否为开机启动<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">is</span>-enabled supervisord</span><br></pre></td></tr></table></figure></p><h3 id="3-4-2-Ubuntu开机自启"><a href="#3-4-2-Ubuntu开机自启" class="headerlink" title="3.4.2. Ubuntu开机自启"></a>3.4.2. Ubuntu开机自启</h3><p>编辑<code>/etc/rc.local</code>文件<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure></p><p>在<code>exit 0</code>之前加入以下命令<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>supervisord</span><br></pre></td></tr></table></figure></p><p>保存并退出<br>最后修改<code>rc.local</code>权限<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure></p><h2 id="3-5-常用命令"><a href="#3-5-常用命令" class="headerlink" title="3.5. 常用命令"></a>3.5. 常用命令</h2><p>重新启动配置中的所有程序</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl reload</span></span><br></pre></td></tr></table></figure><p>启动某个进程(program_name=你配置中写的程序名称)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="literal">start</span> program_name</span><br></pre></td></tr></table></figure><p>查看正在守候的进程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl</span></span><br></pre></td></tr></table></figure><p>停止某一进程 (program_name=你配置中写的程序名称)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">stop</span> program_name</span><br></pre></td></tr></table></figure><p>重启某一进程 (program_name=你配置中写的程序名称)</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">restart</span> program_name</span><br></pre></td></tr></table></figure><p>停止全部进程</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="keyword">stop</span> <span class="built_in">all</span></span><br></pre></td></tr></table></figure><p>注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。</p><h1 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h1><p>被<code>Supervisor</code>守护的进程都是<code>常驻内存</code>的，即如果<code>修改了被守护的进程的源码</code>，需要重启对这个进程的守护才能生效，否则还是未修改前的。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">restart</span> program_name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在Linux上有时候需要开启一个阻塞进程来监听操作。当ssh连上服务器，直接运行一个阻塞进程，然后退出服务器时，这个阻塞进程也会跟着关闭。&lt;/p&gt;
&lt;h1 id=&quot;2-解决办法&quot;&gt;&lt;a href=&quot;#2-解决办法&quot; class=&quot;headerlink&quot; title=&quot;2. 解决办法&quot;&gt;&lt;/a&gt;2. 解决办法&lt;/h1&gt;&lt;p&gt;以下提供三种方案参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;nohup ./xxx &amp;amp;&lt;/code&gt;将进程后台挂起，不过有效期只有12小时，会被自动杀进程。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;screen&lt;/code&gt;建立窗口，将阻塞进程运行在该窗口内，这个窗口可以被多个物理窗口所复用(就是就算这次退出了服务器连接，下次再连进来还是依旧存在的)，貌似可以满足我们的要求了。但是如果阻塞进程出错，阻塞进程不会自动重新启动，需要我们手动干预。&lt;/li&gt;
&lt;li&gt;使用python开发的&lt;code&gt;Supervisor&lt;/code&gt;守护进程。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://www.guaosi.com/tags/linux/"/>
    
      <category term="python" scheme="https://www.guaosi.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>oneDrive+olaIndex/oneIndex+aria2+ariaNg 制作个人大容量网盘，支持离线下载</title>
    <link href="https://www.guaosi.com/2019/02/22/onedrive-olyindex-oneindex-aria-ariang/"/>
    <id>https://www.guaosi.com/2019/02/22/onedrive-olyindex-oneindex-aria-ariang/</id>
    <published>2019-02-22T05:13:25.000Z</published>
    <updated>2019-02-22T11:24:01.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;随着网速的提升，越来越多人选择使用网络云盘来存储自己的文件资料。国内代表有<code>百度云</code>以及<code>腾讯云</code>，<code>天翼云</code>等，国外则是<code>oneDrive</code>，<code>谷歌云盘</code>，<code>dropbox</code>等。国内云盘虽然都打着大<code>容量</code>的旗号，但是不开会员下载速度就被恶心<code>限速</code>。国外的网盘则需要科学上网，并且容量也小，优点就是不限速。<br>&#160; &#160; &#160; &#160;微软的oneDrive虽然网页版在国内会被墙，但是客户端是正常使用的，并且不限速，只是普通的微软账号的oneDrive只有5G。<br>&#160; &#160; &#160; &#160;微软有一个产品，叫做<code>office365</code>,如果是教育版则可以让oneDrive变成1T或者5T。用国内教育邮箱注册的office365一般是1T，并且只能使用网页版的office365套件。如果是使用国外教育邮箱注册的，则可以使用桌面版的office365套件(就是office办公软件全家桶，正版！)<br><a id="more"></a></p><h1 id="2-获取office365账号"><a href="#2-获取office365账号" class="headerlink" title="2. 获取office365账号"></a>2. 获取office365账号</h1><p>以下提供3种办法:</p><p>1) <a href="https://developer.microsoft.com/en-us/office/dev-program" target="_blank" rel="noopener">微软的Office 365开发者计划</a>,免费获得一年的21TB OneDrive和Microsoft Office 365企业。不过只有1年有效期。</p><p>2) 临时教育邮箱申请office365，不过不支持桌面版office365。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)、进入注册地址http<span class="variable">s:</span>//products.office.<span class="keyword">com</span>/<span class="keyword">en</span>-us/student?<span class="keyword">tab</span>=students</span><br><span class="line"><span class="number">2</span>)、输入如有乐享提供的临时邮箱，地址：http<span class="variable">s:</span>//<span class="number">51</span>.ruyo.net/<span class="number">8263</span>.html</span><br><span class="line"><span class="number">3</span>)、填入密码，和从临时邮箱获取的验证码</span><br></pre></td></tr></table></figure></p><p>3) 去某宝或者某鱼购买国外的<code>教育邮箱</code>账号，也不贵，前几天买的就10元，这个账号提供1T的oneDrive跟桌面版office365，没有限制时间。并且，它提供无限容量的谷歌网盘！这个是国内教育邮箱办不到的。</p><h1 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h1><p>根据这篇文章做完，你将会获得如下功能的网盘<br>1) 1T或者5T的大容量不限速不用科学上网<br>2) 安全稳定，微软提供技术支持<br>3) 支持迅雷以及多线程下载工具不限速下载<br>4) 在线查看office各类文件<br>5) 在线观看电影，支持字幕(字幕获取待优化)<br>6) 在线播放音乐，支持歌词(支持歌词待做)<br>7) 在线查看代码<br>8) 支持文件密码访问保护<br>9) 离线BT下载<br>10) 下载以及在线类的，都是走<code>oneDrive</code>服务器带宽，本服务器带宽无论多小都能正常使用</p><h2 id="3-1-完成效果"><a href="#3-1-完成效果" class="headerlink" title="3.1. 完成效果"></a>3.1. 完成效果</h2><p><img src="http://wx4.sinaimg.cn/large/5a5977d4gy1g0dzxhh4c0j21gb0u0dmd.jpg" alt="预览"></p><h1 id="4-准备工作"><a href="#4-准备工作" class="headerlink" title="4. 准备工作"></a>4. 准备工作</h1><ol><li>office365账号一个</li><li>服务器或者vps(个人电脑未测试)</li><li>lnmp环境</li><li>域名(ip:端口未测试)</li></ol><p>lnmp环境要求<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PHP &gt;= <span class="number">7.1</span>.<span class="number">3</span></span><br><span class="line">OpenSSL PHP</span><br><span class="line">PHP PDO 扩展</span><br><span class="line">PHP Mbstring 扩展</span><br><span class="line">PHP Tokenizer 扩展</span><br><span class="line">PHP <span class="keyword">XML</span> <span class="title">扩展</span></span><br><span class="line"><span class="title">PHP</span> Ctype 扩展</span><br><span class="line">PHP JSON 扩展</span><br><span class="line">PHP File<span class="literal">inf</span>o 扩展</span><br></pre></td></tr></table></figure></p><h1 id="5-感谢"><a href="#5-感谢" class="headerlink" title="5. 感谢"></a>5. 感谢</h1><p>本文安装部分参考<a href="https://www.moerats.com" target="_blank" rel="noopener">Rat’s</a>,目录列表程序修改自<a href="https://github.com/WangNingkai/OLAINDEX" target="_blank" rel="noopener">OlaIndex</a>,aria2自动上传脚本来自<a href="https://moeclub.org/" target="_blank" rel="noopener">萌咖</a></p><h1 id="6-安装"><a href="#6-安装" class="headerlink" title="6. 安装"></a>6. 安装</h1><p>接下来以我安装过程为例。环境为lnmp一键包环境，我创建的站点为<a href="https://cloud.guaosi.com，不知道如何安装lnmp和创建站点可以参考[这里](https://https://www.guaosi.com/2018/12/18/environment-by-lnmp/)" target="_blank" rel="noopener">https://cloud.guaosi.com，不知道如何安装lnmp和创建站点可以参考[这里](https://https://www.guaosi.com/2018/12/18/environment-by-lnmp/)</a></p><h2 id="6-1-创建站点"><a href="#6-1-创建站点" class="headerlink" title="6.1. 创建站点"></a>6.1. 创建站点</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost <span class="keyword">add</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>添加一个<code>cloud.guaosi.com</code>的站点</p><h2 id="6-2-安装目录列表程序"><a href="#6-2-安装目录列表程序" class="headerlink" title="6.2. 安装目录列表程序"></a>6.2. 安装目录列表程序</h2><p>这里可以使用我修改的<a href="https://github.com/guaosi/OLAINDEX" target="_blank" rel="noopener">OlaIndex</a>，或者使用<a href="https://github.com/WangNingkai/OLAINDEX" target="_blank" rel="noopener">OlaIndex原版</a>，也可以使用<a href="https://github.com/donwa/oneindex" target="_blank" rel="noopener">OneIndex</a>。都大同小异，选一个最好看最适合自己的就好了。下面以我修改的为例。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /home/wwwroot/cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">git clone git@github<span class="selector-class">.com</span>:guaosi/OLAINDEX<span class="selector-class">.git</span> ./</span><br><span class="line">composer install</span><br><span class="line">cp <span class="selector-class">.env</span><span class="selector-class">.example</span> .env</span><br><span class="line">php artisan key:generate</span><br><span class="line">cd ..</span><br><span class="line">chmod -R <span class="number">755</span> cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">chown -R www:www cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>如果在composer install提示没有安装fileinfo扩展，可以参考我的<a href="https://www.guaosi.com/2019/02/22/install-php-fileinfo/">安装php扩展:Fileinfo</a></p><h2 id="6-3-站点伪静态设置"><a href="#6-3-站点伪静态设置" class="headerlink" title="6.3. 站点伪静态设置"></a>6.3. 站点伪静态设置</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/cloud<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>加入以下内容<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></p><p>不知道怎么加的，可以参考<a href="https://https://www.guaosi.com/2018/12/18/environment-by-lnmp/" target="_blank" rel="noopener">这里</a></p><h2 id="6-4-获取oneDrive授权"><a href="#6-4-获取oneDrive授权" class="headerlink" title="6.4. 获取oneDrive授权"></a>6.4. 获取oneDrive授权</h2><p>&#160; &#160; &#160; &#160;安装完成后，访问 <a href="https://cloud.guaosi.com" target="_blank" rel="noopener">https://cloud.guaosi.com</a> ，会自动跳转到安装界面，两个<code>redirect_uri</code>都填写<code>https://cloud.guaosi.com</code>即可。</p><p>然后点击<code>申请</code>:<br>1) 跳转到微软获取秘钥(打不开可能要科学上网)，然后将秘钥复制后粘贴到<code>client_secret</code>，<br>2) 然后点击<code>知道了，返回到快速启动</code>，将<code>APP ID</code>内容复制到<code>client_id</code>,<br>3) 最后点击<code>保存</code>。最后点击<code>绑定</code>，跳转到微软授权页面，成功后会看到目录列表显示。</p><blockquote><p>如果失败了，就返回再点击绑定或者返回修改，多试几次。</p></blockquote><h2 id="6-5-后台配置"><a href="#6-5-后台配置" class="headerlink" title="6.5. 后台配置"></a>6.5. 后台配置</h2><p>绑定成功后，访问 <a href="https://cloud.guaosi.com/admin" target="_blank" rel="noopener">https://cloud.guaosi.com/admin</a> 进行后台相关设置，初始化密码为:<code>12345678</code>，记得修改初始化密码。因为配置是走缓存的，所以修改了配置后，要点击<code>清理缓存</code>才会生效。</p><h2 id="6-6-安装Aria2"><a href="#6-6-安装Aria2" class="headerlink" title="6.6. 安装Aria2"></a>6.6. 安装Aria2</h2><p>1) 这里用的逗比的脚本，使用命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubiBackup/doubi/master/aria2.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> aria2.<span class="keyword">sh</span> &amp;&amp; bash aria2.<span class="keyword">sh</span></span><br><span class="line">#备用地址</span><br><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//www.moerats.<span class="keyword">com</span>/usr/<span class="keyword">shell</span>/Aria2/aria2.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> aria2.<span class="keyword">sh</span> &amp;&amp; bash aria2.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>2) 安装完成后，如果我们想修改密码、下载文件位置、端口的话，可以使用命令<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /root/.aria2/aria2.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>3) 找到对应的选项进行修改，这里面有个<code>rpc-secret</code>，是Aria2的密码，下面AriaNg会用到。</p><p>4) 重启Aria2，修改的配置文件才会生效<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service aria2 <span class="built_in">restart</span></span><br></pre></td></tr></table></figure></p><h2 id="6-7-安装AriaNg"><a href="#6-7-安装AriaNg" class="headerlink" title="6.7. 安装AriaNg"></a>6.7. 安装AriaNg</h2><p>1) 这一步和安装目录列表程序差不多，先添加一个域名，不想用域名的可以在添加域名那里填上IP或者IP:端口，然后将AriaNg程序上传到对应站点的根目录(比如我是aria.guaosi.com)，可以使用命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install unzip -y</span><br><span class="line">cd /www/wwwroot/aria<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line">wget https:<span class="comment">//www.moerats.com/usr/down/aria-ng-0.2.0.zip &amp;&amp; unzip aria-ng-0.2.0.zip</span></span><br></pre></td></tr></table></figure></p><p>2) 这时候我们就可以使用域名访问AriaNg界面了，或者IP:端口。有的服务器提供商会<code>默认关闭Aria的端口(6800)</code>，记得去开启。<br>3) 目前AriaNg还没连上我们服务器里的Aria2服务。在<code>Aria2 RPC 协议</code>选择<code>Https</code>。在<code>Aria2 RPC 秘钥</code>填写你在Aria2获取的<code>rpc-secret</code>。然后<code>重新加载页面</code>。<br>4) 此时侧边栏<code>Aria2 状态</code>应该是显示已连接</p><p>如果你想做成Https:</p><p>1) 打开Aria2配置文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /root/.aria2/aria2.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>2) 修改如下位置<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span></span><br><span class="line"><span class="attr">rpc-secure</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span></span><br><span class="line"><span class="attr">rpc-certificate</span>=你的ssl证书绝地路径</span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span></span><br><span class="line"><span class="attr">rpc-private-key</span>=你的ssl证书绝地路径</span><br></pre></td></tr></table></figure></p><p>3) 重启Aria2服务<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service aria2 <span class="built_in">restart</span></span><br></pre></td></tr></table></figure></p><p>4) 在AriaNg界面的<code>AriaNg 设置</code>- <code>RPC栏目</code>。在<code>Aria2 RPC 协议</code>选择<code>Https</code>。</p><h2 id="6-8-安装oneDrive的bash"><a href="#6-8-安装oneDrive的bash" class="headerlink" title="6.8. 安装oneDrive的bash"></a>6.8. 安装oneDrive的bash</h2><p>摘抄自<a href="https://www.moerats.com/archives/697/" target="_blank" rel="noopener">萌咖</a></p><h3 id="6-8-1-安装过程"><a href="#6-8-1-安装过程" class="headerlink" title="6.8.1. 安装过程"></a>6.8.1. 安装过程</h3><p>1) 确保服务器已经安装了curl扩展，如果没有安装，则执行<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#Ubuntu和Debian系统</span></span><br><span class="line">apt-<span class="keyword">get</span> install -y curl</span><br><span class="line"></span><br><span class="line"><span class="meta">#Centos系统</span></span><br><span class="line">yum install curl -y</span><br></pre></td></tr></table></figure></p><p>2) 安装<a href="https://github.com/0oVicero0/OneDrive" target="_blank" rel="noopener">萌咖</a>做的oneDrive的bash<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便小白，本脚本内置萌咖大佬永久有效的应用参数，可以直接使用，如果你不放心可以自己获取参数，不过可能会遇到很多坑，建议直接使用脚本默认的参数</span></span><br><span class="line"><span class="attribute">wget</span> --<span class="literal">no</span>-check-certificate -qO- <span class="string">"https://raw.githubusercontent.com/0oVicero0/OneDrive/master/OneDrive.sh"</span> |bash</span><br></pre></td></tr></table></figure></p><p>3) 运行账号认证程序</p><p>&#160; &#160; &#160; &#160;运行命令onedrive -a，将返回的网址复制到浏览器打开，再登陆你的OneDrive for Business账号，登陆成功后复制地址栏中的地址(复制包括localhost的所有链接地址)，粘贴到SSH客户端里，敲回车键即可。<br>&#160; &#160; &#160; &#160;如果返回以下字段：<code>It seems like we have a refresh token, so we are ready to go</code>，那就恭喜你，设置成功!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：如果你遇到bash: onedrive: <span class="built_in">command</span> not found错误，则需要找到/usr/<span class="built_in">local</span>/etc/OneDrive文件夹，修改onedrive和onedrive<span class="_">-d</span>脚本，在第二行都加上<span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span>代码，再保存就行了。</span><br></pre></td></tr></table></figure></p><h3 id="6-8-2-oneDrive的bash使用"><a href="#6-8-2-oneDrive的bash使用" class="headerlink" title="6.8.2. oneDrive的bash使用"></a>6.8.2. oneDrive的bash使用</h3><p>1) 使用命令</p><p>onedrive –help<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">###</span></span><br><span class="line"><span class="comment">Usage: onedrive [OPTIONS] file1 [file2...]</span></span><br><span class="line"><span class="comment">       onedrive-d folder</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Options:</span></span><br><span class="line"><span class="comment">  -d, --debug        Enable debug mode</span></span><br><span class="line"><span class="comment">  -a, --authorize    Run authorization process</span></span><br><span class="line"><span class="comment">  -f, --folder       Upload files into this remote folder</span></span><br><span class="line"><span class="comment">  -c, --creat        Creat remote folder."</span></span><br><span class="line"><span class="comment">                     Directory names are separated with a slash, e.g.</span></span><br><span class="line"><span class="comment">                     rootFolder/subFolder</span></span><br><span class="line"><span class="comment">                     Do NOT use a trailing slash!</span></span><br><span class="line"><span class="comment">  -h, --help         Show this help</span></span><br><span class="line"><span class="comment">  -r, --rename       Rename the files during upload</span></span><br><span class="line"><span class="comment">                     For each file you specify you MUST also specify</span></span><br><span class="line"><span class="comment">                     the remote filename as the subsequent parameter</span></span><br><span class="line"><span class="comment">                     Be especially careful with globbing!</span></span><br><span class="line"><span class="comment">  -s, --silent       Silent mode for use in crontab scripts.</span></span><br><span class="line"><span class="comment">                     Return only exit code.</span></span><br><span class="line"><span class="comment">  -ls,--list         Show the itmes in this directory.</span></span><br><span class="line"><span class="comment">  -l, --link         Show the file share link.</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">###</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span></span><br></pre></td></tr></table></figure></p><p>2、命令示范<br>如果我们要上传<code>/root</code>文件夹里面的<code>moerats.txt</code>，使用命令：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令默认上传到OneDrive根目录</span></span><br><span class="line"><span class="attribute">onedrive</span> <span class="string">'/root/moerats.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果上传到指定文件夹，就需要加-f参数</span></span><br><span class="line">onedrive -f RATS <span class="string">'/root/moerats.txt'</span>  <span class="comment">#上传到OneDrive根目录的RATS文件夹</span></span><br><span class="line">onedrive -f RATS/RATS <span class="string">'/root/moerats.txt'</span>  <span class="comment">#上传到OneDrive根目录RATS文件夹里的RATS文件夹</span></span><br></pre></td></tr></table></figure></p><p>如果我们要将<code>/root</code>文件夹及里面的文件夹和文件一起上传，使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此命令默认上传到OneDrive根目录</span></span><br><span class="line">onedrive<span class="_">-d</span> <span class="string">'/root'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果上传到指定文件夹，就需要加-f参数</span></span><br><span class="line">onedrive<span class="_">-d</span> -f RATS <span class="string">'/root'</span>  <span class="comment">#上传到OneDrive根目录的RATS文件夹</span></span><br><span class="line">onedrive<span class="_">-d</span> -f RATS/RATS <span class="string">'/root'</span>  <span class="comment">#上传到OneDrive根目录RATS文件夹里的RATS文件夹</span></span><br></pre></td></tr></table></figure></p><p>如果我们想直接查看OneDrive网盘目录的文件，使用命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#此命令只查看根目录文件</span></span><br><span class="line">onedrive -l</span><br><span class="line"><span class="meta">#如果我们要查看根目录root文件夹里的文件</span></span><br><span class="line">onedrive -l /root</span><br></pre></td></tr></table></figure></p><h2 id="6-9-Aria2自动上传"><a href="#6-9-Aria2自动上传" class="headerlink" title="6.9. Aria2自动上传"></a>6.9. Aria2自动上传</h2><h3 id="6-9-1-配置过程"><a href="#6-9-1-配置过程" class="headerlink" title="6.9.1. 配置过程"></a>6.9.1. 配置过程</h3><p>1) 创建shell脚本<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="keyword">local</span>/rcloneupload.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>2) 填入以下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">GID=<span class="string">"<span class="variable">$1</span>"</span>;</span><br><span class="line">FileNum=<span class="string">"<span class="variable">$2</span>"</span>;</span><br><span class="line">File=<span class="string">"<span class="variable">$3</span>"</span>;</span><br><span class="line">MaxSize=<span class="string">"15728640"</span></span><br><span class="line">RemoteDIR=<span class="string">""</span>;  <span class="comment">#上传到Onedrive的路径，默认为根目录，如果要上传到指定目录，请看后面。</span></span><br><span class="line">LocalDIR=<span class="string">"/usr/local/caddy/www/aria2/Download/"</span>;  <span class="comment">#Aria2下载目录，记得最后面加上/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z $(<span class="built_in">echo</span> <span class="string">"<span class="variable">$FileNum</span>"</span> |grep -o <span class="string">'[0-9]*'</span> |head -n1) ]]; <span class="keyword">then</span> FileNum=<span class="string">'0'</span>; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$FileNum</span>"</span> -le <span class="string">'0'</span> ]]; <span class="keyword">then</span> <span class="built_in">exit</span> 0; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$#</span>"</span> != <span class="string">'3'</span> ]]; <span class="keyword">then</span> <span class="built_in">exit</span> 0; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">LoadFile</span></span>()&#123;</span><br><span class="line">  IFS_BAK=<span class="variable">$IFS</span></span><br><span class="line">  IFS=$<span class="string">'\n'</span></span><br><span class="line">  <span class="keyword">if</span> [[ ! -d <span class="string">"<span class="variable">$LocalDIR</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [[ -e <span class="string">"<span class="variable">$File</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [[ $(dirname <span class="string">"<span class="variable">$File</span>"</span>) == $(readlink -f <span class="variable">$LocalDIR</span>) ]]; <span class="keyword">then</span></span><br><span class="line">      ONEDRIVE=<span class="string">"onedrive"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ONEDRIVE=<span class="string">"onedrive-d"</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    FileLoad=<span class="string">"<span class="variable">$&#123;File/#$LocalDIR&#125;</span>"</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$FileLoad</span>"</span> == <span class="string">'/'</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$FileLoad</span>"</span> |grep -q <span class="string">'/'</span>;</span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"$?"</span> == <span class="string">"0"</span> ]]; <span class="keyword">then</span></span><br><span class="line">          FileLoad=$(dirname <span class="string">"<span class="variable">$FileLoad</span>"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">fi</span>;</span><br><span class="line">      <span class="keyword">done</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$FileLoad</span>"</span> == <span class="string">"<span class="variable">$LocalDIR</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">"<span class="variable">$RemoteDIR</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">      Option=<span class="string">" -f <span class="variable">$RemoteDIR</span>"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      Option=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    EXEC=<span class="string">"<span class="variable">$(command -v $ONEDRIVE)</span>"</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$EXEC</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$LocalDIR</span>"</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ -e <span class="string">"<span class="variable">$FileLoad</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">      ItemSize=$(du -s <span class="string">"<span class="variable">$FileLoad</span>"</span> |cut -f1 |grep -o <span class="string">'[0-9]*'</span> |head -n1)</span><br><span class="line">      <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$ItemSize</span>"</span> ]]; <span class="keyword">then</span> <span class="built_in">return</span>; <span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$ItemSize</span>"</span> -ge <span class="string">"<span class="variable">$MaxSize</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">"\033[33m<span class="variable">$File</span> \033[0mtoo large to spik.\n"</span>;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      <span class="built_in">eval</span> <span class="string">"<span class="variable">$&#123;EXEC&#125;</span><span class="variable">$&#123;Option&#125;</span>"</span> \<span class="string">'"$&#123;FileLoad&#125;"\'</span>;</span><br><span class="line">      <span class="keyword">if</span> [[ $? == <span class="string">'0'</span> ]]; <span class="keyword">then</span></span><br><span class="line">        rm -rf <span class="string">"<span class="variable">$FileLoad</span>"</span>;</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  IFS=<span class="variable">$IFS_BAK</span></span><br><span class="line">&#125;</span><br><span class="line">LoadFile;</span><br></pre></td></tr></table></figure></p><p>如果你想上传到指定的文件夹，修改如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#上传到Onedrive里的RATS目录，参数改为：RemoteDIR=<span class="string">"RATS"</span><span class="comment">; </span></span></span><br><span class="line"><span class="meta">#上传到Onedrive里的RATS目录里的RATS目录，参数改为：RemoteDIR=<span class="string">"RATS/RATS"</span><span class="comment">;</span></span></span><br></pre></td></tr></table></figure></p><p>3) 启用脚本</p><p>先授权<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> +<span class="selector-tag">x</span> <span class="selector-tag">rcloneupload</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure></p><p>然后再到<code>aria2.conf</code>中加上一行<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span>-download-<span class="built_in">complete</span>=/root/rcloneupload.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>最后重启<code>Aria2</code>生效。</p><p>4) 如果你觉得上传速度较慢，可以编辑<code>/usr/local/etc/OneDrive/onedrive.cfg</code>，修改threads线程数，默认2。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里提供个快速修改线程数的命令，这里默认修改为5，建议别太高！</span></span><br><span class="line">sed -i <span class="string">"s<span class="subst">#max_upload_threads</span>=2<span class="subst">#max_upload_threads</span>=5<span class="subst">#g</span>"</span> <span class="string">'/usr/local/etc/OneDrive/onedrive.cfg'</span></span><br></pre></td></tr></table></figure></p><h3 id="6-9-2-注意"><a href="#6-9-2-注意" class="headerlink" title="6.9.2. 注意"></a>6.9.2. 注意</h3><p>&#160; &#160; &#160; &#160;在<code>AriaNg</code>上下载文件，实际上是服务器通过<code>Aria2</code>先把文件下载到服务器，然后服务器再通过<code>oneDrive的bash</code>命令将服务器上下载的文件传到<code>oneDrive</code>。当上传成功后，脚本会<code>自动删除服务器上的源文件</code>。<br>所以，这里要考虑到的问题就是服务器的磁盘容量以及上传速度。<br>1) <code>下载的文件不能大于服务器磁盘容量</code>。<br>2) 上传速度与服务器带宽有关，比如服务器的带宽是1M，那么上传速度就是130kb/s或者140kb/s。如果想离线上传快速，那么就需要加大带宽了。</p><h1 id="7-上传文件"><a href="#7-上传文件" class="headerlink" title="7. 上传文件"></a>7. 上传文件</h1><p>目前有4种上传方法:<br>1) 使用oneDrive客户端上传(推荐)<br>2) 使用AriaNg离线下载(推荐)<br>3) 使用oneDrive网页版本上传<br>4) 使用服务器安装的<code>oneDrive</code>的<code>bash</code>命令上传</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;随着网速的提升，越来越多人选择使用网络云盘来存储自己的文件资料。国内代表有&lt;code&gt;百度云&lt;/code&gt;以及&lt;code&gt;腾讯云&lt;/code&gt;，&lt;code&gt;天翼云&lt;/code&gt;等，国外则是&lt;code&gt;oneDrive&lt;/code&gt;，&lt;code&gt;谷歌云盘&lt;/code&gt;，&lt;code&gt;dropbox&lt;/code&gt;等。国内云盘虽然都打着大&lt;code&gt;容量&lt;/code&gt;的旗号，但是不开会员下载速度就被恶心&lt;code&gt;限速&lt;/code&gt;。国外的网盘则需要科学上网，并且容量也小，优点就是不限速。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;微软的oneDrive虽然网页版在国内会被墙，但是客户端是正常使用的，并且不限速，只是普通的微软账号的oneDrive只有5G。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;微软有一个产品，叫做&lt;code&gt;office365&lt;/code&gt;,如果是教育版则可以让oneDrive变成1T或者5T。用国内教育邮箱注册的office365一般是1T，并且只能使用网页版的office365套件。如果是使用国外教育邮箱注册的，则可以使用桌面版的office365套件(就是office办公软件全家桶，正版！)&lt;br&gt;
    
    </summary>
    
    
      <category term="lnmp" scheme="https://www.guaosi.com/tags/lnmp/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="onedrive" scheme="https://www.guaosi.com/tags/onedrive/"/>
    
  </entry>
  
  <entry>
    <title>安装php扩展--Fileinfo</title>
    <link href="https://www.guaosi.com/2019/02/22/install-php-fileinfo/"/>
    <id>https://www.guaosi.com/2019/02/22/install-php-fileinfo/</id>
    <published>2019-02-22T01:32:35.000Z</published>
    <updated>2019-02-25T01:05:01.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;在编译安装php或者lnmp安装的时候，可能由于服务器的配置不够(内存小于1G)，会将fileinfo扩展默认不安装，已保证php可以正常安装。可是有的时候我们又必须安装fileinfo扩展。<br><a id="more"></a></p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2. 解决"></a>2. 解决</h1><h2 id="2-1-下载php的源码编译包"><a href="#2-1-下载php的源码编译包" class="headerlink" title="2.1. 下载php的源码编译包"></a>2.1. 下载php的源码编译包</h2><p>php源码包下载地址(下载与当前安装的php相同版本的源码包): <a href="http://www.php.net/downloads.php" target="_blank" rel="noopener">http://www.php.net/downloads.php</a><br>如果是lnmp安装的，则在<code>lnmp下载处/src/</code>下可以看到php的源码包。</p><h2 id="2-2-安装fileinfo"><a href="#2-2-安装fileinfo" class="headerlink" title="2.2. 安装fileinfo"></a>2.2. 安装fileinfo</h2><p>以lnmp1.5安装位置为例,我安装的是php7.2.6版本<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xvf php-<span class="number">7.2</span>.<span class="number">6</span>.tar.bz2</span><br><span class="line">cd php-<span class="number">7.2</span>.<span class="number">6</span><span class="regexp">/ext/</span>fileinfo</span><br><span class="line">phpize</span><br><span class="line">.<span class="regexp">/configure --with-php-config=/u</span>sr<span class="regexp">/local/</span>php<span class="regexp">/bin/</span>php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>当<code>make &amp;&amp; make install</code>时报错提示内存不够时，可以参考<a href="https://www.guaosi.com/2019/02/21/linux-add-virtual-memory/">Linux虚拟内存设置</a>解决</p><h2 id="2-3-开启fileinfo扩展"><a href="#2-3-开启fileinfo扩展" class="headerlink" title="2.3. 开启fileinfo扩展"></a>2.3. 开启fileinfo扩展</h2><p>以lnmp安装位置为例<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php.ini</span></span><br></pre></td></tr></table></figure></p><p>在最后一行加上<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[FileInfo]</span></span><br><span class="line"><span class="attr">extension</span> = fileinfo.so</span><br></pre></td></tr></table></figure></p><p>保存退出后，重启php-fpm<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service php-fpm restart</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在编译安装php或者lnmp安装的时候，可能由于服务器的配置不够(内存小于1G)，会将fileinfo扩展默认不安装，已保证php可以正常安装。可是有的时候我们又必须安装fileinfo扩展。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://www.guaosi.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟内存设置</title>
    <link href="https://www.guaosi.com/2019/02/21/linux-add-virtual-memory/"/>
    <id>https://www.guaosi.com/2019/02/21/linux-add-virtual-memory/</id>
    <published>2019-02-21T02:32:35.000Z</published>
    <updated>2019-02-22T06:53:18.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;开发过程中，可能会碰到安装某个扩展需要扩大本服务器的内存，但是给的硬件内存只有那么点，该如何处理呢？<br>Linux上开启虚拟内存即可解决。</p><a id="more"></a><blockquote><p>虚拟内存是为了满足物理内存不足采用的策略，利用磁盘空间虚拟出一块逻辑内存，用作虚拟内存的空间也就是交换分区。<br>作为物理内存的扩展，Linux会在物理内存不足时，使用交换分区的逻辑内存，内核会把暂时不用的内存块信息写到交换空间，这样物理内存就得到了释放，这块儿内存就可以用于其他目的，而需要用到这些内容的时候，这些信息就会被重新从交换分区读入物理内存。<br>Linux的内存管理采用的是分页存取机制，为了保证物理内存得到充分的利用，内核会在适当的时间把物理内存中不经常使用的数据块儿自动交换到虚拟内存中，而将充分使用的信息保留到物理内存中。</p></blockquote><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h1><h2 id="2-1-创建swap分区"><a href="#2-1-创建swap分区" class="headerlink" title="2.1. 创建swap分区"></a>2.1. 创建swap分区</h2><p>用<code>拥有ROOT权限</code>的用户登入到系统，进行创建swap分区，通过下面指令创建1G的虚拟内存<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/zero <span class="attribute">of</span>=/swap/swap <span class="attribute">bs</span>=1024 <span class="attribute">count</span>=1024000</span><br></pre></td></tr></table></figure></p><h2 id="2-2-创建交换文件"><a href="#2-2-创建交换文件" class="headerlink" title="2.2. 创建交换文件"></a>2.2. 创建交换文件</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /<span class="keyword">swap</span>/<span class="keyword">swap</span></span><br></pre></td></tr></table></figure><h2 id="2-3-立即激活交换文件"><a href="#2-3-立即激活交换文件" class="headerlink" title="2.3. 立即激活交换文件"></a>2.3. 立即激活交换文件</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /<span class="keyword">swap</span>/<span class="keyword">swap</span></span><br></pre></td></tr></table></figure><h2 id="2-4-设置成永久生效"><a href="#2-4-设置成永久生效" class="headerlink" title="2.4. 设置成永久生效"></a>2.4. 设置成永久生效</h2><p>虽然现在已经生效，但是等下次服务器重启之后。该swap虚拟磁盘会失效，为保证永久生效，还需往/etc/fstab文件添加分区信息：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"/swap/swap swap swap defaults 0 0"</span> <span class="meta">&gt;&gt; </span>/etc/fstab</span><br></pre></td></tr></table></figure></p><p>现在为止，swap分区已经完成创建。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;开发过程中，可能会碰到安装某个扩展需要扩大本服务器的内存，但是给的硬件内存只有那么点，该如何处理呢？&lt;br&gt;Linux上开启虚拟内存即可解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.guaosi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用lnmp快速构建线上环境并搭建项目成功上线</title>
    <link href="https://www.guaosi.com/2018/12/18/environment-by-lnmp/"/>
    <id>https://www.guaosi.com/2018/12/18/environment-by-lnmp/</id>
    <published>2018-12-18T07:20:09.000Z</published>
    <updated>2019-03-09T10:27:01.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h1><p>本文适合:</p><p>1.已经在linux虚拟机上搭建过环境，可以正常访问的，但是没有搭建在真实服务器上。</p><p>2.需要有略微的<code>linux</code>基础。</p><p>3.有自己的小项目或者demo，如果没有，会<code>composer</code>安装框架也是可以的。</p><p>因为本文适合偷懒使用，如果没有丝毫搭建经验的，所以我建议最好是创建一台虚拟机，自己手动安装<code>nginx</code>,<code>php</code>,<code>MySQL</code>，让内网可以上线访问。有了相关的认识，再来看本文效果是最好的。</p><a id="more"></a><h1 id="2-起因"><a href="#2-起因" class="headerlink" title="2. 起因"></a>2. 起因</h1><p>当大家做好自己的项目或者是demo，都想放在服务器上线，这样其他人才能随时随地访问使用。但是新拿到一台服务器后，可是服务器里<code>nginx</code>,<code>php</code>,<code>mysql</code>这些必须环境都没有安装，去装的话又是很繁琐。<br>那么，有没有一种快速高效的办法，类似windows上的<code>phpstudy</code>一样的集成环境呢？答案是有的，比如<code>宝塔</code>，<code>lnmp</code>。这里，我们选择已经很成熟的<code>lnmp</code>的<code>1.5</code>版本来快速构建环境。</p><p>LNMP官网: <a href="https://lnmp.org" target="_blank" rel="noopener">LNMP</a></p><h1 id="3-配置域名"><a href="#3-配置域名" class="headerlink" title="3. 配置域名"></a>3. 配置域名</h1><h2 id="3-1-域名问题"><a href="#3-1-域名问题" class="headerlink" title="3.1.  域名问题"></a>3.1.  域名问题</h2><p>首先，我们要知道域名是什么？为什么域名可以知道我们服务器在哪里？甚至还可以知道最后要访问我们哪一个项目？</p><h3 id="3-1-1-域名是什么？"><a href="#3-1-1-域名是什么？" class="headerlink" title="3.1.1. 域名是什么？"></a>3.1.1. 域名是什么？</h3><p>百度上有相关的定义，我这里就不阐述了，直接举个例子吧。比如，我在万网或者腾讯云上购买了一个域名，这个域名可以是<code>guaosi.com</code>，<code>guaosi.cn</code>或者<code>guaosi.top</code>，这些域名都称之为一级域名。然后我买了<code>guaosi.com</code>这个域名，那么，我就可以随心所欲在这个域名旗下生成我想要的域名了。给项目1的域名是<code>www.guaosi.com</code>,项目2的域名是<code>test.guaosi.com</code>。这些称之为二级域名，甚至还可以创建三级域名，四级域名，这些域名都是归于<code>guaosi.com</code>旗下的，不需要购买。</p><h3 id="3-1-2-域名如何知道我们服务器在哪里"><a href="#3-1-2-域名如何知道我们服务器在哪里" class="headerlink" title="3.1.2. 域名如何知道我们服务器在哪里"></a>3.1.2. 域名如何知道我们服务器在哪里</h3><p>以腾讯云的域名系统为例。已经购买了腾讯云的域名后，找到<code>域名与网站</code>-<code>云解析</code>-<code>域名解析列表</code>-<code>解析</code>。点击<code>添加记录</code>添加想要的域名，比如我想添加<code>www.guaosi.com</code>。那么，在<code>主机记录</code>填写<code>www</code>，<code>记录值</code>填写服务器的地址,然后保存即可。</p><p><img src="/assets/blogImg/tencent-domain-name.png" alt="腾讯云域名配置"></p><p>现在如果一个用户在电脑上访问了我的<code>www.guaosi.com</code>域名，首先，电脑上会先查看自己本地的Hosts文件里是否有做了关于<code>www.guaosi.com</code>的重定向，如果没有，那么电脑再访问由宽带运营商规定DNS(域名解析)服务器，查到<code>www.guaosi.com</code>的服务器地址为<code>xx.xx.xx.xx</code>，然后此时将请求发往IP为<code>xx.xx.xx.xx</code>的服务器上。最后，具体是访问到这台服务器上的哪个项目，哪个文件，我们下面再说。</p><h2 id="3-2-没有服务器或者域名"><a href="#3-2-没有服务器或者域名" class="headerlink" title="3.2. 没有服务器或者域名"></a>3.2. 没有服务器或者域名</h2><p>由上文的 <code>域名如何知道我们服务器在哪里</code> ，里面提及到，电脑上是先查看自己本地的Hosts文件里是否有做了关于<code>www.guaosi.com</code>的重定向，如果没有，电脑才访问由宽带运营商规定DNS(域名解析)服务器。所以，我们可以修改Hosts文件来假装自己已经拥有了自己的域名。</p><p>编辑hosts文件，加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">环境地址       <span class="selector-tag">www</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br><span class="line"></span><br><span class="line"># 比如我虚拟机环境地址是192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span>  <span class="selector-tag">www</span><span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h2 id="3-3-拥有自己的服务器以及域名"><a href="#3-3-拥有自己的服务器以及域名" class="headerlink" title="3.3. 拥有自己的服务器以及域名"></a>3.3. 拥有自己的服务器以及域名</h2><p>通过上文的 <code>域名如何知道我们服务器在哪里</code> ，进行配置即可。</p><h1 id="4-安装LNMP"><a href="#4-安装LNMP" class="headerlink" title="4. 安装LNMP"></a>4. 安装LNMP</h1><p>根据官网的步骤安装即可，因为是一键包而且官网已经说得很详细了，我就不复现了。</p><p>建议安装MySQL8和PHP7.26版本，不要忘记设置的MySQL密码，并且密码的加密方式最好选择<code>mysql_native_password</code>。</p><p>LNMP安装: <a href="https://lnmp.org/install.html" target="_blank" rel="noopener">LNMP安装</a></p><p>安装完毕后，默认是root账户只能在本服务器上被访问，外界访问不到，可以进到mysql客户端里进行修改。</p><p>LNMP相关软件目录及文件位置 : <a href="https://lnmp.org/faq/lnmp-software-list.html" target="_blank" rel="noopener">LNMP相关软件目录及文件位置</a></p><p><code>my.ini</code>位置: <code>/etc/my.cnf</code></p><p><code>php.ini</code>位置: <code>/usr/local/php/etc/php.ini</code></p><p><code>vhost</code>位置: <code>/usr/local/nginx/conf/vhost</code></p><h1 id="5-配置虚拟站点"><a href="#5-配置虚拟站点" class="headerlink" title="5. 配置虚拟站点"></a>5. 配置虚拟站点</h1><h2 id="5-1-添加虚拟站点"><a href="#5-1-添加虚拟站点" class="headerlink" title="5.1. 添加虚拟站点"></a>5.1. 添加虚拟站点</h2><p>输入命令，新建虚拟站点<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost <span class="keyword">add</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><p>之后的选择，可以参考如下:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.Please enter domain(example: www.lnmp.org)</span><br><span class="line">输入想要创建的域名。比如  www.guaosi.com  回车</span><br><span class="line"></span><br><span class="line">2.Enter more domain name(example: lnmp.org *.lnmp.org)</span><br><span class="line">输入更多域名。没有必要，回车</span><br><span class="line"></span><br><span class="line">3.Default directory: /home/wwwroot/www.guaosi.com:</span><br><span class="line">项目存放的目录。默认即可，回车</span><br><span class="line"></span><br><span class="line">4.Allow Rewrite rule? (y/n)</span><br><span class="line">vhost里的配置规则。默认即可，回车</span><br><span class="line"></span><br><span class="line">5.<span class="builtin-name">Enable</span> PHP Pathinfo? (y/n)</span><br><span class="line">是否添加PHP Pathinfo。默认即可，回车</span><br><span class="line"></span><br><span class="line">6.Allow access log? (y/n)</span><br><span class="line">是否开启访问日志。默认即可，回车</span><br><span class="line"></span><br><span class="line">7. Multiple PHP version found, Please select the PHP version.</span><br><span class="line">选择运行该项目的php版本，回车</span><br><span class="line"></span><br><span class="line">8. Create database <span class="keyword">and</span> MySQL<span class="built_in"> user </span>with same name</span><br><span class="line">是否在mysql里创建当前项目专用的数据库与账户。这步可以选择 n 跳过,但是为了安全起见，最好是一个项目存放一个数据库以及配置专用的MySQL账号密码，所以我这里选择y，回车</span><br><span class="line"></span><br><span class="line">9. Enter current root password of Database (Password will <span class="keyword">not</span> shown):</span><br><span class="line">请输入当前mysql的root密码。输入完毕后，回车</span><br><span class="line"></span><br><span class="line">10.Enter database name:</span><br><span class="line">输入新建数据库的名称。输入完毕后，回车</span><br><span class="line"></span><br><span class="line">11.Please enter password <span class="keyword">for</span> mysql user</span><br><span class="line">为新建的mysql账户设置密码。输入完毕后，回车</span><br><span class="line"></span><br><span class="line">12.<span class="builtin-name">Add</span> SSL Certificate</span><br><span class="line">是否添加SSL证书。现在SSL证书都是可以免费拿到，比如腾讯云，阿里云的域名都可以免费申请，我们这边直接n跳过，自己来配置SSL证书</span><br><span class="line"></span><br><span class="line">13.Press any key <span class="keyword">to</span> start create virtul host.</span><br><span class="line">直接回车，添加新的虚拟站点成功</span><br></pre></td></tr></table></figure></p><p>成功后，会生成对应的项目目录 <code>/home/wwwroot/www.guaosi.com</code> ，成生成nginx关于这个项目的虚拟站点配置文件<code>/usr/local/nginx/conf/vhost/www.guaosi.com.conf</code></p><h2 id="5-2-修改vhost配置文件"><a href="#5-2-修改vhost配置文件" class="headerlink" title="5.2. 修改vhost配置文件"></a>5.2. 修改vhost配置文件</h2><p>输入<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure></p><p>将 <code>root</code> 指向的地址，进行修改，将原来的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  /home/wwwroot/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span>/</span><br></pre></td></tr></table></figure></p><p>修改为项目入口地址所在目录。<br>如果是yii2项目，修改为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  /home/wwwroot/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span>/web</span><br></pre></td></tr></table></figure></p><p>如果是laravel或者tp5项目，修改为<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  <span class="regexp">/home/</span>wwwroot<span class="regexp">/www.guaosi.com/</span><span class="keyword">public</span></span><br></pre></td></tr></table></figure></p><h1 id="6-测试项目上线"><a href="#6-测试项目上线" class="headerlink" title="6. 测试项目上线"></a>6. 测试项目上线</h1><h2 id="6-1-将项目放入线上"><a href="#6-1-将项目放入线上" class="headerlink" title="6.1. 将项目放入线上"></a>6.1. 将项目放入线上</h2><p>将自己已经完成的项目或者demo，放到服务器的项目目录下(比如<code>home/wwwroot/www.guaosi.com/</code>)。</p><p>以下提供四种方式，<code>推荐使用git</code>，因为git有版本控制，可以回退版本以及分支开发，团队合作，是现在的主流趋势，是每个程序猿必须掌握的。</p><h3 id="6-1-1-composer"><a href="#6-1-1-composer" class="headerlink" title="6.1.1. composer"></a>6.1.1. composer</h3><p>如果没有可以放的项目或者demo，可以直接composer下载thinkphp5或者laravel到项目目录下，可以通过域名成功访问到即代表成功.</p><h3 id="6-1-2-FTP上传"><a href="#6-1-2-FTP上传" class="headerlink" title="6.1.2. FTP上传"></a>6.1.2. FTP上传</h3><p>需要服务器开了FTP的21端口或者sftp的22端口.建议把自己的项目打包成zip，然后通过ftp工具上传到项目目录，然后解压。工具推荐<code>winscp</code>,<code>FlashFXP</code>。</p><h3 id="6-1-3-git"><a href="#6-1-3-git" class="headerlink" title="6.1.3. git"></a>6.1.3. git</h3><p>需要有git的使用基础，如果还不会git或者对git有兴趣，可以查查廖大神的git教程。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">点我查看git教程</a></p><p>已经将项目上传至<code>github</code>或者<code>gitee</code>这样的远程仓库，然后在项目目录下<code>git clone</code>自己的项目下来即可。（如果是laravel或者tp5项目，记得<code>composer update</code>,laravel记得修改<code>.env</code>文件）</p><h3 id="6-1-4-其他"><a href="#6-1-4-其他" class="headerlink" title="6.1.4. 其他"></a>6.1.4. 其他</h3><p>如果服务器已经做过ssh免密码登陆。那么可以把项目打包成zip，然后通过scp<br>进行上传<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的 /Users/guaosi/Documents/www.guaosi.com.zip 的文件复制到ip为192.168.120.204的服务器上的</span></span><br><span class="line">scp /Users/guaosi/Documents/www.guaosi.com.zip  root<span class="variable">@192</span>.<span class="number">168.120</span>.<span class="number">204</span><span class="symbol">:/home/wwwroot/www</span>.guaosi.com</span><br><span class="line"><span class="comment"># 最后记得解压</span></span><br></pre></td></tr></table></figure></p><p>如果是从服务器上复制文件到本地<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从ip为192.168.120.204的服务器上，通过root登录，然后复制 /opt/soft/ 下的nginx-0.5.38.tar.gz 文件 到 本地的 /Users/guaosi/Documents 目录下</span></span><br><span class="line">scp root<span class="variable">@192</span>.<span class="number">168.120</span>.<span class="number">204</span><span class="symbol">:/opt/soft/nginx-</span><span class="number">0</span>.<span class="number">5.38</span>.tar.gz /Users/guaosi/Documents</span><br></pre></td></tr></table></figure></p><h2 id="6-2-遇到的问题"><a href="#6-2-遇到的问题" class="headerlink" title="6.2. 遇到的问题"></a>6.2. 遇到的问题</h2><p>说几个在<code>lnmp</code>集成环境下部署遇到的问题。</p><h3 id="6-2-1-多站点白屏问题"><a href="#6-2-1-多站点白屏问题" class="headerlink" title="6.2.1. 多站点白屏问题"></a>6.2.1. 多站点白屏问题</h3><p>一个服务器其实是可以部署多个项目的。那么，回到之前欠下的问题<code>如何知道最后要访问我们哪一个项目？</code><br>通过上面的虚拟站点配置文件，我们可以知道，我们为域名为<code>www.guaosi.com</code>专门指定了访问目录root为<code>/home/wwwroot/www.guaosi.com/public</code>。这样，当用户访问<code>www.guaosi.com</code>的时候，他的电脑会先去DNS服务器查询到<code>www.guaosi.com</code>解析的服务器IP地址，然后访问到这台服务器。因为访问的是<code>www.guaosi.com</code>，那么，nginx后找到配置文件中站点为<code>www.guaosi.com</code>,找到它对应的root指向目录，进行访问。</p><p>lnmp多站点(多项目)部署的时候，tp5会出现项目白屏的问题，报500错误。这是因为我们在vhost配置中的root指向的是<code>public</code>，这样一来，访问网址就不需要加<code>public</code>了，可是因为lnmp设置了目录访问权限，无法访问上级目录，所以需要进行修改。</p><p>1.修改<code>fastcgi.conf</code>的配置<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/fastcgi.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>2.然后在最后一行加入<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param PHP_ADMIN_VALUE $<span class="keyword">basedir </span>if_not_empty<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>3.保存退出</p><p>4.再修改<code>www.guaosi.com.conf</code>的配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>5.在<code>root</code>下面一行加入 <code>&quot;open_basedir=/home/wwwroot/www.guaosi.com/:/tmp/:/proc/&quot;;</code><br>完整配置参考<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#listen [::]:80;</span></span><br><span class="line">        <span class="attribute">server_name</span> www.guaosi.com ;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">        <span class="comment"># yii2</span></span><br><span class="line">        <span class="comment"># root  /home/wwwroot/www.guaosi.com/web;</span></span><br><span class="line">        <span class="comment"># thinkphp5跟laravel5</span></span><br><span class="line">        <span class="attribute">root</span>  /home/wwwroot/www.guaosi.com/public;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$basedir</span> <span class="string">"open_basedir=/home/wwwroot/www.guaosi.com/:/tmp/:/proc/"</span>;</span><br><span class="line">        <span class="attribute">include</span> rewrite/none.conf;</span><br><span class="line">        <span class="comment">#error_page   404   /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Deny access to PHP files in specific directory</span></span><br><span class="line">        <span class="comment">#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> enable-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># yii2 nginx规则</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">         <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">           <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.php <span class="literal">last</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># thinkphp5 nginx规则</span></span><br><span class="line">         <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /index.php?s=<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment"># laravel5 nginx规则</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span>      <span class="number">30d</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span>      <span class="number">12h</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /.well-known</span> &#123;</span><br><span class="line">            <span class="attribute">allow</span> all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /\.</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">access_log</span>  /home/wwwlogs/www.guaosi.com.log;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ol start="6"><li><p>保存退出</p></li><li><p>重启nginx</p></li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lnmp nginx restart</span></span><br></pre></td></tr></table></figure><ol start="8"><li>测试访问 <code>http://www.guaosi.com</code> 看看是否正常吧</li></ol><h3 id="6-2-2-添加SSL证书-HTTPS"><a href="#6-2-2-添加SSL证书-HTTPS" class="headerlink" title="6.2.2. 添加SSL证书(HTTPS)"></a>6.2.2. 添加SSL证书(HTTPS)</h3><p>在阿里云或者腾讯云购买的域名，可以免费申请ssl证书.申请通过后，下载并且上传到服务器上，解压。</p><p>修改修改<code>www.guaosi.com.conf</code>的配置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure></p><p>在 <code>listen 80;</code>后面加入下面代码<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span> 证书存在位置;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> 证书存在位置;</span><br></pre></td></tr></table></figure></p><p>参考案例<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">server</span></span><br><span class="line">    &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        listen <span class="number">443</span> ssl;</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate /usr/cert/www/ssl.crt;</span><br><span class="line">        ssl_certificate_key /usr/cert/www/ssl.key;</span><br><span class="line">        <span class="meta">#listen [::]:80;</span></span><br><span class="line">        server_name www.guaosi.com ;</span><br><span class="line">        <span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php <span class="keyword">default</span>.html <span class="keyword">default</span>.htm <span class="keyword">default</span>.php;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p><h3 id="6-2-3-强制跳转HTTPS"><a href="#6-2-3-强制跳转HTTPS" class="headerlink" title="6.2.3. 强制跳转HTTPS"></a>6.2.3. 强制跳转HTTPS</h3><p>如果想http强制https，只要<code>让80端口的强制重定向https</code>即可。可以参考这样设置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">#listen 80;</span></span><br><span class="line">        <span class="comment">#listen [::]:80;</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /usr/cert/cloud/ssl.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /usr/cert/cloud/ssl.key;</span><br><span class="line">        <span class="attribute">server_name</span> cloud.guaosi.com ;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">        <span class="attribute">root</span>  /home/wwwroot/cloud.guaosi.com/public;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$basedir</span> <span class="string">"open_basedir=/home/wwwroot/cloud.guaosi.com/:/tmp/:/proc/"</span>;</span><br><span class="line">        <span class="attribute">include</span> rewrite/none.conf;</span><br><span class="line">        <span class="comment">#error_page   404   /404.html;</span></span><br><span class="line">        <span class="comment"># Deny access to PHP files in specific directory</span></span><br><span class="line">        <span class="comment">#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> enable-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> cloud.guaosi.com ;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-2-4-无法删除项目"><a href="#6-2-4-无法删除项目" class="headerlink" title="6.2.4. 无法删除项目"></a>6.2.4. 无法删除项目</h3><p>因为LNMP 1.2开始PHP防跨目录限制使用<code>.user.ini</code>，该文件在网站根目录下，<code>.user.ini</code>文件无法直接修改。所以需要先解锁<code>.user.ini</code>文件。<br>执行下面的命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -<span class="selector-tag">i</span> /home/wwwroot/www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span>/<span class="selector-class">.user</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-前提&quot;&gt;&lt;a href=&quot;#1-前提&quot; class=&quot;headerlink&quot; title=&quot;1. 前提&quot;&gt;&lt;/a&gt;1. 前提&lt;/h1&gt;&lt;p&gt;本文适合:&lt;/p&gt;
&lt;p&gt;1.已经在linux虚拟机上搭建过环境，可以正常访问的，但是没有搭建在真实服务器上。&lt;/p&gt;
&lt;p&gt;2.需要有略微的&lt;code&gt;linux&lt;/code&gt;基础。&lt;/p&gt;
&lt;p&gt;3.有自己的小项目或者demo，如果没有，会&lt;code&gt;composer&lt;/code&gt;安装框架也是可以的。&lt;/p&gt;
&lt;p&gt;因为本文适合偷懒使用，如果没有丝毫搭建经验的，所以我建议最好是创建一台虚拟机，自己手动安装&lt;code&gt;nginx&lt;/code&gt;,&lt;code&gt;php&lt;/code&gt;,&lt;code&gt;MySQL&lt;/code&gt;，让内网可以上线访问。有了相关的认识，再来看本文效果是最好的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://www.guaosi.com/tags/php/"/>
    
      <category term="lnmp" scheme="https://www.guaosi.com/tags/lnmp/"/>
    
      <category term="服务器" scheme="https://www.guaosi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>二维数组的巧妙整合</title>
    <link href="https://www.guaosi.com/2018/12/14/complex-two-dimensional-arrays/"/>
    <id>https://www.guaosi.com/2018/12/14/complex-two-dimensional-arrays/</id>
    <published>2018-12-14T06:58:15.000Z</published>
    <updated>2018-12-18T07:24:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>在工作中，经常会遇到多个多维数组或者orm对象数组需要整合的情况。通过整合好数据，然后输出给前端。</p><h1 id="2-数据"><a href="#2-数据" class="headerlink" title="2. 数据"></a>2. 数据</h1><p>比如现在，有2个orm对象，他们的表间关系存在不明显，互相没有做模型关联，但是id相同。</p><a id="more"></a><ol><li>$name_data对象数组(已转json格式，方便查看)</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>$order_data对象数组(已转json格式，方便查看)</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在我想把这2个orm对象数组整合成一个数组，方便前端调用，想转成的数据结构如下所示（已转json格式，方便查看）<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"1"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"2"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"3"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"4"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"5"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"6"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"7"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"8"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><h2 id="3-1-想法一"><a href="#3-1-想法一" class="headerlink" title="3.1. 想法一"></a>3.1. 想法一</h2><p>脑子里一闪间的想法，2个数组整合成一个，并且根据id来区别。容易，做2个foreach循环就行了，判断id相同的，放到一个数组里就行了，于是可能会想到了下面的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v)&#123;</span><br><span class="line">        <span class="keyword">if</span>($v-&gt;id == $val-&gt;id)&#123;</span><br><span class="line">            $data[<span class="string">'id'</span>] = $v-&gt;id;</span><br><span class="line">            $data[<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">            $data[<span class="string">'order_count'</span>] = $v-&gt;order_count;</span><br><span class="line">            $users_info[]=$data;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后的结果(已转json格式，方便查看)<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>很明显，这不是我们想要的结果。</p><h2 id="3-2-想法二"><a href="#3-2-想法二" class="headerlink" title="3.2. 想法二"></a>3.2. 想法二</h2><p>想法一的想法太武断，只考虑了2个ID相等的情况，没有考虑到不同，所以导致只做了一半的事情，答案不正确。再次经过考虑后，可能有了如下的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    $flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v)&#123;</span><br><span class="line">        <span class="keyword">if</span>($v-&gt;id == $val-&gt;id)&#123;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span><br><span class="line">            $flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span><br><span class="line">            $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!$flag)&#123;</span><br><span class="line">        $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span><br><span class="line">        $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行过后的结果(已转json格式，方便查看)<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"1"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"2"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"3"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"4"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"5"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"6"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"7"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"8"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这次，跟我们想要的结果很接近了。其实，这样已经可以传给我们的前端，让前端自己去判断处理了。</p><h2 id="3-3-想法三"><a href="#3-3-想法三" class="headerlink" title="3.3. 想法三"></a>3.3. 想法三</h2><p>那有没有一种简单点的办法，既可以实现我们要的数据结果，又简单方便好理解呢？答案是有的，其实想法二已经体现出来了，就是活用php的数组特性，充分利用id来判断相同可以整合的数据，于是想法三就诞生了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $val)&#123;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = $val-&gt;order_count;</span><br><span class="line">    $users_info[$val-&gt;id][<span class="string">'name'</span>] = $users_info[$val-&gt;id][<span class="string">'name'</span>]??<span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行过后的结果(已转json格式，方便查看)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"1"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_0"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"2"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_1"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"3"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_2"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"4"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_3"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"5"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"std_name_4"</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"6"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"7"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"8"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"order_count"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>以上三种想法可以看出来，想法三具有以下三个特点:</p><ol><li>简单高效，想法一与想法二最大运行次数都是<code>m*n</code>次，然而想法三是<code>m+n</code>次，速度效率存在本质的区别。</li><li>可以实现我们想要的数据结构，并且相比想法二，减少了大量的逻辑代码。</li><li>活用php数组特性，利用id来区分以及整合数组，在我们的平时工作中，很经常会遇到类似相关的问题。</li></ol><p>虽然这里只是以两个对象数组为例，其实还可以更多应用到其他多维数组，多个数组整合之类的，灵活变通，类似问题都会迎刃而解。</p><h1 id="5-案例完整代码"><a href="#5-案例完整代码" class="headerlink" title="5. 案例完整代码"></a>5. 案例完整代码</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//制作名字与ID的对象数组</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">mockNameData</span><span class="params">($n)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $name_data = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span></span><br><span class="line"><span class="php">        $obj = <span class="keyword">new</span> \stdClass();</span></span><br><span class="line"><span class="php">        $obj-&gt;id = $i + <span class="number">1</span>;</span></span><br><span class="line"><span class="php">        $obj-&gt;name = <span class="string">'std_name_'</span> . $i;</span></span><br><span class="line"><span class="php">        $name_data[] = $obj;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $name_data;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//制作订单数量与ID的对象数组</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">mockOrderData</span><span class="params">($n)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $order_data = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span></span><br><span class="line"><span class="php">        $obj = <span class="keyword">new</span> \stdClass();</span></span><br><span class="line"><span class="php">        $obj-&gt;id = $i + <span class="number">2</span>;</span></span><br><span class="line"><span class="php">        $obj-&gt;order_count = $i * <span class="number">2</span>;</span></span><br><span class="line"><span class="php">        $order_data[] = $obj;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $order_data;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 想法一</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">think1</span><span class="params">($name_data, $order_data)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $users_info = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($v-&gt;id == $val-&gt;id) &#123;</span></span><br><span class="line"><span class="php">                $data[<span class="string">'id'</span>] = $v-&gt;id;</span></span><br><span class="line"><span class="php">                $data[<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">                $data[<span class="string">'order_count'</span>] = $v-&gt;order_count;</span></span><br><span class="line"><span class="php">                $users_info[] = $data;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $users_info;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//想法二</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">think2</span><span class="params">($name_data, $order_data)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $users_info = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        $flag = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $v) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($v-&gt;id == $val-&gt;id) &#123;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span></span><br><span class="line"><span class="php">                $flag = <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'id'</span>] = $v-&gt;id;</span></span><br><span class="line"><span class="php">                $users_info[$v-&gt;id][<span class="string">'order_count'</span>] = $v-&gt;order_count;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!$flag) &#123;</span></span><br><span class="line"><span class="php">            $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span></span><br><span class="line"><span class="php">            $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $users_info;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//想法三</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">think3</span><span class="params">($name_data, $order_data)</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $users_info = [];</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($name_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'name'</span>] = $val-&gt;name;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($order_data <span class="keyword">as</span> $val) &#123;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'id'</span>] = $val-&gt;id;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'order_count'</span>] = $val-&gt;order_count;</span></span><br><span class="line"><span class="php">        $users_info[$val-&gt;id][<span class="string">'name'</span>] = $users_info[$val-&gt;id][<span class="string">'name'</span>] ?? <span class="string">''</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $users_info;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//设置虚拟数据的长度</span></span></span><br><span class="line"><span class="php">$n = <span class="number">5</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//设置虚拟数据的长度</span></span></span><br><span class="line"><span class="php">$m = <span class="number">7</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//制作名字与ID的对象数组</span></span></span><br><span class="line"><span class="php">$name_data = mockNameData($n);</span></span><br><span class="line"><span class="php"><span class="comment">////制作订单数量与ID的对象数组</span></span></span><br><span class="line"><span class="php">$order_data = mockOrderData($m);</span></span><br><span class="line"><span class="php"><span class="comment">//打印想法1</span></span></span><br><span class="line"><span class="php">print_r(think1($name_data, $order_data));</span></span><br><span class="line"><span class="php"><span class="comment">//打印想法2</span></span></span><br><span class="line"><span class="php">print_r(think2($name_data, $order_data));</span></span><br><span class="line"><span class="php"><span class="comment">//打印想法3</span></span></span><br><span class="line"><span class="php">print_r(think3($name_data, $order_data));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;在工作中，经常会遇到多个多维数组或者orm对象数组需要整合的情况。通过整合好数据，然后输出给前端。&lt;/p&gt;
&lt;h1 id=&quot;2-数据&quot;&gt;&lt;a href=&quot;#2-数据&quot; class=&quot;headerlink&quot; title=&quot;2. 数据&quot;&gt;&lt;/a&gt;2. 数据&lt;/h1&gt;&lt;p&gt;比如现在，有2个orm对象，他们的表间关系存在不明显，互相没有做模型关联，但是id相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://www.guaosi.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>git pull或git checkout 后保持权限不变</title>
    <link href="https://www.guaosi.com/2018/12/06/git-auto-change/"/>
    <id>https://www.guaosi.com/2018/12/06/git-auto-change/</id>
    <published>2018-12-06T08:43:14.000Z</published>
    <updated>2019-02-22T06:53:35.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>&#160; &#160; &#160; &#160;服务器上的项目,一般都是使用用户组<code>www-data</code>或者<code>www</code>来保证权限安全,不会使用<code>root</code>的。但是<code>git pull</code>下来的新文件或者修改的文件,则会把原有的文件的权限更改为644,用户组改为root。</p><a id="more"></a><p>如下图所示:<br><img src="/assets/blogImg/git-auto-change-demo.png" alt="docker-mascot"></p><h1 id="2-危害"><a href="#2-危害" class="headerlink" title="2. 危害"></a>2. 危害</h1><p>例如<code>日志文件</code>，<code>异步程序</code>,<code>定时任务</code>,<code>配置文件</code>之类的，由于最后运行用户的用户不对或者权限不够，可能会导致异常退出,文件无法读取,日志无法写入等等。所以,这个问题是值得引起我们重视的。</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h1><h2 id="3-1-手动解决"><a href="#3-1-手动解决" class="headerlink" title="3.1. 手动解决"></a>3.1. 手动解决</h2><p>想法很简单，重新修改文件的权限。比如，回到站点上级目录，执行如下命令</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">chmod</span> -<span class="type">R</span> <span class="number">755</span> www.guaosi.com/</span><br><span class="line"><span class="meta"># 修改项目内所有文件为755权限</span></span><br><span class="line"><span class="title">chown</span> -<span class="type">R</span> www-<span class="class"><span class="keyword">data</span>:www-<span class="keyword">data</span> www.guaosi.com/</span></span><br><span class="line"><span class="meta"># 修改项目内所有文件的用户和用户组为www-data</span></span><br></pre></td></tr></table></figure><p>只要不嫌累，每次git pull 或者 git checkout . 后退回上级目录执行一次，还是可以舒舒服服解决这个问题的.</p><h2 id="3-2-git-hook函数"><a href="#3-2-git-hook函数" class="headerlink" title="3.2. git hook函数"></a>3.2. git hook函数</h2><p>接下来是这篇文章的重点了，我们可以使用git内置的钩子函数来解决这个问题.</p><p>先来看一下怎么操作:</p><h3 id="3-2-1-git-pull-操作"><a href="#3-2-1-git-pull-操作" class="headerlink" title="3.2.1. git pull 操作"></a>3.2.1. git pull 操作</h3><p>1.进入项目目录<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>2.进入.git目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">.git/hooks/</span></span><br></pre></td></tr></table></figure></p><p>3.新建post-merge文件<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="built_in">post</span>-<span class="built_in">merge</span></span><br></pre></td></tr></table></figure></p><p>4.写入钩子内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This is post-merge hook"</span></span><br><span class="line">chmod -R 755 ./* &amp;&amp; chown -R www-data:www-data ./*</span><br></pre></td></tr></table></figure></p><p>5.给予运行权限<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="built_in">post</span>-<span class="built_in">merge</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-2-git-checkout-操作"><a href="#3-2-2-git-checkout-操作" class="headerlink" title="3.2.2. git checkout 操作"></a>3.2.2. git checkout 操作</h3><p>1.进入项目目录<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd www<span class="selector-class">.guaosi</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>2.进入.git目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">.git/hooks/</span></span><br></pre></td></tr></table></figure></p><p>3.新建post-checkout文件<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim post-checkout</span></span><br></pre></td></tr></table></figure></p><p>4.写入钩子内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This is post-checkout hook"</span></span><br><span class="line">chmod -R 755 ./* &amp;&amp; chown -R www-data:www-data ./*</span><br></pre></td></tr></table></figure></p><p>5.给予运行权限<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="built_in">post</span>-checkout</span><br></pre></td></tr></table></figure></p><h3 id="3-2-3-原理"><a href="#3-2-3-原理" class="headerlink" title="3.2.3. 原理"></a>3.2.3. 原理</h3><p>看了钩子内容应该大家都明白了，其实就是把手动运行的内容放入了钩子函数。在执行<code>git pull</code>命令时，会自动调用<code>post-merge</code>。在执行<code>git checkout</code>时,会自动调用<code>git checkout</code>.这样我们以后就不用再操心，怕遗忘权限有没有修改的问题了.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;服务器上的项目,一般都是使用用户组&lt;code&gt;www-data&lt;/code&gt;或者&lt;code&gt;www&lt;/code&gt;来保证权限安全,不会使用&lt;code&gt;root&lt;/code&gt;的。但是&lt;code&gt;git pull&lt;/code&gt;下来的新文件或者修改的文件,则会把原有的文件的权限更改为644,用户组改为root。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.guaosi.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>docker常用基础</title>
    <link href="https://www.guaosi.com/2018/11/30/docker-basic/"/>
    <id>https://www.guaosi.com/2018/11/30/docker-basic/</id>
    <published>2018-11-30T03:39:18.000Z</published>
    <updated>2019-03-15T06:17:21.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-docker用来干什么"><a href="#1-docker用来干什么" class="headerlink" title="1. docker用来干什么"></a>1. docker用来干什么</h1><p>将做好的环境和代码，打包成镜像，可以让各个地方都可以直接使用，不再受到环境的限制。</p><h1 id="2-docker与虚拟机的区别"><a href="#2-docker与虚拟机的区别" class="headerlink" title="2. docker与虚拟机的区别"></a>2. docker与虚拟机的区别</h1><p>1.虚拟机是模拟整个操作系统，包括硬件部分<br>2.docker是使用linux容器，通过进程隔离，拥有自己的文件系统，不会跟宿主机产生错乱。<br>3.docker没有自己的内核，使用的是宿主机的内核。</p><a id="more"></a><p><img src="/assets/blogImg/docker-mascot.jpeg" alt="docker-mascot"></p><h1 id="3-docker三大要素"><a href="#3-docker三大要素" class="headerlink" title="3. docker三大要素"></a>3. docker三大要素</h1><ol><li>镜像</li><li>容器</li><li>仓库(用于云上存放镜像)<blockquote><p><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p></blockquote></li></ol><p>镜像就是模板。镜像好比类，容器是对象实例。</p><h2 id="3-1-需要正确的理解仓库-镜像-容器这几个概念"><a href="#3-1-需要正确的理解仓库-镜像-容器这几个概念" class="headerlink" title="3.1. 需要正确的理解仓库/镜像/容器这几个概念"></a>3.1. 需要正确的理解仓库/镜像/容器这几个概念</h2><p>Docker本身是一个容器运行载体货或之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成docker容器。image文件可以看做是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</p><p>1.image文件生成的容器实例，本身也是一个文件，称之为镜像文件。<br>2.一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器。<br>3.至于仓库，就是存放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</p><h1 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4. 安装docker"></a>4. 安装docker</h1><h2 id="4-1-在centos6上安装docker"><a href="#4-1-在centos6上安装docker" class="headerlink" title="4.1. 在centos6上安装docker"></a>4.1. 在centos6上安装docker</h2><p>至少要centos6.5以上。</p><p>1.yum install -y epel-release<br>2.yum install -y docker-io<br>3.安装后的配置文件: /etc/sysconfig/docker<br>4.启动Docker后台服务: service docker start<br>5.docker version验证</p><h2 id="4-2-在centos7上安装docker"><a href="#4-2-在centos7上安装docker" class="headerlink" title="4.2. 在centos7上安装docker"></a>4.2. 在centos7上安装docker</h2><p>官网安装教程:<br><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce</a><br>使用镜像仓库进行安装</p><p>1.安装gcc</p><blockquote><p>yum -y install gcc</p></blockquote><p>2.安装gcc-c++</p><blockquote><p>yum -y install gcc-c++</p></blockquote><p>3.卸载之前的docker(如果有装过)<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p><p>4.安装需要的软件包</p><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p></blockquote><p>5.设置stable镜像仓库</p><blockquote><p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><p>6.更新yum软件包索引</p><blockquote><p>yum makecache fast</p></blockquote><p>7.安装docker ce</p><blockquote><p>yum -y install docker-ce</p></blockquote><p>8.启动docker</p><blockquote><p>systemctl start docker </p></blockquote><p>9.测试</p><blockquote><p>docker version</p></blockquote><blockquote><p>docker run hello-world</p></blockquote><blockquote><p>docker images</p></blockquote><p>10.配置镜像加速</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line"><span class="comment">// 配置加速服务器</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>加速服务器</p><p>1.网易云<br>{“registry-mirrors”:[“<a href="http://hub-mirror.c.163.com&quot;]}" target="_blank" rel="noopener">http://hub-mirror.c.163.com&quot;]}</a></p><p>2.阿里云 (dev.alipay.com 里申请自己专属的线上hub)<br>{“registry-mirrors”:[“https://自己的专属hub.mirror.aliyuncs.com”]}</p><p>11.docker进程查看</p><blockquote><p>ps -ef|grep docker|grep -v grep</p></blockquote><p>12.卸载<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line">sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure></p><h1 id="5-使用阿里云镜像仓库"><a href="#5-使用阿里云镜像仓库" class="headerlink" title="5. 使用阿里云镜像仓库"></a>5. 使用阿里云镜像仓库</h1><p>注册地址</p><blockquote><p><a href="https://dev.aliyun.com" target="_blank" rel="noopener">https://dev.aliyun.com</a></p></blockquote><h2 id="5-1-centos6-修改镜像仓库"><a href="#5-1-centos6-修改镜像仓库" class="headerlink" title="5.1. centos6 修改镜像仓库"></a>5.1. centos6 修改镜像仓库</h2><blockquote><p>vim /etc/sysconfig/docker</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">other_args</span>=<span class="string">"--registry-mirror=https://自己的专属hub.mirror.aliyuncs.com"</span></span><br></pre></td></tr></table></figure><h2 id="5-2-centos7-修改镜像仓库"><a href="#5-2-centos7-修改镜像仓库" class="headerlink" title="5.2. centos7 修改镜像仓库"></a>5.2. centos7 修改镜像仓库</h2><blockquote><p>vim /etc/docker/daemon.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"registry-mirrors"</span>:[<span class="string">"https://自己的专属hub.mirror.aliyuncs.com"</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="6-docker的命令"><a href="#6-docker的命令" class="headerlink" title="6. docker的命令"></a>6. docker的命令</h1><h2 id="6-1-docker帮助命令"><a href="#6-1-docker帮助命令" class="headerlink" title="6.1. docker帮助命令"></a>6.1. docker帮助命令</h2><blockquote><p>docker version</p></blockquote><p>查看docker基础信息，版本号等等</p><blockquote><p>docker info</p></blockquote><p>查看docker详细信息，容器数量，内存等等</p><blockquote><p>docker –help</p></blockquote><p>查看docker命令</p><h2 id="6-2-docker镜像命令"><a href="#6-2-docker镜像命令" class="headerlink" title="6.2. docker镜像命令"></a>6.2. docker镜像命令</h2><h3 id="6-2-1-docker-images"><a href="#6-2-1-docker-images" class="headerlink" title="6.2.1. docker images"></a>6.2.1. docker images</h3><blockquote><p>docker images </p></blockquote><p>列出本地主机上的镜像</p><blockquote><p>docker images -a</p></blockquote><p>列出本地主机上的镜像(包括中间映象层)</p><blockquote><p>docker images -q</p></blockquote><p>列出本地主机上的所有镜像，而只显示Image ID的值</p><blockquote><p>docker images -qa</p></blockquote><p>a 加 q 的结合,列出本地主机上的镜像(包括中间映象层),而只显示Image ID的值</p><blockquote><p>docker images –digests</p></blockquote><p>显示镜像的摘要信息(DIGEST)</p><blockquote><p>docker images –no-trunc</p></blockquote><p>显示完整的镜像信息(完整的image id)</p><h3 id="6-2-2-docker-search"><a href="#6-2-2-docker-search" class="headerlink" title="6.2.2. docker search"></a>6.2.2. docker search</h3><p>去 <a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a> 上查找镜像。(拉下来还是根据自己配置的，如阿里云上拉)</p><blockquote><p>docker search php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列。</p><blockquote><p>docker search -s 30 php</p></blockquote><p>在docker官方hub上查找php并且stars超过30的镜像后进行罗列。</p><blockquote><p>docker search –no-trunc php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列,将DESCRIPTION完整的显示。</p><blockquote><p>docker search –automated php</p></blockquote><p>在docker官方hub上查找php的镜像后进行罗列,将AUTOMATED是ok的进行显示。</p><h3 id="6-2-3-docker-pull"><a href="#6-2-3-docker-pull" class="headerlink" title="6.2.3. docker pull"></a>6.2.3. docker pull</h3><p>下载镜像</p><blockquote><p>docker pull php</p></blockquote><p>与 docker pull php:latest 相同，下载最新版。</p><blockquote><p>docker pull php:5.6</p></blockquote><p>下载php5.6版本</p><h3 id="6-2-4-docker-rmi"><a href="#6-2-4-docker-rmi" class="headerlink" title="6.2.4. docker rmi"></a>6.2.4. docker rmi</h3><p>删除镜像</p><blockquote><p>docker rmi hello-world</p></blockquote><p>相当于 docker rmi hello-world:3.2 ,删除最新版</p><blockquote><p>docker rmi -f hello-world</p></blockquote><p>强制删除</p><blockquote><p>docker rmi -f 2cb0d9787c4d</p></blockquote><p>根据镜像id进行强制删除</p><blockquote><p>docker rmi -f hello-world nginx php:5.6</p></blockquote><p>强制删除多个，默认删除latest版本</p><blockquote><p>docker rmi -f $(docker images -qa)</p></blockquote><p>强制清空删除所有镜像( $(docker images -qa) 相当于先找出所有的image id，包括中间映像层的，然后一口气全部删除)，是一种组合命令</p><h2 id="6-3-docker容器命令"><a href="#6-3-docker容器命令" class="headerlink" title="6.3. docker容器命令"></a>6.3. docker容器命令</h2><h3 id="6-3-1-docker-run"><a href="#6-3-1-docker-run" class="headerlink" title="6.3.1. docker run"></a>6.3.1. docker run</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world`</span></span><br></pre></td></tr></table></figure><p>先在本地查找是否有hello-world的镜像，没有再去远程镜像仓库查找。找到了镜像，会创建该镜像的容器出来然后运行。</p><blockquote><p>docker run -it centos</p></blockquote><p>-i 交互模式<br>-t 伪终端</p><p>以交互模式和伪终端模式运行centos。在一个镜像被run后，如果还在再run这个镜像，直接再执行这个命令即可，不会冲突。</p><blockquote><p>docker run -d centos</p></blockquote><p>以守护进程的形式在后台执行。但是，Docker容器后台运行，必须在容器中有一个前台进行的进程，一直挂起，否则docker容器就会自动退出.docker ps 里不会有显示</p><blockquote><p>docker run -d centos /bin/sh -c “while true;do echo hello world;sleep 2;done”</p></blockquote><p>运行容器的时候，同时让容器执行一段shell脚本，这个脚本永远为真，每隔2秒输出一次 “hello world”.此时docker ps 里会有显示</p><blockquote><p> docker run -it –name mycentos1 centos<br>以交互模式和伪终端模式运行centos,并且取别名为mycentos1</p></blockquote><p>在docker伪终端中</p><blockquote><p>docker run -it -p 8080:80 nginx</p></blockquote><p>以交互模式和伪终端模式运行nginx,此时暴露给宿主机的端口为8080，而docker容器内的端口为80(根据软件原来的端口定义).</p><blockquote><p>docker run -it -P nginx</p></blockquote><p>以交互模式和伪终端模式运行nginx,此时暴露给宿主机的端口是随机分配的，只能自己通过docker ps查看，而docker容器内的端口软件原来的端口定义.</p><p>或者以守护进程的形式启动</p><blockquote><p>docker run -d nginx</p></blockquote><p>无法进入交互可以使用</p><blockquote><p>docker exec -it 11165c51310d /bin/bash </p></blockquote><blockquote><p>exit</p></blockquote><p>代表退出当前docker并且停止，回到原有</p><blockquote><p>ctrl+p+q</p></blockquote><p>代表退出当前docker终端界面回到原有，docker容器后台运行</p><h3 id="6-3-2-docker-ps"><a href="#6-3-2-docker-ps" class="headerlink" title="6.3.2. docker ps"></a>6.3.2. docker ps</h3><blockquote><p>docker ps</p></blockquote><p>(宿主机)列出当前所有正在运行的容器</p><blockquote><p>docker ps -a</p></blockquote><p>列出所有当前+历史所有运行过的容器</p><blockquote><p>docker ps -l</p></blockquote><p>列出最近一次运行过的容器</p><blockquote><p>docker ps -n 3</p></blockquote><p>列出最近三次运行过的容器</p><blockquote><p>docker ps -qa</p></blockquote><p>精简显示所有当前+历史所有运行过的容器的CONTAINER ID</p><h3 id="6-3-3-docker-start"><a href="#6-3-3-docker-start" class="headerlink" title="6.3.3. docker start"></a>6.3.3. docker start</h3><blockquote><p>docker start be2ce65efe84</p></blockquote><p>根据CONTAINER ID，将已经停止的容器重新启动。</p><h3 id="6-3-4-docker-restart"><a href="#6-3-4-docker-restart" class="headerlink" title="6.3.4. docker restart"></a>6.3.4. docker restart</h3><blockquote><p>docker restart feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器重新启动。此时容器内的文件不会被清除。</p><h3 id="6-3-5-docker-stop"><a href="#6-3-5-docker-stop" class="headerlink" title="6.3.5. docker stop"></a>6.3.5. docker stop</h3><blockquote><p>docker stop feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器停止(缓慢安全停止)。再启动，所有文件复原。</p><h3 id="6-3-6-docker-kill"><a href="#6-3-6-docker-kill" class="headerlink" title="6.3.6. docker kill"></a>6.3.6. docker kill</h3><blockquote><p>docker kill feffc090ef3e</p></blockquote><p>根据CONTAINER ID，将已经启动的容器停止(立刻马上停)。再启动，所有文件复原。</p><h3 id="6-3-7-docker-rm"><a href="#6-3-7-docker-rm" class="headerlink" title="6.3.7. docker rm"></a>6.3.7. docker rm</h3><blockquote><p>docker rm feffc090ef3e</p></blockquote><p>根据CONTAINER ID，删除容器。</p><blockquote><p>docker rm $(docker ps -q)</p></blockquote><p>删除所有正在运行的容器</p><blockquote><p>docker rm $(docker ps -aq)</p></blockquote><p>删除所有正在运行和已经停止的容器</p><h3 id="6-3-8-重要"><a href="#6-3-8-重要" class="headerlink" title="6.3.8. 重要"></a>6.3.8. 重要</h3><blockquote><p>docker logs -f -t –tail 5 d14363d9eff8</p></blockquote><p>查看指定容器ID内的打印输出,-f 表示从最后开始,-t表示展示时间,–tail 表示一开始展示多少行</p><blockquote><p>docker top d14363d9eff8</p></blockquote><p>查看指定容器ID内的进程</p><blockquote><p>docker inspect d14363d9eff8</p></blockquote><p>查看指定容器ID的内部细节</p><blockquote><p>docker attach d14363d9eff8</p></blockquote><p>进入指定容器ID的正在运行的容器并以交互行模式进行交互.</p><blockquote><p>docker exec -it d14363d9eff8 /bin/bash</p></blockquote><p>进入指定容器ID的正在运行的容器并以交互行模式进行交互.</p><blockquote><p>docker exec -it 6a68ebda9254 ls -al /tmp</p></blockquote><p>返回指定容器ID的正在运行的容器中指定命令内容，但是不进入容器交互中</p><blockquote><p>docker cp 6a68ebda9254:/tmp/yum.log /usr/local</p></blockquote><p>复制指定容器ID的正在运行的容器内的文件到宿主机上</p><h1 id="7-docker镜像原理"><a href="#7-docker镜像原理" class="headerlink" title="7. docker镜像原理"></a>7. docker镜像原理</h1><h2 id="7-1-是什么"><a href="#7-1-是什么" class="headerlink" title="7.1. 是什么"></a>7.1. 是什么</h2><p>Union文件系统是Docker镜像的基础。Union文件系统(UnionFs)是一种分层，轻量级并且高薪更的文件系统。它支持对<code>文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</code><br>特征: 一次同时加载多个文件系统，但是从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。<br>说白了，就是类似与一个<code>同心圆</code>。比如tomcat，最底层是kernel，倒数第二层是centos，倒数第三层是jdk8，最外面一层是tomcat。</p><h2 id="7-2-加载原理"><a href="#7-2-加载原理" class="headerlink" title="7.2. 加载原理"></a>7.2. 加载原理</h2><p>Docker镜像的最底层是bootfs,就是linux系统的引导文件系统，这个是公用的。一般是rootfs不同，代表着kernel内核，比如centos和Ubuntu不同.   </p><h2 id="7-3-特点"><a href="#7-3-特点" class="headerlink" title="7.3. 特点"></a>7.3. 特点</h2><p>Docker镜像都是只读的。<br>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常称为“容器层”,”容器层”之下的都叫镜像层。<br>比如 tomcat,tomcat是容器层，jdk8，centos，kernel都是镜像层。</p><h2 id="7-4-docker-commit"><a href="#7-4-docker-commit" class="headerlink" title="7.4. docker commit"></a>7.4. docker commit</h2><p>因为docker的镜像是只读的，不允许修改，如果想修改成自己的。需要做成自己的镜像.</p><blockquote><p>docker commit -m ‘text’ -a ‘guaosi’ ce704066570d guaosi/nginx:1.2</p></blockquote><p>将当前运行的指定容器ID做成新的镜像，可以保存原来容器内修改的文件。-m 是注释 -a 是作者名称 . guaosi/nginx是规范写法,后面需要加上版本号。注意，启动的时候也需要带上这个版本号。</p><h1 id="8-docker容器数据卷"><a href="#8-docker容器数据卷" class="headerlink" title="8. docker容器数据卷"></a>8. docker容器数据卷</h1><h2 id="8-1-能干嘛"><a href="#8-1-能干嘛" class="headerlink" title="8.1. 能干嘛"></a>8.1. 能干嘛</h2><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><h3 id="8-1-1-特点"><a href="#8-1-1-特点" class="headerlink" title="8.1.1. 特点"></a>8.1.1. 特点</h3><ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li></ol><h2 id="8-2-作用"><a href="#8-2-作用" class="headerlink" title="8.2. 作用"></a>8.2. 作用</h2><p>容器的持久化 和 容器间继承+共享数据</p><h2 id="8-3-容器内添加数据券"><a href="#8-3-容器内添加数据券" class="headerlink" title="8.3. 容器内添加数据券"></a>8.3. 容器内添加数据券</h2><h3 id="8-3-1-使用-v命令直接添加"><a href="#8-3-1-使用-v命令直接添加" class="headerlink" title="8.3.1. 使用-v命令直接添加"></a>8.3.1. 使用-v命令直接添加</h3><p>添加数据券相当于目录映射,容器开启或者关闭都不会影响到宿主机映射的内容,宿主机与容器实时同步。第一个参数是宿主机要映射的文件夹，第二个参数是容器想要映射的文件夹。</p><blockquote><p>docker run -it -v /myHostFile:/myDockerFile:ro centos</p></blockquote><p>使用交互模式，可读可写添加数据券,2个文件可以不存在,系统会自动创建。此时容器对该文件夹具有可读可写的权限。</p><blockquote><p>docker run -it -v /myHostFile:/myDockerFile centos</p></blockquote><p>使用交互模式，可读添加数据券,2个文件可以不存在,系统会自动创建。此时容器对该文件夹具有可读的权限,无法进行任何写操作。</p><blockquote><p>docker inspect 4744cddb3964</p></blockquote><p>查看容器的详情，可以通过Binds看到对应的映射数据券，RWc查看是否可读可写。true代表可读可写，false代表只可读。</p><h3 id="8-3-2-DockerFile添加"><a href="#8-3-2-DockerFile添加" class="headerlink" title="8.3.2. DockerFile添加"></a>8.3.2. DockerFile添加</h3><p>DockerFile相当于image镜像的源文件</p><p>1.编写DockerFile文件<br>vim DockerFile(文件名随便)<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># volume test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/dataVolumeContainer1"</span>,<span class="string">"/dataVolumeContainer2"</span>]</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"finished,-------success1"</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>意思是集成centos这个镜像后，在容器的根目录下创建了2个数据券共享的文件夹,然后输出字符串，然后结束</p><p>最后的 /bin/bash相当于将<code>docker run -it xxx</code>转为<code>docker run -it xxx /bin/bash</code></p><p>2.构建DockerFile对应的镜像</p><blockquote><p>docker build -f /usr/local/DockerFile -t guaosi/centos .</p></blockquote><p>将编写好的DockerFile通过build命令创建出image镜像,DockerFile需要填写绝对路径，-t 后面写镜像的名称, . 代表镜像具体文件生成在当前目录下</p><p>3.检查</p><p>容器运行刚刚生成的镜像后，通过 <code>docker inspect ff146b4fccd5</code> 可以看到对应的容器数据券,<code>Source</code>字段代表宿主机上所映射的文件夹。宿主机与容器实时同步，可读可写.</p><h3 id="8-3-3-容器间数据共享-DockerFile"><a href="#8-3-3-容器间数据共享-DockerFile" class="headerlink" title="8.3.3. 容器间数据共享(DockerFile)"></a>8.3.3. 容器间数据共享(DockerFile)</h3><p>因为用DockerFile构建的镜像运行的容器，每一次运行宿主机上都会重新生成一个新的映射文件夹与之对应共享数据。此时同一镜像的不同容器想要想要进行数据共享，则需要<code>--volumes-from</code></p><p>测试过程</p><p>1.</p><blockquote><p>docker run -it –name dc01 guaosi/centos</p></blockquote><p>创建一个别名为dc01的guaosi/centos的容器</p><p>2.</p><blockquote><p>docker run -it –name dc02 –volumes-from dc01 guaosi/centos</p></blockquote><blockquote><p>docker run -it –name dc03 –volumes-from dc01 guaosi/centos</p></blockquote><p>创建一个别名为dc02和dc03的guaosi/centos的容器,同时这个容器继承别名为dc01的guaosi/centos容器的数据共享(继承最好是同一个镜像)</p><p>3.此时对dc01容器,dc02容器,dc03容器其中的任意一个进行修改或者删除，其他两个都会同步到，现在这三个容器是实时同步。</p><p>4.如果此时删除dc01容器这个父容器，那么剩下两个子容器依旧可以数据券共享，实时同步，不会有任何影响(包括dc01里的文件也健在)。就算dc04继承dc03然后删除dc03，那么dc04与dc02依旧可以数据共享。</p><p>总结: 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用为止(DockerFile)。</p><h1 id="9-dockerFile"><a href="#9-dockerFile" class="headerlink" title="9. dockerFile"></a>9. dockerFile</h1><h2 id="9-1-dockerfile构建过程解析"><a href="#9-1-dockerfile构建过程解析" class="headerlink" title="9.1. dockerfile构建过程解析"></a>9.1. dockerfile构建过程解析</h2><h3 id="9-1-1-dockerfile内容基础知识"><a href="#9-1-1-dockerfile内容基础知识" class="headerlink" title="9.1.1. dockerfile内容基础知识"></a>9.1.1. dockerfile内容基础知识</h3><p>1.每条保留字指令都必须为大写字母并且后面要跟随至少一个参数</p><p>2.指令按照从上到下，顺序执行</p><p>3.#代表注释</p><p>4.每条指令都会创建一个新的镜像层，并对镜像进行提交。</p><h3 id="9-1-2-docker执行dockerfile的大致流程"><a href="#9-1-2-docker执行dockerfile的大致流程" class="headerlink" title="9.1.2. docker执行dockerfile的大致流程"></a>9.1.2. docker执行dockerfile的大致流程</h3><p>1.docker从基础镜像运行一个容器</p><p>2.执行一条指令并对容器做出修改</p><p>3.执行类型docker commit的操作提交一个新的镜像层</p><p>4.docker再基于刚提交的镜像运行一个新容器</p><p>5.执行dockerfile的下一条指令直到所有指令都执行完。</p><h2 id="9-2-dockerfile体系结构-保留字指令"><a href="#9-2-dockerfile体系结构-保留字指令" class="headerlink" title="9.2. dockerfile体系结构(保留字指令)"></a>9.2. dockerfile体系结构(保留字指令)</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line"><span class="keyword">MAINTAINER</span>  镜像维护者的姓名和邮箱地址</span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  容器构建时需要运行的命令(容器中执行Linux的命令)</span></span><br><span class="line"><span class="bash">EXPOSE  当前容器对外暴露出的端口</span></span><br><span class="line"><span class="bash">WORKDIR  指定在创建容器之后，终端默认登陆进来的工作目录，一个落脚点</span></span><br><span class="line"><span class="bash">ENV  用来在构建镜像过程中设置环境变量，相当于是设定了变量，方便调用使用</span></span><br><span class="line"><span class="bash">ADD 将宿主机目录下的文件拷贝进镜像并且ADD会自动处理URL和解压tar压缩包</span></span><br><span class="line"><span class="bash">COPY  类似ADD，拷贝文件和目录到镜像中，但是不会自动解压。将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内&lt;目标路径&gt;位置</span></span><br><span class="line"><span class="bash">VOLUME  容器数据卷，用于数据保存和持久化工作</span></span><br><span class="line"><span class="bash">CMD  指定一个容器启动时要运行的命令，dockerfile中可以有多个CMD指令，构建时CMD都会运行。但是docker run时只有最后一个命令生效，并且CMD会被docker run之后的命令参数替代。(命令执行在容器)</span></span><br><span class="line"><span class="bash">ENTRYPOINT  指定一个容器启动时要运行的命令 ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数。ENTRYPOINT不会被docker run之后的命令参数替代，而是会被做成附加参数执行(命令执行在容器)</span></span><br><span class="line"><span class="bash">ONBUILD  当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，此时父镜像的onbuild被触发</span></span><br></pre></td></tr></table></figure><h2 id="9-3-案例"><a href="#9-3-案例" class="headerlink" title="9.3. 案例"></a>9.3. 案例</h2><h3 id="9-3-1-查看构建历史"><a href="#9-3-1-查看构建历史" class="headerlink" title="9.3.1. 查看构建历史"></a>9.3.1. 查看构建历史</h3><blockquote><p>docker history 镜像id</p></blockquote><h3 id="9-3-2-自定义镜像1-FROM-MAINTAINER-ENV-WORKDIR-RUN-EXPOSE"><a href="#9-3-2-自定义镜像1-FROM-MAINTAINER-ENV-WORKDIR-RUN-EXPOSE" class="headerlink" title="9.3.2. 自定义镜像1(FROM,MAINTAINER,ENV,WORKDIR,RUN,EXPOSE)"></a>9.3.2. 自定义镜像1(FROM,MAINTAINER,ENV,WORKDIR,RUN,EXPOSE)</h3><ol><li>编写dockerfile文件</li></ol><p>vim  myCentosDockerFile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> guaosi&lt;guaosi@vip.qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="bash">RUN yum -y install vim</span></span><br><span class="line"><span class="bash">RUN yum -y install net-tools</span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="bash">CMD <span class="built_in">echo</span> <span class="string">"success---------------ok"</span></span></span><br><span class="line"><span class="bash">CMD /bin/bash</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosDockerFile -t guaosi/centos:1.5 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>运行容器</li></ol><blockquote><p>docker run -it guaosi/centos:1.5</p></blockquote><h3 id="9-3-3-自定义镜像2-CMD-ENTRYPOINT"><a href="#9-3-3-自定义镜像2-CMD-ENTRYPOINT" class="headerlink" title="9.3.3. 自定义镜像2(CMD,ENTRYPOINT)"></a>9.3.3. 自定义镜像2(CMD,ENTRYPOINT)</h3><ol><li>编写dockerfile文件</li></ol><p>vim  myCentosIp</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"curl"</span>,<span class="string">"-s"</span>,<span class="string">"http://ip.cn"</span>]</span></span><br><span class="line"><span class="bash">//或者</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"curl"</span>,<span class="string">"-s"</span>,<span class="string">"http://ip.cn"</span>]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosIp -t guaosi/Ip:1.0 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>运行容器</li></ol><blockquote><p>docker run -it guaosi/Ip:1.0 -i</p></blockquote><p>CMD的不能追加参数，比如想再加一个 <code>-i</code> ,追加了会导致都被换掉，而ENTRYPOINT可以正确追加参数</p><h3 id="9-3-4-自定义镜像3-ONBUILD"><a href="#9-3-4-自定义镜像3-ONBUILD" class="headerlink" title="9.3.4. 自定义镜像3(ONBUILD)"></a>9.3.4. 自定义镜像3(ONBUILD)</h3><ol><li>编写dockerfile文件(父)</li></ol><p>vim  myCentosFather</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br><span class="line"><span class="bash">ONBUILD RUN <span class="built_in">echo</span> <span class="string">"father is extended"</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentosFather -t guaosi/father:1.0 /usr/local/MyCenntos/</p></blockquote><ol start="3"><li>编写dockerfile文件(子)</li></ol><p>vim myCentosSon</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> guaosi/son</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y curl</span></span><br></pre></td></tr></table></figure><ol start="4"><li>构建镜像</li></ol><blockquote><p>docker build -f /usr/local/myCentoSson -t guaosi/son:1.0 /usr/local/MyCenntos/</p></blockquote><h1 id="10-上传镜像到阿里云"><a href="#10-上传镜像到阿里云" class="headerlink" title="10. 上传镜像到阿里云"></a>10. 上传镜像到阿里云</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=guaosi@vip<span class="selector-class">.qq</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br><span class="line">$ sudo docker tag [ImageId] registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:[镜像版本号]</span><br><span class="line">$ sudo docker push registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p>ImageId 是镜像ID，镜像版本号是自己设定的版本号</p><p>示例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=guaosi@vip<span class="selector-class">.qq</span><span class="selector-class">.com</span> registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br><span class="line">docker tag <span class="number">1309</span>e6c731d8 registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br><span class="line">docker push registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>上传成功后，可以搜索得到</p><p>下载验证</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry<span class="selector-class">.cn-shenzhen</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/guaosi/mycentos:<span class="number">1.5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-docker用来干什么&quot;&gt;&lt;a href=&quot;#1-docker用来干什么&quot; class=&quot;headerlink&quot; title=&quot;1. docker用来干什么&quot;&gt;&lt;/a&gt;1. docker用来干什么&lt;/h1&gt;&lt;p&gt;将做好的环境和代码，打包成镜像，可以让各个地方都可以直接使用，不再受到环境的限制。&lt;/p&gt;
&lt;h1 id=&quot;2-docker与虚拟机的区别&quot;&gt;&lt;a href=&quot;#2-docker与虚拟机的区别&quot; class=&quot;headerlink&quot; title=&quot;2. docker与虚拟机的区别&quot;&gt;&lt;/a&gt;2. docker与虚拟机的区别&lt;/h1&gt;&lt;p&gt;1.虚拟机是模拟整个操作系统，包括硬件部分&lt;br&gt;2.docker是使用linux容器，通过进程隔离，拥有自己的文件系统，不会跟宿主机产生错乱。&lt;br&gt;3.docker没有自己的内核，使用的是宿主机的内核。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://www.guaosi.com/tags/docker/"/>
    
  </entry>
  
</feed>
