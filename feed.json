{"title":"guaosi的博客","description":"guaosi,guaosi的博客,后端,PHP,Linux,golang,python,开发者,程序猿,程序媛,极客,编程,代码,开源,IT网站,docker","language":"","link":"https://www.guaosi.com","pubDate":"Wed, 29 Dec 2021 14:37:24 GMT","lastBuildDate":"Wed, 29 Dec 2021 14:42:54 GMT","generator":"hexo-generator-json-feed","webMaster":"guaosi","items":[{"title":"简单说说几种常用的网络访问方法","link":"https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/","description":"简介这篇文章会简单说说常见的网络通信访问。 首先，我们需要了解一些概念，什么是二层，什么是跨网段以及什么是内网，对应云厂商的相关概念又是怎么样的。（不会讲的太详细，只会讲个粗略，否则一篇根本写不完）","pubDate":"Wed, 29 Dec 2021 14:37:24 GMT","guid":"https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/","category":"网络,服务器,运维"},{"title":"Kubernetes 1.22集群安装教程(基于Ubuntu)","link":"https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/","description":"前言&#160; &#160; &#160; &#160; 之前有写过 Kubernetes 18.04集群安装教程(基于Centos7) 。现在补上基于Ubuntu20的环境进行安装。由于Ubuntu使用的Linux内核一直都是最新的，并且因为工作原因k8s安装得多了，有了很多简单设置的方式，所以K8s的目前安装过程就会比Centos的简单了很多","pubDate":"Sun, 05 Dec 2021 13:43:59 GMT","guid":"https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/","category":"运维,Linux,Kubernetes"},{"title":"安装 ubuntu-server 20.04 并进行初始化配置","link":"https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/","description":"起因&#160; &#160; &#160; &#160;国外以及云原生的环境下，用ubuntu的比较多，而且目前centos也处于商业状态，所以掌握以及使用ubuntu作为服务环境还是很有必要的。","pubDate":"Sun, 05 Dec 2021 08:43:59 GMT","guid":"https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/","category":"服务器"},{"title":"GO微服务系列-4.3 Jenkins构建部署Kubernetes","link":"https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes/","description":"构建任务流程梳理当我们推送代码到Gitlab时，Gitlab会主动地通知Jenkins对应的任务，它会通过设置的源码管理去拉取Gitlab上对应地址的代码，然后执行我们预先设置好的构建的脚本(脚本是我们在之前做的构建镜像以及推送到阿里云)。接着再通过我们上面Publish over SSH配置好的信息登陆到Kubernetes的部署节点，最后执行我们后面将会放置在上面的部署脚本进行部署，更新pod。","pubDate":"Wed, 15 Jul 2020 07:38:44 GMT","guid":"https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-4.2 Jenkins的搭建、插件的安装与配置","link":"https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting/","description":"本系列CI/CD 流程图我们先来回顾一下本系列的CI/CD 流程图 所以我们现在就差最后一个Jenkins工具，就可以做我们想要的持续集成，交付，部署的功能了。","pubDate":"Sun, 12 Jul 2020 09:55:21 GMT","guid":"https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-4.1 Gitlab的搭建与设置","link":"https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting/","description":"环境准备我们打算把gitlab跟jenkins都通过docker的方式，安装在同一个虚拟机里。虚拟机IP：192.168.1.220。 创建专属网络我们跟之前一样，创建一个专属网络1docker network create cicd --driver bridge","pubDate":"Sun, 12 Jul 2020 09:42:58 GMT","guid":"https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.4 Kubernetes下的构建执行","link":"https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution/","description":"整理环境上一章中，我们通过Docker Compose已经创建了etcd、account、apigw、Traefik多个镜像对应的容器。为了不被干扰，并且我们改用Kubetnetes作为容器编排，我们需要删除之前创建的容器。 1docker rm -f apigw apigw2 account1 account2 account3 go_micro_traefik_proxy_1 etcd1","pubDate":"Sun, 12 Jul 2020 08:22:59 GMT","guid":"https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.3 Docker Compose下的构建执行","link":"https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution/","description":"整理环境上一章中，我们已经创建了etcd、account、apigw这三个镜像对应的容器。在Docker Compose中，我们想重新创建新的容器，不被之前的容器所干扰，并且把它们放在一个专属的网络中去，所以我们需要删除之前创建的容器。 1docker rm -f etcd1 account apigw","pubDate":"Sat, 11 Jul 2020 14:03:29 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.2 直接Docker容器构建执行","link":"https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution/","description":"容器执行这一章中，我们来测试一下上一章制作的镜像是否可以正常使用。","pubDate":"Sat, 11 Jul 2020 13:37:46 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.1 Dockerfile编写与镜像制作","link":"https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image/","description":"Dockerfile编写我们根据2.3 服务编写 与 2.4 网关编写所建立好的目录，编写对应的Dockerfile文件 accountaccount/deploy/Dockerfile1234567891011FROM centos:7ADD bin/account /RUN chmod 777 /account# 通过先设置一个环境变量，然后在容器运行时传入环境变量具体的值，达到外部指定参数运行的效果ENV PARAMS=\"\"ENTRYPOINT [\"sh\",\"-c\",\"/account $PARAMS\"]","pubDate":"Sat, 11 Jul 2020 13:08:37 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.4 网关编写","link":"https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/","description":"作用上一章中，我们已经编写好了account服务。这一章我们来完成apigateway，也就是网关的编写。 我们将会使用gin框架，来对外提供HTTP服务与路由。一个url请求进入后，gin框架的路由解析后找到对应的handler方法，然后该handler中会调用对应的服务，获得最终的结果，返回给用户。 对外HTTP，对内RPC 目录结构我们来看一下apigateway的最终目录结构 123456789101112131415├─apigateway ├─deploy （部署相关） ├─handler └─account.go ├─proto （proto文件） ├─account ├─account.pb.go └─account.pb.micro.go ├─router （路由） └─router.go ├─serviceclient （client） └─init.go ├─apigw.go （入口文件） ├─go.mod └─go.sum","pubDate":"Sat, 11 Jul 2020 10:59:05 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.3 服务编写","link":"https://www.guaosi.com/2020/07/11/go-micro-service-write-service/","description":"作用在 1.1 涉及的组件、框架介绍 中已经大致介绍了一下我们微服务的整个请求流程。我们这章就开始编写一个最简单的服务——account，作为服务A 注意：这个系列的重心在整个微服务的创建以及部署上，所以会尽可能地简化业务逻辑代码。 目录结构我们来看一下account的最终目录结构 12345678910├─account ├─deploy （部署相关） ├─handler └─account.go ├─proto （proto文件） ├─account.pb.go └─account.pb.micro.go ├─accountservice.go （入口文件） ├─go.mod └─go.sum","pubDate":"Sat, 11 Jul 2020 10:28:22 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-write-service/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.2 简单介绍了解go-micro","link":"https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/","description":"go-micro核心组件介绍前面已经说过Micro和go-micro的区别了。micro是使用go-micro框架编写的运行时工具集，它最主要的作用是辅助微服务开发。比如想自己马上构建一个web环境或者api环境进行调试，或者查看服务的健康状态，注册信息之类的。 而我们开发微服务时，使用的框架是go-micro。它可以很好地帮助我们创建服务、服务注册与发现、负载均衡、扩展网关功能等等。 我们来简单了解一下go-micro框架中的核心组件","pubDate":"Fri, 10 Jul 2020 03:50:22 GMT","guid":"https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.1 proto文件的编写与生成","link":"https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/","description":"安装上一篇文章我们已经安装过Proto但是还是不能生成go与go-micro版本的对应的文件。 所以我们还需要安装protoc-gen-go和protoc-gen-micro这2个插件 123go get -u github.com/golang/protobuf/protoc-gen-gogo get github.com/micro/micro/v2/cmd/protoc-gen-micro@master","pubDate":"Fri, 10 Jul 2020 03:23:12 GMT","guid":"https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-1.2 环境的准备与安装","link":"https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/","description":"说明组件我想的是尽量都是使用容器，这样方便运行环境的统一。所以像Gitlab、Jenkins、Traefik等等，这些组件我会在后面等用到了直接使用容器构建。 安装除了以上那些,像Go运行环境,Micro、ProtoBuf、Kubernetes还是需要我们手动进行安装的。 Go这个没啥好说的，可以去GO语言中文网进行下载安装，我使用的是1.14.1版本。记得配置好系统变量。同时，请设置好go mod代理. 不会设置请看 https://goproxy.io/zh/","pubDate":"Wed, 08 Jul 2020 03:58:50 GMT","guid":"https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-1.1 涉及的组件、框架介绍","link":"https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/","description":"流程图首先来看一下整体的流程图 请求微服务流程图","pubDate":"Mon, 06 Jul 2020 23:20:19 GMT","guid":"https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/","category":"Golang,微服务,go-micro"},{"title":"手摸手教你从开发到部署(CI/CD)GO微服务系列-介绍与目录","link":"https://www.guaosi.com/2020/07/05/go-microservice-series-from-development-to-deployment-introduction-contents/","description":"介绍我觉得微服务是什么？什么是微服务这种问题都老生常谈了，随便百度的回答都是各式各样的，我也没什么好介绍的了。开门见山，我就直接说我想做成什么样的。 既然是微服务，那肯定首先要有服务，这个系列重点在微服务的构建，而不是业务逻辑的编写，所以业务逻辑尽可能做到最简单。其次有一个服务即可。 微服务中最重要的是网关，它是所有请求的入口，所以我会用gin框架结合go-micro作为微服务的网关，后期加入链路追踪、熔断与降级、监控等扩展功能。 微服务就意味着需要快速迭代更新，所以持续交付、集成、部署(CI/CD)是必不可少的 容器编排部署，肯定是使用Kubernetes，这也没啥好说的","pubDate":"Sun, 05 Jul 2020 13:46:18 GMT","guid":"https://www.guaosi.com/2020/07/05/go-microservice-series-from-development-to-deployment-introduction-contents/","category":"Docker,Golang,微服务,go-micro,Kubernetes,CI/CD"},{"title":"Kubernetes 基于 Mac OS 安装教程","link":"https://www.guaosi.com/2020/07/05/kubernetes-for-mac-install/","description":"简介Kubernetes在前一篇 Kubernetes 18.04集群安装教程(基于Centos7) 已经介绍过了，这里不做过多的描述，重点讲述 Mac OS 下如何使用Kubernetes。 其实非常简单，因为我们使用的是 Docker For Mac 。下载下来安装即可。 配置以版本为 2.3.0.3 为例 打开 Docker For Mac ,点击 Preferences 偏好设置进入控制面板。","pubDate":"Sun, 05 Jul 2020 10:37:24 GMT","guid":"https://www.guaosi.com/2020/07/05/kubernetes-for-mac-install/","category":"运维,Linux,Docker,Kubernetes"},{"title":"Kubernetes 18.04集群安装教程(基于Centos7)","link":"https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/","description":"简介kubernetes，简称K8s，是用8代替8个字符“ubernete”而成的缩写。是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。 环境在开始之前，先简单介绍一下环境以及配置。这里使用的是vmware创建的虚拟机。 节点 操作系统 cpu 内存 磁盘 IP k8s-master centos7 2核2线 4G 50G 192.168.1.200 kubernetes的服务器必须是2核4G以上配置才可以安装的","pubDate":"Sun, 05 Jul 2020 07:37:24 GMT","guid":"https://www.guaosi.com/2020/07/05/kubernetes-cluster-install/","category":"运维,Linux,Kubernetes"},{"title":"记录一次因为MTU问题导致网络丢包无响应","link":"https://www.guaosi.com/2020/05/16/record-data-loss-problem-caused-by-MTU/","description":"起因首先，先上一下公司测试环境的简单网络结构 简单说一下，测试环境的上游服务是放在阿里云服务器的，通过阿里云的VPN网关，发起HTTP请求到公司内部测试环境的下游服务。然后下游服务处理后，再返回对应的相关数据。 之前一直都没什么网络问题。今天突然发现上游服务请求某一接口一直报服务超时，但是其他接口又是正常的。问题探究之路从这里展开~","pubDate":"Sat, 16 May 2020 02:25:56 GMT","guid":"https://www.guaosi.com/2020/05/16/record-data-loss-problem-caused-by-MTU/","category":"服务器,网络编程"},{"title":"RabbitMQ集群架构模式","link":"https://www.guaosi.com/2020/02/10/cluster-architecture-pattern-rabbit/","description":"主备模式主备与主从 主备和主从的概念是有区别的，主备是主节点可以提供读写的，从节点是不提供任何读写的，只是一个备用的服务。 主要的目的就是在主节点产生故障或者宕机的时候它能够实现一个自动切换，由原来的主节点切换到我们的备用节点，由备用节点继续提供读写服务，这时候备用节点就是充当主节点的角色了。而原来的节点恢复后又会加入到集群中，变成了备用节点。 主从是主服节点可以提供读写，但从节点是只读的。主从更多的是实现读写分离和数据备份的效果。","pubDate":"Mon, 10 Feb 2020 13:11:21 GMT","guid":"https://www.guaosi.com/2020/02/10/cluster-architecture-pattern-rabbit/","category":"消息队列,RabbitMQ,中间件"},{"title":"Redis复制的原理与优化","link":"https://www.guaosi.com/2020/02/05/replication-principle-and-optimization-redis/","description":"单机有什么问题？单机即在一台机器上部署一个redis节点，主要会存在以下问题： 机器故障如果发生机器故障，例如磁盘损坏，主板损坏等，未能在短时间内修复好，客户端将无法连接redis。当然如果仅仅是redis节点挂掉了，可以进行问题排查然后重启，姑且不考虑这段时间对外服务的可用性，那还是可以接受的。而发生机器故障，基本是无济于事。除非把redis迁移到另一台机器上，并且还要考虑数据同步的问题。","pubDate":"Wed, 05 Feb 2020 10:16:43 GMT","guid":"https://www.guaosi.com/2020/02/05/replication-principle-and-optimization-redis/","category":"Redis"},{"title":"Redis持久化的取舍和选择","link":"https://www.guaosi.com/2020/02/04/persistent-trade-offs-and-choices-redis/","description":"持久化的作用什么是持久化redis所有数据保存在内存中，对数据的更新将异步地保存到磁盘上。 将数据持久化到硬盘中，这样redis重启数据也不会丢失。当需要恢复数据时，就可以从硬盘中读取数据到内存中，然后进行数据恢复。 持久化方式快照 –&gt; 某个时刻的完整数据备份(MySQL Dump、Redis RDB)写日志 –&gt; 记录数据的变化信息(MySQL Binlog、Hbase Hlog、Redis AOF)","pubDate":"Tue, 04 Feb 2020 13:26:47 GMT","guid":"https://www.guaosi.com/2020/02/04/persistent-trade-offs-and-choices-redis/","category":"Redis"},{"title":"瑞士军刀Redis","link":"https://www.guaosi.com/2020/02/04/swiss-army-knife-redis/","description":"慢查询-可以帮助我们找到系统性能瓶颈的命令 pipeline-可以帮助我们提高客户端的效率 发布订阅-可以帮助我们使用redis实现发布订阅功能 Bitmap-为我们在某些功能上提供一个很好的思路，而且可以提供一个很好的节省内存方案 HyperLogLog-更加极端的一种节省内存方案的数据结构，可以用极小的内存来实现独立用户的统计 GEO-Redis3.2版本提供的地理定位的功能","pubDate":"Tue, 04 Feb 2020 07:13:28 GMT","guid":"https://www.guaosi.com/2020/02/04/swiss-army-knife-redis/","category":"Redis"},{"title":"Redis API的理解和使用","link":"https://www.guaosi.com/2020/02/03/understanding-and-use-of-redis-api/","description":"通用命令keyskeys * #遍历所有的key 123456789101112127.0.0.1:6379 &gt; set hello worldOK127.0.0.1:6379 &gt; set php goodOK127.0.0.1:6379 &gt; set java bestOK127.0.0.1:6379 &gt; keys *1) \"java\"2) \"php\"3) \"hello\"127.0.0.1:6379 &gt; dbsize(integer)3","pubDate":"Mon, 03 Feb 2020 10:21:34 GMT","guid":"https://www.guaosi.com/2020/02/03/understanding-and-use-of-redis-api/","category":"Redis"}]}