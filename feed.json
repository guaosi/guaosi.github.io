{"title":"guaosi的博客","description":"guaosi,guaosi的博客,后端,PHP,Linux,golang,python,开发者,程序猿,程序媛,极客,编程,代码,开源,IT网站,docker","language":"","link":"https://www.guaosi.com","pubDate":"Sat, 16 Apr 2022 07:10:13 GMT","lastBuildDate":"Sat, 16 Apr 2022 07:19:26 GMT","generator":"hexo-generator-json-feed","webMaster":"guaosi","items":[{"title":"常见的分布式事务解决方案","link":"https://www.guaosi.com/2022/04/16/common-distributed-transaction-solutions/","description":"两阶段提交(2PC, Two-phase Commit) TCC补偿模式 基于本地消息表实现最终一致性 最大努力通知 基于可靠消息最终一致性方案","pubDate":"Sat, 16 Apr 2022 07:10:13 GMT","guid":"https://www.guaosi.com/2022/04/16/common-distributed-transaction-solutions/","category":"transaction"},{"title":"分布式事务、分布式理论基础","link":"https://www.guaosi.com/2022/04/16/distributed-transaction-and-distributed-theoretical-foundationdistributed-transaction-and-distributed-theoretical-foundation/","description":"起因在微服务系统中，一个服务想要完成一个功能，往往都会涉及到需要调用其他几个服务共同成功，才算成功。例如新建订单，过程中可能就需要调用库存服务减少库存，调用积分服务增加用户积分等等，其中就会涉及到各个不同微服务之间的各自数据落盘。对于金额这方面，我们必须要保证数据的一致性，如果期间有一个服务出错，必须全部回滚。这在仅仅只有本地事务中是无法做到的，下面介绍数据不一致产生的原因和分布式事务的相关理论。","pubDate":"Sat, 16 Apr 2022 07:07:31 GMT","guid":"https://www.guaosi.com/2022/04/16/distributed-transaction-and-distributed-theoretical-foundationdistributed-transaction-and-distributed-theoretical-foundation/","category":"transaction"},{"title":"ElasticSearch7 - 4.Analyzer分析器","link":"https://www.guaosi.com/2022/04/12/analyzer-for-elasticsearch7/","description":"analyzer分析器Elasticsearch 中文本分析Analysis是把全文本转换成一系列的单词(term/token）的过程，也叫分词。文本分析是使用分析器 Analyzer 来实现的，Elasticsearch内置了分析器，用户也可以按照自己的需求自定义分析器。为了提高搜索准确性，除了在数据写入时转换词条，匹配 Query 语句时候也需要用相同的分析器对查询语句进行分析。 官方文档","pubDate":"Tue, 12 Apr 2022 09:05:22 GMT","guid":"https://www.guaosi.com/2022/04/12/analyzer-for-elasticsearch7/","category":"elasticsearch,es"},{"title":"ElasticSearch7 - 3.Mapping","link":"https://www.guaosi.com/2022/04/12/mapping-for-elasticsearch7/","description":"什么是Mapping?Mapping 类似于数据库中的表结构定义 schema，它有以下几个作用： 定义索引中的字段的名称 定义字段的数据类型，比如字符串、数字、布尔 字段，倒排索引的相关配置，比如设置某个字段为不被索引、记录 position 等 在 ES 早期版本，一个索引下是可以有多个 Type 的，从 7.0 开始，一个索引只有一个 Type，也可以说一个 Type 有一个 Mapping 定义。 在了解了什么是 Mapping 之后，接下来对 Mapping 的设置做下介绍：","pubDate":"Tue, 12 Apr 2022 09:02:22 GMT","guid":"https://www.guaosi.com/2022/04/12/mapping-for-elasticsearch7/","category":"elasticsearch,es"},{"title":"ElasticSearch7 - 2.基本操作","link":"https://www.guaosi.com/2022/04/12/basic-operation-for-elasticsearch7/","description":"总查看所有索引 1GET /_cat/indices 查看指定index的基本信息(不会查询具体的文档数据) 1GET /account","pubDate":"Tue, 12 Apr 2022 08:59:22 GMT","guid":"https://www.guaosi.com/2022/04/12/basic-operation-for-elasticsearch7/","category":"elasticsearch,es"},{"title":"ElasticSearch7 - 1.安装与基本概念","link":"https://www.guaosi.com/2022/04/12/installation-and-basic-concepts-for-elasticsearch7/","description":"安装ElasticSearch71234567891011121314151617181920# 新建es的config配置文件夹mkdir -p /data/elasticsearch/config# 新建es的data目录mkdir -p /data/elasticsearch/data#给目录设置权限chmod 777 -R /data/elasticsearch#写入配置到elasticsearch.yml中echo \"http.host: 0.0.0.0\" &gt;&gt;/data/elasticsearch/config/elasticsearch.yml#安装esdocker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\-e \"discovery.type=single-node\" \\-e ES_JAVA_OPTS=\"-Xms128m -Xmx256m\" \\-v /data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\-v /data/elasticsearch/data:/usr/share/elasticsearch/data \\-v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\-d elasticsearch:7.10.1","pubDate":"Tue, 12 Apr 2022 08:54:22 GMT","guid":"https://www.guaosi.com/2022/04/12/installation-and-basic-concepts-for-elasticsearch7/","category":"elasticsearch,es"},{"title":"为知笔记私有化部署以及上线和备份","link":"https://www.guaosi.com/2021/12/31/for-privatized-deployment-of-wiz-as-well-as-online-and-backup/","description":"简介之前一直是使用坚果云搭配vscode来写笔记和进行同步，越到后面就感觉越麻烦，发现这种有以下几个问题： 不能在线分享 手机端不能同步查看 不美观 所以后面体验了几款云笔记软件，印象笔记、网易云笔记、为知笔记、Notion、以及语雀之类的，基本都用过，不是不花钱不让用就是有各种限制。我希望可以满足以下几个要求： 支持多端查看编辑 支持在线分享以及写作 没有各种限制 完全免费使用，安全，可控 完美支持markdown 符合人类审美观 找来找去，貌似也只有私有化部署才能满足我的要求了，在网上找了一圈，发现为知笔记支持私有化部署，部署端跟着官网同步更新，官网维护，而且为知笔记的各种客户端都能支持私有化登陆，体验了一下UI也符合个人审美。除了私有化部署只能支持5个注册用户以及不能使用收藏服务，其他功能全部都可以使用，实在良心。更多私有化的详细说明可以查看官方文档","pubDate":"Thu, 30 Dec 2021 16:18:24 GMT","guid":"https://www.guaosi.com/2021/12/31/for-privatized-deployment-of-wiz-as-well-as-online-and-backup/","category":"网络,服务器,运维"},{"title":"简单说说几种常用的网络访问方法","link":"https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/","description":"简介这篇文章会简单说说常见的网络通信访问。 首先，我们需要了解一些概念，什么是二层，什么是跨网段以及什么是内网，对应云厂商的相关概念又是怎么样的。（不会讲的太详细，只会讲个粗略，否则一篇根本写不完）","pubDate":"Wed, 29 Dec 2021 14:37:24 GMT","guid":"https://www.guaosi.com/2021/12/29/briefly-talk-about-several-common-network-access-methods/","category":"网络,服务器,运维"},{"title":"通过webdav协议挂载阿里云盘到本地","link":"https://www.guaosi.com/2021/12/06/mount-alicloud-disks-locally-through-webdav-protocol/","description":"什么是webdav协议WebDAV 基于 HTTP 协议的通信协议，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。因为基于HTTP，在广域网上共享文件有天然的优势，移动端文件管理APP也大多支持WebDAV协议。使用HTTPS还能保安全性。Apache和Nginx支持WebDAV，可作为WebDAV文件共享服务器软件。也可以使用专门的WebDAV软件部署。 可以认为通过webdav，我们可以直接将云盘挂载到本地，不需要使用服务商提供的专门软件就能进行管理使用。目前国内支持的最好的就是坚果云了，自身就支持webdav，但是坚果云免费的限制流量。阿里云盘明面上不支持，但是通过搭建 webdav-aliyundriver 项目，来代理转发请求，实现阿里云盘支持webdav协议。 流程梳理本篇将会讲解如下 搭建webdav-aliyundriver windows通过Raidrive挂载阿里云盘 Linux通过Rclone 挂载阿里云盘","pubDate":"Mon, 06 Dec 2021 10:26:22 GMT","guid":"https://www.guaosi.com/2021/12/06/mount-alicloud-disks-locally-through-webdav-protocol/","category":"服务器,运维"},{"title":"Kubernetes 1.22集群安装教程(基于Ubuntu)","link":"https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/","description":"前言&#160; &#160; &#160; &#160; 之前有写过 Kubernetes 18.04集群安装教程(基于Centos7) 。现在补上基于Ubuntu20的环境进行安装。由于Ubuntu使用的Linux内核一直都是最新的，并且因为工作原因k8s安装得多了，有了很多简单设置的方式，所以K8s的目前安装过程就会比Centos的简单了很多","pubDate":"Sun, 05 Dec 2021 13:43:59 GMT","guid":"https://www.guaosi.com/2021/12/05/kubernetes-cluster-install-base-on-ubuntu/","category":"Linux,运维,Kubernetes"},{"title":"安装 ubuntu-server 20.04 并进行初始化配置","link":"https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/","description":"起因&#160; &#160; &#160; &#160;国外以及云原生的环境下，用ubuntu的比较多，而且目前centos也处于商业状态，所以掌握以及使用ubuntu作为服务环境还是很有必要的。","pubDate":"Sun, 05 Dec 2021 08:43:59 GMT","guid":"https://www.guaosi.com/2021/12/05/install-ubuntu-20-server-and-configuration/","category":"服务器"},{"title":"GO微服务系列-4.3 Jenkins构建部署Kubernetes","link":"https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes/","description":"构建任务流程梳理当我们推送代码到Gitlab时，Gitlab会主动地通知Jenkins对应的任务，它会通过设置的源码管理去拉取Gitlab上对应地址的代码，然后执行我们预先设置好的构建的脚本(脚本是我们在之前做的构建镜像以及推送到阿里云)。接着再通过我们上面Publish over SSH配置好的信息登陆到Kubernetes的部署节点，最后执行我们后面将会放置在上面的部署脚本进行部署，更新pod。","pubDate":"Wed, 15 Jul 2020 07:38:44 GMT","guid":"https://www.guaosi.com/2020/07/15/go-micro-service-jenkins-deploy-kubernetes/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-4.2 Jenkins的搭建、插件的安装与配置","link":"https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting/","description":"本系列CI/CD 流程图我们先来回顾一下本系列的CI/CD 流程图 所以我们现在就差最后一个Jenkins工具，就可以做我们想要的持续集成，交付，部署的功能了。","pubDate":"Sun, 12 Jul 2020 09:55:21 GMT","guid":"https://www.guaosi.com/2020/07/12/go-micro-service-jenkins-build-and-setting/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-4.1 Gitlab的搭建与设置","link":"https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting/","description":"环境准备我们打算把gitlab跟jenkins都通过docker的方式，安装在同一个虚拟机里。虚拟机IP：192.168.1.220。 创建专属网络我们跟之前一样，创建一个专属网络1docker network create cicd --driver bridge","pubDate":"Sun, 12 Jul 2020 09:42:58 GMT","guid":"https://www.guaosi.com/2020/07/12/go-micro-service-gitlab-build-and-setting/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.4 Kubernetes下的构建执行","link":"https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution/","description":"整理环境上一章中，我们通过Docker Compose已经创建了etcd、account、apigw、Traefik多个镜像对应的容器。为了不被干扰，并且我们改用Kubetnetes作为容器编排，我们需要删除之前创建的容器。 1docker rm -f apigw apigw2 account1 account2 account3 go_micro_traefik_proxy_1 etcd1","pubDate":"Sun, 12 Jul 2020 08:22:59 GMT","guid":"https://www.guaosi.com/2020/07/12/go-micro-service-kubernetes-build-execution/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.3 Docker Compose下的构建执行","link":"https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution/","description":"整理环境上一章中，我们已经创建了etcd、account、apigw这三个镜像对应的容器。在Docker Compose中，我们想重新创建新的容器，不被之前的容器所干扰，并且把它们放在一个专属的网络中去，所以我们需要删除之前创建的容器。 1docker rm -f etcd1 account apigw","pubDate":"Sat, 11 Jul 2020 14:03:29 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-docker-compose-build-execution/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.2 直接Docker容器构建执行","link":"https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution/","description":"容器执行这一章中，我们来测试一下上一章制作的镜像是否可以正常使用。","pubDate":"Sat, 11 Jul 2020 13:37:46 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-direct-docker-container-build-execution/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-3.1 Dockerfile编写与镜像制作","link":"https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image/","description":"Dockerfile编写我们根据2.3 服务编写 与 2.4 网关编写所建立好的目录，编写对应的Dockerfile文件 accountaccount/deploy/Dockerfile1234567891011FROM centos:7ADD bin/account /RUN chmod 777 /account# 通过先设置一个环境变量，然后在容器运行时传入环境变量具体的值，达到外部指定参数运行的效果ENV PARAMS=\"\"ENTRYPOINT [\"sh\",\"-c\",\"/account $PARAMS\"]","pubDate":"Sat, 11 Jul 2020 13:08:37 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-write-dockerfile-and-make-image/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.4 网关编写","link":"https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/","description":"作用上一章中，我们已经编写好了account服务。这一章我们来完成apigateway，也就是网关的编写。 我们将会使用gin框架，来对外提供HTTP服务与路由。一个url请求进入后，gin框架的路由解析后找到对应的handler方法，然后该handler中会调用对应的服务，获得最终的结果，返回给用户。 对外HTTP，对内RPC 目录结构我们来看一下apigateway的最终目录结构 123456789101112131415├─apigateway ├─deploy （部署相关） ├─handler └─account.go ├─proto （proto文件） ├─account ├─account.pb.go └─account.pb.micro.go ├─router （路由） └─router.go ├─serviceclient （client） └─init.go ├─apigw.go （入口文件） ├─go.mod └─go.sum","pubDate":"Sat, 11 Jul 2020 10:59:05 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-write-gateway/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.3 服务编写","link":"https://www.guaosi.com/2020/07/11/go-micro-service-write-service/","description":"作用在 1.1 涉及的组件、框架介绍 中已经大致介绍了一下我们微服务的整个请求流程。我们这章就开始编写一个最简单的服务——account，作为服务A 注意：这个系列的重心在整个微服务的创建以及部署上，所以会尽可能地简化业务逻辑代码。 目录结构我们来看一下account的最终目录结构 12345678910├─account ├─deploy （部署相关） ├─handler └─account.go ├─proto （proto文件） ├─account.pb.go └─account.pb.micro.go ├─accountservice.go （入口文件） ├─go.mod └─go.sum","pubDate":"Sat, 11 Jul 2020 10:28:22 GMT","guid":"https://www.guaosi.com/2020/07/11/go-micro-service-write-service/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.2 简单介绍了解go-micro","link":"https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/","description":"go-micro核心组件介绍前面已经说过Micro和go-micro的区别了。micro是使用go-micro框架编写的运行时工具集，它最主要的作用是辅助微服务开发。比如想自己马上构建一个web环境或者api环境进行调试，或者查看服务的健康状态，注册信息之类的。 而我们开发微服务时，使用的框架是go-micro。它可以很好地帮助我们创建服务、服务注册与发现、负载均衡、扩展网关功能等等。 我们来简单了解一下go-micro框架中的核心组件","pubDate":"Fri, 10 Jul 2020 03:50:22 GMT","guid":"https://www.guaosi.com/2020/07/10/go-micro-service-brief-introduction-go-micro/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-2.1 proto文件的编写与生成","link":"https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/","description":"安装上一篇文章我们已经安装过Proto但是还是不能生成go与go-micro版本的对应的文件。 所以我们还需要安装protoc-gen-go和protoc-gen-micro这2个插件 123go get -u github.com/golang/protobuf/protoc-gen-gogo get github.com/micro/micro/v2/cmd/protoc-gen-micro@master","pubDate":"Fri, 10 Jul 2020 03:23:12 GMT","guid":"https://www.guaosi.com/2020/07/10/go-micro-service-writing-and-generating-proto-files/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-1.2 环境的准备与安装","link":"https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/","description":"说明组件我想的是尽量都是使用容器，这样方便运行环境的统一。所以像Gitlab、Jenkins、Traefik等等，这些组件我会在后面等用到了直接使用容器构建。 安装除了以上那些,像Go运行环境,Micro、ProtoBuf、Kubernetes还是需要我们手动进行安装的。 Go这个没啥好说的，可以去GO语言中文网进行下载安装，我使用的是1.14.1版本。记得配置好系统变量。同时，请设置好go mod代理. 不会设置请看 https://goproxy.io/zh/","pubDate":"Wed, 08 Jul 2020 03:58:50 GMT","guid":"https://www.guaosi.com/2020/07/08/go-micro-service-environment-preparation-and-installation/","category":"Golang,微服务,go-micro"},{"title":"GO微服务系列-1.1 涉及的组件、框架介绍","link":"https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/","description":"流程图首先来看一下整体的流程图 请求微服务流程图","pubDate":"Mon, 06 Jul 2020 23:20:19 GMT","guid":"https://www.guaosi.com/2020/07/07/go-micro-service-introduce-components-and-framework/","category":"Golang,微服务,go-micro"},{"title":"手摸手教你从开发到部署(CI/CD)GO微服务系列-介绍与目录","link":"https://www.guaosi.com/2020/07/05/go-microservice-series-from-development-to-deployment-introduction-contents/","description":"介绍我觉得微服务是什么？什么是微服务这种问题都老生常谈了，随便百度的回答都是各式各样的，我也没什么好介绍的了。开门见山，我就直接说我想做成什么样的。 既然是微服务，那肯定首先要有服务，这个系列重点在微服务的构建，而不是业务逻辑的编写，所以业务逻辑尽可能做到最简单。其次有一个服务即可。 微服务中最重要的是网关，它是所有请求的入口，所以我会用gin框架结合go-micro作为微服务的网关，后期加入链路追踪、熔断与降级、监控等扩展功能。 微服务就意味着需要快速迭代更新，所以持续交付、集成、部署(CI/CD)是必不可少的 容器编排部署，肯定是使用Kubernetes，这也没啥好说的","pubDate":"Sun, 05 Jul 2020 13:46:18 GMT","guid":"https://www.guaosi.com/2020/07/05/go-microservice-series-from-development-to-deployment-introduction-contents/","category":"Docker,Golang,微服务,go-micro,Kubernetes,CI/CD"}]}